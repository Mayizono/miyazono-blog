{
    "version": "https://jsonfeed.org/version/1",
    "title": "冬樱茶",
    "subtitle": "",
    "icon": "https://github.com/Mayizono/miyazono.github.io/images/favicon.ico",
    "description": "",
    "home_page_url": "https://github.com/Mayizono/miyazono.github.io",
    "items": [
        {
            "id": "https://github.com/Mayizono/miyazono.github.io/big-data/flink/5_%E6%97%A5%E6%B4%BB/",
            "url": "https://github.com/Mayizono/miyazono.github.io/big-data/flink/5_%E6%97%A5%E6%B4%BB/",
            "title": "",
            "date_published": "2021-08-31T11:33:50.346Z",
            "content_html": "<hr />\n<h2 id=\"title实时数仓之日活\"><a class=\"anchor\" href=\"#title实时数仓之日活\">#</a> title: 实时数仓之日活</h2>\n<h1 id=\"实时数仓之日活\"><a class=\"anchor\" href=\"#实时数仓之日活\">#</a> 实时数仓之日活</h1>\n<h2 id=\"一-需求概述\"><a class=\"anchor\" href=\"#一-需求概述\">#</a> 一、 需求概述</h2>\n<h3 id=\"11-离线与实时需求\"><a class=\"anchor\" href=\"#11-离线与实时需求\">#</a> 1.1 离线与实时需求</h3>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 1. 离线需求：t + 1 </span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>       a、一般是根据前一日的数据生成报表等数据</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>       b、统计指标、报表繁多</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>       c、但是对时效性不敏感。</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">-- 2. 实时需求：t + 0</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      a、侧重于对当日数据的实时监控</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      b、通常业务逻辑相对离线需求简单</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      c、统计指标也少一些</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      e、更注重数据的时效性以及用户的交互性。</pre></td></tr></table></figure><h3 id=\"12-离线处理架构\"><a class=\"anchor\" href=\"#12-离线处理架构\">#</a> 1.2 离线处理架构</h3>\n<p>离线分析架构（如 Hive，Map/Reduce，Spark Sql 等）可以满足数据后分析，数据挖掘的应用需求。</p>\n<p>![1594884977794](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saWFuLXpwLm9zcy1jbi1zaGVuemhlbi5hbGl5dW5jcy5jb20vcGlj\">https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic</span> GO/20200719233301.png)</p>\n<h3 id=\"13-实时处理架构\"><a class=\"anchor\" href=\"#13-实时处理架构\">#</a> 1.3 实时处理架构</h3>\n<p>对于实时性要求高的应用，如用户即时详单查询，业务量监控等，需要应用实时处理架构。</p>\n<p>![1594884986844](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saWFuLXpwLm9zcy1jbi1zaGVuemhlbi5hbGl5dW5jcy5jb20vcGlj\">https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic</span> GO/20200719233307.png)</p>\n<h3 id=\"14-需求\"><a class=\"anchor\" href=\"#14-需求\">#</a> 1.4 需求</h3>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>本次一共有如下<span class=\"token number\">6</span>个需求需要进行实现，那么本案例中只说明<span class=\"token number\">4</span>个需求。</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token string\">'需求1'</span>: 当日活跃用户及分时趋势图，昨日对比图<span class=\"token punctuation\">(</span>主讲<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token string\">'需求2'</span>: 当日新增用户数及分时趋势图，昨日对比图</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token string\">'需求3'</span>: 当日交易额及分时趋势图，昨日对比图<span class=\"token punctuation\">(</span>主讲<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token string\">'需求4'</span>: 当日订单数及分时趋势图，昨日对比图</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token string\">'需求5'</span>: 购物券功能风险预警</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token string\">'需求6'</span>: 用户购买明细灵活分析功能</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>需求说明：</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token number\">1.</span> sparkStreaming实时消费kakfa中的数据；</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token number\">2.</span> mysql中的业务数据使用cannl实时监控，一旦出现变化的数据，就发送到kafka中。</pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token number\">3.</span> sparkstreaming处理后的数据会可以发送到es、hbase、mysql、redis中</pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token number\">4.</span> 前端通过可视化软件或者是通过springboot创建接口来实现</pre></td></tr></table></figure><h3 id=\"15-实现原理\"><a class=\"anchor\" href=\"#15-实现原理\">#</a> 1.5 实现原理</h3>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 1. 框架：</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   第一部分：模拟数据，代码生成</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   第二部分：搭建nginx</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   第三部分<span class=\"token number\">1</span>：搭建日志服务器，并将数据写到kafka中，使用springboot实现</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   第三部分<span class=\"token number\">2</span>：搭建canal，实时监控mysql中数据的变化，并将变化的数据写到kafka中</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   第四部分：编辑sparkstreaming代码，实现从kafka中读取数据，并进行数据的处理</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   第五部分: 处理好的数据写到redis、mysql、es、hbase中。</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   第六部分：可以mybaits创建接口来实现，也可以通过可视化界面来实现。</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   </pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">-- 2. 不同的需求采用不同的实现原理。</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token string\">'需求1'</span>: 当日活跃用户及分时趋势图，昨日对比图<span class=\"token punctuation\">(</span>主讲<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    \t<span class=\"token comment\">-- 流程：数据模拟 -> nginx -> 日志服务器 -> kafka -> sparkstreaming ->  hbase -> mybaits -> 网页展示（可视化）</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token string\">'需求2'</span>: 当日新增用户数及分时趋势图，昨日对比图 <span class=\"token comment\">-- 不讲</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token string\">'需求3'</span>: 当日交易额及分时趋势图，昨日对比图</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    \t<span class=\"token comment\">-- 流程：数据模拟 -> nginx -> 日志服务器 -> mysql -> kafka -> sparkstreaming ->  hbase -> mybaits -> 数据展示</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token string\">'需求4'</span>: 当日订单数及分时趋势图，昨日对比图  <span class=\"token comment\">-- 不讲</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token string\">'需求5'</span>: 购物券功能风险预警</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token comment\">-- 流程：数据模拟 -> nginx -> 日志服务器  -> kafka -> sparkstreaming ->  es-> kibana 可视化</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token string\">'需求6'</span>: 用户购买明细灵活分析功能</pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\">-- 3. 本文梳理的过程为：</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>     <span class=\"token number\">1.</span> 数据采集：服务器写到kafka中</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        a、用户行为数据，从模拟数据，到接收到web服务器数据，再从日志服务器到kafka；</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        b、业务数据采集，从数据库实时采集到kafka中</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>     <span class=\"token number\">2.</span> 实时计算：redis ， hbase <span class=\"token operator\">+</span> phoenix，结果存储到es、mysql、redis、hbase</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>     <span class=\"token number\">3.</span> 数据接口服务开发，为前</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>     <span class=\"token number\">4.</span> Bi、可视化配置</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>     </pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token comment\">-- 4. 每一个不同的需求都会有很多的依赖需要添加，那么添加一个依赖，咱们说一个。</span></pre></td></tr></table></figure><h2 id=\"二-项目准备部分\"><a class=\"anchor\" href=\"#二-项目准备部分\">#</a> 二、项目准备部分</h2>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saWFuLXpwLm9zcy1jbi1zaGVuemhlbi5hbGl5dW5jcy5jb20vcGlj\">https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic</span> GO/20200719233313.png&quot; alt=&quot;1594885004104&quot; style=&quot;zoom:150%;&quot; /&gt;</p>\n<blockquote>\n<p>本次实时项目省略 flume</p>\n</blockquote>\n<h3 id=\"21-创建gmall0213工程\"><a class=\"anchor\" href=\"#21-创建gmall0213工程\">#</a> 2.1 创建 gmall0213 工程</h3>\n<p>创建 maven 项目</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 1. 该工程的有一个主要的任务：</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   负责依赖和依赖版本的控制的作用。</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">-- 2. 依赖文件说明：</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token number\">1.</span> properties中是定义了一些变量，后续使用时，只需要使用变量的值即可，当需求进行版本升级时，只需要变更变量的值就可以实现。</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token operator\">&lt;</span>properties<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>properties<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   <span class=\"token number\">2.</span> 属于版本的声明，子模块继承父模块时，则不需要再声明版本，也是用于依赖版本的管理。</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>     <span class=\"token operator\">&lt;</span>dependencyManagement<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>dependencyManagement<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">-- 3. 父工程的作用：依赖版本的管理。</span></pre></td></tr></table></figure><ul>\n<li>添加依赖</li>\n</ul>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>properties</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>spark.version</span><span class=\"token punctuation\">></span></span>2.4.5<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>spark.version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>scala.version</span><span class=\"token punctuation\">></span></span>2.12.10<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>scala.version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>log4j.version</span><span class=\"token punctuation\">></span></span>1.2.17<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>log4j.version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>slf4j.version</span><span class=\"token punctuation\">></span></span>1.7.22<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>slf4j.version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>fastjson.version</span><span class=\"token punctuation\">></span></span>1.2.47<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>fastjson.version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>httpclient.version</span><span class=\"token punctuation\">></span></span>4.5.5<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>httpclient.version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>httpmime.version</span><span class=\"token punctuation\">></span></span>4.3.6<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>httpmime.version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>project.build.sourceEncoding</span><span class=\"token punctuation\">></span></span>UTF-8<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>project.build.sourceEncoding</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>project.reporting.outputEncoding</span><span class=\"token punctuation\">></span></span>UTF-8<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>project.reporting.outputEncoding</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>java.version</span><span class=\"token punctuation\">></span></span>1.8<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>java.version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>properties</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependencies</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token comment\">&lt;!-- 此处放日志包，所有项目都要引用 --></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token comment\">&lt;!-- 所有子项目的日志框架 --></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.slf4j<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>jcl-over-slf4j<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>$&#123;slf4j.version&#125;<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.slf4j<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>slf4j-api<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>$&#123;slf4j.version&#125;<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.slf4j<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>slf4j-log4j12<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>$&#123;slf4j.version&#125;<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token comment\">&lt;!-- 具体的日志实现 --></span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>log4j<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>log4j<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>$&#123;log4j.version&#125;<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependencies</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependencyManagement</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependencies</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token comment\">&lt;!-- https://mvnrepository.com/artifact/org.apache.httpcomponents/httpclient --></span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.apache.httpcomponents<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>httpclient<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>$&#123;httpclient.version&#125;<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.apache.httpcomponents<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>httpmime<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>$&#123;httpmime.version&#125;<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.alibaba<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>fastjson<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>$&#123;fastjson.version&#125;<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre></pre></td></tr><tr><td data-num=\"62\"></td><td><pre></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.apache.spark<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spark-core_2.12<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>$&#123;spark.version&#125;<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.apache.spark<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spark-hive_2.12<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>$&#123;spark.version&#125;<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.apache.spark<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spark-sql_2.12<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>$&#123;spark.version&#125;<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.apache.spark<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spark-streaming_2.11<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>$&#123;spark.version&#125;<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.apache.spark<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spark-streaming-kafka-0-10_2.12<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>$&#123;spark.version&#125;<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependencies</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependencyManagement</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>build</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>plugins</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>        <span class=\"token comment\">&lt;!-- 该插件用于将 Scala 代码编译成 class 文件 --></span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>plugin</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>net.alchim31.maven<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>scala-maven-plugin<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>3.4.6<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>executions</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>execution</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>                    <span class=\"token comment\">&lt;!-- 声明绑定到 maven 的 compile 阶段 --></span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>goals</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>                        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>goal</span><span class=\"token punctuation\">></span></span>compile<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>goal</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>                        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>goal</span><span class=\"token punctuation\">></span></span>testCompile<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>goal</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>goals</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>execution</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>executions</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>plugin</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>plugins</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>build</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><ul>\n<li><strong>Maven 整体依赖结构</strong></li>\n</ul>\n<p>![1594812372205](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saWFuLXpwLm9zcy1jbi1zaGVuemhlbi5hbGl5dW5jcy5jb20vcGlj\">https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic</span> GO/20200719233329.png)</p>\n<h3 id=\"22-创建common子模块\"><a class=\"anchor\" href=\"#22-创建common子模块\">#</a> 2.2 创建 common 子模块</h3>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 1. 该模块的作用：这个模块内放一些通用代码，各大模块都会使用到的代码</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">-- 2. 所有模块都会加入 common 模块的依赖</span></pre></td></tr></table></figure><ol>\n<li>\n<p>模块名：gmall-common</p>\n</li>\n<li>\n<p>添加依赖</p>\n</li>\n</ol>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependencies</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.alibaba<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>fastjson<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.apache.httpcomponents<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>httpclient<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.apache.httpcomponents<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>httpmime<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependencies</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h2 id=\"三-模拟数据部分\"><a class=\"anchor\" href=\"#三-模拟数据部分\">#</a> 三、模拟数据部分</h2>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 1. 说明：</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   该模拟数据部分，在实际开发过程中，是实时的数据，不需要我们处理，但是可以用来做一些数据验证。</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">-- 2. 代码：</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   此部分的代码不要求掌握，需要知道含义和逻辑就可以。</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">-- 3. 模拟数据发送流程：</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   一共分为三个部分：</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   <span class=\"token number\">1.</span> 模拟数据发送日志请求  <span class=\"token comment\">--> 由 Windows idea springboot web 服务器接收并发送到 kafka，落盘日志文件；</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   <span class=\"token number\">2.</span> springboot 打包 <span class=\"token operator\">-</span><span class=\"token operator\">></span> 部署到linux下 <span class=\"token operator\">-</span><span class=\"token operator\">></span> 模拟数据发送日志请求 <span class=\"token operator\">-</span><span class=\"token operator\">></span> jar程序接收，发送kafka，并落盘数据</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   <span class=\"token number\">3.</span> 模拟数据发送日志请求 <span class=\"token operator\">-</span><span class=\"token operator\">></span> nginx <span class=\"token operator\">-</span><span class=\"token operator\">></span> 三台日志服务器 <span class=\"token operator\">-</span><span class=\"token operator\">></span> 三台一起写入kafka，落盘日志文件。</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">-- 4. 该部分属于发送数据，由于不同模式下参数有所差异，届时一一说明</span></pre></td></tr></table></figure><ol>\n<li>模块名：gmall-mock</li>\n<li>添加依赖</li>\n</ol>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependencies</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>gmall0213<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.atguigu<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>1.0-SNAPSHOT<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependencies</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h3 id=\"31-randomnumutil-工具类\"><a class=\"anchor\" href=\"#31-randomnumutil-工具类\">#</a> 3.1 RandomNumUtil 工具类</h3>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 1. 该类的作用：生成随机整数的工具类</span></pre></td></tr></table></figure><ul>\n<li>代码</li>\n</ul>\n<figure class=\"highlight scala\"><figcaption data-lang=\"scala\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">scala<span class=\"token punctuation\">.</span>collection<span class=\"token punctuation\">.</span>mutable</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">scala<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span>Random</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  * 生成随机数据的工具</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">object</span> RandomNumUtil <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token comment\">/* 随机数生成器对象 */</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> random <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> Random<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    * 生成随机的整数，区间: [from, to]</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    *</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    * @param from</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    * @param to</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    * @return</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    */</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token keyword\">def</span> randomInt<span class=\"token punctuation\">(</span>from<span class=\"token operator\">:</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">,</span> to<span class=\"token operator\">:</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Int</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>from <span class=\"token operator\">></span> to<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> IllegalArgumentException<span class=\"token punctuation\">(</span>s<span class=\"token string\">\"from: $from 不能大于 to: $to\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">else</span> random<span class=\"token punctuation\">.</span>nextInt<span class=\"token punctuation\">(</span>to <span class=\"token operator\">-</span> from <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> from</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    * 创建多个 Int 值</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    *</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    * @param from</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    * @param to</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    * @param count     创建的 Int 值的顺序</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    * @param canRepeat 是否允许重复</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    * @return List [Int] 集合</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    */</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>  <span class=\"token keyword\">def</span> randomMultiInt<span class=\"token punctuation\">(</span>from<span class=\"token operator\">:</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">,</span> to<span class=\"token operator\">:</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">,</span> count<span class=\"token operator\">:</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">,</span> canRepeat<span class=\"token operator\">:</span> <span class=\"token builtin\">Boolean</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> List<span class=\"token punctuation\">[</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>canRepeat<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>      <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> to <span class=\"token namespace\">count</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>toList<span class=\"token punctuation\">.</span>map<span class=\"token punctuation\">(</span>_ <span class=\"token keyword\">=></span> randomInt<span class=\"token punctuation\">(</span>from<span class=\"token punctuation\">,</span> to<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>      <span class=\"token keyword\">val</span> set <span class=\"token operator\">=</span> mutable<span class=\"token punctuation\">.</span>Set<span class=\"token punctuation\">[</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>      <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>set<span class=\"token punctuation\">.</span>size <span class=\"token operator\">&lt;</span> count<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        set <span class=\"token operator\">+=</span> randomInt<span class=\"token punctuation\">(</span>from<span class=\"token punctuation\">,</span> to<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>      set<span class=\"token punctuation\">.</span>toList</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>  <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    * 生成一个随机的 Long 值 范围: [from, to]</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    *</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    * @param from</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    * @param to</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    * @return</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    */</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>  <span class=\"token keyword\">def</span> randomLong<span class=\"token punctuation\">(</span>from<span class=\"token operator\">:</span> <span class=\"token builtin\">Long</span><span class=\"token punctuation\">,</span> to<span class=\"token operator\">:</span> <span class=\"token builtin\">Long</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Long</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>from <span class=\"token operator\">></span> to<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> IllegalArgumentException<span class=\"token punctuation\">(</span>s<span class=\"token string\">\"from: $from 不能大于 to: $to\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token keyword\">else</span> math<span class=\"token punctuation\">.</span>abs<span class=\"token punctuation\">(</span>random<span class=\"token punctuation\">.</span>nextLong<span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>to <span class=\"token operator\">-</span> from <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> from</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"32-radomoptions工具类\"><a class=\"anchor\" href=\"#32-radomoptions工具类\">#</a> 3.2 RadomOptions 工具类</h3>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 作用：按照一定的分布生成随机选项的工具类</span></pre></td></tr></table></figure><ul>\n<li>代码</li>\n</ul>\n<figure class=\"highlight scala\"><figcaption data-lang=\"scala\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>atguigu<span class=\"token punctuation\">.</span>gmall<span class=\"token punctuation\">.</span>mock<span class=\"token punctuation\">.</span>util</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  * @Description</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  **</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  * @author lianzhipeng</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  * @create 2020-07-21 2:13:32</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  */</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">scala<span class=\"token punctuation\">.</span>collection<span class=\"token punctuation\">.</span>mutable<span class=\"token punctuation\">.</span></span>ListBuffer</pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  * 根据提供的值和比重，来创建 RandomOptions 对象.</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  * 然后可以通过 getRandomOption 来获取一个随机的预定义的值</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  */</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">object</span> RandomOptions <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token keyword\">def</span> apply<span class=\"token punctuation\">[</span>T<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>opts<span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>T<span class=\"token punctuation\">,</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">val</span> randomOptions <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> RandomOptions<span class=\"token punctuation\">[</span>T<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    randomOptions<span class=\"token punctuation\">.</span>totalWeight <span class=\"token operator\">=</span> opts<span class=\"token punctuation\">.</span>foldLeft<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>_ <span class=\"token operator\">+</span> _<span class=\"token punctuation\">.</span>_2<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 计算出来总的比重</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    opts<span class=\"token punctuation\">.</span>foreach <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      <span class=\"token keyword\">case</span> <span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> weight<span class=\"token punctuation\">)</span> <span class=\"token keyword\">=></span> randomOptions<span class=\"token punctuation\">.</span>options <span class=\"token operator\">++</span><span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> to <span class=\"token namespace\">weight</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>map<span class=\"token punctuation\">(</span>_ <span class=\"token keyword\">=></span> value<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    randomOptions</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token keyword\">class</span> RandomOptions<span class=\"token punctuation\">[</span>T<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  <span class=\"token keyword\">var</span> totalWeight<span class=\"token operator\">:</span> <span class=\"token builtin\">Int</span> <span class=\"token operator\">=</span> _</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  <span class=\"token keyword\">var</span> options <span class=\"token operator\">=</span> ListBuffer<span class=\"token punctuation\">[</span>T<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    * 获取随机的 Option 的值</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    *</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    * @return</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    */</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>  <span class=\"token keyword\">def</span> getRandomOption<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    options<span class=\"token punctuation\">(</span>RandomNumUtil<span class=\"token punctuation\">.</span>randomInt<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> totalWeight <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>Scala 会自动识别 apply 方法，所以调用伴生对象的 apply 方法时，apply 方法名可以省略，这里的 <code>RandomOptions</code>  构建对象就是用 apply 的方式</p>\n</blockquote>\n<h3 id=\"33-loguploader-日志发送工具类\"><a class=\"anchor\" href=\"#33-loguploader-日志发送工具类\">#</a> 3.3 LogUploader 日志发送工具类</h3>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>作用：向服务器发送生成的日志的工具类</pre></td></tr></table></figure><ul>\n<li>代码</li>\n</ul>\n<figure class=\"highlight scala\"><figcaption data-lang=\"scala\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>atguigu<span class=\"token punctuation\">.</span>gmall<span class=\"token punctuation\">.</span>mock<span class=\"token punctuation\">.</span>util</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span>OutputStream</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>net<span class=\"token punctuation\">.</span></span><span class=\"token punctuation\">&#123;</span>HttpURLConnection<span class=\"token punctuation\">,</span> URL<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  * Author lzc</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  * Date 2019/5/14 11:25 AM</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  */</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">object</span> LogUploader <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token comment\">/* 发送日志 */</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token keyword\">def</span> sendLog<span class=\"token punctuation\">(</span>log<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Unit</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      <span class=\"token comment\">// 1. 日志服务器的地址</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      <span class=\"token keyword\">val</span> logUrl <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> URL<span class=\"token punctuation\">(</span><span class=\"token string\">\"http://localhost:8080/log\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      <span class=\"token comment\">// 2. 得到一个 HttpURLConnection</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      <span class=\"token keyword\">val</span> conn<span class=\"token operator\">:</span> HttpURLConnection <span class=\"token operator\">=</span> logUrl<span class=\"token punctuation\">.</span>openConnection<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>asInstanceOf<span class=\"token punctuation\">[</span>HttpURLConnection<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      <span class=\"token comment\">// 3. 设置请求方法 (上传数据一般使用 post 请求)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      conn<span class=\"token punctuation\">.</span>setRequestMethod<span class=\"token punctuation\">(</span><span class=\"token string\">\"POST\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      <span class=\"token comment\">// 4. 用来供 server 进行时钟校对的</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>      conn<span class=\"token punctuation\">.</span>setRequestProperty<span class=\"token punctuation\">(</span><span class=\"token string\">\"clientTime\"</span><span class=\"token punctuation\">,</span> System<span class=\"token punctuation\">.</span>currentTimeMillis <span class=\"token operator\">+</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>      <span class=\"token comment\">// 5. 允许上传数据</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>      conn<span class=\"token punctuation\">.</span>setDoOutput<span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>      <span class=\"token comment\">// 6. 设置请求的头信息，post 请求必须这样设置</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>      conn<span class=\"token punctuation\">.</span>setRequestProperty<span class=\"token punctuation\">(</span><span class=\"token string\">\"Content-Type\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"application/x-www-form-urlencoded\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>      <span class=\"token comment\">// 7. 获取上传用的输出流</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>      <span class=\"token keyword\">val</span> out<span class=\"token operator\">:</span> OutputStream <span class=\"token operator\">=</span> conn<span class=\"token punctuation\">.</span>getOutputStream</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>      <span class=\"token comment\">// 8. 写出数据</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>      out<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"log=\"</span> <span class=\"token operator\">+</span> log<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>getBytes<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>      <span class=\"token comment\">// 9. flush</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>      out<span class=\"token punctuation\">.</span>flush<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>      <span class=\"token comment\">// 10. 关闭资源</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>      out<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>      <span class=\"token comment\">// 11. 获取响应码.  (或者获取响应信息也行，否则不会发送请求到服务器)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>      <span class=\"token keyword\">val</span> code<span class=\"token operator\">:</span> <span class=\"token builtin\">Int</span> <span class=\"token operator\">=</span> conn<span class=\"token punctuation\">.</span>getResponseCode</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>      println<span class=\"token punctuation\">(</span>code<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>      <span class=\"token keyword\">case</span> e<span class=\"token operator\">:</span> Exception <span class=\"token keyword\">=></span> e<span class=\"token punctuation\">.</span>printStackTrace<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p><strong>Q: 请求方法中 post 和 get 的区别与作用</strong></p>\n<p>![1594730664181](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saWFuLXpwLm9zcy1jbi1zaGVuemhlbi5hbGl5dW5jcy5jb20vcGlj\">https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic</span> GO/20200719233345.png)</p>\n<p><strong>Q:post 请求文本信息的说明</strong></p>\n<p>服务器端通常是根据请求头（headers）中的 <code>Content-Type</code>  字段来获知请求中的消息主体是用<strong>何种方式编码</strong>，再对主体进行解析。所以说到 POST 提交数据方案，包含了 Content-Type 和消息主体编码方式两部分</p>\n<figure class=\"highlight scala\"><figcaption data-lang=\"scala\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 文本信息上传的设置</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>conn<span class=\"token punctuation\">.</span>setRequestProperty<span class=\"token punctuation\">(</span><span class=\"token string\">\"Content-Type\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"application/x-www-form-urlencoded\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 提交的的数据，请求 body 中按照 key1=value1&amp;key2=value2 进行编码，key 和 value 都要进行 urlEncode;</span></pre></td></tr></table></figure><p>Q: 响应码的说明</p>\n<p>1XX：临时相应</p>\n<p>2XX：成功相应</p>\n<p>3XX：重定向，（访问的资源路径可能发生改变）</p>\n<p>4XX：客户端错误</p>\n<p>​\t400：请求的语法错误</p>\n<p>​\t401：没有身份验证，一般账号密码正确可以通过</p>\n<p>​\t403：没有权利访问，被服务器拒绝</p>\n<p>​\t404：服务器找不到资源，最常见</p>\n<p>5XX：服务器端语法错误</p>\n<p>​\t500：服务器未知错误</p>\n<p>​\t503：一般是服务器维护，当前无法处理请求</p>\n</blockquote>\n<h3 id=\"34-jsonmock-生成日志\"><a class=\"anchor\" href=\"#34-jsonmock-生成日志\">#</a> 3.4 JsonMock 生成日志</h3>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 1. 作用：生成模拟数据</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">-- 2. 数据内容说明：</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     <span class=\"token number\">1.</span> json对象</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>     <span class=\"token number\">2.</span> 数据没有写日志生成时间，待收到数据时添加时间戳</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>     <span class=\"token number\">3.</span> 有启动日志和事件日志</pre></td></tr></table></figure><ul>\n<li>代码</li>\n</ul>\n<figure class=\"highlight scala\"><figcaption data-lang=\"scala\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>atguigu<span class=\"token punctuation\">.</span>gmall<span class=\"token punctuation\">.</span>mock</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span>Date</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>alibaba<span class=\"token punctuation\">.</span>fastjson<span class=\"token punctuation\">.</span></span><span class=\"token punctuation\">&#123;</span>JSON<span class=\"token punctuation\">,</span> JSONObject<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>atguigu<span class=\"token punctuation\">.</span>gmall<span class=\"token punctuation\">.</span>mock<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token punctuation\">&#123;</span>LogUploader<span class=\"token punctuation\">,</span> RandomNumUtil<span class=\"token punctuation\">,</span> RandomOptions<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">object</span> JsonMock <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token keyword\">val</span> startupNum <span class=\"token operator\">=</span> <span class=\"token number\">100000</span> <span class=\"token comment\">// 生成的启动日志的记录数</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token keyword\">val</span> eventNum <span class=\"token operator\">=</span> <span class=\"token number\">200000</span> <span class=\"token comment\">// 生成的事件日志的记录数</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token comment\">// 操作系统的分布</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token keyword\">val</span> osOpts <span class=\"token operator\">=</span> RandomOptions<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ios\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"android\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token comment\">// 日志开始时间</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token keyword\">var</span> startDate<span class=\"token operator\">:</span> Date <span class=\"token operator\">=</span> _</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token comment\">// 日志结束时间</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token keyword\">var</span> endDate<span class=\"token operator\">:</span> Date <span class=\"token operator\">=</span> _</pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token comment\">// 地理位置分布</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token keyword\">val</span> areaOpts <span class=\"token operator\">=</span> RandomOptions<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">(</span><span class=\"token string\">\"beijing\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"shanghai\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"guangdong\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">(</span><span class=\"token string\">\"hebei\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"heilongjiang\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"shandong\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">(</span><span class=\"token string\">\"tianjin\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"guizhou\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"shangxi\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">(</span><span class=\"token string\">\"sichuan\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"xinjiang\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  <span class=\"token comment\">// appId</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  <span class=\"token keyword\">val</span> appId <span class=\"token operator\">=</span> <span class=\"token string\">\"gmall\"</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>  <span class=\"token comment\">//app 的版本分布</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>  <span class=\"token keyword\">val</span> versionOpts <span class=\"token operator\">=</span> RandomOptions<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token punctuation\">(</span><span class=\"token string\">\"1.2.0\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"1.1.2\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">15</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token punctuation\">(</span><span class=\"token string\">\"1.1.3\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"1.1.1\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>  <span class=\"token comment\">// 用户行为的分布 (事件分布)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>  <span class=\"token keyword\">val</span> eventOpts <span class=\"token operator\">=</span> RandomOptions<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token punctuation\">(</span><span class=\"token string\">\"addFavor\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"addComment\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token punctuation\">(</span><span class=\"token string\">\"addCart\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"clickItem\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">40</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>  <span class=\"token comment\">//app 分发渠道分布</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>  <span class=\"token keyword\">val</span> channelOpts <span class=\"token operator\">=</span> RandomOptions<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token punctuation\">(</span><span class=\"token string\">\"xiaomi\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"huawei\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"wandoujia\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token punctuation\">(</span><span class=\"token string\">\"360\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"tencent\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"baidu\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"website\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>  <span class=\"token comment\">// 生成模拟数据的时候是否结束退出</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>  <span class=\"token keyword\">val</span> quitOpts <span class=\"token operator\">=</span> RandomOptions<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token number\">95</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>  <span class=\"token comment\">// 模拟出来一条启动日志</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>  <span class=\"token keyword\">def</span> initOneStartupLog<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">String</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    `logType` string   COMMENT ' 日志类型 ',</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    `mid` string COMMENT ' 设备唯一标识 ',</pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    `uid` string COMMENT ' 用户标识 ',</pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    `os` string COMMENT ' 操作系统 ', ,</pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    `appId` string COMMENT ' 应用 id', ,</pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    `version` string COMMENT ' 版本号 ',</pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    `ts` bigint COMMENT ' 启动时间 ',    考虑每个终端的时间的不准群性，时间是将来在服务器端来生成</pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    `area` string COMMENT ' 城市 '</pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    `channel` string COMMENT ' 渠道 '</pre></td></tr><tr><td data-num=\"62\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    <span class=\"token keyword\">val</span> mid<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"mid_\"</span> <span class=\"token operator\">+</span> RandomNumUtil<span class=\"token punctuation\">.</span>randomInt<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">500</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    <span class=\"token keyword\">val</span> uid<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span> <span class=\"token operator\">+</span> RandomNumUtil<span class=\"token punctuation\">.</span>randomInt<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10000</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>    <span class=\"token keyword\">val</span> os<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span> <span class=\"token operator\">=</span> osOpts<span class=\"token punctuation\">.</span>getRandomOption<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>    <span class=\"token keyword\">val</span> appId<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>appId</pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    <span class=\"token keyword\">val</span> area<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span> <span class=\"token operator\">=</span> areaOpts<span class=\"token punctuation\">.</span>getRandomOption<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>    <span class=\"token keyword\">val</span> version<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span> <span class=\"token operator\">=</span> versionOpts<span class=\"token punctuation\">.</span>getRandomOption<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>    <span class=\"token keyword\">val</span> channel<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span> <span class=\"token operator\">=</span> channelOpts<span class=\"token punctuation\">.</span>getRandomOption<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>    <span class=\"token keyword\">val</span> obj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> JSONObject<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>    obj<span class=\"token punctuation\">.</span>put<span class=\"token punctuation\">(</span><span class=\"token string\">\"logType\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"startup\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>    obj<span class=\"token punctuation\">.</span>put<span class=\"token punctuation\">(</span><span class=\"token string\">\"mid\"</span><span class=\"token punctuation\">,</span> mid<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>    obj<span class=\"token punctuation\">.</span>put<span class=\"token punctuation\">(</span><span class=\"token string\">\"uid\"</span><span class=\"token punctuation\">,</span> uid<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>    obj<span class=\"token punctuation\">.</span>put<span class=\"token punctuation\">(</span><span class=\"token string\">\"os\"</span><span class=\"token punctuation\">,</span> os<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>    obj<span class=\"token punctuation\">.</span>put<span class=\"token punctuation\">(</span><span class=\"token string\">\"appId\"</span><span class=\"token punctuation\">,</span> appId<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>    obj<span class=\"token punctuation\">.</span>put<span class=\"token punctuation\">(</span><span class=\"token string\">\"area\"</span><span class=\"token punctuation\">,</span> area<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>    obj<span class=\"token punctuation\">.</span>put<span class=\"token punctuation\">(</span><span class=\"token string\">\"channel\"</span><span class=\"token punctuation\">,</span> channel<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>    obj<span class=\"token punctuation\">.</span>put<span class=\"token punctuation\">(</span><span class=\"token string\">\"version\"</span><span class=\"token punctuation\">,</span> version<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>    <span class=\"token comment\">// 返回 json 格式字符串</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>    obj<span class=\"token punctuation\">.</span>toJSONString</pre></td></tr><tr><td data-num=\"82\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>  <span class=\"token comment\">// 模拟出来一条事件日志  参数: json 格式的启动日志</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>  <span class=\"token keyword\">def</span> initOneEventLog<span class=\"token punctuation\">(</span>startupLogJson<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>    <span class=\"token comment\">/*`</pre></td></tr><tr><td data-num=\"87\"></td><td><pre>    logType` string   COMMENT ' 日志类型 ',</pre></td></tr><tr><td data-num=\"88\"></td><td><pre>    `mid` string COMMENT ' 设备唯一标识 ',</pre></td></tr><tr><td data-num=\"89\"></td><td><pre>    `uid` string COMMENT ' 用户标识 ',</pre></td></tr><tr><td data-num=\"90\"></td><td><pre>    `os` string COMMENT ' 操作系统 ',</pre></td></tr><tr><td data-num=\"91\"></td><td><pre>    `appId` string COMMENT ' 应用 id',</pre></td></tr><tr><td data-num=\"92\"></td><td><pre>    `area` string COMMENT ' 地区 ' ,</pre></td></tr><tr><td data-num=\"93\"></td><td><pre>    `eventId` string COMMENT ' 事件 id',</pre></td></tr><tr><td data-num=\"94\"></td><td><pre>    `pageId` string COMMENT ' 当前页 ',</pre></td></tr><tr><td data-num=\"95\"></td><td><pre>    `nextPageId` string COMMENT ' 跳转页 ',</pre></td></tr><tr><td data-num=\"96\"></td><td><pre>    `itemId` string COMMENT ' 商品编号 ',</pre></td></tr><tr><td data-num=\"97\"></td><td><pre>    `ts` bigint COMMENT ' 时间 '</pre></td></tr><tr><td data-num=\"98\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>    <span class=\"token keyword\">val</span> startupLogObj<span class=\"token operator\">:</span> JSONObject <span class=\"token operator\">=</span> JSON<span class=\"token punctuation\">.</span>parseObject<span class=\"token punctuation\">(</span>startupLogJson<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>    <span class=\"token keyword\">val</span> eventLogObj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> JSONObject<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>    eventLogObj<span class=\"token punctuation\">.</span>put<span class=\"token punctuation\">(</span><span class=\"token string\">\"logType\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"event\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>    eventLogObj<span class=\"token punctuation\">.</span>put<span class=\"token punctuation\">(</span><span class=\"token string\">\"mid\"</span><span class=\"token punctuation\">,</span> startupLogObj<span class=\"token punctuation\">.</span>getString<span class=\"token punctuation\">(</span><span class=\"token string\">\"mid\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>    eventLogObj<span class=\"token punctuation\">.</span>put<span class=\"token punctuation\">(</span><span class=\"token string\">\"uid\"</span><span class=\"token punctuation\">,</span> startupLogObj<span class=\"token punctuation\">.</span>getString<span class=\"token punctuation\">(</span><span class=\"token string\">\"uid\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>    eventLogObj<span class=\"token punctuation\">.</span>put<span class=\"token punctuation\">(</span><span class=\"token string\">\"os\"</span><span class=\"token punctuation\">,</span> startupLogObj<span class=\"token punctuation\">.</span>getString<span class=\"token punctuation\">(</span><span class=\"token string\">\"os\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>    eventLogObj<span class=\"token punctuation\">.</span>put<span class=\"token punctuation\">(</span><span class=\"token string\">\"appId\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>appId<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>    eventLogObj<span class=\"token punctuation\">.</span>put<span class=\"token punctuation\">(</span><span class=\"token string\">\"area\"</span><span class=\"token punctuation\">,</span> startupLogObj<span class=\"token punctuation\">.</span>getString<span class=\"token punctuation\">(</span><span class=\"token string\">\"area\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>    eventLogObj<span class=\"token punctuation\">.</span>put<span class=\"token punctuation\">(</span><span class=\"token string\">\"eventId\"</span><span class=\"token punctuation\">,</span> eventOpts<span class=\"token punctuation\">.</span>getRandomOption<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>    eventLogObj<span class=\"token punctuation\">.</span>put<span class=\"token punctuation\">(</span><span class=\"token string\">\"pageId\"</span><span class=\"token punctuation\">,</span> RandomNumUtil<span class=\"token punctuation\">.</span>randomInt<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>    eventLogObj<span class=\"token punctuation\">.</span>put<span class=\"token punctuation\">(</span><span class=\"token string\">\"nextPageId\"</span><span class=\"token punctuation\">,</span> RandomNumUtil<span class=\"token punctuation\">.</span>randomInt<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>    eventLogObj<span class=\"token punctuation\">.</span>put<span class=\"token punctuation\">(</span><span class=\"token string\">\"itemId\"</span><span class=\"token punctuation\">,</span> RandomNumUtil<span class=\"token punctuation\">.</span>randomInt<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>    eventLogObj<span class=\"token punctuation\">.</span>toJSONString</pre></td></tr><tr><td data-num=\"113\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>  <span class=\"token comment\">// 开始生成日志</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>  <span class=\"token keyword\">def</span> generateLog<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Unit</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>    <span class=\"token punctuation\">(</span><span class=\"token number\">0</span> to <span class=\"token namespace\">startupNum</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>foreach<span class=\"token punctuation\">(</span>_ <span class=\"token keyword\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>      <span class=\"token comment\">// 生成一条启动日志</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>      <span class=\"token keyword\">val</span> oneStartupLog<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span> <span class=\"token operator\">=</span> initOneStartupLog<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>      <span class=\"token comment\">// 发送启动日志</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>      LogUploader<span class=\"token punctuation\">.</span>sendLog<span class=\"token punctuation\">(</span>oneStartupLog<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>      <span class=\"token comment\">// 模拟出来多条事件日志</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>      <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>quitOpts<span class=\"token punctuation\">.</span>getRandomOption<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>        <span class=\"token comment\">// 生成一条事件日志</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>        <span class=\"token keyword\">val</span> oneEventLog<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span> <span class=\"token operator\">=</span> initOneEventLog<span class=\"token punctuation\">(</span>oneStartupLog<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>        <span class=\"token comment\">// 发送事件日志</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>        LogUploader<span class=\"token punctuation\">.</span>sendLog<span class=\"token punctuation\">(</span>oneEventLog<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>        Thread<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>      Thread<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre></pre></td></tr><tr><td data-num=\"134\"></td><td><pre>  <span class=\"token keyword\">def</span> main<span class=\"token punctuation\">(</span>args<span class=\"token operator\">:</span> Array<span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Unit</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>    <span class=\"token comment\">// 测试</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre>    generateLog<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"四-数据采集部分\"><a class=\"anchor\" href=\"#四-数据采集部分\">#</a> 四、数据采集部分</h2>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 1. 说明：</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   日志服务器我们使用springboot来实现，待流程疏通以后，我们再使用nginx来实现负载均衡。</pre></td></tr></table></figure><ul>\n<li>流程</li>\n</ul>\n<p>![1594730753932](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saWFuLXpwLm9zcy1jbi1zaGVuemhlbi5hbGl5dW5jcy5jb20vcGlj\">https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic</span> GO/20200719233358.png)</p>\n<h3 id=\"41-spring-boot简介\"><a class=\"anchor\" href=\"#41-spring-boot简介\">#</a> 4.1 spring boot 简介</h3>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 1. Spring boot 好处</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token number\">1.</span> 内嵌 Tomcat<span class=\"token punctuation\">,</span> 不再需要外部的 Tomcat</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token number\">2.</span> 不再需要那些千篇一律，繁琐的 xml 文件。</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token number\">3.</span> 更方便的和各个第三方工具（ mysql<span class=\"token punctuation\">,</span>redis<span class=\"token punctuation\">,</span>elasticsearch<span class=\"token punctuation\">,</span>dubbo 等等整合），而只要维护一个配置文件即可</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">-- 2. 配置文件说明</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token number\">1.</span>springboot 实际上就是把以前需要用户手工配置的部分，全部作为默认项。除非用户需要额外更改不然不用配置。</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t 这就是所谓的: <span class=\"token string\">'约定大于配置'</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token number\">2.</span>如果需要特别配置的时候，去修改<span class=\"token string\">'application.properties'</span></pre></td></tr></table></figure><h3 id=\"42-spring-boot搭建\"><a class=\"anchor\" href=\"#42-spring-boot搭建\">#</a> 4.2 spring boot 搭建</h3>\n<h4 id=\"421-创建子模块-gmall-logger\"><a class=\"anchor\" href=\"#421-创建子模块-gmall-logger\">#</a> 4.2.1 创建子模块 gmall-logger</h4>\n<p>作用：日志采集服务器的创建</p>\n<p>![1594730896851](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saWFuLXpwLm9zcy1jbi1zaGVuemhlbi5hbGl5dW5jcy5jb20vcGlj\">https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic</span> GO/20200719233418.png)</p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saWFuLXpwLm9zcy1jbi1zaGVuemhlbi5hbGl5dW5jcy5jb20vcGlj\">https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic</span> GO/20200720193239.png&quot; alt=&quot;image-20200720193025377&quot; style=&quot;zoom: 67%;&quot; /&gt;</p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saWFuLXpwLm9zcy1jbi1zaGVuemhlbi5hbGl5dW5jcy5jb20vcGlj\">https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic</span> GO/20200720193432.png&quot; alt=&quot;image-20200720193432593&quot; style=&quot;zoom:50%;&quot; /&gt;</p>\n<p>![1594730921222](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saWFuLXpwLm9zcy1jbi1zaGVuemhlbi5hbGl5dW5jcy5jb20vcGlj\">https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic</span> GO/20200719233432.png)</p>\n<blockquote>\n<p>收到的消息要发往 kafka 集群，需要配置 kafka 依赖</p>\n</blockquote>\n<h4 id=\"422-模块依赖说明\"><a class=\"anchor\" href=\"#422-模块依赖说明\">#</a> 4.2.2 模块依赖说明</h4>\n<ol>\n<li>修改依赖关系</li>\n</ol>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 1. 依赖的操作：</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token number\">1.</span> 把该子项目依赖的父工程来替换成我们自己的父工程</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token number\">2.</span> 在我们的父工程中添加子项目</pre></td></tr></table></figure><ul>\n<li>把该子项目依赖的父工程来替换成我们自己的父工程</li>\n</ul>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>parent</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.atguigu<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>gmall0213<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>1.0-SNAPSHOT<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>parent</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><ul>\n<li>在我们的父工程中添加子项目，并将上面创建时的父依赖作为父工程的父依赖</li>\n</ul>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>parent</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-starter-parent<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>2.3.1.RELEASE<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>relativePath</span><span class=\"token punctuation\">/></span></span> <span class=\"token comment\">&lt;!-- lookup parent from repository --></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>parent</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>modules</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>module</span><span class=\"token punctuation\">></span></span>gmall-common<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>module</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>module</span><span class=\"token punctuation\">></span></span>gmall-mock<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>module</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>module</span><span class=\"token punctuation\">></span></span>gmall-logger<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>module</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>modules</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><ol start=\"2\">\n<li>logger 模块添加 gmall-commo 依赖</li>\n</ol>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.atguigu<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>gmall-common<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>1.0-SNAPSHOT<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h3 id=\"43-controller的创建\"><a class=\"anchor\" href=\"#43-controller的创建\">#</a> 4.3 Controller 的创建</h3>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 1. 服务器的需求：</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>       <span class=\"token number\">1.</span> 给日志添加时间</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>       <span class=\"token number\">2.</span> 日志数据落盘，为离线需求做准备</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>       <span class=\"token number\">3.</span> 日志发往kafka中。</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">-- 2. 在 gmall-logger 创建一个类：LoggerController, 用来处理 http 请求</span></pre></td></tr></table></figure><ol>\n<li>测试是否能接收到并处理网页的请求</li>\n</ol>\n<ul>\n<li>创建 LoggerController 类，并加上注解如下 3 个注解。</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@ResponseBody</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Controller</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">LoggerController</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/log\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">doLog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"ok\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>在网页：localhost:8080/log 访问时，会返回”ok“</li>\n</ul>\n<p>![image-20200722015707810](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saWFuLXpwLm9zcy1jbi1zaGVuemhlbi5hbGl5dW5jcy5jb20vcGlj\">https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic</span> GO/20200722015715.png)</p>\n<ol start=\"2\">\n<li>测试通过模拟数据，是否能接收到数据</li>\n</ol>\n<ul>\n<li>模拟数据发送的地址为：&quot;<span class=\"exturl\" data-url=\"aHR0cDovL2xvY2FsaG9zdDo4MDgwL2xvZw==\">http://localhost:8080/log</span>&quot;</li>\n</ul>\n<p>![image-20200722015834774](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saWFuLXpwLm9zcy1jbi1zaGVuemhlbi5hbGl5dW5jcy5jb20vcGlj\">https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic</span> GO/20200722015834.png)</p>\n<ul>\n<li>LoggerController 代码</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@ResponseBody</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Controller</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">LoggerController</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token annotation punctuation\">@PostMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/log\"</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 将请求改成 postMapping</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">doLog</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@RequestParam</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"log\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">String</span> log<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 加上参数注解，如果参数的名称和请求参数一致，可以省略这个注解</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>       <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>log<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 打印请求的数据</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"ok\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>打开模拟数据，再打开服务器。能收到请求的数据</li>\n</ul>\n<p>![image-20200722021843525](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saWFuLXpwLm9zcy1jbi1zaGVuemhlbi5hbGl5dW5jcy5jb20vcGlj\">https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic</span> GO/20200722021843.png)</p>\n<h4 id=\"431-日志落盘\"><a class=\"anchor\" href=\"#431-日志落盘\">#</a> 4.3.1 日志落盘</h4>\n<ul>\n<li>log4j 实现日志落盘</li>\n</ul>\n<p>添加 log4j.properties 文件</p>\n<figure class=\"highlight properties\"><figcaption data-lang=\".properties\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token attr-name\">log4j.appender.atguigu.MyConsole</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">org.apache.log4j.ConsoleAppender</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token attr-name\">log4j.appender.atguigu.MyConsole.target</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">System.err</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token attr-name\">log4j.appender.atguigu.MyConsole.layout</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">org.apache.log4j.PatternLayout</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token attr-name\">log4j.appender.atguigu.MyConsole.layout.ConversionPattern</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">%d&#123;yyyy-MM-dd HH:mm:ss&#125; %6p (%c:%M) - %m%n </span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token attr-name\">log4j.appender.atguigu.File</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">org.apache.log4j.DailyRollingFileAppender</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token attr-name\">log4j.appender.atguigu.File.file</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">/opt/module/gmall/gmall.log</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token attr-name\">log4j.appender.atguigu.File.DatePattern</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">'.'yyyy-MM-dd</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token attr-name\">log4j.appender.atguigu.File.layout</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">org.apache.log4j.PatternLayout</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token attr-name\">log4j.appender.atguigu.File.layout.ConversionPattern</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">%m%n</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token attr-name\">log4j.logger.com.orange.lin.gmalllogger.LoggerController</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">info,atguigu.File,atguigu.MyConsole</span></pre></td></tr></table></figure><ul>\n<li>排除 spring-boot 默认支持的 logging</li>\n</ul>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">&lt;!-- 去除 logging--></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-starter-web<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>exclusions</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>exclusion</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-starter-logging<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>exclusion</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>exclusions</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">&lt;!-- 添加 spring log4j 支持 --></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-starter-log4j<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>1.3.8.RELEASE<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h4 id=\"432-发送到kafka\"><a class=\"anchor\" href=\"#432-发送到kafka\">#</a> 4.3.2 发送到 kafka</h4>\n<ul>\n<li>在文件 Application.properties 中添加 kafka 配置</li>\n</ul>\n<figure class=\"highlight properties\"><figcaption data-lang=\".properties\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token attr-name\">server.port</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">8081</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">#kafka 配置</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token attr-name\">spring.kafka.bootstrap-servers</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">hadoop109:9092,hadoop110:9092,hadoop111:9092</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token attr-name\">spring.kafka.producer.key-serializer</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">org.apache.kafka.common.serialization.StringSerializer</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token attr-name\">spring.kafka.producer.value-serializer</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">org.apache.kafka.common.serialization.StringSerializer</span></pre></td></tr></table></figure><blockquote>\n<p>该配置指定了 kafka 集群的地址和端口，key 和 value 的序列化</p>\n</blockquote>\n<ul>\n<li>在 gmall-common 子模块创建存放 topic 主题名字的类</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>orange<span class=\"token punctuation\">.</span>lin</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @author oranglzc</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @Description:</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @creat 2020-07-14-10:06</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Constant</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> STARTUP_TOPIC <span class=\"token operator\">=</span><span class=\"token string\">\"startup_topic\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> EVENT_TOPIC<span class=\"token operator\">=</span><span class=\"token string\">\"event_topic\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"433-业务实现\"><a class=\"anchor\" href=\"#433-业务实现\">#</a> 4.3.3 业务实现</h4>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>orange<span class=\"token punctuation\">.</span>lin<span class=\"token punctuation\">.</span>gmalllogger</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>alibaba<span class=\"token punctuation\">.</span>fastjson<span class=\"token punctuation\">.</span></span>JSON<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>alibaba<span class=\"token punctuation\">.</span>fastjson<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">JSONObject</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>orange<span class=\"token punctuation\">.</span>lin<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Constant</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>slf4j<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Logger</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>slf4j<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">LoggerFactory</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>beans<span class=\"token punctuation\">.</span>factory<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Autowired</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>boot<span class=\"token punctuation\">.</span>autoconfigure<span class=\"token punctuation\">.</span>kafka<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">KafkaAutoConfiguration</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>boot<span class=\"token punctuation\">.</span>jackson<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">JsonObjectDeserializer</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>kafka<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">KafkaTemplate</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">GetMapping</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">PostMapping</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RestController</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>sound<span class=\"token punctuation\">.</span>midi<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Soundbank</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"19\"></td><td><pre> * @author oranglzc</pre></td></tr><tr><td data-num=\"20\"></td><td><pre> * @Description:</pre></td></tr><tr><td data-num=\"21\"></td><td><pre> * @creat 2020-07-13-20:01</pre></td></tr><tr><td data-num=\"22\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\">//    @RequestMapping(value = \"/log\", method = RequestMethod.POST)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token comment\">//    @ResponseBody  // 表示返回值是一个 字符串，而不是 页面名</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token annotation punctuation\">@RestController</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">LoggerController</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t<span class=\"token comment\">// 表示 post 上传 web 服务器 /log 时，执行的动作</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token annotation punctuation\">@PostMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/log\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">doLog</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> log<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token comment\">//1. 给日志添加一个时间戳</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        log<span class=\"token operator\">=</span><span class=\"token function\">addTS</span><span class=\"token punctuation\">(</span>log<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token comment\">// 2. 数据落盘 (为离线数据做准备)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token function\">saveToDisk</span><span class=\"token punctuation\">(</span>log<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token comment\">// 3. 把数据写入到 kafka, 需要写入到 topic</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token function\">sendToKafka</span><span class=\"token punctuation\">(</span>log<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"ok\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token comment\">// 可以对类成员变量、方法及构造函数进行标注，让 spring 完成 bean 自动装配的工作。</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token comment\">//@Autowired 默认是按照类去匹配，配合 @Qualifier 指定按照名称去装配 bean</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token class-name\">KafkaTemplate</span> kafka<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>     * 日志发往 kafka</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>     * 不同的日志写到不同的 topic</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>     * @param log</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">sendToKafka</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> log<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token comment\">// 为了避免除了 type 字段外的字符串出现相同字符串，加上 \"\" 判定</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>log<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\\"startup\\\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>            kafka<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Constant</span><span class=\"token punctuation\">.</span>STARTUP_TOPIC<span class=\"token punctuation\">,</span>log<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>            kafka<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Constant</span><span class=\"token punctuation\">.</span>EVENT_TOPIC<span class=\"token punctuation\">,</span>log<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    <span class=\"token class-name\">Logger</span> logger <span class=\"token operator\">=</span> <span class=\"token class-name\">LoggerFactory</span><span class=\"token punctuation\">.</span><span class=\"token function\">getLogger</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">LoggerController</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">saveToDisk</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> log<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>        logger<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span>log<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"65\"></td><td><pre>     * 添加时间戳</pre></td></tr><tr><td data-num=\"66\"></td><td><pre>     * @param log</pre></td></tr><tr><td data-num=\"67\"></td><td><pre>     * @return</pre></td></tr><tr><td data-num=\"68\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">addTS</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> log<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>        <span class=\"token class-name\">JSONObject</span> jsonObject <span class=\"token operator\">=</span> JSON<span class=\"token punctuation\">.</span><span class=\"token function\">parseObject</span><span class=\"token punctuation\">(</span>log<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>        jsonObject<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ts\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>        <span class=\"token keyword\">return</span> JSON<span class=\"token punctuation\">.</span><span class=\"token function\">toJSONString</span><span class=\"token punctuation\">(</span>jsonObject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre></pre></td></tr><tr><td data-num=\"75\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"44-linux部署\"><a class=\"anchor\" href=\"#44-linux部署\">#</a> 4.4 Linux 部署</h3>\n<p>目的：把数据采集部署到 Linux 服务器</p>\n<ul>\n<li>修改日志存放目录为 linux 下的目录</li>\n<li>打包项目，将日志服务器的 jar 包上传</li>\n<li>启动日志采集服务器</li>\n</ul>\n<blockquote>\n<p>// 方式一<br />\n java -jar xxxx.jar<br />\n//jar 中必须配置了 main-class</p>\n<p>// 方式二<br />\n java -cp gmall-logger-0.0.1-SNAPSHOT.jar org.springframework.boot.loader.JarLauncher</p>\n<p>两种方式的说明：</p>\n<p>java -jar 命令执行时会运用到目录 <code>META-INF\\MANIFEST.MF</code>  文件，在该文件中，有一个叫 <code>Main－Class</code>  的参数，它说明了 java -jar 命令执行的类。</p>\n<p>![1594732961560](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saWFuLXpwLm9zcy1jbi1zaGVuemhlbi5hbGl5dW5jcy5jb20vcGlj\">https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic</span> GO/20200719233507.png)</p>\n<p>java -cp 和 -classpath 一样，是指定类运行所依赖其他类的路径，通常是类库，jar 包之类，需要全路径到 jar 包，window 上分号 “;”</p>\n<p><em>分隔，linux 上是分号 “:” 分隔。不支持通配符，需要列出所有 jar 包，用一点 “.” 代表当前路径。</em></p>\n</blockquote>\n<h2 id=\"五-负载均衡nginx的使用\"><a class=\"anchor\" href=\"#五-负载均衡nginx的使用\">#</a> 五、 负载均衡 Nginx 的使用</h2>\n<blockquote>\n<p>该部分从属于数据采集部分，主要作用为实现三台数采服务器的负载均衡，因涉及新的技术 ---Nginx，所以单独成为一个 part</p>\n</blockquote>\n<p>![1594748402220](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saWFuLXpwLm9zcy1jbi1zaGVuemhlbi5hbGl5dW5jcy5jb20vcGlj\">https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic</span> GO/20200719233514.png)</p>\n<h3 id=\"51-nginx概述\"><a class=\"anchor\" href=\"#51-nginx概述\">#</a> 5.1 Nginx 概述</h3>\n<p>Nginx (读作 “engine x”), 是一个高性能的 HTTP 和反向代理服务器，特点是占有内存少，并发能力强</p>\n<ul>\n<li>与 tomcat 的关系</li>\n</ul>\n<p>除了 tomcat 以外， apache,nginx,jboss,jetty 等都是 http 服务器。</p>\n<p>nginx 和 apache 只支持静态页面和 CGI 协议的动态语言，比如 perl 、 php 等， 但是 nginx 不支持 java 。</p>\n<p>Java 程序只能通过与 tomcat 配合完成。   nginx 与 tomcat 配合，为 tomcat 集群提供反向代理服务、负载均衡等服务</p>\n<h4 id=\"511-nginx三大功能\"><a class=\"anchor\" href=\"#511-nginx三大功能\">#</a> 5.1.1 Nginx 三大功能</h4>\n<h5 id=\"反向代理\"><a class=\"anchor\" href=\"#反向代理\">#</a> 反向代理</h5>\n<ul>\n<li>正向代理</li>\n</ul>\n<p>![1594748623769](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saWFuLXpwLm9zcy1jbi1zaGVuemhlbi5hbGl5dW5jcy5jb20vcGlj\">https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic</span> GO/20200719233520.png)</p>\n<blockquote>\n<p>服务器代理用户的请求，从用户的角度看，没法直接获取请求，需要通过代理<br />\n特点：代理用户，用户清楚知道访问哪台服务器</p>\n</blockquote>\n<ul>\n<li>反向代理</li>\n</ul>\n<p>![1594748632948](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saWFuLXpwLm9zcy1jbi1zaGVuemhlbi5hbGl5dW5jcy5jb20vcGlj\">https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic</span> GO/20200719233526.png)</p>\n<blockquote>\n<p>反向代理：服务器代理真正服务器，用户不确定去哪台真实服务器，</p>\n</blockquote>\n<h5 id=\"负载均衡\"><a class=\"anchor\" href=\"#负载均衡\">#</a> 负载均衡</h5>\n<p>・轮询（默认） 每个请求按时间顺序逐一分配到不同的后端服务器，如果后端某台服务器宕机，则自动剔除故障机器，使用户访问不受影响</p>\n<p>・weight 指定轮询权重，weight 值越大，分配到的几率就越高，主要用于后端每台服务器性能不均衡的情况。</p>\n<p>・备机模式 平时不工作，只有其他 down 机的时候才会开始工作</p>\n<p>・公平模式 (第三方) 更智能的一个负载均衡算法，此算法可以根据页面大小和加载时间长短智能地进行负载均衡，也就是根据后端服务器的响应时间来分配请求，响应时间短的优先分配。如果想要使用此调度算法，需要 Nginx 的 upstream_fair 模块。</p>\n<h5 id=\"动静分离\"><a class=\"anchor\" href=\"#动静分离\">#</a> 动静分离</h5>\n<p>![1594748722077](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saWFuLXpwLm9zcy1jbi1zaGVuemhlbi5hbGl5dW5jcy5jb20vcGlj\">https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic</span> GO/20200719233531.png)</p>\n<h3 id=\"52-nginx安装\"><a class=\"anchor\" href=\"#52-nginx安装\">#</a> 5.2 Nginx 安装</h3>\n<ul>\n<li>yum 安装依赖包</li>\n</ul>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sudo</span> yum -y <span class=\"token function\">install</span>    openssl openssl-devel pcre pcre-devel    zlib zlib-devel gcc gcc-c++</pre></td></tr></table></figure><ul>\n<li>下载 Nginx</li>\n</ul>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>/opt/software » <span class=\"token function\">wget</span> http://nginx.org/download/nginx-1.12.2.tar.gz</pre></td></tr></table></figure><ul>\n<li>解压</li>\n</ul>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">tar</span> -zxvf nginx-1.12.2.tar.gz -C /opt/module</pre></td></tr></table></figure><ul>\n<li>编译和安装</li>\n</ul>\n<p>进入解压缩的目录</p>\n<p>为了防止出现权限问题，建议切换到 root 用户</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>./configure   --prefix<span class=\"token operator\">=</span>/usr/local/webserver/nginx</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">make</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">make</span> <span class=\"token function\">install</span></pre></td></tr></table></figure><ul>\n<li><strong>启停 Nginx</strong></li>\n</ul>\n<p>进入目录: /usr/local/webserver/nginx</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>启动 nginx: sbin/nginx</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>关闭 nginx: sbin/nginx -s stop</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>重新加载: sbin/nginx -s reload</pre></td></tr></table></figure><blockquote>\n<p>注意：</p>\n<ul>\n<li>Nginx 默认使用的是 80 端口，由于非 root 用户不能使用 1024 以内的端口，所以建议使用 root 用户启动 Nginx</li>\n<li>如果使用普通用户启动 Nginx, 需要先执行下面的命令来突破上面的限制:</li>\n</ul>\n<pre><code>sudo setcap cap_net_bind_service=+eip /usr/local/webserver/nginx\n</code></pre>\n</blockquote>\n<ul>\n<li>查看 Nginx 进程</li>\n</ul>\n<p>![1594748930149](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saWFuLXpwLm9zcy1jbi1zaGVuemhlbi5hbGl5dW5jcy5jb20vcGlj\">https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic</span> GO/20200719233543.png)</p>\n<p>通过网页访问: <span class=\"exturl\" data-url=\"aHR0cDovL2hhZG9vcDEwOQ==\">http://hadoop109</span></p>\n<p>![1594748945767](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saWFuLXpwLm9zcy1jbi1zaGVuemhlbi5hbGl5dW5jcy5jb20vcGlj\">https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic</span> GO/20200719233548.png)</p>\n<h3 id=\"53-配置负载均衡\"><a class=\"anchor\" href=\"#53-配置负载均衡\">#</a> 5.3 配置负载均衡</h3>\n<h4 id=\"531-nginx配置修改\"><a class=\"anchor\" href=\"#531-nginx配置修改\">#</a> 5.3.1 Nginx 配置修改</h4>\n<ul>\n<li>修改 /usr/local/webserver/nginx/conf/nginx.conf</li>\n</ul>\n<figure class=\"highlight properties\"><figcaption data-lang=\".properties\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token attr-name\">http</span> <span class=\"token attr-value\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    .....</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">    # 配置上游服务器：其实就被代理的服务器，springboot</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token attr-name\">    upstream</span> <span class=\"token attr-value\">logserver&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token attr-name\">        server</span> <span class=\"token attr-value\">hadoop109:8081 weight=1;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token attr-name\">        server</span> <span class=\"token attr-value\">hadoop110:8081 weight=1;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token attr-name\">        server</span> <span class=\"token attr-value\">hadoop111:8081 weight=1;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    &#125;</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token attr-name\">    server</span> <span class=\"token attr-value\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token attr-name\">        listen</span> <span class=\"token attr-value\">      80;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token attr-name\">        server_name</span> <span class=\"token attr-value\"> logserver;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token attr-name\">        location</span> <span class=\"token attr-value\">/ &#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token attr-name\">            root</span> <span class=\"token attr-value\">  html;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token attr-name\">            index</span> <span class=\"token attr-value\"> index.html index.htm;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">            # 配置代理</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token attr-name\">            proxy_pass</span> <span class=\"token attr-value\">http://logserver;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token attr-name\">            proxy_connect_timeout</span> <span class=\"token attr-value\">10;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        &#125;</pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        ...</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    &#125;</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>&#125;</pre></td></tr></table></figure><blockquote>\n<p><strong>Q：为什么不配置日志服务器端口为 8080</strong></p>\n<p>在 kafka 启动消费数据前要先打开 zookeeper 集群，在 zookeeper3.5.0 之后的版本中，集群打开后会默认占用 8080 端口</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>atguigu@hadoop109 module<span class=\"token punctuation\">]</span>$ jps</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">13317</span> Jps</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">13229</span> QuorumPeerMain</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">[</span>atguigu@hadoop109 module<span class=\"token punctuation\">]</span>$ <span class=\"token function\">netstat</span> -tunlp <span class=\"token operator\">|</span><span class=\"token function\">grep</span> <span class=\"token number\">8080</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">(</span>Not all processes could be identified, non-owned process info</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> will not be shown, you would have to be root to see it all.<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>tcp6       <span class=\"token number\">0</span>      <span class=\"token number\">0</span> :::8080                 :::*                    LISTEN      <span class=\"token number\">13229</span>/java</pre></td></tr></table></figure><p>通过观察日志可以发现确实启动了一个叫 adminServer 的服务</p>\n<p>![1594749317598](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saWFuLXpwLm9zcy1jbi1zaGVuemhlbi5hbGl5dW5jcy5jb20vcGlj\">https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic</span> GO/20200719233556.png)</p>\n<p>这是一个内嵌的 jetty 服务。如果想在 zookeeper 上解决这个问题，有以下三种方法</p>\n<pre><code>（1）.删除jetty。\n（2）修改端口。\n修改方法的方法有两种，一种是在启动脚本中增加 -Dzookeeper.admin.serverPort=你的端口号.一种是在zoo.cfg中增加admin.serverPort=没有被占用的端口号\n（3）停用这个服务，在启动脚本中增加”-Dzookeeper.admin.enableServer=false”\n</code></pre>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">netstat</span> -tunlp<span class=\"token operator\">|</span><span class=\"token function\">grep</span> 端口号 查看占用端口的进程</pre></td></tr></table></figure></blockquote>\n<h4 id=\"532-日志采集服务器群起脚本制作\"><a class=\"anchor\" href=\"#532-日志采集服务器群起脚本制作\">#</a> 5.3.2 日志采集服务器群起脚本制作</h4>\n<p>分别在 3 个节点启动 jar 比较麻烦，制作统一启动脚本.</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token shebang important\">#!/bin/bash</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">case</span> <span class=\"token variable\">$1</span> <span class=\"token keyword\">in</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token string\">\"start\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token for-or-select variable\">i</span> <span class=\"token keyword\">in</span> hadoop201 hadoop202 hadoop203</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">do</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"========启动日志服务: <span class=\"token variable\">$i</span>===============\"</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token function\">ssh</span> <span class=\"token variable\">$i</span>  <span class=\"token string\">\"source /etc/profile ; java -jar /opt/module/gmall/gmall-logger-1.0-SNAPSHOT.jar >/dev/null 2>&amp;1  &amp;\"</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">done</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>     <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token string\">\"stop\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token for-or-select variable\">i</span> <span class=\"token keyword\">in</span> hadoop201 hadoop202 hadoop203</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">do</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"========关闭日志服务: <span class=\"token variable\">$i</span>===============\"</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token function\">ssh</span> <span class=\"token variable\">$i</span> <span class=\"token string\">\"ps -ef|grep gmall-logger-1.0-SNAPSHOT.jar | grep -v grep|awk '&#123;print \\<span class=\"token variable\">$2</span>&#125;'|xargs kill\"</span> <span class=\"token operator\">></span>/dev/null <span class=\"token operator\"><span class=\"token file-descriptor important\">2</span>></span><span class=\"token file-descriptor important\">&amp;1</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">done</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    *<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token builtin class-name\">echo</span> 启动姿势不对, 请使用参数 start 启动日志服务, 使用参数 stop 停止服务</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">esac</span></pre></td></tr></table></figure><h4 id=\"533-其他操作\"><a class=\"anchor\" href=\"#533-其他操作\">#</a> 5.3.3 其他操作</h4>\n<ul>\n<li>分发启动采集服务器 jar 包到其余设备</li>\n<li>给编写好的脚本增加执行权限</li>\n<li>启动 Nginx</li>\n<li>启动脚本</li>\n</ul>\n<blockquote>\n<p>脚本编写的注意事项：</p>\n<p>如果在 windows 环境下编写脚本后复制到 linux 系统中出现如下报错：</p>\n<pre><code>bad interpreter:\n/bin/bash^M: no such file or directory\n</code></pre>\n<p>是因为在 window 下写的脚本回车的时候使用的是 \\r\\n, 而在 linux 使用 \\n 就可以了，所在每行的末尾多了一个 \\r.</p>\n<p>使用下面的命令去掉行尾的 \\r:</p>\n<pre><code>sed -i -e 's/\\r$//' gmall_cluster\n</code></pre>\n</blockquote>\n<ul>\n<li>测试日志生成能否在集群中生成落盘日志与控制台打印</li>\n</ul>\n<hr />\n<h2 id=\"六-实时处理部分-sparkstreaming重要\"><a class=\"anchor\" href=\"#六-实时处理部分-sparkstreaming重要\">#</a> 六、实时处理部分 -- SparkStreaming（重要）</h2>\n<p>![1594749834377](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saWFuLXpwLm9zcy1jbi1zaGVuemhlbi5hbGl5dW5jcy5jb20vcGlj\">https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic</span> GO/20200719233605.png)</p>\n<h3 id=\"61-日活指标分析\"><a class=\"anchor\" href=\"#61-日活指标分析\">#</a> 6.1 日活指标分析</h3>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 1. 什么叫日活</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token number\">1.</span> 通常: 打开应用的用户即为活跃用户，不考虑用户的使用情况。每天一台设备打开多次会被计为一个活跃用户。</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token number\">2.</span> 游戏用户: 每天打开<span class=\"token operator\">/</span>登录游戏的用户数（针对游戏DAU的定义）</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">-- 2. 需求：当日活跃用户及分时趋势图，昨日对比图</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">-- 3. 思路： </span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token number\">1.</span> 使用sparkSteaming动态读取kafka中的数据</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token number\">2.</span> 获取数据以后，对数据进行处理：</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>         a、</pre></td></tr></table></figure><p>什么叫日活:</p>\n<ol>\n<li></li>\n</ol>\n<p>我们采用第一种日活的定义，日活 (DAU) 统计思路:</p>\n<ol>\n<li>\n<p>从 kafka 读取用户启动日志</p>\n</li>\n<li>\n<p>当天只保留用户的第一次启动记录，过滤掉其他启动记录：借助于 Redis</p>\n</li>\n<li>\n<p>然后把第一次启动记录保存在 hbase 以供其他应用查询</p>\n</li>\n</ol>\n<p><strong>整体思路：</strong></p>\n<p>![1594750032810](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saWFuLXpwLm9zcy1jbi1zaGVuemhlbi5hbGl5dW5jcy5jb20vcGlj\">https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic</span> GO/20200719233611.png)</p>\n<h3 id=\"62-实时处理模块的创建\"><a class=\"anchor\" href=\"#62-实时处理模块的创建\">#</a> 6.2 实时处理模块的创建</h3>\n<p>作用：实现具体需求</p>\n<p>模块名：mall-realtime</p>\n<h4 id=\"依赖导入\"><a class=\"anchor\" href=\"#依赖导入\">#</a> 依赖导入</h4>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>project</span> <span class=\"token attr-name\">xmlns</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://maven.apache.org/POM/4.0.0<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>         <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>xsi</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.w3.org/2001/XMLSchema-instance<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>         <span class=\"token attr-name\"><span class=\"token namespace\">xsi:</span>schemaLocation</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>parent</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>realtime-gmall<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.orange.lin<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>1.0-SNAPSHOT<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>parent</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>modelVersion</span><span class=\"token punctuation\">></span></span>4.0.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>modelVersion</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.orange.lin<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>gmall-realtime<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>1.0-SNAPSHOT<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependencies</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.orange.lin<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>gmall-common<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>1.0-SNAPSHOT<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.apache.spark<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spark-core_2.12<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.apache.spark<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spark-streaming_2.12<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.apache.spark<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spark-streaming-kafka-0-10_2.12<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>redis.clients<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>jedis<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>2.9.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.apache.phoenix<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>phoenix-spark<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>5.0.0-HBase-2.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependencies</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>build</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>plugins</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>            <span class=\"token comment\">&lt;!-- 用于项目的打包插件 --></span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>plugin</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>maven-assembly-plugin<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>configuration</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>descriptorRefs</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>                        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>descriptorRef</span><span class=\"token punctuation\">></span></span>jar-with-dependencies<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>descriptorRef</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>descriptorRefs</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>configuration</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>executions</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>execution</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>                        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>id</span><span class=\"token punctuation\">></span></span>make-assembly<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>id</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>                        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>phase</span><span class=\"token punctuation\">></span></span>package<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>phase</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>                        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>goals</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>                            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>goal</span><span class=\"token punctuation\">></span></span>single<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>goal</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>                        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>goals</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>execution</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>executions</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>plugin</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>plugins</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>build</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre></pre></td></tr><tr><td data-num=\"70\"></td><td><pre></pre></td></tr><tr><td data-num=\"71\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>project</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h3 id=\"63-从kafka中消费数据\"><a class=\"anchor\" href=\"#63-从kafka中消费数据\">#</a> 6.3 从 Kafka 中消费数据</h3>\n<h4 id=\"631-配置\"><a class=\"anchor\" href=\"#631-配置\">#</a> 6.3.1 配置</h4>\n<figure class=\"highlight properties\"><figcaption data-lang=\".properties\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token attr-name\">kafka.servers</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">hadoop102:9092,hadoop103:9092,hadoop104:9092</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token attr-name\">group.id</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">bigdata</span></pre></td></tr></table></figure><blockquote>\n<p>kafka 的配置转移到配置文件，不采用硬编码</p>\n<p><code>kafka.servers</code>  配置该项时，赋值给 <code>bootstrap.servers</code> ，用以指明 kafka 集群的服务器地址，此外还有一种旧版的写法如下：</p>\n<figure class=\"highlight properties\"><figcaption data-lang=\".properties\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token attr-name\">kafka.broker.list</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">hadoop102:9092,hadoop103:9092,hadoop104:9092</span></pre></td></tr></table></figure><p>0.8 以前的 kafka，消费的进度 (offset) 是写在 zk 中的，所以 consumer 需要知道 zk 的地址。这个方案有性能问题，0.9 的时候整体大改了一次，brokers 接管了消费进度，consumer 不再需要和 zookeeper 通信了，所以就用 bootstrap-server 了。</p>\n<p>![1594815191018](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saWFuLXpwLm9zcy1jbi1zaGVuemhlbi5hbGl5dW5jcy5jb20vcGlj\">https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic</span> GO/20200719233620.png)</p>\n</blockquote>\n<h4 id=\"532-消费kafka工具类的编写\"><a class=\"anchor\" href=\"#532-消费kafka工具类的编写\">#</a> 5.3.2 消费 Kafka 工具类的编写</h4>\n<h5 id=\"读取配置\"><a class=\"anchor\" href=\"#读取配置\">#</a> 读取配置</h5>\n<figure class=\"highlight scala\"><figcaption data-lang=\"scala\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>orange<span class=\"token punctuation\">.</span>lin<span class=\"token punctuation\">.</span>util</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span>InputStream</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span>Properties</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * @Description:</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> * @author oranglzc</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> * @creat 2020-07-15-8:50</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">object</span> ConfigUtil <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> is<span class=\"token operator\">:</span> InputStream <span class=\"token operator\">=</span> ClassLoader<span class=\"token punctuation\">.</span>getSystemResourceAsStream<span class=\"token punctuation\">(</span><span class=\"token string\">\"config.properties\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> properties <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> Properties<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  properties<span class=\"token punctuation\">.</span>load<span class=\"token punctuation\">(</span>is<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token keyword\">def</span> getProperty<span class=\"token punctuation\">(</span>fileName<span class=\"token operator\">:</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span>name<span class=\"token operator\">:</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    properties<span class=\"token punctuation\">.</span>getProperty<span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token keyword\">def</span> main<span class=\"token punctuation\">(</span>args<span class=\"token operator\">:</span> Array<span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Unit</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    println<span class=\"token punctuation\">(</span>getProperty<span class=\"token punctuation\">(</span><span class=\"token string\">\"config.properties\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"bootstrap.servers\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h5 id=\"消费kafka数据\"><a class=\"anchor\" href=\"#消费kafka数据\">#</a> 消费 kafka 数据</h5>\n<p>采用 Direct 方式消费 kafka 数据，目前 receiver 方式已经过时</p>\n<figure class=\"highlight scala\"><figcaption data-lang=\"scala\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>orange<span class=\"token punctuation\">.</span>lin<span class=\"token punctuation\">.</span>util</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>kafka<span class=\"token punctuation\">.</span>common<span class=\"token punctuation\">.</span>serialization<span class=\"token punctuation\">.</span></span>StringDeserializer</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>spark<span class=\"token punctuation\">.</span>streaming<span class=\"token punctuation\">.</span></span>StreamingContext</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>spark<span class=\"token punctuation\">.</span>streaming<span class=\"token punctuation\">.</span>kafka010<span class=\"token punctuation\">.</span></span>KafkaUtils</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>spark<span class=\"token punctuation\">.</span>streaming<span class=\"token punctuation\">.</span>kafka010<span class=\"token punctuation\">.</span></span>LocationStrategies<span class=\"token punctuation\">.</span>PreferConsistent</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>spark<span class=\"token punctuation\">.</span>streaming<span class=\"token punctuation\">.</span>kafka010<span class=\"token punctuation\">.</span></span>ConsumerStrategies<span class=\"token punctuation\">.</span>Subscribe</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> * @Description:</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> * @author oranglzc</pre></td></tr><tr><td data-num=\"12\"></td><td><pre> * @creat 2020-07-14-19:20</pre></td></tr><tr><td data-num=\"13\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">object</span> MyKafkaUtil <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token keyword\">val</span> kafkaParams<span class=\"token operator\">:</span>Map<span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span>Object<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>Map<span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span>Object<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token string\">\"bootstrap.servers\"</span><span class=\"token operator\">-></span>ConfigUtil<span class=\"token punctuation\">.</span>getProperty<span class=\"token punctuation\">(</span><span class=\"token string\">\"config.properties\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"bootstrap.servers\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token string\">\"key.deserializer\"</span> <span class=\"token operator\">-></span> classOf<span class=\"token punctuation\">[</span>StringDeserializer<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token string\">\"value.deserializer\"</span> <span class=\"token operator\">-></span> classOf<span class=\"token punctuation\">[</span>StringDeserializer<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token string\">\"group.id\"</span><span class=\"token operator\">-></span>ConfigUtil<span class=\"token punctuation\">.</span>getProperty<span class=\"token punctuation\">(</span><span class=\"token string\">\"config.properties\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"group.id\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token string\">\"auto.offset.reset\"</span><span class=\"token operator\">-></span><span class=\"token string\">\"latest\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token string\">\"enable.auto.commit\"</span><span class=\"token operator\">-></span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token operator\">:</span>java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span><span class=\"token builtin\">Boolean</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  <span class=\"token keyword\">def</span> getKafkaStream<span class=\"token punctuation\">(</span>ssc<span class=\"token operator\">:</span>StreamingContext<span class=\"token punctuation\">,</span>topic<span class=\"token operator\">:</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    KafkaUtils<span class=\"token punctuation\">.</span>createDirectStream<span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>      ssc<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>      PreferConsistent<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 标配</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>      <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>      LocationStrategies</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        preferConsistent: 平均分配，每个分区的数据量平均</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        PreferBroker: 如果 kafka 和 executor 都在同一台设备，使用 PreferBroker，（不需要网络传输）</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        PreferFixed：有数据倾斜时需要选这个</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>       */</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>      Subscribe<span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>Set<span class=\"token punctuation\">(</span>topic<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> kafkaParams<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>map<span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p><strong>Q：receiver 和 Direct 两种消费 kafka 数据的区别</strong></p>\n<p>Receiver 接收方式：</p>\n<p>方法： <code>KafkaUtils.createDstream</code></p>\n<p>Receiver 作为常驻的 Task 运行在 Executor 等待数据，但是一个 Receiver 效率低，需要开启多个，再手动合并数据 (union)，再进行处理，很麻烦<br />\n Receiver 哪台机器挂了，可能会丢失数据，所以需要开启 WAL (预写日志) 保证数据安全，那么效率又会降低！<br />\nReceiver 方式是通过 zookeeper 来连接 kafka 队列，调用 Kafka 高阶 API，offset 存储在 zookeeper，由 Receiver 维护。<br />\nspark 在消费的时候为了保证数据不丢也会在 Checkpoint 中存一份 offset，可能会出现数据不一致<br />\n所以不管从何种角度来说，Receiver 模式都不适合在开发中使用了，已经淘汰了</p>\n<p>Direct 直连方式：</p>\n<p>方法： <code>KafkaUtils.createDirectStream</code></p>\n<p>Direct 方式是直接连接 kafka 分区来获取数据，从每个分区直接读取数据大大提高了并行能力<br />\n Direct 方式调用 Kafka 低阶 API (底层 API)，offset 自己存储和维护，默认由 Spark 维护在 checkpoint 中，消除了与 zk 不一致的情况<br />\n当然也可以自己手动维护，把 offset 存在 mysql、redis 中<br />\n所以基于 Direct 模式可以在开发中使用，且借助 Direct 模式的特点 + 手动操作可以保证数据的 Exactly once 精准一次</p>\n<p><strong>总结：</strong></p>\n<p><strong>Receiver 接收方式</strong><br />\n多个 Receiver 接受数据效率高，但有丢失数据的风险<br />\n开启日志（WAL）可防止数据丢失，但写两遍数据效率低。<br />\nZookeeper 维护 offset 有重复消费数据可能。<br />\n使用高层次的 API<br />\n<strong>Direct 直连方式</strong><br />\n不使用 Receiver，直接到 kafka 分区中读取数据<br />\n不使用日志（WAL）机制<br />\n Spark 自己维护 offset<br />\n 使用低层次的 API</p>\n</blockquote>\n<h3 id=\"64-流的获取与数据结构调整\"><a class=\"anchor\" href=\"#64-流的获取与数据结构调整\">#</a> 6.4 流的获取与数据结构调整</h3>\n<p>目的：从 kafka 消费得到的日志数据为 json 字符串，需要转换为结构化的 json 对象</p>\n<h4 id=\"641-样例类生成\"><a class=\"anchor\" href=\"#641-样例类生成\">#</a> 6.4.1 样例类生成</h4>\n<figure class=\"highlight scala\"><figcaption data-lang=\"scala\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>orange<span class=\"token punctuation\">.</span>lin<span class=\"token punctuation\">.</span>bean</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">.</span></span>SimpleDateFormat</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span>Date</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * @Description:</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> * @author oranglzc</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> * @creat 2020-07-15-11:24</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">case</span> <span class=\"token keyword\">class</span> StartupLog<span class=\"token punctuation\">(</span>mid<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                      uid<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                      appId<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                      area<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                      os<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                      channel<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                      logType<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                      version<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                      ts<span class=\"token operator\">:</span> <span class=\"token builtin\">Long</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                      <span class=\"token keyword\">var</span> logDate<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>   <span class=\"token comment\">// 年月日  2020-07-15</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                      <span class=\"token keyword\">var</span> logHour<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\">// 小时  10</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> date <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> Date<span class=\"token punctuation\">(</span>ts<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  logDate <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> SimpleDateFormat<span class=\"token punctuation\">(</span><span class=\"token string\">\"yyyy-MM-dd\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>format<span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  logHour <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> SimpleDateFormat<span class=\"token punctuation\">(</span><span class=\"token string\">\"HH\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>format<span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>Q: 为什么 logDate 和 logHour 声明为 var，且先赋值为 null</p>\n<p>时间数据需要通过日志的 ts 时间戳转化得到，无法直接通过 json 字符串转化得到，需要在构造函数时通过获取的 ts 时间戳来进行格式化</p>\n</blockquote>\n<h4 id=\"642-流的获取与转化\"><a class=\"anchor\" href=\"#642-流的获取与转化\">#</a> 6.4.2 流的获取与转化</h4>\n<figure class=\"highlight scala\"><figcaption data-lang=\"scala\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>orange<span class=\"token punctuation\">.</span>lin<span class=\"token punctuation\">.</span>app</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @Description:</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @author oranglzc</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * @creat 2020-07-14-19:16</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">object</span> DauApp <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token comment\">// 实现处理模块</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token keyword\">def</span> main<span class=\"token punctuation\">(</span>args<span class=\"token operator\">:</span> Array<span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Unit</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">//TODO 1. 创建 StreamingContext</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">val</span> sparkConf<span class=\"token operator\">:</span> SparkConf <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> SparkConf<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>setMaster<span class=\"token punctuation\">(</span><span class=\"token string\">\"local[2]\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>setAppName<span class=\"token punctuation\">(</span><span class=\"token string\">\"DauApp\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">val</span> ssc <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> StreamingContext<span class=\"token punctuation\">(</span>sparkConf<span class=\"token punctuation\">,</span> Seconds<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token comment\">//TODO 2. 获取流</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">val</span> sourceStream<span class=\"token operator\">:</span> DStream<span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> MyKafkaUtil<span class=\"token punctuation\">.</span>getKafkaStream<span class=\"token punctuation\">(</span>ssc<span class=\"token punctuation\">,</span> Constant<span class=\"token punctuation\">.</span>STARTUP_TOPIC<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token comment\">// 2.1 把每个 json 字符串的数据，父封装到一个样例类对象中</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">val</span> startupLogStream<span class=\"token operator\">:</span> DStream<span class=\"token punctuation\">[</span>StartupLog<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> sourceStream<span class=\"token punctuation\">.</span>map<span class=\"token punctuation\">(</span>json <span class=\"token keyword\">=></span> JSON<span class=\"token punctuation\">.</span>parseObject<span class=\"token punctuation\">(</span>json<span class=\"token punctuation\">,</span> classOf<span class=\"token punctuation\">[</span>StartupLog<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>使用 sparkStream 至少需要 2 个核心，一个是采集器 executor 另一个是 driver</p>\n</blockquote>\n<h3 id=\"65-数据流的清洗与过滤\"><a class=\"anchor\" href=\"#65-数据流的清洗与过滤\">#</a> 6.5 数据流的清洗与过滤</h3>\n<h4 id=\"651-日活业务的思路分析\"><a class=\"anchor\" href=\"#651-日活业务的思路分析\">#</a> 6.5.1 日活业务的思路分析</h4>\n<p>日活定义：当天内有活跃的设备<br />\n需要考虑的点：当天同一台设备多次登录 --&gt; 去重</p>\n<p>sparkstreaming 处理数据是一个批次一个批次处理的，如果使用 filter 直接去重，那么无法过滤整天的数据。会导致数据错误，其次去重要考虑批次问题。</p>\n<h5 id=\"跨批次去重\"><a class=\"anchor\" href=\"#跨批次去重\">#</a> 跨批次去重</h5>\n<ul>\n<li>方式一：updateStateByKey</li>\n</ul>\n<p>作用说明：用于记录历史记录，给定一个由 (键，事件) 对构成的 DStream，并传递一个指定如何根据新的事件更新每个键对应状态的函数，它可以构建出一个新的 DStream，其内部数据为 (键，状态) 对</p>\n<blockquote>\n<p>注意：使用 updateStateByKey 需要对检查点目录进行配置，会使用检查点来保存临时状态。</p>\n<p>![1594864315561](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saWFuLXpwLm9zcy1jbi1zaGVuemhlbi5hbGl5dW5jcy5jb20vcGlj\">https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic</span> GO/20200719233636.png)</p>\n<p>使用 updateStateByKey 虽然可以实现状态的更新，但是使用有状态转换涉及到 checkpoint 的设置，需要使用 HDFS 来进行分布式存储，不同批次的用户数据都会存在于 HDFS 中，导致 HDFS 小文件过多</p>\n</blockquote>\n<ul>\n<li>方式二：黑名单</li>\n</ul>\n<blockquote>\n<p>黑名单方式需要利用外部存储结构，如 MySQL、Redis</p>\n<p>MySQL 的响应比较慢，此外对于日活的数据的统计更关注的是当天的情况，之前的数据没有保留的必要，redis 有过期数据的方式可以自动删除无用数据，MySQL 需要自己创建程序来周期型的删除，比较麻烦</p>\n<p>使用 redis 的方式效率更好，响应速度更快</p>\n<p><strong>本次案例选用 redis</strong></p>\n</blockquote>\n<h5 id=\"redis过滤机制的构建\"><a class=\"anchor\" href=\"#redis过滤机制的构建\">#</a> redis 过滤机制的构建</h5>\n<ul>\n<li>创建 Redis 客户端的位置</li>\n</ul>\n<p>![1594865818206](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saWFuLXpwLm9zcy1jbi1zaGVuemhlbi5hbGl5dW5jcy5jb20vcGlj\">https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic</span> GO/20200719233644.png)</p>\n<blockquote>\n<p>分析：</p>\n<p><strong>客户端的创建如果放在位置 1：</strong></p>\n<p>程序无法执行，原因是数据库对象的连接一般都是安全连接，表示客户端与服务端建立的信任关系，如果把数据库对象序列化后交给别的 executor 执行，这种操作就不是安全操作了。</p>\n<p><strong>客户端的创建如果放在位置 3：</strong></p>\n<p>当把客户端连接放在该位置时，每个 RDD 的操作都会创建连接，导致性能严重下降</p>\n<p><strong>综上，选择位置 2，该位置每个批次的数据获取一个连接对象进行黑名单判定</strong></p>\n</blockquote>\n<p>当选择位置 2 作为创建客户端的操作时，就表示要将按批次处理的 DStream 转换为单个 RDD 来进行操作，因此需要选择 transform 转换因子</p>\n<blockquote>\n<p>如果直接对 Dstream 使用 map、filter 转换算子，那么客户端创建的位置选择只有 1 和 3。</p>\n</blockquote>\n<h5 id=\"同批次去重\"><a class=\"anchor\" href=\"#同批次去重\">#</a> 同批次去重</h5>\n<ul>\n<li>同一批次的跨天问题</li>\n</ul>\n<p>以 15 号为例，该批次横跨了 15 号和 16 号，某一条数据流过来后，是拿 16 号的黑名单列表来判定该数据是否应该被过滤，当 16 号的黑名单数据没有相应设备 id 时，这一批次的数据无法过滤</p>\n<ul>\n<li>在设备的首次启动时，如果同一个批次有设备的多次启动记录，则无法过滤</li>\n</ul>\n<blockquote>\n<p>使用 group by 按设备 id 分组后，按时间排序取最新的数据的方式过滤</p>\n</blockquote>\n<h5 id=\"整体去重思路\"><a class=\"anchor\" href=\"#整体去重思路\">#</a> 整体去重思路</h5>\n<p>![1594870909711](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saWFuLXpwLm9zcy1jbi1zaGVuemhlbi5hbGl5dW5jcy5jb20vcGlj\">https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic</span> GO/20200719233733.png)</p>\n<h4 id=\"652-代码实现\"><a class=\"anchor\" href=\"#652-代码实现\">#</a> 6.5.2 代码实现</h4>\n<h5 id=\"redis客户端工具类的编写\"><a class=\"anchor\" href=\"#redis客户端工具类的编写\">#</a> Redis 客户端工具类的编写</h5>\n<figure class=\"highlight scala\"><figcaption data-lang=\"scala\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>orange<span class=\"token punctuation\">.</span>lin<span class=\"token punctuation\">.</span>util</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">redis<span class=\"token punctuation\">.</span>clients<span class=\"token punctuation\">.</span>jedis<span class=\"token punctuation\">.</span></span><span class=\"token punctuation\">&#123;</span>JedisPool<span class=\"token punctuation\">,</span> JedisPoolConfig<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @Description:</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * @author oranglzc</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> * @creat 2020-07-15-11:31</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">object</span> RedisUtil <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token keyword\">val</span> conf <span class=\"token operator\">=</span><span class=\"token keyword\">new</span> JedisPoolConfig</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  conf<span class=\"token punctuation\">.</span>setMaxTotal<span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  conf<span class=\"token punctuation\">.</span>setMaxIdle<span class=\"token punctuation\">(</span><span class=\"token number\">30</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  conf<span class=\"token punctuation\">.</span>setMinIdle<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  conf<span class=\"token punctuation\">.</span>setBlockWhenExhausted<span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  conf<span class=\"token punctuation\">.</span>setMaxWaitMillis<span class=\"token punctuation\">(</span><span class=\"token number\">10000</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  conf<span class=\"token punctuation\">.</span>setTestOnCreate<span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  conf<span class=\"token punctuation\">.</span>setTestOnBorrow<span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  conf<span class=\"token punctuation\">.</span>setTestOnReturn<span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token keyword\">val</span> pool<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> JedisPool<span class=\"token punctuation\">(</span>conf<span class=\"token punctuation\">,</span><span class=\"token string\">\"hadoop109\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">8000</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token keyword\">def</span> getClient<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    pool<span class=\"token punctuation\">.</span>getResource</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token comment\">// 测试</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  <span class=\"token keyword\">def</span> main<span class=\"token punctuation\">(</span>args<span class=\"token operator\">:</span> Array<span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Unit</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">val</span> client<span class=\"token operator\">=</span>getClient<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    client<span class=\"token punctuation\">.</span>set<span class=\"token punctuation\">(</span><span class=\"token string\">\"k2\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"redis\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    client<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>使用从线程池获取连接的方式</p>\n<p>注意：主机名和端口号实际上应该通过配置文件编写，否则端口和主机名会被写死</p>\n</blockquote>\n<h5 id=\"redis的kv键值设计\"><a class=\"anchor\" href=\"#redis的kv键值设计\">#</a> Redis 的 KV 键值设计</h5>\n<table>\n<thead>\n<tr>\n<th><strong>key</strong></th>\n<th><strong>value</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>dau:2019-01-22</strong></td>\n<td>设备 id</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>redis 只需要对设备 id 进行判断，因为数据判断按天统计指标，需要加上时间，时间为设备启动日志的时间，Dau 为启动日志的主题名称</p>\n</blockquote>\n<h5 id=\"去重代码实现\"><a class=\"anchor\" href=\"#去重代码实现\">#</a> 去重代码实现</h5>\n<figure class=\"highlight scala\"><figcaption data-lang=\"scala\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>orange<span class=\"token punctuation\">.</span>lin<span class=\"token punctuation\">.</span>app</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">.</span></span>SimpleDateFormat</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span>Date</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>alibaba<span class=\"token punctuation\">.</span>fastjson<span class=\"token punctuation\">.</span></span>JSON</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>orange<span class=\"token punctuation\">.</span>lin<span class=\"token punctuation\">.</span></span>Constant</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>orange<span class=\"token punctuation\">.</span>lin<span class=\"token punctuation\">.</span>bean<span class=\"token punctuation\">.</span></span>StartupLog</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>orange<span class=\"token punctuation\">.</span>lin<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token punctuation\">&#123;</span>MyKafkaUtil<span class=\"token punctuation\">,</span> RedisUtil<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>spark<span class=\"token punctuation\">.</span></span><span class=\"token punctuation\">&#123;</span>SparkConf<span class=\"token punctuation\">,</span> rdd<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>spark<span class=\"token punctuation\">.</span>broadcast<span class=\"token punctuation\">.</span></span>Broadcast</pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>spark<span class=\"token punctuation\">.</span>streaming<span class=\"token punctuation\">.</span>dstream<span class=\"token punctuation\">.</span></span>DStream</pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>spark<span class=\"token punctuation\">.</span>streaming<span class=\"token punctuation\">.</span></span><span class=\"token punctuation\">&#123;</span>Seconds<span class=\"token punctuation\">,</span> StreamingContext<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">redis<span class=\"token punctuation\">.</span>clients<span class=\"token punctuation\">.</span>jedis<span class=\"token punctuation\">.</span></span>Jedis</pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"18\"></td><td><pre> * @Description:</pre></td></tr><tr><td data-num=\"19\"></td><td><pre> * @author oranglzc</pre></td></tr><tr><td data-num=\"20\"></td><td><pre> * @creat 2020-07-14-19:16</pre></td></tr><tr><td data-num=\"21\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">object</span> DauApp <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  <span class=\"token comment\">// 实现处理模块</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  <span class=\"token keyword\">def</span> main<span class=\"token punctuation\">(</span>args<span class=\"token operator\">:</span> Array<span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Unit</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token comment\">//TODO 1. 创建 StreamingContext</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">val</span> sparkConf<span class=\"token operator\">:</span> SparkConf <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> SparkConf<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>setMaster<span class=\"token punctuation\">(</span><span class=\"token string\">\"local[2]\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>setAppName<span class=\"token punctuation\">(</span><span class=\"token string\">\"DauApp\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">val</span> ssc <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> StreamingContext<span class=\"token punctuation\">(</span>sparkConf<span class=\"token punctuation\">,</span> Seconds<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token comment\">//TODO 2. 获取流</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token keyword\">val</span> sourceStream<span class=\"token operator\">:</span> DStream<span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> MyKafkaUtil<span class=\"token punctuation\">.</span>getKafkaStream<span class=\"token punctuation\">(</span>ssc<span class=\"token punctuation\">,</span> Constant<span class=\"token punctuation\">.</span>STARTUP_TOPIC<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token comment\">// 2.1 把每个 json 字符串的数据，父封装到一个样例类对象中</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token keyword\">val</span> startupLogStream<span class=\"token operator\">:</span> DStream<span class=\"token punctuation\">[</span>StartupLog<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> sourceStream<span class=\"token punctuation\">.</span>map<span class=\"token punctuation\">(</span>json <span class=\"token keyword\">=></span> JSON<span class=\"token punctuation\">.</span>parseObject<span class=\"token punctuation\">(</span>json<span class=\"token punctuation\">,</span> classOf<span class=\"token punctuation\">[</span>StartupLog<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token comment\">//TODO 3. 去重  过滤掉一件启动的那些设备的记录  从 redis 去读取已经启动过的设备的 id</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token comment\">//TODO=============</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token keyword\">val</span> filteredStartupLogStream<span class=\"token operator\">:</span> DStream<span class=\"token punctuation\">[</span>StartupLog<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> startupLogStream<span class=\"token punctuation\">.</span>transform<span class=\"token punctuation\">(</span>rdd <span class=\"token keyword\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>      <span class=\"token keyword\">val</span> client<span class=\"token operator\">:</span> Jedis <span class=\"token operator\">=</span> RedisUtil<span class=\"token punctuation\">.</span>getClient<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>      <span class=\"token keyword\">val</span> mids<span class=\"token operator\">:</span> util<span class=\"token punctuation\">.</span>Set<span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> client<span class=\"token punctuation\">.</span>smembers<span class=\"token punctuation\">(</span>Constant<span class=\"token punctuation\">.</span>STARTUP_TOPIC <span class=\"token operator\">+</span> <span class=\"token string\">\":\"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">new</span> SimpleDateFormat<span class=\"token punctuation\">(</span><span class=\"token string\">\"yyyy-MM-dd\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>format<span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> Date<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>      client<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>      <span class=\"token keyword\">val</span> midsBD<span class=\"token operator\">:</span> Broadcast<span class=\"token punctuation\">[</span>util<span class=\"token punctuation\">.</span>Set<span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> ssc<span class=\"token punctuation\">.</span>sparkContext<span class=\"token punctuation\">.</span>broadcast<span class=\"token punctuation\">(</span>mids<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>      <span class=\"token comment\">// 条件成立则保留，不成立则过滤</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>      rdd</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token punctuation\">.</span>filter<span class=\"token punctuation\">(</span>StartupLog <span class=\"token keyword\">=></span> <span class=\"token operator\">!</span>midsBD<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">.</span>contains<span class=\"token punctuation\">(</span>StartupLog<span class=\"token punctuation\">.</span>mid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token punctuation\">.</span>map<span class=\"token punctuation\">(</span>log <span class=\"token keyword\">=></span> <span class=\"token punctuation\">(</span>log<span class=\"token punctuation\">.</span>mid<span class=\"token punctuation\">,</span> log<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token punctuation\">.</span>groupByKey<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token punctuation\">.</span>map <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>          <span class=\"token keyword\">case</span> <span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">,</span> logs<span class=\"token punctuation\">)</span> <span class=\"token keyword\">=></span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>            logs<span class=\"token punctuation\">.</span>toList<span class=\"token punctuation\">.</span>sortBy<span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">.</span>ts<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>head</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token comment\">//TODO 3. 开启流</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    ssc<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    <span class=\"token comment\">//TODO 4. 阻止 main 进程退出</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    ssc<span class=\"token punctuation\">.</span>awaitTermination<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre></pre></td></tr><tr><td data-num=\"63\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"66-保存到hbase与加入过滤用黑名单\"><a class=\"anchor\" href=\"#66-保存到hbase与加入过滤用黑名单\">#</a> 6.6 保存到 HBase 与加入过滤用黑名单</h3>\n<blockquote>\n<p>使用 Phoenix 对 HBase 进行 SQL 化操作</p>\n</blockquote>\n<h4 id=\"661-建表\"><a class=\"anchor\" href=\"#661-建表\">#</a> 6.6.1 建表</h4>\n<ul>\n<li>Phoenix 登录</li>\n</ul>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>/opt/module/phoenix/bin/sqlline.py hadoop109,hadoop110,hadoop111:2181</pre></td></tr></table></figure><ul>\n<li>建表</li>\n</ul>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">create</span> <span class=\"token keyword\">table</span> gmall2020_dau</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>              mid <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>              uid <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>              appid <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>              area <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>              os <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>              ch <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>              <span class=\"token keyword\">type</span> <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>              vs <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>              logDate <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>              logHour <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>              ts <span class=\"token keyword\">bigint</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>              <span class=\"token keyword\">CONSTRAINT</span> dau_pk <span class=\"token keyword\">PRIMARY</span> <span class=\"token keyword\">KEY</span> <span class=\"token punctuation\">(</span>mid<span class=\"token punctuation\">,</span> logDate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"662-依赖增加\"><a class=\"anchor\" href=\"#662-依赖增加\">#</a> 6.6.2 依赖增加</h4>\n<p>在 pom.xml 中</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.apache.phoenix<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>phoenix-spark<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>4.14.2-HBase-1.3<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.apache.spark<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spark-sql_2.11<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h4 id=\"663-实现代码完整业务代码\"><a class=\"anchor\" href=\"#663-实现代码完整业务代码\">#</a> 6.6.3 实现代码 (完整业务代码)</h4>\n<figure class=\"highlight scala\"><figcaption data-lang=\"scala\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>orange<span class=\"token punctuation\">.</span>lin<span class=\"token punctuation\">.</span>app</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">.</span></span>SimpleDateFormat</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span>Date</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>alibaba<span class=\"token punctuation\">.</span>fastjson<span class=\"token punctuation\">.</span></span>JSON</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>orange<span class=\"token punctuation\">.</span>lin<span class=\"token punctuation\">.</span></span>Constant</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>orange<span class=\"token punctuation\">.</span>lin<span class=\"token punctuation\">.</span>bean<span class=\"token punctuation\">.</span></span>StartupLog</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>orange<span class=\"token punctuation\">.</span>lin<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token punctuation\">&#123;</span>MyKafkaUtil<span class=\"token punctuation\">,</span> RedisUtil<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>spark<span class=\"token punctuation\">.</span></span><span class=\"token punctuation\">&#123;</span>SparkConf<span class=\"token punctuation\">,</span> rdd<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>spark<span class=\"token punctuation\">.</span>broadcast<span class=\"token punctuation\">.</span></span>Broadcast</pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>spark<span class=\"token punctuation\">.</span>streaming<span class=\"token punctuation\">.</span>dstream<span class=\"token punctuation\">.</span></span>DStream</pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>spark<span class=\"token punctuation\">.</span>streaming<span class=\"token punctuation\">.</span></span><span class=\"token punctuation\">&#123;</span>Seconds<span class=\"token punctuation\">,</span> StreamingContext<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">redis<span class=\"token punctuation\">.</span>clients<span class=\"token punctuation\">.</span>jedis<span class=\"token punctuation\">.</span></span>Jedis</pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"18\"></td><td><pre> * @Description:</pre></td></tr><tr><td data-num=\"19\"></td><td><pre> * @author oranglzc</pre></td></tr><tr><td data-num=\"20\"></td><td><pre> * @creat 2020-07-14-19:16</pre></td></tr><tr><td data-num=\"21\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">object</span> DauApp <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  <span class=\"token comment\">// 实现处理模块</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  <span class=\"token keyword\">def</span> main<span class=\"token punctuation\">(</span>args<span class=\"token operator\">:</span> Array<span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Unit</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token comment\">//TODO 1. 创建 StreamingContext</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">val</span> sparkConf<span class=\"token operator\">:</span> SparkConf <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> SparkConf<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>setMaster<span class=\"token punctuation\">(</span><span class=\"token string\">\"local[2]\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>setAppName<span class=\"token punctuation\">(</span><span class=\"token string\">\"DauApp\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">val</span> ssc <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> StreamingContext<span class=\"token punctuation\">(</span>sparkConf<span class=\"token punctuation\">,</span> Seconds<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token comment\">//TODO 2. 获取流</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token keyword\">val</span> sourceStream<span class=\"token operator\">:</span> DStream<span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> MyKafkaUtil<span class=\"token punctuation\">.</span>getKafkaStream<span class=\"token punctuation\">(</span>ssc<span class=\"token punctuation\">,</span> Constant<span class=\"token punctuation\">.</span>STARTUP_TOPIC<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token comment\">// 2.1 把每个 json 字符串的数据，父封装到一个样例类对象中</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token keyword\">val</span> startupLogStream<span class=\"token operator\">:</span> DStream<span class=\"token punctuation\">[</span>StartupLog<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> sourceStream<span class=\"token punctuation\">.</span>map<span class=\"token punctuation\">(</span>json <span class=\"token keyword\">=></span> JSON<span class=\"token punctuation\">.</span>parseObject<span class=\"token punctuation\">(</span>json<span class=\"token punctuation\">,</span> classOf<span class=\"token punctuation\">[</span>StartupLog<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token comment\">//TODO 3. 去重  过滤掉一件启动的那些设备的记录  从 redis 去读取已经启动过的设备的 id</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token comment\">//TODO=============</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token keyword\">val</span> filteredStartupLogStream<span class=\"token operator\">:</span> DStream<span class=\"token punctuation\">[</span>StartupLog<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> startupLogStream<span class=\"token punctuation\">.</span>transform<span class=\"token punctuation\">(</span>rdd <span class=\"token keyword\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>      <span class=\"token keyword\">val</span> client<span class=\"token operator\">:</span> Jedis <span class=\"token operator\">=</span> RedisUtil<span class=\"token punctuation\">.</span>getClient<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>      <span class=\"token keyword\">val</span> mids<span class=\"token operator\">:</span> util<span class=\"token punctuation\">.</span>Set<span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> client<span class=\"token punctuation\">.</span>smembers<span class=\"token punctuation\">(</span>Constant<span class=\"token punctuation\">.</span>STARTUP_TOPIC <span class=\"token operator\">+</span> <span class=\"token string\">\":\"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">new</span> SimpleDateFormat<span class=\"token punctuation\">(</span><span class=\"token string\">\"yyyy-MM-dd\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>format<span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> Date<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>      client<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>      <span class=\"token keyword\">val</span> midsBD<span class=\"token operator\">:</span> Broadcast<span class=\"token punctuation\">[</span>util<span class=\"token punctuation\">.</span>Set<span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> ssc<span class=\"token punctuation\">.</span>sparkContext<span class=\"token punctuation\">.</span>broadcast<span class=\"token punctuation\">(</span>mids<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>      <span class=\"token comment\">// 条件成立则保留，不成立则过滤</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>      rdd</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token punctuation\">.</span>filter<span class=\"token punctuation\">(</span>StartupLog <span class=\"token keyword\">=></span> <span class=\"token operator\">!</span>midsBD<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">.</span>contains<span class=\"token punctuation\">(</span>StartupLog<span class=\"token punctuation\">.</span>mid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token punctuation\">.</span>map<span class=\"token punctuation\">(</span>log <span class=\"token keyword\">=></span> <span class=\"token punctuation\">(</span>log<span class=\"token punctuation\">.</span>mid<span class=\"token punctuation\">,</span> log<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token punctuation\">.</span>groupByKey<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token punctuation\">.</span>map <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>          <span class=\"token keyword\">case</span> <span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">,</span> logs<span class=\"token punctuation\">)</span> <span class=\"token keyword\">=></span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>            logs<span class=\"token punctuation\">.</span>toList<span class=\"token punctuation\">.</span>sortBy<span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">.</span>ts<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>head</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    filteredStartupLogStream<span class=\"token punctuation\">.</span>foreachRDD<span class=\"token punctuation\">(</span>rdd <span class=\"token keyword\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>      rdd<span class=\"token punctuation\">.</span>foreachPartition<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>logs<span class=\"token operator\">:</span> Iterator<span class=\"token punctuation\">[</span>StartupLog<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        <span class=\"token keyword\">val</span> client<span class=\"token operator\">:</span> Jedis <span class=\"token operator\">=</span> RedisUtil<span class=\"token punctuation\">.</span>getClient</pre></td></tr><tr><td data-num=\"58\"></td><td><pre>        logs<span class=\"token punctuation\">.</span>foreach<span class=\"token punctuation\">(</span>log <span class=\"token keyword\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>          client<span class=\"token punctuation\">.</span>sadd<span class=\"token punctuation\">(</span>Constant<span class=\"token punctuation\">.</span>STARTUP_TOPIC <span class=\"token operator\">+</span> <span class=\"token string\">\":\"</span> <span class=\"token operator\">+</span> log<span class=\"token punctuation\">.</span>logDate<span class=\"token punctuation\">,</span> log<span class=\"token punctuation\">.</span>mid<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>        client<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>      <span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>phoenix<span class=\"token punctuation\">.</span>spark<span class=\"token punctuation\">.</span></span>_</pre></td></tr><tr><td data-num=\"64\"></td><td><pre>      <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>      rdd<span class=\"token punctuation\">.</span>saveToPhoenix<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>        <span class=\"token string\">\"GMALL_DAU\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>        Seq<span class=\"token punctuation\">(</span><span class=\"token string\">\"MID\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"UID\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"APPID\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"AREA\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"OS\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"CHANNEL\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"LOGTYPE\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"VERSION\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"TS\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"LOGDATE\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"LOGHOUR\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>        zkUrl <span class=\"token operator\">=</span> Some<span class=\"token punctuation\">(</span><span class=\"token string\">\"hadoop109,hadoop110,hadoop111:2181\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>      <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>    filteredStartupLogStream<span class=\"token punctuation\">.</span>print<span class=\"token punctuation\">(</span><span class=\"token number\">10000</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>    <span class=\"token comment\">//3.2</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>    <span class=\"token comment\">//TODO 3. 开启流</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>    ssc<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>    <span class=\"token comment\">//TODO 4. 阻止 main 进程退出</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>    ssc<span class=\"token punctuation\">.</span>awaitTermination<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre></pre></td></tr><tr><td data-num=\"81\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p><code>saveToPhoenix</code>  需要传入表名、表结构的字段名（需要一一对应），还需要传入 <code>zookeeper</code>  的集群地址</p>\n<p>Q: 为什么需要传入 zookeeper 的集群 URL？</p>\n<p>HBase 的写流程中，连接 HBase 的客户端需要先访问 zookeeper 获取 Hbase：meta 位于哪个 <code>region Server</code> ，然后再访问对应的 <code>Region Server</code>  获取 meta 表，进而根据 meta 表找到目标 table（写操作的目的地）</p>\n</blockquote>\n<h2 id=\"7-日活数据查询接口\"><a class=\"anchor\" href=\"#7-日活数据查询接口\">#</a> 7 日活数据查询接口</h2>\n<h3 id=\"71-访问路径\"><a class=\"anchor\" href=\"#71-访问路径\">#</a> 7.1 访问路径</h3>\n<table>\n<thead>\n<tr>\n<th>日活总数</th>\n<th><span class=\"exturl\" data-url=\"aHR0cDovL2xvY2FsaG9zdDo4MDcwL3JlYWx0aW1lLXRvdGFsP2RhdGU9MjAyMC0wMi0xOQ==\">http://localhost:8070/realtime-total?date=2020-02-19</span></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>分时统计</strong></td>\n<td><span class=\"exturl\" data-url=\"aHR0cDovL2xvY2FsaG9zdDo4MDcwL3JlYWx0aW1lLWhvdXJzP2lkPWRhdSZhbXA7ZGF0ZT0yMDIwLTAyLTE5\">http://localhost:8070/realtime-hours?id=dau&amp;date=2020-02-19</span></td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>设置 web 服务器访问的端口：8070，请求获取的方式为 get</p>\n</blockquote>\n<h3 id=\"72-请求的数据格式\"><a class=\"anchor\" href=\"#72-请求的数据格式\">#</a> 7.2 请求的数据格式</h3>\n<table>\n<thead>\n<tr>\n<th>总数</th>\n<th>[{&quot;id&quot;:&quot;dau&quot;,&quot;name&quot;:&quot;新增日活&quot;,&quot;value&quot;:1200},   {&quot;id&quot;:&quot;new_mid&quot;,&quot;name&quot;:&quot;新增设备&quot;,&quot;value&quot;:233}]</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>分时 统计</td>\n<td>{&quot;yesterday&quot;:{&quot;11&quot;:383,&quot;12&quot;:123,&quot;17&quot;:88,&quot;19&quot;:200   },   &quot;today&quot;:{&quot;12&quot;:38,&quot;13&quot;:1233,&quot;17&quot;:123,&quot;19&quot;:688   }}</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"73-工程搭建\"><a class=\"anchor\" href=\"#73-工程搭建\">#</a> 7.3 工程搭建</h3>\n<h4 id=\"731-创建工程\"><a class=\"anchor\" href=\"#731-创建工程\">#</a> 7.3.1 创建工程</h4>\n<p>![1594878229857](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saWFuLXpwLm9zcy1jbi1zaGVuemhlbi5hbGl5dW5jcy5jb20vcGlj\">https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic</span> GO/20200719233805.png)</p>\n<p>![1594878250584](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saWFuLXpwLm9zcy1jbi1zaGVuemhlbi5hbGl5dW5jcy5jb20vcGlj\">https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic</span> GO/20200719233819.png)</p>\n<p>选择 mybatis、JDBC、和 Spring Web 组件</p>\n<p>![1594878303946](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saWFuLXpwLm9zcy1jbi1zaGVuemhlbi5hbGl5dW5jcy5jb20vcGlj\">https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic</span> GO/20200719233825.png)</p>\n<h4 id=\"732-配置文件\"><a class=\"anchor\" href=\"#732-配置文件\">#</a> 7.3.2 配置文件</h4>\n<h5 id=\"子模块gmall-publisher依赖配置\"><a class=\"anchor\" href=\"#子模块gmall-publisher依赖配置\">#</a> 子模块 <code>gmall-publisher</code>  依赖配置</h5>\n<ul>\n<li>修改父依赖</li>\n<li>增加 phoenix 查询所需要的工具 jar 包</li>\n<li>增加 hadoop 依赖</li>\n</ul>\n<blockquote>\n<p>解决网页打开异常</p>\n</blockquote>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>project</span> <span class=\"token attr-name\">xmlns</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://maven.apache.org/POM/4.0.0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>xsi</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.w3.org/2001/XMLSchema-instance<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>         <span class=\"token attr-name\"><span class=\"token namespace\">xsi:</span>schemaLocation</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>modelVersion</span><span class=\"token punctuation\">></span></span>4.0.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>modelVersion</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>parent</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>realtime-gmall<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.orange.lin<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>1.0-SNAPSHOT<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>parent</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.orange.lin<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>gmall-publisher<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>0.0.1-SNAPSHOT<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>gmall-publisher<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>description</span><span class=\"token punctuation\">></span></span>Demo project for Spring Boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>description</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>properties</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>java.version</span><span class=\"token punctuation\">></span></span>1.8<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>java.version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>properties</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependencies</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-starter-jdbc<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-starter-web<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.mybatis.spring.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>mybatis-spring-boot-starter<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>2.1.3<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.orange.lin<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>gmall-common<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>1.0-SNAPSHOT<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-starter-test<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>scope</span><span class=\"token punctuation\">></span></span>test<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>scope</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>exclusions</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>exclusion</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.junit.vintage<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>junit-vintage-engine<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>exclusion</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>exclusions</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        <span class=\"token comment\">&lt;!--phoenix--></span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.apache.phoenix<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>phoenix-core<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>5.0.0-HBase-2.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        <span class=\"token comment\">&lt;!--phoenix 用到的工具包 --></span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.google.guava<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>guava<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>20.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.apache.hadoop<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>hadoop-common<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>3.1.3<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.junit.jupiter<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>junit-jupiter<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>RELEASE<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>scope</span><span class=\"token punctuation\">></span></span>test<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>scope</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependencies</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>build</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>plugins</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>plugin</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-maven-plugin<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>plugin</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>plugins</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>build</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre></pre></td></tr><tr><td data-num=\"85\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>project</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h5 id=\"父依赖配置\"><a class=\"anchor\" href=\"#父依赖配置\">#</a> 父依赖配置</h5>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>...</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>modules</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>module</span><span class=\"token punctuation\">></span></span>gmall-common<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>module</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>module</span><span class=\"token punctuation\">></span></span>gmall-mock<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>module</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>module</span><span class=\"token punctuation\">></span></span>gmall-logger<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>module</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>module</span><span class=\"token punctuation\">></span></span>gmall-realtime<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>module</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>module</span><span class=\"token punctuation\">></span></span>gmall-publisher<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>module</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>modules</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>...</pre></td></tr></table></figure><h5 id=\"gmall-publisher配置文件\"><a class=\"anchor\" href=\"#gmall-publisher配置文件\">#</a>  <code>gmall-publisher</code>  配置文件</h5>\n<p>application.properties</p>\n<figure class=\"highlight properties\"><figcaption data-lang=\".properties\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#mybatis 配置</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token attr-name\">server.port</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">8070</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">#logging.level.root=error</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># jdbc</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token attr-name\">spring.datasource.driver-class-name</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">org.apache.phoenix.jdbc.PhoenixDriver</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token attr-name\">spring.datasource.url</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">jdbc:phoenix:hadoop109,hadoop110,hadoop111:2181</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\"># mybatis</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\"># 做映射的时候会在 resources/mapper 目录找对应的 xml 文件</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token attr-name\">mybatis.mapperLocations</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">classpath:mapper/*.xml</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\"># 字段名是否自动从下划线映射到驼峰命名  一般都是使用 true</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token attr-name\">mybatis.configuration.map-underscore-to-camel-case</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">true</span></pre></td></tr></table></figure><h3 id=\"74-代码实现\"><a class=\"anchor\" href=\"#74-代码实现\">#</a> 7.4 代码实现</h3>\n<h4 id=\"741-mvc分层设计\"><a class=\"anchor\" href=\"#741-mvc分层设计\">#</a> 7.4.1 MVC 分层设计</h4>\n<table>\n<thead>\n<tr>\n<th>控制层</th>\n<th>PublisherController</th>\n<th>实现接口的 web 发布</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>服务层</td>\n<td>PublisherService</td>\n<td>数据业务查询 interface</td>\n</tr>\n<tr>\n<td>PublisherServiceImpl</td>\n<td>业务查询的实现类</td>\n<td></td>\n</tr>\n<tr>\n<td>数据层</td>\n<td>DauMapper</td>\n<td>数据层查询的 interface</td>\n</tr>\n<tr>\n<td>DauMapper.xml</td>\n<td>数据层查询的实现配置</td>\n<td></td>\n</tr>\n<tr>\n<td>主程序</td>\n<td>GmallPublisherApplication</td>\n<td>增加扫描包</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>本项目 module 结构：</p>\n<p>![1594878918146](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saWFuLXpwLm9zcy1jbi1zaGVuemhlbi5hbGl5dW5jcy5jb20vcGlj\">https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic</span> GO/20200719233836.png)</p>\n</blockquote>\n<h4 id=\"742-gmallpublisherapplication程序入口\"><a class=\"anchor\" href=\"#742-gmallpublisherapplication程序入口\">#</a> 7.4.2 GmallPublisherApplication（程序入口）</h4>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>orange<span class=\"token punctuation\">.</span>lin<span class=\"token punctuation\">.</span>gmallpublisher</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>mybatis<span class=\"token punctuation\">.</span>spring<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">MapperScan</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>boot<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SpringApplication</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>boot<span class=\"token punctuation\">.</span>autoconfigure<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SpringBootApplication</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token annotation punctuation\">@SpringBootApplication</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token annotation punctuation\">@MapperScan</span><span class=\"token punctuation\">(</span>basePackages <span class=\"token operator\">=</span> <span class=\"token string\">\"com.orange.lin.gmallpublisher.mapper\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">GmallPublisherApplication</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token class-name\">SpringApplication</span><span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">GmallPublisherApplication</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>在 SpringBoot 中集成 MyBatis，可以在 mapper 接口上添加 @Mapper 注解，将 mapper 注入到 Spring, 但是如果每一个 mapper 都添加 @mapper 注解会很麻烦，这时可以使用 @MapperScan 注解来扫描包。</p>\n<p><strong>@MapperScan (&quot;com.demo.mapper&quot;)：扫描指定包中的接口</strong></p>\n<p><strong>注意扫描的是包</strong></p>\n</blockquote>\n<h4 id=\"743-mapper数据层\"><a class=\"anchor\" href=\"#743-mapper数据层\">#</a> 7.4.3 Mapper 数据层</h4>\n<h5 id=\"mapper层接口类\"><a class=\"anchor\" href=\"#mapper层接口类\">#</a> Mapper 层接口类</h5>\n<pre><code>package com.orange.lin.gmallpublisher.mapper;\n\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * @author oranglzc\n * @Description:\n * @creat 2020-07-15-15:49\n */\npublic interface DauMapper &#123;\n\n    //得到总的日活\n    Long getDau(String date);\n\n    //得到日活分时\n    List&lt;Map&lt;String,Object&gt;&gt; getHourDau(String date);\n&#125;\n\n</code></pre>\n<h5 id=\"数据层返回值类型的确定\"><a class=\"anchor\" href=\"#数据层返回值类型的确定\">#</a> 数据层返回值类型的确定</h5>\n<ul>\n<li>\n<p>对于日活来说，查询后的结果是一个聚合值，返回的是一个 Long 型的</p>\n</li>\n<li>\n<p>对于日活分时统计结果来说，返回的是一个表结构，涉及到表结构 --&gt;java 数据类型的转化</p>\n</li>\n</ul>\n<blockquote>\n<p>因此在 xml 配置中，不可以使用 <code>resultType</code>  直接指定返回值类型</p>\n<pre><code>    +----------+-----------+\n    | LOGHOUR  | COUNT(1)  |\n    +----------+-----------+\n    | 10       | 44        |\n    | 15       | 140       |\n    +----------+-----------+\n对于返回的表结果集，使用list表示整个表，每一行数据为一个map，map中有2个K-V键值对表示，分别是字段名-&gt;值\n</code></pre>\n<p>使用 resultMap 表示返回的类型是 list，通过</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>resultMap</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>hourDauList<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>java.util.Map<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>resultMap</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>指明包含的关系是 map</p>\n</blockquote>\n<h5 id=\"数据层xml配置\"><a class=\"anchor\" href=\"#数据层xml配置\">#</a> 数据层 xml 配置</h5>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">mapper</span> <span class=\"token name\">SYSTEM</span> <span class=\"token string\">\"http://mybatis.org/dtd/mybatis-3-mapper.dtd\"</span> <span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">&lt;!--namespace 对应前面定义的接口 --></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>mapper</span> <span class=\"token attr-name\">namespace</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.orange.lin.gmallpublisher.mapper.DauMapper<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">&lt;!-- 对应前面接口中的方法，标签内写响应的查询语句，查询的接口会赋值给这个方法的返回值 --></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>select</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>getDau<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">resultType</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>java.lang.Long<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        select count(1) from gmall_dau where logdate=#&#123;date&#125;</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>select</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>select</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>getHourDau<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">resultMap</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>hourDauList<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        select LOGHOUR, COUNT(*) COUNT from GMALL_DAU where LOGDATE=#&#123;date&#125; group by LOGHOUR</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>select</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>resultMap</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>hourDauList<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>java.util.Map<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>resultMap</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>mapper</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><blockquote>\n<p>mybatis 会通过 XML 的配置和接口类定义的抽象方法自动获取包含结果集的实现类，用户字需要通过接口函数确定方法名和数据返回结果，通过 xml 配置文件指定接口类地址、方法名和 sql 语句即可</p>\n<p>变量的写法： #{}</p>\n</blockquote>\n<h4 id=\"744-service服务层\"><a class=\"anchor\" href=\"#744-service服务层\">#</a> 7.4.4 Service 服务层</h4>\n<h5 id=\"service层接口类\"><a class=\"anchor\" href=\"#service层接口类\">#</a> service 层接口类</h5>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>orange<span class=\"token punctuation\">.</span>lin<span class=\"token punctuation\">.</span>gmallpublisher<span class=\"token punctuation\">.</span>service</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>stereotype<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Service</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Map</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> * @author oranglzc</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> * @Description:</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> * @creat 2020-07-15-16:04</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">PublisherService</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\">// 获取总得日活</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token class-name\">Long</span> <span class=\"token function\">getDau</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>       <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        数据层</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        // List (Map (\"loghour\": \"10\", count: 100), Map,.....)</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        List&lt;Map&lt;String, Object>> getHourDau (String date);</pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        //  Map (\"10\"->100, \"11\"->200. \"12\"->100)</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Long</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getHourDau</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h5 id=\"service层实现类\"><a class=\"anchor\" href=\"#service层实现类\">#</a> service 层实现类</h5>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>orange<span class=\"token punctuation\">.</span>lin<span class=\"token punctuation\">.</span>gmallpublisher<span class=\"token punctuation\">.</span>service</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>orange<span class=\"token punctuation\">.</span>lin<span class=\"token punctuation\">.</span>gmallpublisher<span class=\"token punctuation\">.</span>mapper<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">DauMapper</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>beans<span class=\"token punctuation\">.</span>factory<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Autowired</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>stereotype<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Service</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HashMap</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">List</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Map</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"12\"></td><td><pre> * @author oranglzc</pre></td></tr><tr><td data-num=\"13\"></td><td><pre> * @Description:</pre></td></tr><tr><td data-num=\"14\"></td><td><pre> * @creat 2020-07-15-16:05</pre></td></tr><tr><td data-num=\"15\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token annotation punctuation\">@Service</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PublisherServiceImp</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">PublisherService</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token class-name\">DauMapper</span> dau<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Long</span> <span class=\"token function\">getDau</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> date<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">return</span> dau<span class=\"token punctuation\">.</span><span class=\"token function\">getDau</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  数据层</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  // List (Map (\"loghour\": \"10\", count: 100), Map,.....)</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  List&lt;Map&lt;String, Object>> getHourDau (String date);</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  select LOGHOUR, count (*) COUNT from GMALL_DAU where LOGDATE=#&#123;date &#125; group by LOGHOUR</pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>  //  Map (\"10\"->100, \"11\"->200. \"12\"->100)</pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t*/</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Long</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getHourDau</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> date<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Map</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> hourDau <span class=\"token operator\">=</span> dau<span class=\"token punctuation\">.</span><span class=\"token function\">getHourDau</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Long</span><span class=\"token punctuation\">></span></span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> map <span class=\"token operator\">:</span> hourDau<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>            <span class=\"token class-name\">String</span> key <span class=\"token operator\">=</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"LOGHOUR\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>            <span class=\"token class-name\">Long</span> value <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Long</span><span class=\"token punctuation\">)</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"COUNT\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>            result<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>数据结构的转化，将表结构的关系（原本的数据只是存在于同一个 map 中），需要转化成 value 与 value 的一一对应关系</p>\n</blockquote>\n<h4 id=\"745-controller控制层\"><a class=\"anchor\" href=\"#745-controller控制层\">#</a> 7.4.5 controller 控制层</h4>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>orange<span class=\"token punctuation\">.</span>lin<span class=\"token punctuation\">.</span>gmallpublisher<span class=\"token punctuation\">.</span>controller</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>alibaba<span class=\"token punctuation\">.</span>fastjson<span class=\"token punctuation\">.</span></span>JSON<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>orange<span class=\"token punctuation\">.</span>lin<span class=\"token punctuation\">.</span>gmallpublisher<span class=\"token punctuation\">.</span>service<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">PublisherService</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">it<span class=\"token punctuation\">.</span>unimi<span class=\"token punctuation\">.</span>dsi<span class=\"token punctuation\">.</span>fastutil<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Hash</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>beans<span class=\"token punctuation\">.</span>factory<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Autowired</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">GetMapping</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RestController</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">LocalDate</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"14\"></td><td><pre> * @author oranglzc</pre></td></tr><tr><td data-num=\"15\"></td><td><pre> * @Description:</pre></td></tr><tr><td data-num=\"16\"></td><td><pre> * @creat 2020-07-15-16:07</pre></td></tr><tr><td data-num=\"17\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token annotation punctuation\">@RestController</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> publisherController <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token class-name\">PublisherService</span> service<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    1.\t日活总数:</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>http://localhost:8070/realtime-total?date=2020-02-11</pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    2.\t日活总数</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>[&#123;\"id\":\"dau\",\"name\":\"新增日活\",\"value\":1200&#125;,</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>&#123;\"id\":\"new_mid\",\"name\":\"新增设备\",\"value\":233&#125; ]</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    */</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/realtime-total\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token keyword\">public</span>  <span class=\"token class-name\">String</span> <span class=\"token function\">realtimeTotal</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token class-name\">Long</span> dau <span class=\"token operator\">=</span> service<span class=\"token punctuation\">.</span><span class=\"token function\">getDau</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token comment\">//json 字符串先用 java 的数据结构表示，最后使用 json 序列化工具直接转成 json 字符串</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Map</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> map1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        result<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>map1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        map1<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"dau\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        map1<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"新增日活\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        map1<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"value\"</span><span class=\"token punctuation\">,</span> dau<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> map2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        result<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>map2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        map2<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"new_mid\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        map2<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"新增设备\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        map2<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"value\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"233\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        <span class=\"token keyword\">return</span> JSON<span class=\"token punctuation\">.</span><span class=\"token function\">toJSONString</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t1.\t日活分时统计</pre></td></tr><tr><td data-num=\"58\"></td><td><pre>http://localhost:8070/realtime-hour?id=dau&amp;date=2020-07-15</pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    2.\t日活分时统计</pre></td></tr><tr><td data-num=\"60\"></td><td><pre>&#123;\"yesterday\":&#123;\"11\":383,\"12\":123,\"17\":88,\"19\":200&#125;,</pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\"today\":&#123;\"12\":38,\"13\":1233,\"17\":123,\"19\":688 &#125;&#125;</pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    */</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    <span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/realtime-hour\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getRealTimeHour</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> id<span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span> date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"dau\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>            <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Long</span><span class=\"token punctuation\">></span></span> today <span class=\"token operator\">=</span> service<span class=\"token punctuation\">.</span><span class=\"token function\">getHourDau</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>            <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Long</span><span class=\"token punctuation\">></span></span> yesterday <span class=\"token operator\">=</span> service<span class=\"token punctuation\">.</span><span class=\"token function\">getHourDau</span><span class=\"token punctuation\">(</span><span class=\"token function\">getYesterday</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>            <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span> <span class=\"token punctuation\">,</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Long</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>            result<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"today\"</span><span class=\"token punctuation\">,</span> today<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>            result<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"yesterday\"</span><span class=\"token punctuation\">,</span> yesterday<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>            <span class=\"token keyword\">return</span> JSON<span class=\"token punctuation\">.</span><span class=\"token function\">toJSONString</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>            <span class=\"token keyword\">return</span>  <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"80\"></td><td><pre>     * 返回昨天的年月日</pre></td></tr><tr><td data-num=\"81\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"82\"></td><td><pre>     * @param date</pre></td></tr><tr><td data-num=\"83\"></td><td><pre>     * @return</pre></td></tr><tr><td data-num=\"84\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getYesterday</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> date<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token class-name\">LocalDate</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">plusDays</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre></pre></td></tr><tr><td data-num=\"89\"></td><td><pre></pre></td></tr><tr><td data-num=\"90\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"8-可视化展示\"><a class=\"anchor\" href=\"#8-可视化展示\">#</a> 8 可视化展示</h2>\n<p>无</p>\n",
            "tags": []
        },
        {
            "id": "https://github.com/Mayizono/miyazono.github.io/big-data/hadoop/hadoop/",
            "url": "https://github.com/Mayizono/miyazono.github.io/big-data/hadoop/hadoop/",
            "title": "",
            "date_published": "2021-08-31T11:16:43.777Z",
            "content_html": "<h1 id=\"hadoop\"><a class=\"anchor\" href=\"#hadoop\">#</a> hadoop</h1>\n<h2 id=\"入门\"><a class=\"anchor\" href=\"#入门\">#</a> 入门</h2>\n<h3 id=\"概论\"><a class=\"anchor\" href=\"#概论\">#</a> 概论</h3>\n<ul>\n<li>\n<p>概念</p>\n<ul>\n<li>处理海量数据的存储和分析计算问题</li>\n</ul>\n</li>\n<li>\n<p>特点</p>\n<ul>\n<li>大量、高速、多样、低密度价值</li>\n</ul>\n</li>\n<li>\n<p>组织架构</p>\n<ul>\n<li>数据仓库组（ETL 和数据分析）</li>\n<li>实时组（实时指标分析、性能调优）</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"hadoop框架\"><a class=\"anchor\" href=\"#hadoop框架\">#</a> hadoop 框架</h3>\n<ul>\n<li>\n<p>hadoop 是什么</p>\n<ul>\n<li>\n<p>Apache 开发的分布式系统基础架构</p>\n</li>\n<li>\n<p>一个生态圈</p>\n<ul>\n<li>mahout</li>\n<li>zookeeper</li>\n<li>pig</li>\n<li>hbase</li>\n<li>....</li>\n</ul>\n</li>\n<li>\n<p>解决海量数据的存储和分析计算</p>\n</li>\n</ul>\n</li>\n<li>\n<p>三大发行版</p>\n<ul>\n<li>Apache、Cloudera、Hortonworks</li>\n</ul>\n</li>\n<li>\n<p>优势</p>\n<ul>\n<li>高可靠：维护了多个副本</li>\n<li>高拓展性：可根据需求进行增减服务器</li>\n<li>高效性：task 并行执行</li>\n<li>高容错性：失败的任务会进行重新分配</li>\n</ul>\n</li>\n<li>\n<p>组成</p>\n<ul>\n<li>\n<p>hadoop1.x</p>\n<ul>\n<li>common ：辅助工具</li>\n<li>hdfs ：数据的存储</li>\n<li>MapReduce ：计算 + 资源调度</li>\n</ul>\n</li>\n<li>\n<p>hadoop2.x</p>\n<ul>\n<li>common ：辅助工具</li>\n<li>hdfs ： 数据的存储</li>\n<li>map ：计算</li>\n<li>reduce ： 资源调度</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>架构概述</p>\n<ul>\n<li>\n<p>HDFS</p>\n<ul>\n<li>namenode : 存储文件的元数据</li>\n<li>datanode ：存储文件的真实数据 + 块数据的校验和</li>\n<li>secondarynamenode ：对 namenode 的元数据进行备份</li>\n</ul>\n</li>\n<li>\n<p>YARN</p>\n<ul>\n<li>\n<p>resourcemanager</p>\n<ul>\n<li>处理客户端的请求</li>\n<li>监控 nodemanager</li>\n<li>启动 applicationmaster</li>\n<li>资源分配与调度</li>\n</ul>\n</li>\n<li>\n<p>nodemanager</p>\n<ul>\n<li>管理单个节点上的资源</li>\n<li>处理来自 resourcemanager 的命令</li>\n<li>处理 applicationmaster 的命令</li>\n</ul>\n</li>\n<li>\n<p>container</p>\n<ul>\n<li>封装单个节点上多维资源：如 cpu、网络等</li>\n</ul>\n</li>\n<li>\n<p>applicationmaster</p>\n<ul>\n<li>负责数据的切分</li>\n<li>为应用程序申请资源并分配给内部的任务</li>\n<li>任务的监控和容错</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>MapReduce</p>\n<ul>\n<li>map 阶段并行处理输入的数据</li>\n<li>对 map 结果进行汇总</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"hadoop运行模式\"><a class=\"anchor\" href=\"#hadoop运行模式\">#</a> hadoop 运行模式</h3>\n<ul>\n<li>\n<p>本地运行</p>\n</li>\n<li>\n<p>伪分布式模式</p>\n</li>\n<li>\n<p>完全分布式模式</p>\n<ul>\n<li>\n<p>常用端口</p>\n<ul>\n<li>\n<p>namenode</p>\n<ul>\n<li>web: 9870</li>\n<li>内部通信：8020</li>\n</ul>\n</li>\n<li>\n<p>2NN</p>\n<ul>\n<li>web: 9868</li>\n</ul>\n</li>\n<li>\n<p>yarn</p>\n<ul>\n<li>web: 8088</li>\n</ul>\n</li>\n<li>\n<p>historyserver</p>\n<ul>\n<li>19888</li>\n</ul>\n</li>\n<li>\n<p>datanode</p>\n<ul>\n<li>web: 9864</li>\n<li>内部通信：9866</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>出现错误看日志，看日志，看日志</p>\n</li>\n<li>\n<p>格式化问题</p>\n<ul>\n<li>当出现宕机或删除以往数据时才需要进行格式</li>\n<li>需删除所有节点的 data 和 log 数据</li>\n</ul>\n</li>\n<li>\n<p>启动集群</p>\n<ul>\n<li>start/stop-yarn.sh</li>\n<li>yarn --daemon start/stop rm/nm</li>\n<li>start/stop-dfs.sh</li>\n<li>dfs --daemon start/stop nn/2nn/dn</li>\n</ul>\n</li>\n<li>\n<pre><code>                            执行wordcount程序\n</code></pre>\n</li>\n</ul>\n</li>\n</ul>\n<p>hadoop jar jar 位置 wordcount 输入路径 输出路径（一定不能存在）<br />\n- 配置文件说明</p>\n<pre><code>\t- core-default.xm\n\t- hdfs-default.xml\n\t- yarn-default.xml\n\t- mapred-default.xml\n\n- 拷贝文件\n\n\t- scp\n\n\t  1）基本语法\n\t  scp    -r          $pdir/$fname              $user@hadoop$host:$pdir/$fname\n\t  命令   递归       要拷贝的文件路径/名称    目的用户@主机:目的路径/名称\n\t  2) 案例实操\n\t  \t 前提：在 Hadoop102  hadoop103  hadoop104 都已经创建好的 /opt/module\n\t             /opt/software 两个目录， 并且已经把这两个目录修改为atguigu:atguigu\n\t\t- 全部复制\n\n\t- rsync\n\n\t  rsync    -av       $pdir/$fname              $user@hadoop$host:$pdir/$fname\n\t  命令   选项参数   要拷贝的文件路径/名称    目的用户@主机:目的路径/名称\n\t\t- 只复制差异部分\n\n\t- 使用脚本进行分发\n\n\t\t- 创建在path环境变量下\n\t\t- 需要执行权限\n\n- 无密码登录\n\n\t- ssh 另外一台电脑的ip地址\n\t- ssh-keygen -t rea 生成公钥和私钥\n\t- ssh-copy-id 另外一台电脑ip地址 : 将公钥提供给另外一台机器\n\t- ssh 本机ip也需要密码，所以也需要进行公钥的分发\n\t- 无密码登入是关联到具体的用户，如atguigu进行公钥和私钥的分发，root连接其他电脑时，依然需要输入密码\n\t- 无密码登录是单向的，如需要相互连接，则需要相互分发自己的公钥\n\n- 配置文件workers(datanode的节点)中，该文件中的内部结尾部分不能有空格，文中不能有空行\n</code></pre>\n<h3 id=\"hadoop3x与2x的区别\"><a class=\"anchor\" href=\"#hadoop3x与2x的区别\">#</a> hadoop3.x 与 2.x 的区别</h3>\n<ul>\n<li>java 从 7 升级到了 8</li>\n<li>引入了纠删码</li>\n<li>重写了 shell 脚本</li>\n<li>支持超过两个 NN</li>\n<li>许多服务的默认端口改变了</li>\n<li>处理海量数据的存储和分析计算问题</li>\n</ul>\n<h2 id=\"hdfs\"><a class=\"anchor\" href=\"#hdfs\">#</a> HDFS</h2>\n<h3 id=\"概论-2\"><a class=\"anchor\" href=\"#概论-2\">#</a> 概论</h3>\n<ul>\n<li>\n<p>hdfs 概念</p>\n<ul>\n<li>是一种分布式文件管理系统</li>\n<li>通过目录树定位文件</li>\n<li>适合一次写入，多次读出的场景</li>\n<li>仅支持数据的追加，不支持文件的随机修改</li>\n<li>不适合处理小文件</li>\n<li>适合适当延时的处理</li>\n</ul>\n</li>\n<li>\n<p>框架</p>\n<ul>\n<li>\n<p>namenode</p>\n<ul>\n<li>管理 hdfs 的名称空间</li>\n<li>配置副本策略</li>\n<li>管理数据块的映射信息</li>\n<li>处理客户端的读写请求</li>\n</ul>\n</li>\n<li>\n<p>datanode</p>\n<ul>\n<li>存储实际的数据块</li>\n<li>执行数据块的读写操作</li>\n</ul>\n</li>\n<li>\n<p>client</p>\n<ul>\n<li>文件的切分，文件上传时，client 根据块的大小将文件进行切分</li>\n<li>与 namenode 交互，获取文件的位置信息</li>\n<li>与 datanode 交互，读取或写入数据</li>\n<li>client 提供了一些命令来管理 hdfs，比如格式化 namenode</li>\n<li>client 可以通过一些命令访问 hdfs，如对 hdfs 进行增删改查</li>\n</ul>\n</li>\n<li>\n<p>secondarynamenode</p>\n<ul>\n<li>不是 nn 的热备，当 nn 挂掉时，它不能替代 nn 并提供服务</li>\n<li>辅助 nn，分担其工作量，比如定期合并镜像文件和编辑日志，并推送给 nn</li>\n<li>可恢复 nn 的数据（可能会丢失少部分）</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>文件块大小</p>\n<ul>\n<li>与文件的传输速度相关</li>\n<li>文件大小 = 文件查询时间 * 100 * 文件传输速度<br />\n（取整，128，256）</li>\n<li>文件块过小，增加了寻址时间，文件块过大，增加了数据传输时间</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"hdfs之shell操作\"><a class=\"anchor\" href=\"#hdfs之shell操作\">#</a> HDFS 之 shell 操作</h3>\n<ul>\n<li>\n<p>格式</p>\n<ul>\n<li>hdfs dfs + 命令</li>\n<li>hadoop fs + 命令</li>\n</ul>\n</li>\n<li>\n<p>具体命令</p>\n<ul>\n<li>-help 输出这个命令的参数</li>\n<li>-ls ：显示目录信息</li>\n<li>\n<ul>\n<li>mkdir 在 hdfs 上创建文件夹</li>\n</ul>\n</li>\n<li>-moveFromLocal ：从本地剪切到 hdfs 上</li>\n<li>\n<pre><code>                  -put ： 从本地复制到hdfs上\n</code></pre>\n</li>\n</ul>\n</li>\n<li>\n<p>copyFromLocal ：从本地复制到 hdfs 上</p>\n<ul>\n<li>\n<pre><code>            -get：从hdfs拷贝到本地\n</code></pre>\n</li>\n</ul>\n</li>\n</ul>\n<p>-copyTolocal ：从 hdfs 拷贝到本地<br />\n - -appendToFile ：追加一个本地文件到 hdfs 已经存在的文件末尾<br />\n - -cat ：显示文件内容<br />\n - - chgrp 、 -chmod 、 -chown ：修改文件的权限<br />\n - -cp  ：从 hdfs 的一个路径拷贝到 hdfs 另外一个路径<br />\n - -mv ：从 hdfs 目录中移动文件<br />\n - -tail ：显示一个文件的末尾<br />\n - -rm  -r：递归删除文件或文件夹<br />\n - - rmdir ：删除空目录<br />\n - -du ：统计文件夹的大小信息<br />\n - -setrep : 设置 hdfs 中文件的副本数量</p>\n<h3 id=\"hdfs客户端操作\"><a class=\"anchor\" href=\"#hdfs客户端操作\">#</a> hdfs 客户端操作</h3>\n<ul>\n<li>\n<p>获取文件系统的对象</p>\n<ul>\n<li>获取 uri，uri = new URI (&quot;hdfs://hadoop102:9820&quot;)</li>\n<li>获取配置文件对象 conf ，conf=new Configuration ();</li>\n<li>获取登入的用户 user ，user= &quot;atguigu&quot;</li>\n<li>获取文件系统对象，FileSystem.get (uri, conf, user)</li>\n</ul>\n</li>\n<li>\n<p>具体操作</p>\n<ul>\n<li>所有的输入和输出路径： new path (&quot;路径&quot;)</li>\n<li>下载：copyFromLocalFile ()</li>\n<li>上传 ： copyToLocalFile ()</li>\n<li>liststatus (): 获取指定路径下文件或文件夹</li>\n<li>listFiles () : 递归获取指定路径下所有的文件</li>\n<li>delete () : 删除文件或文件夹</li>\n</ul>\n</li>\n<li>\n<p>关闭连接</p>\n<ul>\n<li>fs.close();</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"hdfs的数据流\"><a class=\"anchor\" href=\"#hdfs的数据流\">#</a> HDFS 的数据流</h3>\n<ul>\n<li>\n<p>文件的写入</p>\n<ul>\n<li>\n<p>客户端通过 hdfs 的对象向 namenode 请求上传文件</p>\n</li>\n<li>\n<p>namenode 确定目标文件和父目录是否存在，返回可以上传文件</p>\n</li>\n<li>\n<p>客户端请求上传第一个块，请求 namenode 返回 datanode</p>\n</li>\n<li>\n<p>namenode 返回 3 个 datanode 节点，分别是 dn1，dn2，dn3</p>\n<ul>\n<li>\n<p>关于副本的选择<br />\n（即 dn1、dn2、dn3）</p>\n<ul>\n<li>第一个副本：在 client 所处的节点上，如果客户端在集群外，随机选一个</li>\n<li>第二个副本：在另一个机架的随机一个节点</li>\n<li>第三个副本：在第二个副本所在的机架的随机节点</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>客户端通过 hdfs 的输出流请求某一个 dn 上传数据<br />\n (假设是 dn1，实则是根据网路拓扑节点距离计算得来)</p>\n<ul>\n<li>节点距离：两个节点到大最近的共同祖先的距离总和</li>\n</ul>\n</li>\n<li>\n<p>此 dn 会调用 dn2，dn2 调用 dn3，将这个通信通道建立完成</p>\n</li>\n<li>\n<p>三个节点逐级应答客户端</p>\n</li>\n<li>\n<p>客户端向 dn1 上传第一个块，以 packet 为单位，dn1 收到 packet 后，首先进行落盘处理，同时将收到的 packet 传递给到 dn2，dn2 做和 dn1 同样的动作将 packet 传递给到 dn3，dn3 直接落盘处理。</p>\n<ul>\n<li>传输的过程中，dn1 会将 packet 放进一个应答队列，待所有的节点均相应后，则表示此 packet 上传完成，否则默认未完成上传</li>\n</ul>\n</li>\n<li>\n<p>当一个块传输完成之后，客户端再次请求 namenode 上传第二个块，此时重复 4-8 步骤</p>\n</li>\n<li>\n<p>待所有的数据块传输完成以后，则客户端关闭输出流。</p>\n</li>\n</ul>\n</li>\n<li>\n<p>文件的写出</p>\n<ul>\n<li>\n<p>客户端获取 hdfs 的对象，向 namenode 请求下载某某文件</p>\n</li>\n<li>\n<p>namenode 返回该文件的元数据信息，所有块所在的节点</p>\n</li>\n<li>\n<p>客户端获取文件系统的输入流，随机挑选一个 dn，请求读取数据</p>\n<ul>\n<li>就近 + 随机原则</li>\n</ul>\n</li>\n<li>\n<p>databnode 以 packet 为单位开始传输数据给客户端</p>\n</li>\n<li>\n<p>客户端以 packet 为单位接收，先在本地缓存，然后写入目标文件</p>\n</li>\n<li>\n<p>客户端根据元数据信息，请求 dn 读取下一个块信息，重复 3-6 步骤，直到所有的数据库读取完成</p>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"nn和2nn\"><a class=\"anchor\" href=\"#nn和2nn\">#</a> NN 和 2NN</h3>\n<ul>\n<li>\n<p>机制</p>\n<ul>\n<li>第一次启动 namenode 后，首先会将磁盘中的镜像文件（fsimage）和编辑日志（edits）加载到内存中，如果是格式后的第一次启动，则是创建镜像文件和编辑日志</li>\n<li>客户端对 hdfs 进行增删改操作</li>\n<li>namenode 先将操作记录到编辑日志中</li>\n<li>namenode 在内存中对元数据执行增删改操作</li>\n<li>2NN 询问 nn 是否执行 checkpoint 操作，并带回 nn 的指令</li>\n<li>当触发 cheekpoint 时，nn 中生成一个滚动日志文件（用于在记录后续的客户端请求），一个磁盘中编辑日志的复制文件</li>\n<li>将磁盘中的镜像文件和复制好的编辑日志文件复制到 2NN 中</li>\n<li>2NN 加载到内存并进行合并生成一个合并文件，将它拷贝到 nn 中</li>\n<li>nn 将此文件覆盖磁盘中的原有文件（重命名的方式）</li>\n</ul>\n</li>\n<li>\n<p>fsimage</p>\n<ul>\n<li>hdfs 文件系统元数据的一个永久性检查点</li>\n<li>hdfs oiv -p 文件类型 -i 镜像文件 -o 转换后文件输出路径</li>\n</ul>\n</li>\n<li>\n<p>edits</p>\n<ul>\n<li>存放 hdfs 文件系统所有的更新操作</li>\n<li>hdfs oev -p 文件类型 -i 编辑日志 -o 转换后文件输出路径</li>\n</ul>\n</li>\n<li>\n<p>CheckPoint</p>\n<ul>\n<li>\n<p>触发点</p>\n<ul>\n<li>1h</li>\n<li>edits 数据满了，默认是执行了 1 百万次操作</li>\n</ul>\n</li>\n<li>\n<p>2nn 在 1min 内会到 nn 中确认 3 次操作次数</p>\n</li>\n</ul>\n</li>\n<li>\n<p>NN 故障处理</p>\n<ul>\n<li>当 nn 故障时，可以将 2nn 中的数据拷贝到 nn 中，可恢复数据，存在丢失部分数据的情况，即时编辑日志信息不在 nn 中</li>\n</ul>\n</li>\n<li>\n<p>集群安全模式</p>\n<ul>\n<li>\n<p>当启动 nn 中，nn 会加载镜像文件和编辑日志，同时等待所有的 dn 向 nn 进行注册块信息，此时 hdfs 处于安全模式</p>\n</li>\n<li>\n<p>操作</p>\n<ul>\n<li>bin/hdfs dfsadmin -safemode get</li>\n<li>bin/hdfs dfsadmin -safemode enter</li>\n<li>bin/hdfs dfsadmin -safemode leave</li>\n<li>bin/hdfs dfsadmin -safemode wait</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>NN 多目录</p>\n<ul>\n<li>nn 可在本地目录中配置多个，每个目录存储的数据相同</li>\n</ul>\n</li>\n<li>\n<p>dn 多目录</p>\n<ul>\n<li>dn 可在本地目录中配置多个，每个目录存储的数据不相同</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"datanode\"><a class=\"anchor\" href=\"#datanode\">#</a> datanode</h3>\n<ul>\n<li>\n<p>机制</p>\n<ul>\n<li>\n<p>一个数据块在 Dn 中存储的数据</p>\n<ul>\n<li>数据本身</li>\n<li>数据长度</li>\n<li>检验和</li>\n<li>时间戳</li>\n</ul>\n</li>\n<li>\n<p>dn 启动以后会向 nn 进行注册</p>\n</li>\n<li>\n<p>后续每间隔 1h 向 nn 报告包含的所有数据块信息</p>\n</li>\n<li>\n<p>同时每 3s 与 nn 进行一次心跳，同时带回 nn 的指令</p>\n</li>\n<li>\n<p>如果超过 10min + 30 s 未进行心跳时，nn 认为该节点不可用</p>\n</li>\n</ul>\n</li>\n<li>\n<p>数据的完整性</p>\n<ul>\n<li>通过检验和来确保</li>\n</ul>\n</li>\n<li>\n<p>掉线时限参数设置</p>\n<ul>\n<li>TimeOut  = 2 * dfs.namenode.heartbeat.recheck-interval + 10 * dfs.heartbeat.interval。</li>\n</ul>\n</li>\n<li>\n<p>服役新数据节点</p>\n</li>\n<li>\n<p>退役旧数据节点</p>\n<ul>\n<li>白名单：确定允许访问 NameNode 的 DataNode 节点</li>\n<li>黑名单：指定集群运行过程中退役 DataNode 节点</li>\n<li>建议使用黑名单进行退役，黑明单退役相当于辞职，会将本节点的数据在 hdfs 进行转移，白名单相当于辞退，不会进行数据的转移</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"mapreduce\"><a class=\"anchor\" href=\"#mapreduce\">#</a> MapReduce</h2>\n<h3 id=\"概论-3\"><a class=\"anchor\" href=\"#概论-3\">#</a> 概论</h3>\n<ul>\n<li>\n<p>MapReduce 定义</p>\n<ul>\n<li>是一个分布式运算程序的编程框架</li>\n<li>核心功能：将用户编写的业务逻辑代码和自带默认组件整合成一个完整的分布式运算程序，并发运行在一个 hadoop 集群上</li>\n</ul>\n</li>\n<li>\n<p>MapReduce 编程思想</p>\n<ul>\n<li>一个运算程序一般是一个 map 阶段和一个 reduce 阶段</li>\n<li>MapTask 是并发执行，互不相干</li>\n<li>ReduceTask  也是并发执行，互不相干，但是依赖于 MapTask 的输出结果</li>\n</ul>\n</li>\n<li>\n<p>MapReduce 进程</p>\n<ul>\n<li>mrAppmaster ： 负责整个程序过程调度和状态协调</li>\n<li>MapTask ：负责 Map 阶段的整个数据处理</li>\n<li>ReduceTask  ：负责 Reduce 阶段的整个数据处理</li>\n</ul>\n</li>\n<li>\n<p>常用数据序列化类型</p>\n<ul>\n<li>String --&gt; Text</li>\n<li>Map --&gt; MapWritable</li>\n<li>Array --&gt; ArrayWritable</li>\n</ul>\n</li>\n<li>\n<p>MapReduce 编程规范</p>\n<ul>\n<li>\n<p>Mapper 阶段</p>\n<ul>\n<li>用户自定义的 mapper 类要继承与 mapper () 类</li>\n<li>指明 Mapper 的输入数据的 KV 对的数据类型</li>\n<li>指明输出数据的 KV 对的数据类型</li>\n<li>重写 map 方法</li>\n<li>map () 方法，每一个 &lt; k,v&gt; 都会调用一次</li>\n</ul>\n</li>\n<li>\n<p>Reducer 阶段</p>\n<ul>\n<li>用户自定义的 Reducer 类要继承 Reducer 类</li>\n<li>指明 Mapper 的输入数据的 KV 对的数据类型 ，与 mapper 输出的数据类型一致</li>\n<li>指明输出数据的 KV 对的数据类型</li>\n<li>重写 reduce () 方法</li>\n<li>每一组数据相同的 k 的 &lt;k,v&gt; 会调用一些 reduce () 方法</li>\n</ul>\n</li>\n<li>\n<p>Driver 阶段</p>\n<ul>\n<li>提交整个 MR 程序到 YARN 集群上，提交的是封装好的 MapReduce 程序相关运行参数的 job 对象</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"yarn\"><a class=\"anchor\" href=\"#yarn\">#</a> yarn</h2>\n<h2 id=\"优化\"><a class=\"anchor\" href=\"#优化\">#</a> 优化</h2>\n<h2 id=\"漫谈\"><a class=\"anchor\" href=\"#漫谈\">#</a> 漫谈</h2>\n<p><em>XMind - Evaluation Version</em></p>\n",
            "tags": []
        },
        {
            "id": "https://github.com/Mayizono/miyazono.github.io/big-data/zookeeper/zookeeper%E6%80%BB%E7%BB%93/",
            "url": "https://github.com/Mayizono/miyazono.github.io/big-data/zookeeper/zookeeper%E6%80%BB%E7%BB%93/",
            "title": "",
            "date_published": "2021-08-31T10:42:59.865Z",
            "content_html": "<h1 id=\"zookeeper总结\"><a class=\"anchor\" href=\"#zookeeper总结\">#</a> zookeeper 总结</h1>\n<hr />\n<p>总结：     时间：2020.05.02</p>\n<h2 id=\"一-zookeeper入门\"><a class=\"anchor\" href=\"#一-zookeeper入门\">#</a> 一、zookeeper 入门</h2>\n<h3 id=\"11-概述\"><a class=\"anchor\" href=\"#11-概述\">#</a> 1.1 概述</h3>\n<pre><code class=\"language-mysql\">-- 理解\n1) Apache一个分布式项目；\n2）是一个基于观察者模式设计的分布服务管理框架，负责存储和管理大家都关心的数据，然后接受观察者的注册，一旦数据发生变化，则zookeeper通知观察者。\n\n-- zookeeper = 文件系统 + 通知机制。\n\n</code></pre>\n<h3 id=\"12-zookeeper特点\"><a class=\"anchor\" href=\"#12-zookeeper特点\">#</a> 1.2 zookeeper 特点</h3>\n<pre><code class=\"language-mysql\">-- 特点\n1)  每一节点都有一个不重复的myid标识zookeeper集群；\n2） 一个领导者（leader） 和 n 个追随者 （follower）组成的集群；\n3） 集群只要有半数以上的节点存活就能对外提供服务，即使是在leader失败的情况下；-- 半数机制\n4） 根据半数机制，可知一般搭建奇数台的机器是有优势的；\n\t假设是4台，半数为2，故障一台，还有3台，3 &gt; 2 ,所以继续提供服务，再故障一台，剩下2台， 2 &gt; 2 ,错误，此时，不再对外提供服务；\n\t假设是 3台，半数为 1.5 ，故障1台，还有2台， 2 &gt; 1.5 , 所以继续提供服务，再故障一台，剩下1台， 1 &gt; 1.5 ,错误，此时不再对外提供服务。\n\t综上，4台机器，允许故障1台，3台机器，也允许故障一台，所以奇数台机器有优势。\n5） 全局数据一致：所有节点的数据是保持一致的，所以客户端无论连接到哪台机器，获取的数据都是一样的； -- 基于zab机制；\n6） 更新请求按照顺序执行；\n7） 数据更新的原子性：要么成功，要么失败；\n8） 实时性： 在一定时间范围内，client能够获得最新的数据。\n\n</code></pre>\n<h3 id=\"13-zookeeper数据结构\"><a class=\"anchor\" href=\"#13-zookeeper数据结构\">#</a> 1.3 zookeeper 数据结构</h3>\n<pre><code class=\"language-mysql\">1） 与linux文件结构相似，也是一个根目录。整体呈一颗树的形状；\n2） 每一个节点称作一个znode，每一个znode可以存储1M的数据；\n3） 每个znode通过其路径进行唯一标识。\n</code></pre>\n<h3 id=\"14-应用场景\"><a class=\"anchor\" href=\"#14-应用场景\">#</a> 1.4 应用场景</h3>\n<pre><code class=\"language-mysql\">1） 统一命名服务；\n2） 统一配置管理；\n3） 服务器节点动态上下线；\n4） 软负载均衡。\n</code></pre>\n<h3 id=\"15-配置参数解读\"><a class=\"anchor\" href=\"#15-配置参数解读\">#</a> 1.5  配置参数解读</h3>\n<pre><code class=\"language-mysql\">1）tickTime =2000：通信心跳数，Zookeeper服务器与客户端心跳时间，单位毫秒\nZookeeper使用的基本时间，服务器之间或客户端与服务器之间维持心跳的时间间隔，也就是每个tickTime时间就会发送一个心跳，时间单位为毫秒。\n它用于心跳机制，并且设置最小的session超时时间为两倍心跳时间。(session的最小超时时间是2*tickTime)\n2）initLimit =10：LF初始通信时限\n集群中的Follower跟随者服务器与Leader领导者服务器之间初始连接时能容忍的最多心跳数（tickTime的数量），用它来限定集群中的Zookeeper服务器连接到Leader的时限。\n3）syncLimit =5：LF同步通信时限\n集群中Leader与Follower之间的最大响应时间单位，假如响应超过syncLimit * tickTime，Leader认为Follwer死掉，从服务器列表中删除Follwer。\n4）dataDir：数据文件目录+数据持久化路径\n主要用于保存Zookeeper中的数据。\n5）clientPort =2181：客户端连接端口\n监听客户端连接的端口。\n</code></pre>\n<p>1.6 zookeeper 的四字命令</p>\n<pre><code class=\"language-mysql\">需要在Zookeeper的配置文件/opt/module/zookeeper-3.5.7/conf/zoo.cfg中加入如下配置:\n4lw.commands.whitelist=*\n-- 语法：\n连接方式： nc  机器名 端口号 （如果nc功能没有，则使用yum进行安装）\n-- 示例：\nnc hadoop102 2181\n</code></pre>\n<table>\n<thead>\n<tr>\n<th>ruok</th>\n<th>测试服务是否长度处于正确状态，如果确实如此，那么服务返回 imok , 否则不做任何响应。</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>conf</td>\n<td>3.3.0 版本引入的，打印出服务相关配置的详细信息</td>\n</tr>\n<tr>\n<td>cons</td>\n<td>列出所有连接到这台服务器的客户端全部会话详细信息。包括 接收 / 发送的包数量，会话 id，操作延迟、最后的操作执行等等信息</td>\n</tr>\n<tr>\n<td>crst</td>\n<td>重置所有连接的连接和会话统计信息</td>\n</tr>\n<tr>\n<td>dump</td>\n<td>列出那些比较重要的会话和临时节点。这个命令只能在 leader 节点上有用</td>\n</tr>\n<tr>\n<td>envi</td>\n<td>打印出服务环境的详细信息</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"二-zookeeper内部原理\"><a class=\"anchor\" href=\"#二-zookeeper内部原理\">#</a> 二、zookeeper 内部原理</h2>\n<h3 id=\"21-节点类型\"><a class=\"anchor\" href=\"#21-节点类型\">#</a> 2.1  节点类型</h3>\n<pre><code class=\"language-mysql\">分为持久性和短暂性节点。\n1） 持久性：客户端与服务器断开连接以后，创建的节点不删除；\n\t-- 分为带序号的持久性节点和不带序号的持久性节点。\n2） 短暂性：客户端与服务器断开连接以后，创建的节点删除；\n\t-- 分为带序号的短暂性节点和不带序号的短暂性节点。\n\t\n-- 如何理解带序号的呢？\n1） 在zk分布系统中，顺序号用于为所有事物进行全局排序，这样客户端根据顺序号推测事件的顺序。\n2） 顺序号是指当前节点下的节点数量，不可重复使用。如之前已经创建了一个节点，但是现在将其进行删除，再创建一个节点，顺序号是往后进行累加。\n\n-- 说明\n1） 短暂节点下不能创建子节点；\n2） 一个节点包含该节点的具体存储的内容和子节点的元数据信息。\n\n</code></pre>\n<h3 id=\"22-stat结构体\"><a class=\"anchor\" href=\"#22-stat结构体\">#</a> 2.2  Stat 结构体</h3>\n<pre><code class=\"language-mysql\">1）czxid-创建节点的事务zxid\n每次修改ZooKeeper状态都会收到一个zxid形式的时间戳，也就是ZooKeeper事务ID。\n事务ID是ZooKeeper中所有修改总的次序。每个修改都有唯一的zxid，如果zxid1小于zxid2，那么zxid1在zxid2之前发生。\n2）ctime 被创建的毫秒数(从1970年开始)\n3）mzxid 最后更新的事务zxid\n4）mtime 最后修改的毫秒数(从1970年开始)\n5）pZxid-znode最后更新的子节点zxid\n6）cversion 子节点变化号，znode子节点修改次数\n7）dataversion 数据变化号\n8）aclVersion 访问控制列表的变化号\n9）ephemeralOwner- 如果是临时节点，这个是znode拥有者的session id。如果不是临时节点则是0。\n10）dataLength   数据长度\n11）numChildren  子节点数量\n</code></pre>\n<h3 id=\"23-监听器原理重点\"><a class=\"anchor\" href=\"#23-监听器原理重点\">#</a> 2.3  监听器原理（重点）</h3>\n<pre><code class=\"language-mysql\"> 监听原理详解：\n 1） 首先有一个main（）线程；\n 2） 在main线程中创建zookeeper客户端，这时就会有两个线程，一个负责网络通信（connet），一个负责监听（listener）；\n 3） 通过connect线程将注册的监听事件发送给zookeeper；\n 4） 在zookeeper的注册监听器列表中将注册的监听事件添加到列表中；\n 5） zookeeper监听到有数据或者是路径发生变化时，就会将这个消息发送到listener线程；\n 6） listener线程内部调用process方法（）；\n</code></pre>\n<h3 id=\"24-选举机制重点\"><a class=\"anchor\" href=\"#24-选举机制重点\">#</a> 2.4  选举机制（重点）</h3>\n<pre><code class=\"language-mysql\">总结：选举机制由节点启动的顺序、myid、数据的zxid、服务器的数量有关。\n大致顺序为：\n1）zxid大的当选（99%情况下都是相等的）；\n2）根据节点启动的顺序，比较myid，在未到达半数的服务器数量以前，所有节点的票都将投给myid大的服务器，一旦到达了半数以上的服务器被启动（此时可以对外提供服务）时，myid最大的节点当选leader，其余的服务器为follower。\n</code></pre>\n<h3 id=\"25-写数据流程\"><a class=\"anchor\" href=\"#25-写数据流程\">#</a> 2.5  写数据流程</h3>\n<pre><code class=\"language-mysql\">1） Client 向zookeeper申请写数据，发送一个写请求；\n2） 如果这个服务器不是leader，则该服务器将接收到的请求转发给leader；\n3） leader将这个写的请求广播给所有的follower服务器，所有的服务器将写的事件写入队列中，并向leader发送准备就绪的成功消息；\n4） 当leader收到了半数以上的服务器返回了成功的消息以后，则说明该写的操作可以执行，则leader向所有的follower发送提交消息，所有的服务器收到信息以后则执行队列中的写操作；\n5） 对应的服务器完成写操作以后会通知client，数据写入成功。\n</code></pre>\n<h2 id=\"三-zookeeper实战部署\"><a class=\"anchor\" href=\"#三-zookeeper实战部署\">#</a> 三、zookeeper 实战部署</h2>\n<h3 id=\"31-客户端命令行操作\"><a class=\"anchor\" href=\"#31-客户端命令行操作\">#</a> 3.1 客户端命令行操作</h3>\n<pre><code class=\"language-mysql\">1）help : 显示所有的操作指令；\n2）ls path : 使用ls命令来查看当前znode的子节点\n\t-w ：监听子节点变化（只能监听一次）\n\t\n3） 查看当前目录下的详细信息：\n\tls -s path /  ls2 path / stat path \n4)  create 创建节点 （默认创建的是：持久性无顺序号的节点）\n\t -s 含顺序号\n\t -e 临时的\n5） get path : 获得节点的值\n     -w  监听节点内容变化\n6） set path ：设置节点具体的值\n8） delete : 删除节点\n9） deleteall：递归删除节点。\n</code></pre>\n<h3 id=\"32-api应用\"><a class=\"anchor\" href=\"#32-api应用\">#</a> 3.2 API 应用</h3>\n<ol>\n<li>创建 Maevn Modle</li>\n<li>添加 pom 文件</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>dependencies<span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t\t<span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>dependency<span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t\t<span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>groupId<span class=\"token punctuation\">></span></span>junit<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>groupId<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t\t<span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>artifactId<span class=\"token punctuation\">></span></span>junit<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>artifactId<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t\t<span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>version<span class=\"token punctuation\">></span></span>RELEASE<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>version<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>dependency<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t<span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>dependency<span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t\t<span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>groupId<span class=\"token punctuation\">></span></span>org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>logging<span class=\"token punctuation\">.</span>log4j<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>groupId<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t\t<span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>artifactId<span class=\"token punctuation\">></span></span>log4j<span class=\"token operator\">-</span>core<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>artifactId<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t\t<span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>version<span class=\"token punctuation\">></span></span><span class=\"token number\">2.8</span><span class=\"token number\">.2</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>version<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>dependency<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t<span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span> https<span class=\"token operator\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>mvnrepository<span class=\"token punctuation\">.</span>com<span class=\"token operator\">/</span>artifact<span class=\"token operator\">/</span>org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>zookeeper<span class=\"token operator\">/</span>zookeeper <span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t<span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>dependency<span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t\t<span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>groupId<span class=\"token punctuation\">></span></span>org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>zookeeper<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>groupId<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t\t<span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>artifactId<span class=\"token punctuation\">></span></span>zookeeper<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>artifactId<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t\t<span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>version<span class=\"token punctuation\">></span></span><span class=\"token number\">3.5</span><span class=\"token number\">.7</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>version<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>dependency<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>dependencies<span class=\"token operator\">></span></pre></td></tr></table></figure><ol start=\"3\">\n<li>需要在项目的 src/main/resources 目录下，新建一个文件，命名为 “log4j.properties”，在文件中填入</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>log4j<span class=\"token punctuation\">.</span>rootLogger<span class=\"token operator\">=</span>INFO<span class=\"token punctuation\">,</span> stdout  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>log4j<span class=\"token punctuation\">.</span>appender<span class=\"token punctuation\">.</span>stdout<span class=\"token operator\">=</span><span class=\"token class-name\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>log4j<span class=\"token punctuation\">.</span></span>ConsoleAppender</span>  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>log4j<span class=\"token punctuation\">.</span>appender<span class=\"token punctuation\">.</span>stdout<span class=\"token punctuation\">.</span>layout<span class=\"token operator\">=</span><span class=\"token class-name\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>log4j<span class=\"token punctuation\">.</span></span>PatternLayout</span>  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token class-name\"><span class=\"token namespace\">log4j<span class=\"token punctuation\">.</span>appender<span class=\"token punctuation\">.</span>stdout<span class=\"token punctuation\">.</span>layout<span class=\"token punctuation\">.</span></span>ConversionPattern</span><span class=\"token operator\">=</span><span class=\"token operator\">%</span>d <span class=\"token operator\">%</span>p <span class=\"token punctuation\">[</span><span class=\"token operator\">%</span>c<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token operator\">%</span>m<span class=\"token operator\">%</span>n  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>log4j<span class=\"token punctuation\">.</span>appender<span class=\"token punctuation\">.</span>logfile<span class=\"token operator\">=</span><span class=\"token class-name\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>log4j<span class=\"token punctuation\">.</span></span>FileAppender</span>  </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token class-name\"><span class=\"token namespace\">log4j<span class=\"token punctuation\">.</span>appender<span class=\"token punctuation\">.</span>logfile<span class=\"token punctuation\">.</span></span>File</span><span class=\"token operator\">=</span>target<span class=\"token operator\">/</span>spring<span class=\"token punctuation\">.</span>log  </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>log4j<span class=\"token punctuation\">.</span>appender<span class=\"token punctuation\">.</span>logfile<span class=\"token punctuation\">.</span>layout<span class=\"token operator\">=</span><span class=\"token class-name\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>log4j<span class=\"token punctuation\">.</span></span>PatternLayout</span>  </pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token class-name\"><span class=\"token namespace\">log4j<span class=\"token punctuation\">.</span>appender<span class=\"token punctuation\">.</span>logfile<span class=\"token punctuation\">.</span>layout<span class=\"token punctuation\">.</span></span>ConversionPattern</span><span class=\"token operator\">=</span><span class=\"token operator\">%</span>d <span class=\"token operator\">%</span>p <span class=\"token punctuation\">[</span><span class=\"token operator\">%</span>c<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token operator\">%</span>m<span class=\"token operator\">%</span>n</pre></td></tr></table></figure><ol start=\"4\">\n<li>创建 zookeeper 客户端</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> connectString <span class=\"token operator\">=</span><span class=\"token string\">\"hadoop102:2181,hadoop103:2181,hadoop104:2181\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> sessionTimeout <span class=\"token operator\">=</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">ZooKeeper</span> zkClient <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token annotation punctuation\">@Before</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\tzkClient <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ZooKeeper</span><span class=\"token punctuation\">(</span>connectString<span class=\"token punctuation\">,</span> sessionTimeout<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Watcher</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t\t<span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">process</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">WatchedEvent</span> event<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t\t\t<span class=\"token comment\">// 收到事件通知后的回调函数（用户的业务逻辑）</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span><span class=\"token function\">getType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"--\"</span> <span class=\"token operator\">+</span> event<span class=\"token punctuation\">.</span><span class=\"token function\">getPath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t\t\t<span class=\"token comment\">// 再次启动监听</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t\t\t\tzkClient<span class=\"token punctuation\">.</span><span class=\"token function\">getChildren</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t\t\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t\t\t\te<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"5\">\n<li>创建子节点</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 创建子节点</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t<span class=\"token comment\">// 参数 1：要创建的节点的路径； 参数 2：节点数据 ； 参数 3：节点权限 ；参数 4：节点的类型</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token class-name\">String</span> nodeCreated <span class=\"token operator\">=</span> zkClient<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/atguigu\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"jinlian\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Ids</span><span class=\"token punctuation\">.</span>OPEN_ACL_UNSAFE<span class=\"token punctuation\">,</span> <span class=\"token class-name\">CreateMode</span><span class=\"token punctuation\">.</span>PERSISTENT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"6\">\n<li>获取子节点并监听节点变化</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 获取子节点</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">getChildren</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t<span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> children <span class=\"token operator\">=</span> zkClient<span class=\"token punctuation\">.</span><span class=\"token function\">getChildren</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> child <span class=\"token operator\">:</span> children<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t<span class=\"token comment\">// 延时阻塞</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t<span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Long</span><span class=\"token punctuation\">.</span>MAX_VALUE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"7\">\n<li>判断 zonde 是否存在</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 判断 znode 是否存在</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">exist</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token class-name\">Stat</span> stat <span class=\"token operator\">=</span> zkClient<span class=\"token punctuation\">.</span><span class=\"token function\">exists</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/eclipse\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>stat <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">?</span> <span class=\"token string\">\"not exist\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"exist\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"33-监听服务器节点动态上下线案例\"><a class=\"anchor\" href=\"#33-监听服务器节点动态上下线案例\">#</a> 3.3 监听服务器节点动态上下线案例</h3>\n<p>服务器端向 Zookeeper 注册代码</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>atguigu<span class=\"token punctuation\">.</span>zkcase</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>atguigu<span class=\"token punctuation\">.</span>zookeeper</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>zookeeper<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>zookeeper<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Stat</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IOException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> *  当服务器上线后， 将当前服务器对应的信息写到 zk 中</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Server</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> connectionString <span class=\"token operator\">=</span> <span class=\"token string\">\"hadoop102:2181,hadoop103:2181,hadoop104:2181\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> sessionTimeOut <span class=\"token operator\">=</span> <span class=\"token number\">10000</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">ZooKeeper</span> zkClient <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span>  parentNode <span class=\"token operator\">=</span> <span class=\"token string\">\"/servers\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token class-name\">Server</span> server <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Server</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token comment\">//1. 初始化 zk 客户端对象</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        server<span class=\"token punctuation\">.</span><span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token comment\">//2. 判断 zk 中存储服务器信息的 Znode 是否存在</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        server<span class=\"token punctuation\">.</span><span class=\"token function\">parentNodeExists</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token comment\">//3. 将服务器的信息写入到 zk 中</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        server<span class=\"token punctuation\">.</span><span class=\"token function\">writeServer</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token comment\">//4. 保持线程不结束</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Long</span><span class=\"token punctuation\">.</span>MAX_VALUE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>     * args 中包含两个数据:</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>     *  1. server 的名字</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>     *  2. server 的信息</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>     * @param args</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">writeServer</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">KeeperException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token class-name\">String</span> s <span class=\"token operator\">=</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>                zkClient<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>parentNode <span class=\"token operator\">+</span> <span class=\"token string\">\"/\"</span> <span class=\"token operator\">+</span> args<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ZooDefs<span class=\"token punctuation\">.</span>Ids</span><span class=\"token punctuation\">.</span>OPEN_ACL_UNSAFE<span class=\"token punctuation\">,</span> <span class=\"token class-name\">CreateMode</span><span class=\"token punctuation\">.</span>EPHEMERAL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"*********** \"</span><span class=\"token operator\">+</span> s <span class=\"token operator\">+</span><span class=\"token string\">\"is on line  ************\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre> <span class=\"token comment\">//2. 判断 zk 中存储服务器信息的 Znode 是否存在</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">parentNodeExists</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">KeeperException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token class-name\">Stat</span> stat <span class=\"token operator\">=</span> zkClient<span class=\"token punctuation\">.</span><span class=\"token function\">exists</span><span class=\"token punctuation\">(</span>parentNode<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>stat <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>            <span class=\"token comment\">// 创建节点</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>            zkClient<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>parentNode<span class=\"token punctuation\">,</span><span class=\"token string\">\"servers\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ZooDefs<span class=\"token punctuation\">.</span>Ids</span><span class=\"token punctuation\">.</span>OPEN_ACL_UNSAFE<span class=\"token punctuation\">,</span><span class=\"token class-name\">CreateMode</span><span class=\"token punctuation\">.</span>PERSISTENT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t<span class=\"token comment\">//1. 初始化 zk 客户端对象</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        zkClient <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ZooKeeper</span><span class=\"token punctuation\">(</span>connectionString<span class=\"token punctuation\">,</span> sessionTimeOut<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Watcher</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>            <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>            <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">process</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">WatchedEvent</span> event<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>客户端代码</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>atguigu<span class=\"token punctuation\">.</span>zkcase</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IOException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ArrayList</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">List</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>zookeeper<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">WatchedEvent</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>zookeeper<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Watcher</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>zookeeper<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ZooKeeper</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DistributeClient</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> connectString <span class=\"token operator\">=</span> <span class=\"token string\">\"hadoop102:2181,hadoop103:2181,hadoop104:2181\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> sessionTimeout <span class=\"token operator\">=</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">ZooKeeper</span> zk <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> parentNode <span class=\"token operator\">=</span> <span class=\"token string\">\"/servers\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token comment\">// 创建到 zk 的客户端连接</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">getConnect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\tzk <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ZooKeeper</span><span class=\"token punctuation\">(</span>connectString<span class=\"token punctuation\">,</span> sessionTimeout<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Watcher</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t\t<span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">process</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">WatchedEvent</span> event<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t\t\t<span class=\"token comment\">// 再次启动监听</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t\t\t\t<span class=\"token function\">getServerList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\t\t\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\t\t\t\te<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t<span class=\"token comment\">// 获取服务器列表信息</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">getServerList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t\t<span class=\"token comment\">// 1 获取服务器子节点信息，并且对父节点进行监听</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t\t<span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> children <span class=\"token operator\">=</span> zk<span class=\"token punctuation\">.</span><span class=\"token function\">getChildren</span><span class=\"token punctuation\">(</span>parentNode<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token comment\">// 2 存储服务器信息列表</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t\t<span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> servers <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token comment\">// 3 遍历所有节点，获取节点中的主机名称信息</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> child <span class=\"token operator\">:</span> children<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t\t\t<span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> data <span class=\"token operator\">=</span> zk<span class=\"token punctuation\">.</span><span class=\"token function\">getData</span><span class=\"token punctuation\">(</span>parentNode <span class=\"token operator\">+</span> <span class=\"token string\">\"/\"</span> <span class=\"token operator\">+</span> child<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t\t\tservers<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token comment\">// 4 打印服务器列表信息</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>servers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t<span class=\"token comment\">// 业务功能</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">business</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"client is working ...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Long</span><span class=\"token punctuation\">.</span>MAX_VALUE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\t\t<span class=\"token comment\">// 1 获取 zk 连接</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>\t\t<span class=\"token class-name\">DistributeClient</span> client <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DistributeClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>\t\tclient<span class=\"token punctuation\">.</span><span class=\"token function\">getConnect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>\t\t<span class=\"token comment\">// 2 获取 servers 的子节点信息，从中获取服务器信息列表</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>\t\tclient<span class=\"token punctuation\">.</span><span class=\"token function\">getServerList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>\t\t<span class=\"token comment\">// 3 业务进程启动</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>\t\tclient<span class=\"token punctuation\">.</span><span class=\"token function\">business</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": []
        },
        {
            "id": "https://github.com/Mayizono/miyazono.github.io/big-data/spark/1.Spark%E7%8E%AF%E5%A2%83%E7%9A%84%E5%AE%89%E8%A3%85/",
            "url": "https://github.com/Mayizono/miyazono.github.io/big-data/spark/1.Spark%E7%8E%AF%E5%A2%83%E7%9A%84%E5%AE%89%E8%A3%85/",
            "title": "",
            "date_published": "2021-08-31T10:42:35.379Z",
            "content_html": "<h1 id=\"spark环境的安装\"><a class=\"anchor\" href=\"#spark环境的安装\">#</a> Spark 环境的安装</h1>\n<hr />\n<h2 id=\"一-spark简介\"><a class=\"anchor\" href=\"#一-spark简介\">#</a> 一、 Spark 简介</h2>\n<h3 id=\"11-spark是什么\"><a class=\"anchor\" href=\"#11-spark是什么\">#</a> 1.1 Spark 是什么</h3>\n<blockquote>\n<p>是一种基于<strong>内存</strong>的快速、通用、可拓展的大数据<strong>分析计算引擎</strong>。</p>\n</blockquote>\n<h3 id=\"12-hadoop-和-spark关联\"><a class=\"anchor\" href=\"#12-hadoop-和-spark关联\">#</a> 1.2 Hadoop 和 Spark 关联</h3>\n<blockquote>\n<ol>\n<li>hadoop ：2013 年 10 月发布 2.X (Yarn) 版本；</li>\n<li>spark ：   2013 年 6 月，Spark 成为了 Apache 基金会下的项目。</li>\n<li>Spark 可以理解为 hadoop MR 的升级版。</li>\n</ol>\n</blockquote>\n<h4 id=\"121-hadoop发展历史\"><a class=\"anchor\" href=\"#121-hadoop发展历史\">#</a> 1.2.1 hadoop 发展历史</h4>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 1.X 版本 --2011 年发布</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>从架构的角度存在很多的问题</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">1.</span> Namenode 是单点操作，所以容易出现单点故障，制约了HDFS的发展</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token number\">2.</span> Namenode的内存限制也影响了HDFS的发展</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> </pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token number\">3.</span> MapReduce是一种基于数据集的工作模式，面向数据，这种工作模式一般是从存储上加载数据集，然后操作数据集，最后将结果写入物理存储设备。数据更多面临的是一次性计算，所以初衷是单一数据计算，不支持迭代计算</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> </pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token number\">4.</span> 资源调度和任务调度耦合在一起，无法扩展，所以Hadoop1<span class=\"token punctuation\">.</span>X版本只支持MR计算框架</pre></td></tr></table></figure><p>![image-20200602020855518](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saWFuLXpwLm9zcy1jbi1zaGVuemhlbi5hbGl5dW5jcy5jb20vcGlj\">https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic</span> GO/20200602020855.png)</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 2.X 版本（Yarn） --2013.10 月发布</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">1.</span> <span class=\"token number\">2.</span>X版本支持Namenode高可用</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">2.</span> <span class=\"token number\">2.</span>X版本使用新的资源调度框架Yarn，只做资源调度，不进行任务调度。</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token number\">3.</span> MR框架只做任务调度，可插拔，所以扩展性非常的强</pre></td></tr></table></figure><p>![image-20200602021032775](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saWFuLXpwLm9zcy1jbi1zaGVuemhlbi5hbGl5dW5jcy5jb20vcGlj\">https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic</span> GO/20200602021032.png)</p>\n<h4 id=\"122-spark-技术\"><a class=\"anchor\" href=\"#122-spark-技术\">#</a> 1.2.2 Spark 技术</h4>\n<blockquote>\n<ol>\n<li>\n<p>Spark 其实核心思想就是基于 MR 的，优化了 MR 数据处理的中间过程，提升了数据处理的性能</p>\n</li>\n<li>\n<p>MR：多任务之间的数据会进行落盘</p>\n</li>\n<li>\n<p>Spark：多任务之间的数据会在内存中。</p>\n</li>\n<li>\n<p>因为内存大小也有上限的，当内存不足时，就会出现 job 运行失败，所以 Spark 并不是完全替代 MR。</p>\n</li>\n</ol>\n</blockquote>\n<ul>\n<li>MR 和 Spark 区别</li>\n</ul>\n<p>![image-20200602021626723](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saWFuLXpwLm9zcy1jbi1zaGVuemhlbi5hbGl5dW5jcy5jb20vcGlj\">https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic</span> GO/20200602021626.png)</p>\n<p>![image-20200602021747457](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saWFuLXpwLm9zcy1jbi1zaGVuemhlbi5hbGl5dW5jcy5jb20vcGlj\">https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic</span> GO/20200602021747.png)</p>\n<ul>\n<li>Spark 的特点</li>\n</ul>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1.</span> spark计算模型更加丰富，MR只有mapper和reducer， spark的计算模型模糊了mapper和reduce的界限，更容易使用<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">2.</span> spark使用scala语言开发，支持函数式编程，所以就更利用迭代式计算<span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">3.</span> spark也有自己的任务调度器和资源调度器。</pre></td></tr></table></figure><p>![image-20200602022304372](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saWFuLXpwLm9zcy1jbi1zaGVuemhlbi5hbGl5dW5jcy5jb20vcGlj\">https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic</span> GO/20200602022304.png)</p>\n<h4 id=\"123-spark-on-yarn\"><a class=\"anchor\" href=\"#123-spark-on-yarn\">#</a> 1.2.3 Spark On Yarn</h4>\n<blockquote>\n<p>在实际开发中，hadoop 和 Spark 合二为一。</p>\n<p>调度器：Hadoop 的 Yarn</p>\n<p>任务执行：Spark 的任务调度，Driver 和 Executor</p>\n</blockquote>\n<p>![image-20200602022554760](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saWFuLXpwLm9zcy1jbi1zaGVuemhlbi5hbGl5dW5jcy5jb20vcGlj\">https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic</span> GO/20200602022554.png)</p>\n<h3 id=\"13-spark的核心框架\"><a class=\"anchor\" href=\"#13-spark的核心框架\">#</a> 1.3 Spark 的核心框架</h3>\n<p>![image-20200602181641619](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saWFuLXpwLm9zcy1jbi1zaGVuemhlbi5hbGl5dW5jcy5jb20vcGlj\">https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic</span> GO/20200602181641.png)</p>\n<blockquote>\n<ol>\n<li>Apache Spark Core : 最基础和最核心的功能</li>\n<li>Spark SQL : 用于处理关系型数据库</li>\n<li>Spark  Streaming：针对实时数据的处理流式计算的框架，Flink 框架更有优势</li>\n<li>Spark MLlib: 机器学习</li>\n<li>Spark Graphx: 面向图形计算</li>\n</ol>\n</blockquote>\n<p>我们重点学习 Spark 前面三个框架。</p>\n<h2 id=\"二-spark快速上手\"><a class=\"anchor\" href=\"#二-spark快速上手\">#</a> 二、Spark 快速上手</h2>\n<h3 id=\"创建maven工程\"><a class=\"anchor\" href=\"#创建maven工程\">#</a> 创建 Maven 工程</h3>\n<h3 id=\"21-增加scala插件\"><a class=\"anchor\" href=\"#21-增加scala插件\">#</a> 2.1 增加 Scala 插件</h3>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 当前使用的 Spark 版本为 2.4.5，默认采用的 Scala 版本为 2.12</span></pre></td></tr></table></figure><h3 id=\"22-增加依赖关系\"><a class=\"anchor\" href=\"#22-增加依赖关系\">#</a> 2.2  增加依赖关系</h3>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 修改 Maven 项目中的 POM 文件，增加 Spark 框架的依赖关系。当前文件是基于 Spark2.4.5 版本，使用时请注意对应版本</span></pre></td></tr></table></figure><figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependencies</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.apache.spark<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spark-core_2.12<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>2.4.5<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependencies</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>build</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>plugins</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">&lt;!-- 该插件用于将 Scala 代码编译成 class 文件 --></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>plugin</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>net.alchim31.maven<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>scala-maven-plugin<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>3.2.2<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>executions</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>execution</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                    <span class=\"token comment\">&lt;!-- 声明绑定到 maven 的 compile 阶段 --></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>goals</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>goal</span><span class=\"token punctuation\">></span></span>testCompile<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>goal</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>goals</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>execution</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>executions</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>plugin</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>plugin</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.apache.maven.plugins<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>maven-assembly-plugin<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>3.0.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>configuration</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>descriptorRefs</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>descriptorRef</span><span class=\"token punctuation\">></span></span>jar-with-dependencies<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>descriptorRef</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>descriptorRefs</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>configuration</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>executions</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>execution</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>id</span><span class=\"token punctuation\">></span></span>make-assembly<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>id</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>phase</span><span class=\"token punctuation\">></span></span>package<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>phase</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>goals</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>                        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>goal</span><span class=\"token punctuation\">></span></span>single<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>goal</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>goals</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>execution</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>executions</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>plugin</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>plugins</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>build</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h3 id=\"23-增加日志文件配置文件\"><a class=\"anchor\" href=\"#23-增加日志文件配置文件\">#</a> 2.3  增加日志文件配置文件</h3>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 在项目的 resources 目录中创建 log4j.properties 文件，并将如下信息添加到文件中（日志信息）：</span></pre></td></tr></table></figure><figure class=\"highlight properties\"><figcaption data-lang=\".properties\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token attr-name\">log4j.rootCategory</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">ERROR, console</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token attr-name\">log4j.appender.console</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">org.apache.log4j.ConsoleAppender</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token attr-name\">log4j.appender.console.target</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">System.err</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token attr-name\">log4j.appender.console.layout</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">org.apache.log4j.PatternLayout</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token attr-name\">log4j.appender.console.layout.ConversionPattern</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">%d&#123;yy/MM/dd HH:mm:ss&#125; %p %c&#123;1&#125;: %m%n</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># Set the default spark-shell log level to ERROR. When running the spark-shell, the</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\"># log level for this class is used to overwrite the root logger's log level, so that</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\"># the user can have different defaults for the shell and regular Spark apps.</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token attr-name\">log4j.logger.org.apache.spark.repl.Main</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">ERROR</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\"># Settings to quiet third party logs that are too verbose</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token attr-name\">log4j.logger.org.spark_project.jetty</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">ERROR</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token attr-name\">log4j.logger.org.spark_project.jetty.util.component.AbstractLifeCycle</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">ERROR</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token attr-name\">log4j.logger.org.apache.spark.repl.SparkIMain$exprTyper</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">ERROR</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token attr-name\">log4j.logger.org.apache.spark.repl.SparkILoop$SparkILoopInterpreter</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">ERROR</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token attr-name\">log4j.logger.org.apache.parquet</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">ERROR</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token attr-name\">log4j.logger.parquet</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">ERROR</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\"># SPARK-9183: Settings to avoid annoying messages when looking up nonexistent UDFs in SparkSQL with Hive support</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token attr-name\">log4j.logger.org.apache.hadoop.hive.metastore.RetryingHMSHandler</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">FATAL</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token attr-name\">log4j.logger.org.apache.hadoop.hive.ql.exec.FunctionRegistry</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">ERROR</span></pre></td></tr></table></figure><h3 id=\"24-wordcount\"><a class=\"anchor\" href=\"#24-wordcount\">#</a> 2.4   WordCount</h3>\n<ul>\n<li>方法 1：</li>\n</ul>\n<figure class=\"highlight scala\"><figcaption data-lang=\"scala\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>步骤：</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">//1. 创建 Spark 的环境</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">//2. 连接 Spark</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">//3. 具体的操作</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">//4. 关闭连接</span></pre></td></tr></table></figure><figure class=\"highlight scala\"><figcaption data-lang=\"scala\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">object</span> Spark_WordCount <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">def</span> main<span class=\"token punctuation\">(</span>args<span class=\"token operator\">:</span> Array<span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Unit</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 需求：读取一个文件中的数据，求 (word,count)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">//1. 创建 Spark 的环境</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">val</span> sparkConf<span class=\"token operator\">:</span> SparkConf <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> SparkConf<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>setMaster<span class=\"token punctuation\">(</span><span class=\"token string\">\"local\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>setAppName<span class=\"token punctuation\">(</span><span class=\"token string\">\"wordcount\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">//2. 连接 Spark</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">val</span> sc <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> SparkContext<span class=\"token punctuation\">(</span>sparkConf<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">//3. 具体的操作</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">//3.1 读取数据</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">val</span> str<span class=\"token operator\">:</span> RDD<span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> sc<span class=\"token punctuation\">.</span>textFile<span class=\"token punctuation\">(</span><span class=\"token string\">\"input\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\">//3.2 扁平化数据</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">val</span> words<span class=\"token operator\">:</span> RDD<span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span>flatMap<span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token comment\">//3.3 分组</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">val</span> wordtocount<span class=\"token operator\">:</span> RDD<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> Iterable<span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> words<span class=\"token punctuation\">.</span>groupBy<span class=\"token punctuation\">(</span>word <span class=\"token keyword\">=></span> word<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token comment\">//3.4 结构化处理</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">val</span> wordcount<span class=\"token operator\">:</span> RDD<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> wordtocount<span class=\"token punctuation\">.</span>map <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>      <span class=\"token keyword\">case</span> <span class=\"token punctuation\">(</span>word<span class=\"token punctuation\">,</span> iter<span class=\"token punctuation\">)</span> <span class=\"token keyword\">=></span> <span class=\"token punctuation\">(</span>word<span class=\"token punctuation\">,</span> iter<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token comment\">//3.5 数据采集并打印在控制台</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">val</span> result<span class=\"token operator\">:</span> Array<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> wordcount<span class=\"token punctuation\">.</span>collect<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    println<span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span>mkString<span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token comment\">//4. 关闭连接</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    sc<span class=\"token punctuation\">.</span>stop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>方法二</li>\n</ul>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 在方法 1 的基础上，将分组和结构化处理操作进行优化。</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">-- 方法 1：//3.3 分组 +  //3.4 结构化处理</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>分组操作结果：<span class=\"token punctuation\">(</span>spark <span class=\"token punctuation\">,</span> List<span class=\"token punctuation\">(</span>spark<span class=\"token punctuation\">,</span>spark<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>结构化处理结果：<span class=\"token punctuation\">(</span>spark<span class=\"token punctuation\">,</span>list<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">-- 优化方法：在进行分组操作的同时就进行单词出现的次数进行计算。</span></pre></td></tr></table></figure><figure class=\"highlight scala\"><figcaption data-lang=\"scala\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">object</span> Spark_WordCount1 <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">def</span> main<span class=\"token punctuation\">(</span>args<span class=\"token operator\">:</span> Array<span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Unit</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">//1. 创建 spark 的环境</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">val</span> sparkConf<span class=\"token operator\">:</span> SparkConf <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> SparkConf<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>setMaster<span class=\"token punctuation\">(</span><span class=\"token string\">\"local\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>setAppName<span class=\"token punctuation\">(</span><span class=\"token string\">\"wordcount\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">//2. 与 spark 进行连接</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">val</span> sc <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> SparkContext<span class=\"token punctuation\">(</span>sparkConf<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">//3. 具体的操作</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">val</span> datas<span class=\"token operator\">:</span> RDD<span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> sc<span class=\"token punctuation\">.</span>textFile<span class=\"token punctuation\">(</span><span class=\"token string\">\"input\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">val</span> words<span class=\"token operator\">:</span> RDD<span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> datas<span class=\"token punctuation\">.</span>flatMap<span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">val</span> wordto<span class=\"token operator\">:</span> RDD<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> words<span class=\"token punctuation\">.</span>map<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">val</span> wordcount<span class=\"token operator\">:</span> RDD<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> wordto<span class=\"token punctuation\">.</span>reduceByKey<span class=\"token punctuation\">(</span>_ <span class=\"token operator\">+</span> _<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    println<span class=\"token punctuation\">(</span>wordcount<span class=\"token punctuation\">.</span>collect<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>mkString<span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token comment\">//4. 关闭连接</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    sc<span class=\"token punctuation\">.</span>stop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"三-spark运行环境\"><a class=\"anchor\" href=\"#三-spark运行环境\">#</a> 三、 Spark 运行环境</h2>\n<h3 id=\"31-spark的运行环境\"><a class=\"anchor\" href=\"#31-spark的运行环境\">#</a> 3.1 Spark 的运行环境</h3>\n<p>![image-20200602185736933](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saWFuLXpwLm9zcy1jbi1zaGVuemhlbi5hbGl5dW5jcy5jb20vcGlj\">https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic</span> GO/20200602185736.png)</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>我们主要学习<span class=\"token number\">3</span>种环境，并简单讲述一下<span class=\"token number\">2</span>种环境</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>学习的环境：</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">1.</span> 本地运行模式：<span class=\"token keyword\">local</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">2.</span> 独立运行模式：standalone</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token number\">3.</span> YARN运行模式</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>简单了解：</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token number\">1.</span> MESOS</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token number\">2.</span> Windows</pre></td></tr></table></figure><h3 id=\"32-本地运行模式\"><a class=\"anchor\" href=\"#32-本地运行模式\">#</a> 3.2 本地运行模式</h3>\n<h4 id=\"321-本地模式介绍\"><a class=\"anchor\" href=\"#321-本地模式介绍\">#</a> 3.2.1 本地模式介绍</h4>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 1. 什么是本地模式</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> 不需要其他任何节点资源就可以在本地执行Spark代码的环境<span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> 我们之前在IDEA中运行的环境我们称之为开发环境，和本地环境还是不一样</pre></td></tr></table></figure><h4 id=\"322-解压缩文件\"><a class=\"anchor\" href=\"#322-解压缩文件\">#</a> 3.2.2 解压缩文件</h4>\n<ul>\n<li>第一步：解压缩</li>\n</ul>\n<ol>\n<li>将 spark-2.4.5-bin-without-hadoop-scala-2.12.tgz 文件上传到 Linux 中 /opt/software，并解压缩到 /opt/module 文件目录下，并修改名称为：spark-local</li>\n</ol>\n<figure class=\"highlight scala\"><figcaption data-lang=\"scala\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 解压</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>tar <span class=\"token operator\">-</span>zxvf spark<span class=\"token operator\">-</span><span class=\"token number\">2.4</span><span class=\"token number\">.5</span><span class=\"token operator\">-</span>bin<span class=\"token operator\">-</span>without<span class=\"token operator\">-</span>hadoop<span class=\"token operator\">-</span>scala<span class=\"token operator\">-</span><span class=\"token number\">2.12</span><span class=\"token punctuation\">.</span>tgz <span class=\"token operator\">-</span>C <span class=\"token operator\">/</span>opt<span class=\"token operator\">/</span>module</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 改名</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>mv spark<span class=\"token operator\">-</span><span class=\"token number\">2.4</span><span class=\"token number\">.5</span><span class=\"token operator\">-</span>bin<span class=\"token operator\">-</span>without<span class=\"token operator\">-</span>hadoop<span class=\"token operator\">-</span>scala<span class=\"token operator\">-</span><span class=\"token number\">2.12</span> spark<span class=\"token operator\">-</span>local</pre></td></tr></table></figure><ul>\n<li>第二步：Spark 关联 hadoop，spark2.4.5 默认不支持 Hadoop3，可以采用多种不同的方式关联 Hadoop3</li>\n</ul>\n<ol>\n<li>方法 1：修改 spark-local/conf/spark-env.sh 文件，增加如下内容</li>\n</ol>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>SPARK_DIST_CLASSPATH<span class=\"token operator\">=</span>$<span class=\"token punctuation\">(</span><span class=\"token operator\">/</span>opt<span class=\"token operator\">/</span>module<span class=\"token operator\">/</span>hadoop3<span class=\"token operator\">/</span>bin<span class=\"token operator\">/</span>hadoop classpath<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>方法 2：将 hadoop3 的 jar 包上传到 ==/opt/module/spark-local/jars==</li>\n</ol>\n<h4 id=\"323-启动local环境\"><a class=\"anchor\" href=\"#323-启动local环境\">#</a> 3.2.3 启动 local 环境</h4>\n<ol>\n<li>进入 /opt/module/spark-local 路径，执行如下指令</li>\n</ol>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>atguigu<span class=\"token variable\">@hadoop105</span> spark<span class=\"token operator\">-</span><span class=\"token keyword\">local</span><span class=\"token punctuation\">]</span>$ bin<span class=\"token operator\">/</span>spark<span class=\"token operator\">-</span>shell <span class=\"token comment\">--master local</span></pre></td></tr></table></figure><p>![image-20200602192241228](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saWFuLXpwLm9zcy1jbi1zaGVuemhlbi5hbGl5dW5jcy5jb20vcGlj\">https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic</span> GO/20200602192241.png)</p>\n<ol start=\"2\">\n<li>启动成功后，可以输入网址进行 Web UI 监控页面访问</li>\n</ol>\n<pre><code>http://hadoop105:4040\n</code></pre>\n<p>![image-20200602192318112](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saWFuLXpwLm9zcy1jbi1zaGVuemhlbi5hbGl5dW5jcy5jb20vcGlj\">https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic</span> GO/20200602192318.png)</p>\n<p>3.2.4 命令行工具</p>\n<ol>\n<li>在 ==<strong>/opt/module/spark-local/data</strong>== 目录下创建一个文件：word.txt，在文件中随机写入一些单词</li>\n<li>在 ==<strong>/opt/module/spark-local</strong>== 下，执行如下命令</li>\n</ol>\n<figure class=\"highlight scala\"><figcaption data-lang=\"scala\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>atguigu<span class=\"token annotation punctuation\">@hadoop105</span> spark<span class=\"token operator\">-</span>local<span class=\"token punctuation\">]</span>$ sc<span class=\"token punctuation\">.</span>textFile<span class=\"token punctuation\">(</span><span class=\"token string\">\"data/word.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>flatMap<span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>map<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>reduceByKey<span class=\"token punctuation\">(</span>_<span class=\"token operator\">+</span>_<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>collect</pre></td></tr></table></figure><p>![image-20200602192716232](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saWFuLXpwLm9zcy1jbi1zaGVuemhlbi5hbGl5dW5jcy5jb20vcGlj\">https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic</span> GO/20200602192716.png)</p>\n<h4 id=\"324-退出本地模式\"><a class=\"anchor\" href=\"#324-退出本地模式\">#</a> 3.2.4 退出本地模式</h4>\n<ul>\n<li>按键 Ctrl+C 或输入 Scala 指令</li>\n</ul>\n<pre><code>：quit\n</code></pre>\n<h4 id=\"325-提交应用\"><a class=\"anchor\" href=\"#325-提交应用\">#</a> 3.2.5 提交应用</h4>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>atguigu<span class=\"token variable\">@hadoop105</span> spark<span class=\"token operator\">-</span><span class=\"token keyword\">local</span><span class=\"token punctuation\">]</span>$ bin<span class=\"token operator\">/</span>spark<span class=\"token operator\">-</span>submit \\</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">--class org.apache.spark.examples.SparkPi \\</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">--master local[2] \\</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">.</span><span class=\"token operator\">/</span>examples<span class=\"token operator\">/</span>jars<span class=\"token operator\">/</span>spark<span class=\"token operator\">-</span>examples_2<span class=\"token punctuation\">.</span><span class=\"token number\">12</span><span class=\"token operator\">-</span><span class=\"token number\">2.4</span><span class=\"token number\">.5</span><span class=\"token punctuation\">.</span>jar \\</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">10</span></pre></td></tr></table></figure><ul>\n<li>参数说明</li>\n</ul>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>spark<span class=\"token operator\">-</span>submit ： 提交应用程序</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">--class 表示要执行程序的主类</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">--master local [2] ： 本地部署模式，local，本地，[2], 数字 2 表示分配的 cpu 核数</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>spark<span class=\"token operator\">-</span>examples_2<span class=\"token punctuation\">.</span><span class=\"token number\">12</span><span class=\"token operator\">-</span><span class=\"token number\">2.4</span><span class=\"token number\">.5</span><span class=\"token punctuation\">.</span>jar ： 执行程序的主类所在的jar包</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">10</span> ： 用于设定当前应用的任务数量</pre></td></tr></table></figure><p>![image-20200602193202267](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saWFuLXpwLm9zcy1jbi1zaGVuemhlbi5hbGl5dW5jcy5jb20vcGlj\">https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic</span> GO/20200602193202.png)</p>\n<h3 id=\"33-独立运行模式\"><a class=\"anchor\" href=\"#33-独立运行模式\">#</a> 3.3 独立运行模式</h3>\n<h4 id=\"331-独立运行介绍\"><a class=\"anchor\" href=\"#331-独立运行介绍\">#</a> 3.3.1 独立运行介绍</h4>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 什么是独立运行模式</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token number\">1.</span> standalone，表示资源调度器和任务调度均是使用Sqark自身的集群来运行。</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      a、资源调度：master<span class=\"token punctuation\">(</span>Spark的调度者<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>worker<span class=\"token punctuation\">(</span>Spark节点<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      b、任务调度：driver<span class=\"token punctuation\">(</span>驱动器<span class=\"token punctuation\">)</span>，exerutor<span class=\"token punctuation\">(</span>执行器<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h4 id=\"332-解压缩文件\"><a class=\"anchor\" href=\"#332-解压缩文件\">#</a> 3.3.2 解压缩文件</h4>\n<ul>\n<li>第一步：解压缩</li>\n</ul>\n<ol>\n<li>将 spark-2.4.5-bin-without-hadoop-scala-2.12.tgz 文件上传到 Linux 中 /opt/software，并解压缩到 /opt/module 文件目录下，并修改名称为：spark-standalone</li>\n</ol>\n<figure class=\"highlight scala\"><figcaption data-lang=\"scala\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 解压</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>tar <span class=\"token operator\">-</span>zxvf spark<span class=\"token operator\">-</span><span class=\"token number\">2.4</span><span class=\"token number\">.5</span><span class=\"token operator\">-</span>bin<span class=\"token operator\">-</span>without<span class=\"token operator\">-</span>hadoop<span class=\"token operator\">-</span>scala<span class=\"token operator\">-</span><span class=\"token number\">2.12</span><span class=\"token punctuation\">.</span>tgz <span class=\"token operator\">-</span>C <span class=\"token operator\">/</span>opt<span class=\"token operator\">/</span>module</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 改名</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>mv spark<span class=\"token operator\">-</span><span class=\"token number\">2.4</span><span class=\"token number\">.5</span><span class=\"token operator\">-</span>bin<span class=\"token operator\">-</span>without<span class=\"token operator\">-</span>hadoop<span class=\"token operator\">-</span>scala<span class=\"token operator\">-</span><span class=\"token number\">2.12</span> spark<span class=\"token operator\">-</span>standalone</pre></td></tr></table></figure><ul>\n<li>第二步：Spark 关联 hadoop，spark2.4.5 默认不支持 Hadoop3，可以采用多种不同的方式关联 Hadoop3</li>\n</ul>\n<ol>\n<li>方法 1：修改 spark-local/conf/spark-env.sh 文件，增加如下内容</li>\n</ol>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>SPARK_DIST_CLASSPATH<span class=\"token operator\">=</span>$<span class=\"token punctuation\">(</span><span class=\"token operator\">/</span>opt<span class=\"token operator\">/</span>module<span class=\"token operator\">/</span>hadoop3<span class=\"token operator\">/</span>bin<span class=\"token operator\">/</span>hadoop classpath<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>方法 2：将 hadoop3 的 jar 包上传到 ==/opt/module/spark-local/jars==</li>\n</ol>\n<h4 id=\"333-修改配置文件\"><a class=\"anchor\" href=\"#333-修改配置文件\">#</a> 3.3.3 修改配置文件</h4>\n<ol>\n<li>进入 /opt/module/spark-standalone/conf，修改 slaves.template 文件名为 slaves</li>\n</ol>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>atguigu<span class=\"token variable\">@hadoop105</span> conf<span class=\"token punctuation\">]</span>$ mv slaves<span class=\"token punctuation\">.</span>template slaves</pre></td></tr></table></figure><ol start=\"2\">\n<li>修改 slaves 文件，添加 work 节点</li>\n</ol>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>hadoop105</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>hadoop106</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>hadoop107</pre></td></tr></table></figure><ol start=\"3\">\n<li><span class=\"exturl\" data-url=\"aHR0cDovL3huLS1zcGFyay1lbnYtejg5bno3OHAuc2gueG4tLXRlbXBsYXRlc3BhcmstZW52LXJuNjBhYjZodXkwYm0yN2Yuc2g=\">修改 spark-env.sh.template 文件名为 spark-env.sh</span></li>\n</ol>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>atguigu<span class=\"token variable\">@hadoop105</span> conf<span class=\"token punctuation\">]</span>$ mv spark<span class=\"token operator\">-</span>env<span class=\"token punctuation\">.</span>sh<span class=\"token punctuation\">.</span>template spark<span class=\"token operator\">-</span>env<span class=\"token punctuation\">.</span>sh</pre></td></tr></table></figure><ol start=\"4\">\n<li>修改 spark-env.sh 文件，添加 JAVA_HOME 环境变量和集群对应的 master 节点</li>\n</ol>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>export JAVA_HOME<span class=\"token operator\">=</span><span class=\"token operator\">/</span>opt<span class=\"token operator\">/</span>module<span class=\"token operator\">/</span>jdk1<span class=\"token punctuation\">.</span><span class=\"token number\">8.0</span>_212</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>SPARK_MASTER_HOST<span class=\"token operator\">=</span>hadoop105</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>SPARK_MASTER_PORT<span class=\"token operator\">=</span><span class=\"token number\">7077</span></pre></td></tr></table></figure><blockquote>\n<p>注意：7077 端口，相当于 hadoop3 内部通信的 8020 端口</p>\n</blockquote>\n<ol start=\"5\">\n<li>分发 spark-standalone 目录</li>\n</ol>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>xsync spark<span class=\"token operator\">-</span>standalone</pre></td></tr></table></figure><h4 id=\"334-启动集群\"><a class=\"anchor\" href=\"#334-启动集群\">#</a> 3.3.4 启动集群</h4>\n<ol>\n<li>执行脚本命令：</li>\n</ol>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 打开集群，先启动 Master，再启动 worker</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">[</span>atguigu<span class=\"token variable\">@hadoop105</span> spark<span class=\"token operator\">-</span>standalone<span class=\"token punctuation\">]</span>$ sbin<span class=\"token operator\">/</span><span class=\"token keyword\">start</span><span class=\"token operator\">-</span><span class=\"token keyword\">all</span><span class=\"token punctuation\">.</span>sh</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">-- 关闭集群，先关闭 worker，再关闭 Master</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">[</span>atguigu<span class=\"token variable\">@hadoop105</span> spark<span class=\"token operator\">-</span>standalone<span class=\"token punctuation\">]</span>$ sbin<span class=\"token operator\">/</span>stop<span class=\"token operator\">-</span><span class=\"token keyword\">all</span><span class=\"token punctuation\">.</span>sh</pre></td></tr></table></figure><ol start=\"2\">\n<li>查看三台服务器的进程</li>\n</ol>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>atguigu<span class=\"token variable\">@hadoop105</span> spark<span class=\"token operator\">-</span>standalone<span class=\"token punctuation\">]</span>$ myjps</pre></td></tr></table></figure><p>![image-20200602195125350](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saWFuLXpwLm9zcy1jbi1zaGVuemhlbi5hbGl5dW5jcy5jb20vcGlj\">https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic</span> GO/20200602195125.png)</p>\n<ol start=\"3\">\n<li>查看 Master 的资源监控 Web UI 网页界面：<span class=\"exturl\" data-url=\"aHR0cDovL2hhZG9vcDEwNTo4MDgw\">http://hadoop105:8080</span></li>\n</ol>\n<p>![image-20200602195414292](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saWFuLXpwLm9zcy1jbi1zaGVuemhlbi5hbGl5dW5jcy5jb20vcGlj\">https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic</span> GO/20200602195414.png)</p>\n<h4 id=\"335-提交应用\"><a class=\"anchor\" href=\"#335-提交应用\">#</a> 3.3.5 提交应用</h4>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>atguigu<span class=\"token variable\">@hadoop105</span> spark<span class=\"token operator\">-</span>standalone<span class=\"token punctuation\">]</span>$bin<span class=\"token operator\">/</span>spark<span class=\"token operator\">-</span>submit \\</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">--class org.apache.spark.examples.SparkPi \\</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">--master spark://hadoop105:7077 \\</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">.</span><span class=\"token operator\">/</span>examples<span class=\"token operator\">/</span>jars<span class=\"token operator\">/</span>spark<span class=\"token operator\">-</span>examples_2<span class=\"token punctuation\">.</span><span class=\"token number\">12</span><span class=\"token operator\">-</span><span class=\"token number\">2.4</span><span class=\"token number\">.5</span><span class=\"token punctuation\">.</span>jar \\</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">10</span></pre></td></tr></table></figure><ul>\n<li>参数说明</li>\n</ul>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>spark<span class=\"token operator\">-</span>submit  <span class=\"token comment\">-- 提交应用</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">--class       -- 表示要执行程序的主类</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">--master spark://hadoop105:7077 -- 独立运行模式，7070 为 spark 内部通信的端口</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>spark<span class=\"token operator\">-</span>examples_2<span class=\"token punctuation\">.</span><span class=\"token number\">12</span><span class=\"token operator\">-</span><span class=\"token number\">2.4</span><span class=\"token number\">.5</span><span class=\"token punctuation\">.</span>jar   <span class=\"token comment\">-- 程序主类所在的 jar</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">10</span>  <span class=\"token comment\">-- 设定当前应用的任务数量</span></pre></td></tr></table></figure><h4 id=\"336-提交参数说明\"><a class=\"anchor\" href=\"#336-提交参数说明\">#</a> 3.3.6 提交参数说明</h4>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>bin<span class=\"token operator\">/</span>spark<span class=\"token operator\">-</span>submit \\</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">--class &lt;main-class></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">--master &lt;master-url> \\</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token comment\"># other options</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">&lt;</span>application<span class=\"token operator\">-</span>jar<span class=\"token operator\">></span> \\</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">[</span>application<span class=\"token operator\">-</span>arguments<span class=\"token punctuation\">]</span></pre></td></tr></table></figure><table>\n<thead>\n<tr>\n<th>参数</th>\n<th>解释 [可选值举例]</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>--class</td>\n<td>Spark 程序中包含主函数的类</td>\n</tr>\n<tr>\n<td>--master</td>\n<td>Spark 程序运行的模式   <strong>[本地模式：local [*]、spark://linux1:7077、Yarn ]</strong></td>\n</tr>\n<tr>\n<td>--executor-memory 1G</td>\n<td>指定每个 executor 可用内存为 1G   <strong>[符合集群内存配置即可，具体情况具体分析]</strong></td>\n</tr>\n<tr>\n<td>--total-executor-cores 2</td>\n<td>指定所有 executor 使用的 cpu 核数为 2 个</td>\n</tr>\n<tr>\n<td>--executor-cores</td>\n<td>指定每个 executor 使用的 cpu 核数</td>\n</tr>\n<tr>\n<td>application-jar</td>\n<td>打包好的应用 jar，包含依赖。这个 URL 在集群中全局可见。 比如 hdfs:// 共享存储系统，如果是 file://path，那么所有的节点的 path 都包含同样的 jar</td>\n</tr>\n<tr>\n<td>application-arguments</td>\n<td>传给 main () 方法的参数</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"337-配置历史服务器\"><a class=\"anchor\" href=\"#337-配置历史服务器\">#</a> 3.3.7 配置历史服务器</h4>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 由于 spark-shell 停止掉后，集群监控 hadoop105:4040 页面就看不到历史任务的运行情况，所以开发时都配置历史服务器记录任务运行情况</span></pre></td></tr></table></figure><ol>\n<li>修改 spark-defaults.conf.template 文件名为 spark-defaults.conf</li>\n</ol>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>atguigu<span class=\"token variable\">@hadoop105</span> conf<span class=\"token punctuation\">]</span>$ mv spark<span class=\"token operator\">-</span>defaults<span class=\"token punctuation\">.</span>conf<span class=\"token punctuation\">.</span>template spark<span class=\"token operator\">-</span>defaults<span class=\"token punctuation\">.</span>conf</pre></td></tr></table></figure><ol start=\"2\">\n<li>修改 spark-default.conf 文件，配置日志存储路径</li>\n</ol>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>spark<span class=\"token punctuation\">.</span>eventLog<span class=\"token punctuation\">.</span>enabled          <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>spark<span class=\"token punctuation\">.</span>eventLog<span class=\"token punctuation\">.</span>dir               hdfs:<span class=\"token comment\">//hadoop105:8020/directory</span></pre></td></tr></table></figure><blockquote>\n<p>注意：需要启动 hadoop 集群，HDFS 上的 directory 目录需要提前存在</p>\n</blockquote>\n<ol start=\"3\">\n<li>修改 spark-env.sh 文件，添加日志配置</li>\n</ol>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>export SPARK_HISTORY_OPTS<span class=\"token operator\">=</span><span class=\"token string\">\"</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>-Dspark.history.ui.port=18080 </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>-Dspark.history.fs.logDirectory=hdfs://hadoop105:8020/directory </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>-Dspark.history.retainedApplications=30\"</span></pre></td></tr></table></figure><ul>\n<li>\n<p>参数 1 含义：WEBUI 访问的端口号为 18080</p>\n</li>\n<li>\n<p>参数 2 含义：指定历史服务器日志存储路径</p>\n</li>\n<li>\n<p>参数 3 含义：指定保存 Application 历史记录的个数，如果超过这个值，旧的应用程序信息将被删除，这个是内存中的应用数，而不是页面上显示的应用数。</p>\n</li>\n</ul>\n<ol start=\"4\">\n<li>分发配置文件</li>\n</ol>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>xsync conf</pre></td></tr></table></figure><ol start=\"5\">\n<li>重新启动集群和历史服务</li>\n</ol>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>atguigu<span class=\"token variable\">@hadoop105</span> spark<span class=\"token operator\">-</span>standalone<span class=\"token punctuation\">]</span>$ sbin<span class=\"token operator\">/</span><span class=\"token keyword\">start</span><span class=\"token operator\">-</span><span class=\"token keyword\">all</span><span class=\"token punctuation\">.</span>sh </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">[</span>atguigu<span class=\"token variable\">@hadoop105</span> spark<span class=\"token operator\">-</span>standalone<span class=\"token punctuation\">]</span>$ sbin<span class=\"token operator\">/</span><span class=\"token keyword\">start</span><span class=\"token operator\">-</span>history<span class=\"token operator\">-</span>server<span class=\"token punctuation\">.</span>sh</pre></td></tr></table></figure><ol start=\"6\">\n<li>重新执行任务</li>\n</ol>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>atguigu<span class=\"token variable\">@hadoop105</span> spark<span class=\"token operator\">-</span>standalone<span class=\"token punctuation\">]</span>$bin<span class=\"token operator\">/</span>spark<span class=\"token operator\">-</span>submit \\</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">--class org.apache.spark.examples.SparkPi \\</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">--master spark://hadoop105:7077 \\</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">.</span><span class=\"token operator\">/</span>examples<span class=\"token operator\">/</span>jars<span class=\"token operator\">/</span>spark<span class=\"token operator\">-</span>examples_2<span class=\"token punctuation\">.</span><span class=\"token number\">12</span><span class=\"token operator\">-</span><span class=\"token number\">2.4</span><span class=\"token number\">.5</span><span class=\"token punctuation\">.</span>jar \\</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">10</span></pre></td></tr></table></figure><ol start=\"7\">\n<li>查看历史服务：<span class=\"exturl\" data-url=\"aHR0cDovL2hhZG9vcDEwNToxODA4MA==\">http://hadoop105:18080</span></li>\n</ol>\n<p>![image-20200602205819323](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saWFuLXpwLm9zcy1jbi1zaGVuemhlbi5hbGl5dW5jcy5jb20vcGlj\">https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic</span> GO/20200602205820.png)</p>\n<h4 id=\"338-配置高可用\"><a class=\"anchor\" href=\"#338-配置高可用\">#</a> 3.3.8 配置高可用</h4>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 因为 Spark 集群中的 Master 只有一个，存在单点故障，所以需要给集群配置多个 Master，一旦处于活跃的 Master 故障时，StandBy 的 Master 转换为活跃的，提供服务。</span></pre></td></tr></table></figure><ul>\n<li>集群规划</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\"></th>\n<th style=\"text-align:center\">Hadoop105</th>\n<th style=\"text-align:center\">Hadoop106</th>\n<th style=\"text-align:center\">Hadoop107</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">Spark</td>\n<td style=\"text-align:center\">MasterZookeeperWorker</td>\n<td style=\"text-align:center\">MasterZookeeperWorker</td>\n<td style=\"text-align:center\">ZookeeperWorker</td>\n</tr>\n</tbody>\n</table>\n<ol>\n<li>停止集群</li>\n</ol>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>atguigu<span class=\"token variable\">@hadoop105</span> spark<span class=\"token operator\">-</span>standalone<span class=\"token punctuation\">]</span>$ sbin<span class=\"token operator\">/</span>stop<span class=\"token operator\">-</span><span class=\"token keyword\">all</span><span class=\"token punctuation\">.</span>sh</pre></td></tr></table></figure><ol start=\"2\">\n<li>启动 Zookeeper</li>\n</ol>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>atguigu<span class=\"token variable\">@hadoop105</span> spark<span class=\"token operator\">-</span>standalone<span class=\"token punctuation\">]</span>$ zk <span class=\"token keyword\">start</span></pre></td></tr></table></figure><ol start=\"3\">\n<li>修改 spark-env.sh 文件添加如下配置</li>\n</ol>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#注释如下内容：</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">#SPARK_MASTER_HOST=linux1</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">#SPARK_MASTER_PORT=7077</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>SPARK_MASTER_WEBUI_PORT<span class=\"token operator\">=</span><span class=\"token number\">8989</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">#添加如下内容:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>export SPARK_DAEMON_JAVA_OPTS<span class=\"token operator\">=</span><span class=\"token string\">\"</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>-Dspark.deploy.recoveryMode=ZOOKEEPER </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>-Dspark.deploy.zookeeper.url=hadoop105,hadoop106,hadoop107 </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>-Dspark.deploy.zookeeper.dir=/spark\"</span></pre></td></tr></table></figure><ol start=\"4\">\n<li>分发配置文件</li>\n</ol>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>atguigu<span class=\"token variable\">@hadoop105</span> spark<span class=\"token operator\">-</span>standalone<span class=\"token punctuation\">]</span>$ xsync conf<span class=\"token operator\">/</span></pre></td></tr></table></figure><ol start=\"5\">\n<li>启动集群</li>\n</ol>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>atguigu<span class=\"token variable\">@hadoop105</span> spark<span class=\"token operator\">-</span>standalone<span class=\"token punctuation\">]</span>$ sbin<span class=\"token operator\">/</span><span class=\"token keyword\">start</span><span class=\"token operator\">-</span><span class=\"token keyword\">all</span><span class=\"token punctuation\">.</span>sh</pre></td></tr></table></figure><ol start=\"6\">\n<li>启动 lhadoop106 的单独 Master 节点，此时 hadoop106 节点 Master 状态处于备用状态</li>\n</ol>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>atguigu<span class=\"token variable\">@hadoop106</span> spark<span class=\"token operator\">-</span>standalone<span class=\"token punctuation\">]</span>$ sbin<span class=\"token operator\">/</span><span class=\"token keyword\">start</span><span class=\"token operator\">-</span>master<span class=\"token punctuation\">.</span>sh</pre></td></tr></table></figure><p>![image-20200602211112909](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saWFuLXpwLm9zcy1jbi1zaGVuemhlbi5hbGl5dW5jcy5jb20vcGlj\">https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic</span> GO/20200602211114.png)</p>\n<ol start=\"7\">\n<li>停止 hadoop105 的 Master 资源监控进程</li>\n<li>查看 hadoop106 的 Master 资源监控 Web UI，稍等一段时间后，hadoop106 节点的 Master 状态提升为活动状态</li>\n</ol>\n<p>![image-20200602211320022](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saWFuLXpwLm9zcy1jbi1zaGVuemhlbi5hbGl5dW5jcy5jb20vcGlj\">https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic</span> GO/20200602211320.png)</p>\n<h3 id=\"34-yarn\"><a class=\"anchor\" href=\"#34-yarn\">#</a> 3.4 YARN</h3>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1.</span> Spark重点在与实时的计算引擎，而不是资源框架，所以本身提供资源调度并不是其本身。</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">2.</span> 所以参考在YARN环境下运行Spark。</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">3.</span> 资源调度：hadoop的yarn</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   执行任务： spark的driver和executor</pre></td></tr></table></figure><h4 id=\"341-解压缩文件\"><a class=\"anchor\" href=\"#341-解压缩文件\">#</a> 3.4.1 解压缩文件</h4>\n<ul>\n<li>第一步：解压缩</li>\n</ul>\n<ol>\n<li>将 spark-2.4.5-bin-without-hadoop-scala-2.12.tgz 文件上传到 Linux 中 /opt/software，并解压缩到 /opt/module 文件目录下，并修改名称为：spark-yarn</li>\n</ol>\n<figure class=\"highlight scala\"><figcaption data-lang=\"scala\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 解压</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>tar <span class=\"token operator\">-</span>zxvf spark<span class=\"token operator\">-</span><span class=\"token number\">2.4</span><span class=\"token number\">.5</span><span class=\"token operator\">-</span>bin<span class=\"token operator\">-</span>without<span class=\"token operator\">-</span>hadoop<span class=\"token operator\">-</span>scala<span class=\"token operator\">-</span><span class=\"token number\">2.12</span><span class=\"token punctuation\">.</span>tgz <span class=\"token operator\">-</span>C <span class=\"token operator\">/</span>opt<span class=\"token operator\">/</span>module</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 改名</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>mv spark<span class=\"token operator\">-</span><span class=\"token number\">2.4</span><span class=\"token number\">.5</span><span class=\"token operator\">-</span>bin<span class=\"token operator\">-</span>without<span class=\"token operator\">-</span>hadoop<span class=\"token operator\">-</span>scala<span class=\"token operator\">-</span><span class=\"token number\">2.12</span> spark<span class=\"token operator\">-</span>yarn</pre></td></tr></table></figure><ul>\n<li>第二步：Spark 关联 hadoop，spark2.4.5 默认不支持 Hadoop3，可以采用多种不同的方式关联 Hadoop3</li>\n</ul>\n<ol>\n<li>方法 1：修改 spark-local/conf/spark-env.sh 文件，增加如下内容</li>\n</ol>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>SPARK_DIST_CLASSPATH<span class=\"token operator\">=</span>$<span class=\"token punctuation\">(</span><span class=\"token operator\">/</span>opt<span class=\"token operator\">/</span>module<span class=\"token operator\">/</span>hadoop3<span class=\"token operator\">/</span>bin<span class=\"token operator\">/</span>hadoop classpath<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>方法 2：将 hadoop3 的 jar 包上传到 ==/opt/module/spark-local/jars==</li>\n</ol>\n<h4 id=\"342-修改配置文件\"><a class=\"anchor\" href=\"#342-修改配置文件\">#</a> 3.4.2 修改配置文件</h4>\n<ol>\n<li>修改 hadoop 配置文件 /opt/module/hadoop/etc/hadoop/yarn-site.xml, <mark>并分发</mark></li>\n</ol>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token comment\">-- 是否启动一个线程检查每个任务正使用的物理内存量，如果任务超出分配值，则直接将其杀掉，默认是 true --></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">&lt;</span>property<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     <span class=\"token operator\">&lt;</span>name<span class=\"token operator\">></span>yarn<span class=\"token punctuation\">.</span>nodemanager<span class=\"token punctuation\">.</span>pmem<span class=\"token operator\">-</span><span class=\"token keyword\">check</span><span class=\"token operator\">-</span>enabled<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>name<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>     <span class=\"token operator\">&lt;</span><span class=\"token keyword\">value</span><span class=\"token operator\">></span><span class=\"token boolean\">false</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token keyword\">value</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>property<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token comment\">-- 是否启动一个线程检查每个任务正使用的虚拟内存量，如果任务超出分配值，则直接将其杀掉，默认是 true --></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token operator\">&lt;</span>property<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>     <span class=\"token operator\">&lt;</span>name<span class=\"token operator\">></span>yarn<span class=\"token punctuation\">.</span>nodemanager<span class=\"token punctuation\">.</span>vmem<span class=\"token operator\">-</span><span class=\"token keyword\">check</span><span class=\"token operator\">-</span>enabled<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>name<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>     <span class=\"token operator\">&lt;</span><span class=\"token keyword\">value</span><span class=\"token operator\">></span><span class=\"token boolean\">false</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token keyword\">value</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>property<span class=\"token operator\">></span></pre></td></tr></table></figure><ol start=\"2\">\n<li>修改 conf/spark-env.sh，添加 JAVA_HOME 和 YARN_CONF_DIR 配置</li>\n</ol>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 改名</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">[</span>atguigu<span class=\"token variable\">@hadoop105</span> conf<span class=\"token punctuation\">]</span>$ mv spark<span class=\"token operator\">-</span>env<span class=\"token punctuation\">.</span>sh<span class=\"token punctuation\">.</span>template spark<span class=\"token operator\">-</span>env<span class=\"token punctuation\">.</span>sh</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">-- 添加配置</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">[</span>atguigu<span class=\"token variable\">@hadoop105</span> conf<span class=\"token punctuation\">]</span>$ vim spark<span class=\"token operator\">-</span>env<span class=\"token punctuation\">.</span>sh</pre></td></tr></table></figure><figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>export JAVA_HOME<span class=\"token operator\">=</span><span class=\"token operator\">/</span>opt<span class=\"token operator\">/</span>module<span class=\"token operator\">/</span>jdk1<span class=\"token punctuation\">.</span><span class=\"token number\">8.0</span>_212</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>YARN_CONF_DIR<span class=\"token operator\">=</span><span class=\"token operator\">/</span>opt<span class=\"token operator\">/</span>module<span class=\"token operator\">/</span>hadoop<span class=\"token operator\">-</span><span class=\"token number\">3.1</span><span class=\"token number\">.3</span><span class=\"token operator\">/</span>etc<span class=\"token operator\">/</span>hadoop</pre></td></tr></table></figure><h4 id=\"343-启动hadoop集群\"><a class=\"anchor\" href=\"#343-启动hadoop集群\">#</a> 3.4.3 启动 hadoop 集群</h4>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>atguigu<span class=\"token variable\">@hadoop105</span> conf<span class=\"token punctuation\">]</span>$ mycluster <span class=\"token keyword\">start</span></pre></td></tr></table></figure><h4 id=\"344-提交应用\"><a class=\"anchor\" href=\"#344-提交应用\">#</a> 3.4.4 提交应用</h4>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>atguigu<span class=\"token variable\">@hadoop105</span> spark<span class=\"token operator\">-</span>standalone<span class=\"token punctuation\">]</span>$bin<span class=\"token operator\">/</span>spark<span class=\"token operator\">-</span>submit \\</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">--class org.apache.spark.examples.SparkPi \\</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">--master spark://hadoop105:7077 \\</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">.</span><span class=\"token operator\">/</span>examples<span class=\"token operator\">/</span>jars<span class=\"token operator\">/</span>spark<span class=\"token operator\">-</span>examples_2<span class=\"token punctuation\">.</span><span class=\"token number\">12</span><span class=\"token operator\">-</span><span class=\"token number\">2.4</span><span class=\"token number\">.5</span><span class=\"token punctuation\">.</span>jar \\</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">10</span></pre></td></tr></table></figure><p>查看 http://hadoop105:8088 页面，点击 History，查看历史页面</p>\n<h4 id=\"345-配置历史服务器\"><a class=\"anchor\" href=\"#345-配置历史服务器\">#</a> 3.4.5 配置历史服务器</h4>\n<ol>\n<li>修改 spark-defaults.conf.template 文件名为 spark-defaults.conf</li>\n</ol>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>atguigu<span class=\"token variable\">@hadoop105</span> conf<span class=\"token punctuation\">]</span>$ mv spark<span class=\"token operator\">-</span>defaults<span class=\"token punctuation\">.</span>conf<span class=\"token punctuation\">.</span>template spark<span class=\"token operator\">-</span>defaults<span class=\"token punctuation\">.</span>conf</pre></td></tr></table></figure><ol start=\"2\">\n<li>修改 spark-default.conf 文件，配置日志存储路径</li>\n</ol>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>spark<span class=\"token punctuation\">.</span>eventLog<span class=\"token punctuation\">.</span>enabled          <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>spark<span class=\"token punctuation\">.</span>eventLog<span class=\"token punctuation\">.</span>dir               hdfs:<span class=\"token comment\">//hadoop105:8020/directory</span></pre></td></tr></table></figure><blockquote>\n<p>注意：需要启动 hadoop 集群，HDFS 上的 directory 目录需要提前存在</p>\n</blockquote>\n<ol start=\"3\">\n<li>修改 spark-env.sh 文件，添加日志配置</li>\n</ol>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>export SPARK_HISTORY_OPTS<span class=\"token operator\">=</span><span class=\"token string\">\"</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>-Dspark.history.ui.port=18080 </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>-Dspark.history.fs.logDirectory=hdfs://hadoop105:8020/directory </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>-Dspark.history.retainedApplications=30\"</span></pre></td></tr></table></figure><ul>\n<li>\n<p>参数 1 含义：WEBUI 访问的端口号为 18080</p>\n</li>\n<li>\n<p>参数 2 含义：指定历史服务器日志存储路径</p>\n</li>\n<li>\n<p>参数 3 含义：指定保存 Application 历史记录的个数，如果超过这个值，旧的应用程序信息将被删除，这个是内存中的应用数，而不是页面上显示的应用数。</p>\n</li>\n</ul>\n<ol start=\"4\">\n<li>修改 spark-defaults.conf</li>\n</ol>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>spark<span class=\"token punctuation\">.</span>yarn<span class=\"token punctuation\">.</span>historyServer<span class=\"token punctuation\">.</span>address<span class=\"token operator\">=</span>hadoop105:<span class=\"token number\">18080</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>spark<span class=\"token punctuation\">.</span>history<span class=\"token punctuation\">.</span>ui<span class=\"token punctuation\">.</span>port<span class=\"token operator\">=</span><span class=\"token number\">18080</span></pre></td></tr></table></figure><ol start=\"5\">\n<li>启动历史服务</li>\n</ol>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>sbin<span class=\"token operator\">/</span><span class=\"token keyword\">start</span><span class=\"token operator\">-</span>history<span class=\"token operator\">-</span>server<span class=\"token punctuation\">.</span>sh</pre></td></tr></table></figure><ol start=\"6\">\n<li>重新提交应用</li>\n</ol>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>atguigu<span class=\"token variable\">@hadoop105</span> spark<span class=\"token operator\">-</span>standalone<span class=\"token punctuation\">]</span>$bin<span class=\"token operator\">/</span>spark<span class=\"token operator\">-</span>submit \\</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">--class org.apache.spark.examples.SparkPi \\</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">--master spark://hadoop105:7077 \\</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">.</span><span class=\"token operator\">/</span>examples<span class=\"token operator\">/</span>jars<span class=\"token operator\">/</span>spark<span class=\"token operator\">-</span>examples_2<span class=\"token punctuation\">.</span><span class=\"token number\">12</span><span class=\"token operator\">-</span><span class=\"token number\">2.4</span><span class=\"token number\">.5</span><span class=\"token punctuation\">.</span>jar \\</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">10</span></pre></td></tr></table></figure><p>![img](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saWFuLXpwLm9zcy1jbi1zaGVuemhlbi5hbGl5dW5jcy5jb20vcGlj\">https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic</span> GO/20200602215038.jpg)</p>\n<ol start=\"7\">\n<li>Web 页面查看日志：<span class=\"exturl\" data-url=\"aHR0cDovL2hhZG9vcDEwNjo4MDg4\">http://hadoop106:8088</span></li>\n</ol>\n<h3 id=\"35-k8s-mesos模式\"><a class=\"anchor\" href=\"#35-k8s-mesos模式\">#</a> 3.5 K8S &amp; Mesos 模式</h3>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Mesos是Apache下的开源分布式资源管理框架，它被称为是分布式系统的内核<span class=\"token punctuation\">,</span>在Twitter得到广泛使用<span class=\"token punctuation\">,</span>管理着Twitter超过<span class=\"token number\">30</span><span class=\"token punctuation\">,</span><span class=\"token number\">0000</span>台服务器上的应用部署，但是在国内，依然使用着传统的Hadoop大数据框架，所以国内使用Mesos框架的并不多，但是原理其实都差不多，这里我们就不做过多讲解了。</pre></td></tr></table></figure><p>![image-20200602215334165](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saWFuLXpwLm9zcy1jbi1zaGVuemhlbi5hbGl5dW5jcy5jb20vcGlj\">https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic</span> GO/20200602215334.png)</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>容器化部署是目前业界很流行的一项技术，基于Docker镜像运行能够让用户更加方便地对应用进行管理和运维。容器管理工具中最为流行的就是Kubernetes（k8s），而Spark也在最近的版本中支持了k8s部署模式</pre></td></tr></table></figure><p>![image-20200602215352244](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saWFuLXpwLm9zcy1jbi1zaGVuemhlbi5hbGl5dW5jcy5jb20vcGlj\">https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic</span> GO/20200602215352.png)</p>\n<h3 id=\"36-windows-模式\"><a class=\"anchor\" href=\"#36-windows-模式\">#</a> 3.6 Windows 模式</h3>\n<ol>\n<li>将文件 spark-2.4.5-bin-without-hadoop-scala-2.12.tgz 解压缩到无中文无空格的路径中，将 hadoop3 依赖 jar 包拷贝到 jars 目录中</li>\n<li>执行解压缩文件路径下 bin 目录中的 spark-shell.cmd 文件，启动 Spark 本地环境</li>\n<li>在 bin 目录中创建 input 目录，并添加 word.txt 文件，在命令行中输入脚本代码</li>\n</ol>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>sc<span class=\"token punctuation\">.</span>textFile<span class=\"token punctuation\">(</span><span class=\"token string\">\"input\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>flatMap<span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>map<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>reduceByKey<span class=\"token punctuation\">(</span>_<span class=\"token operator\">+</span>_<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>collect</pre></td></tr></table></figure><h3 id=\"37-部署模式的对比\"><a class=\"anchor\" href=\"#37-部署模式的对比\">#</a> 3.7 部署模式的对比</h3>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">模式</th>\n<th style=\"text-align:center\">Spark 安装机器数</th>\n<th style=\"text-align:center\">需启动的进程</th>\n<th style=\"text-align:center\">所属者</th>\n<th style=\"text-align:center\">应用场景</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">Local</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">无</td>\n<td style=\"text-align:center\">Spark</td>\n<td style=\"text-align:center\">测试</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Standalone</td>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:center\">Master 及 Worker</td>\n<td style=\"text-align:center\">Spark</td>\n<td style=\"text-align:center\">单独部署</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Yarn</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">Yarn 及 HDFS</td>\n<td style=\"text-align:center\">Hadoop</td>\n<td style=\"text-align:center\">混合部署</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"38-端口号\"><a class=\"anchor\" href=\"#38-端口号\">#</a> 3.8 端口号</h3>\n<table>\n<thead>\n<tr>\n<th>端口</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>8080</td>\n<td>资源的监控页面端口</td>\n</tr>\n<tr>\n<td>7077</td>\n<td>Spark 的 worker 内部通信的端口</td>\n</tr>\n<tr>\n<td>4040</td>\n<td>计算的监控页面端口</td>\n</tr>\n<tr>\n<td>18080</td>\n<td>历史服务器端口</td>\n</tr>\n<tr>\n<td>8088</td>\n<td>RM 的资源监控端口</td>\n</tr>\n</tbody>\n</table>\n",
            "tags": []
        },
        {
            "id": "https://github.com/Mayizono/miyazono.github.io/big-data/spark/8.Spark%E5%86%85%E6%A0%B8/",
            "url": "https://github.com/Mayizono/miyazono.github.io/big-data/spark/8.Spark%E5%86%85%E6%A0%B8/",
            "title": "",
            "date_published": "2021-08-31T10:42:35.376Z",
            "content_html": "<h1 id=\"spark内核\"><a class=\"anchor\" href=\"#spark内核\">#</a> Spark 内核</h1>\n<hr />\n<blockquote>\n<p>所谓的内核，就是 Spark 内部核心原理。</p>\n</blockquote>\n<h2 id=\"一-内核解析的分解\"><a class=\"anchor\" href=\"#一-内核解析的分解\">#</a> 一、内核解析的分解</h2>\n<ol>\n<li>Spark 应用的提交</li>\n<li>Spark 内部的通信</li>\n<li>Spark 作业的调度</li>\n<li>任务的执行</li>\n<li>spark 内存管理</li>\n</ol>\n<h2 id=\"二-sparksubmit\"><a class=\"anchor\" href=\"#二-sparksubmit\">#</a> 二、 SparkSubmit</h2>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 本章节讲述 job 提交应用以后，环境的准备工作。主要包含以下：</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">1.</span> spark向yarn提交job的过程</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">2.</span> yarn中application、driver、executor、container是如何相互响应</pre></td></tr></table></figure><ul>\n<li>提交应用</li>\n</ul>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>bin<span class=\"token operator\">/</span>spark<span class=\"token operator\">-</span>submit \\</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">--class org.apache.spark.examples.SparkPi \\</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">--master yarn \\</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">--deploymode cluster \\   表示 yarn 的集群模式</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">.</span><span class=\"token operator\">/</span>examples<span class=\"token operator\">/</span>jars<span class=\"token operator\">/</span>spark<span class=\"token operator\">-</span>examples_2<span class=\"token punctuation\">.</span><span class=\"token number\">12</span><span class=\"token operator\">-</span><span class=\"token number\">2.4</span><span class=\"token number\">.5</span><span class=\"token punctuation\">.</span>jar \\</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">-- 说明：</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">--master yarn 默认是采用 yarn 的客户端模式，但是在实际过程中，我们都是使用 yarn 的集群模式。</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>所以增加：<span class=\"token comment\">--deploymode cluster \\</span></pre></td></tr></table></figure><h3 id=\"21-spark向yarn提交\"><a class=\"anchor\" href=\"#21-spark向yarn提交\">#</a> 2.1  Spark 向 yarn 提交</h3>\n<h4 id=\"211-sparksubmit\"><a class=\"anchor\" href=\"#211-sparksubmit\">#</a> 2.1.1 SparkSubmit</h4>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 作用：</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">1.</span> 解析参数</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">2.</span> 提交参数，初始数环境，并获取<span class=\"token string\">\"org.apache.spark.deploy.yarn.YarnClusterApplication\"</span>的对象，调用对象的<span class=\"token keyword\">start</span>方法</pre></td></tr></table></figure><figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1.</span> 执行SparkSubmit的mian方法</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">2.</span> 在main方法中：</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token number\">1</span>）、 new SparkSubmit</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token number\">2</span>）、 submit<span class=\"token punctuation\">.</span>doSubmit<span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span> <span class=\"token comment\">--> 执行提交程序，点击 doSubmit</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>          ①、 val appArgs <span class=\"token operator\">=</span> parseArguments<span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span>  <span class=\"token comment\">--> 解析参数，解析应用提交的参数，点击 parseArguments</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                  a、parse<span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">.</span>asJava<span class=\"token punctuation\">)</span>   <span class=\"token comment\">--> 具体进行参数的解析，点击 parse，返回参数的解析，方法的内部调用了 handle 方法</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                     <span class=\"token keyword\">action</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">Option</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">action</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>getOrElse<span class=\"token punctuation\">(</span>SUBMIT<span class=\"token punctuation\">)</span>，<span class=\"token comment\">--> 默认值为 submit</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                  b、handle<span class=\"token punctuation\">(</span>opt: String<span class=\"token punctuation\">,</span> <span class=\"token keyword\">value</span>: String<span class=\"token punctuation\">)</span> <span class=\"token comment\">-->opt: 参数的名称，value：参数的值。</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                      左边是参数  <span class=\"token operator\">=</span><span class=\"token operator\">></span> 右边是赋值的变量</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                     <span class=\"token comment\">// --master yarn => master</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                     <span class=\"token comment\">// --deploy-mode cluster => deployMode</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                     <span class=\"token comment\">// --class SparkPI(WordCount) => 【mainClass】</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                     </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>          <span class=\"token string\">\"如上为解析参数\"</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>       ②、appArgs<span class=\"token punctuation\">.</span><span class=\"token keyword\">action</span> <span class=\"token keyword\">match</span> &#123;<span class=\"token keyword\">case</span> SparkSubmitAction<span class=\"token punctuation\">.</span>SUBMIT <span class=\"token operator\">=</span><span class=\"token operator\">></span> submit<span class=\"token punctuation\">(</span>appArgs<span class=\"token punctuation\">,</span> uninitLog<span class=\"token punctuation\">)</span><span class=\"token comment\">--> 点击 submit</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>          a、submit中又调用了doRunMain<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>，doRunMain<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>中调用了runMain<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>方法</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>              <span class=\"token comment\">-- runMain (args, uninitLog)，运行主程序，在 runmain () 方法中：</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                  <span class=\"token number\">1.</span>准备提交环境</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                  <span class=\"token comment\">-- val (childArgs, childClasspath, sparkConf, childMainClass) = prepareSubmitEnvironment(args)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                  </pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                  <span class=\"token number\">2.</span>设定当前类的加载器</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                  <span class=\"token comment\">-- Thread.currentThread.setContextClassLoader(loader)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                  </pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                  <span class=\"token number\">3.</span>通过类名加载这个类，<span class=\"token string\">'反射的方式'</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                  <span class=\"token comment\">-- mainClass = Utils.classForName(childMainClass)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                  </pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                  <span class=\"token number\">4.</span>创建第<span class=\"token number\">3</span>步类的实例，并将类型转换为SparkApplication</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                  <span class=\"token comment\">-- app: SparkApplication = mainClass.newInstance().asInstanceOf[SparkApplication]</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                  </pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                   childMainClass到底是谁？</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                       cluster模式：childMainClass <span class=\"token operator\">=</span> YARN_CLUSTER_SUBMIT_CLASS</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                                   <span class=\"token operator\">=</span>org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>spark<span class=\"token punctuation\">.</span>deploy<span class=\"token punctuation\">.</span>yarn<span class=\"token punctuation\">.</span>YarnClusterApplication</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                       client模式：childMainClass <span class=\"token operator\">=</span> args<span class=\"token punctuation\">.</span>mainClass<span class=\"token operator\">=</span>class SparkPI<span class=\"token punctuation\">(</span>WordCount<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                    </pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                   <span class=\"token number\">5.</span>YarnClusterApplication<span class=\"token punctuation\">.</span><span class=\"token keyword\">start</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                   <span class=\"token comment\">--  app.start(childArgs.toArray, sparkConf)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                   </pre></td></tr><tr><td data-num=\"38\"></td><td><pre>             <span class=\"token string\">\"如上为提交环境，并启动org.apache.spark.deploy.yarn.YarnClusterApplication\"</span></pre></td></tr></table></figure><h4 id=\"222-yarnyarnclusterapplication\"><a class=\"anchor\" href=\"#222-yarnyarnclusterapplication\">#</a> 2.2.2 yarn.YarnClusterApplication</h4>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 作用：</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">1.</span> 调用YarnClusterApplication的<span class=\"token keyword\">start</span>方法，创建yarn的resourcemanagerClient，RM的客户端</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">2.</span> 执行RM客户端执行run方法</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">3.</span> 在run方法中，启动一个应用程序application，也就是一个进程，并提交应用程序，则会执行这个进程的main方法。</pre></td></tr></table></figure><figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1.</span> 通过反射调用<span class=\"token keyword\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>方法，在<span class=\"token keyword\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>方法中：</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token comment\">-- 1）new Client(new ClientArguments(args), conf).run()</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>          ①new ClientArguments<span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span>，是配置参数的封装</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>          ②new Client，在client类中的属性有：</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>              <span class=\"token comment\">--val yarnClient = YarnClient.createYarnClient，点击 createYarnClient 方法，在这个方法中：</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                  <span class=\"token comment\">-- YarnClient client = new YarnClientImpl ()，点击 YarnClientImpl 类，在类中有一个属性</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                      rmclient：resourcemanagerClient</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                      <span class=\"token comment\">-- protected ApplicationClientProtocol rmClient</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>          <span class=\"token string\">\"如上就是创建RM客户端对象\"</span>，接下来执行run方法</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>          ③run<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>，RM客户端对象执行run方法，点击run，在run方法的内部：</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>              <span class=\"token number\">1.</span> 提交应用，返回应用的id。</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>              <span class=\"token comment\">-- this.appId = submitApplication ()，点击 submitApplication (), 查看具体提交的过程</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                     <span class=\"token number\">1.</span> 初始化hadoop的环境</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                  \t <span class=\"token comment\">--yarnClient.init(hadoopConf)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                  \t <span class=\"token number\">2.</span> 启动yarn客户端<span class=\"token punctuation\">,</span>与yarn之间进行连接</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      \t\t\t\t<span class=\"token comment\">-- yarnClient.start()</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      \t\t\t\t<span class=\"token number\">3.</span> yarn客户端创建一个应用application</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      \t\t\t\t<span class=\"token comment\">--val newApp = yarnClient.createApplication()</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                     <span class=\"token number\">4.</span> 获取应用的id，在yarn应用程序中，每一个应用都是有唯一的应用id</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      \t\t\t\t<span class=\"token comment\">-- appId = newAppResponse.getApplicationId()</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>      \t\t\t\t<span class=\"token number\">5.</span> 提交yarn应用程序，提交的是什么呢？</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>      \t\t\t\t<span class=\"token comment\">--yarnClient.submitApplication (appContext)，点击 appContext</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>      \t\t\t\t   <span class=\"token comment\">--// Set up the appropriate contexts to launch our AM</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>      \t\t\t\t         配置java虚拟机的启动参数，点击createContainerLaunchContext，</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>      \t\t\t\t         在这个方法的内部进行了command的封装：</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>      \t\t\t\t         【集群模式】command <span class=\"token operator\">=</span> bin<span class=\"token operator\">/</span>java org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>spark<span class=\"token punctuation\">.</span>deploy<span class=\"token punctuation\">.</span>yarn<span class=\"token punctuation\">.</span>ApplicationMaster</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                              【client模式】command <span class=\"token operator\">=</span> bin<span class=\"token operator\">/</span>java org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>spark<span class=\"token punctuation\">.</span>deploy<span class=\"token punctuation\">.</span>yarn<span class=\"token punctuation\">.</span>ExecutorLauncher</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                              <span class=\"token comment\">--val containerContext = createContainerLaunchContext(newAppResponse)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                              基本参数配置的封装</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                              <span class=\"token comment\">--val appContext = createApplicationSubmissionContext(newApp, containerContext)</span></pre></td></tr></table></figure><h4 id=\"223-yarnapplicationmaster\"><a class=\"anchor\" href=\"#223-yarnapplicationmaster\">#</a> 2.2.3 yarn.ApplicationMaster</h4>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 作用</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">1.</span> 封装ApplicationMaster的参数</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">2.</span> 根据参数，创建ApplicationMaster对象</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">3.</span> 执行ApplicationMaster的run方法，在run方法中，最后调用到runDriver方法，在这个方法中：</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   a、启动用户的应用，并返回这个应用的<span class=\"token string\">\"线程\"</span>，具体实现如下：</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>           a、启动用户提交的应用程序；</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>           b、在ApplicationMaster中创建一个线程，线程的名称就是<span class=\"token string\">\"Driver\"</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>           c、启动这个线程，并执行run方法，在run方法中，就是执行我们提交的应用程序类的main方法</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>           d、返回这个<span class=\"token string\">\"Driver\"</span>线程</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    b、 执行一个方法，用于返回<span class=\"token string\">\"sparkContext\"</span>的对象，如果没有返回，就不会执行下面的代码，当返回了这个上下文的对象以后：</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    c、 ApplicationMaster通过ApplicationMaste的客户端，向ResourceManager注册自己，并申请资源</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    d、 分配资源，具体实现如下： </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            a、在ResourceManager端获取一个ApplicationMaster的客户端，返回一个分配器</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            b、分配器进行资源的分配：</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                 a、ApplicationMaster的客户端申请一个分配器响应</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                 b、分配器响应返回所有被分配的容器container<span class=\"token punctuation\">(</span>资源列表<span class=\"token punctuation\">)</span>给到ApplicationMaster</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                 c、如果分配的资源列表的数量大于<span class=\"token number\">0</span>，则对容器进行处理，处理的方式为：</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                        <span class=\"token number\">1.</span>AM内部会创建一个线程，并调用线程的run方法，在run方法中循环遍历RM返回的可用容器，然后进行</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                        对每个容器进行匹配，此时涉及到首选位置，根据请求匹配选择哪些容器<span class=\"token punctuation\">.</span>首选位置的选择规则见首选位置说明。</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                        <span class=\"token number\">2.</span> 运行匹配后的资源，挨个遍历可用的容器，如果运行执行器的数量小于目标执行器的数量<span class=\"token string\">\"假如需要4个执行</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                        器，即为目标执行器，此时已经运行了2个执行器，即为运行执行器的数量，此时会启动下面的逻辑\"</span>，</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                        那么在这个容器中会创建一个线程池，一个线程池container对应一个ExecutorRunnable，并调用了这个对象的</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                        run方法，在这个线程池中，有一个nmClient<span class=\"token punctuation\">(</span>nameManagClient<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>说明AM能够找到NM，在这个run方法中，创建</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                        NM的客户端，初始化NM，并启动容器container，在启动容器中，封装一个指令，   command：<span class=\"token operator\">/</span>bin<span class=\"token operator\">/</span>java</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                        <span class=\"token operator\">/</span>org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>spark<span class=\"token punctuation\">.</span>executor<span class=\"token punctuation\">.</span>CoarseGrainedExecutorBackend，并且启动了这个指令，显然是一个进程</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                        ，CoarseGrainedExecutorBackend，粗粒度的执行器后台。</pre></td></tr></table></figure><figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1.</span> main方法，在main方法中，分三步骤：</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token number\">1</span>） 封装参数</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">--val amArgs = new ApplicationMasterArguments(args)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token number\">2</span>）创建ApplicationMaster的对象</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">--master = new ApplicationMaster(amArgs)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token number\">3</span>）执行run方法<span class=\"token punctuation\">,</span>点击run方法</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">--System.exit(master.run())</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>       ①run方法的实现，点击runImpl</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>       \t<span class=\"token comment\">--runImpl()</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token comment\">// 如果是 client 模式，执行：</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token comment\">-- runExecutorLauncher()</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>             <span class=\"token comment\">// 如果是集群模式，执行，点击 runDriver</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token comment\">-- runDriver</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>               <span class=\"token number\">1.</span> 启动用户的程序<span class=\"token punctuation\">,</span>返回一个线程，点击startUserApplication</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>               <span class=\"token comment\">--userClassThread = startUserApplication()</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                    <span class=\"token number\">1.</span> 通过类加载器加载一个类，并获取这个类的main方法</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                    <span class=\"token comment\">-- val mainMethod = userClassLoader.loadClass(args.userClass).getMethod(\"main\", classOf[Array[String]])</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                    <span class=\"token number\">2.</span> 创建一个线程</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                    <span class=\"token comment\">-- val userThread = new Thread</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                    <span class=\"token number\">3.</span> </pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                    <span class=\"token comment\">-- userThread.setContextClassLoader(userClassLoader)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                    <span class=\"token number\">4.</span> 设定线程的名字为driver，说明driver就是一个applicationMaster的一个线程</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                    <span class=\"token comment\">-- userThread.setName(\"Driver\")</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                    <span class=\"token number\">5.</span> 启动线程，执行线程的run方法，其实就是执行类userClass的main方法，userClass是哪个类呢？</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                       通过查到，就是我们提交应用的<span class=\"token comment\">--class，sparkpi，或者是我们自定的类</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                    <span class=\"token comment\">-- userThread.start()</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                        <span class=\"token comment\">-- mainMethod.invoke      </span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                    <span class=\"token number\">6.</span> 返回用户线程</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                    <span class=\"token comment\">-- userThread</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>               <span class=\"token number\">2.</span> awaitResult等待结果，线程阻塞，等待对象<span class=\"token punctuation\">(</span>SparkContext<span class=\"token punctuation\">)</span>的返回</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>               <span class=\"token comment\">--val sc = ThreadUtils.awaitResult(sparkContextPromise.future,Duration(totalWaitTime, TimeUnit.MILLISECONDS))</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                 </pre></td></tr><tr><td data-num=\"34\"></td><td><pre>               <span class=\"token number\">3.</span> 返回sparkContext以后，向rm进行注册AM：ApplicationMaster，点击registerAM<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                <span class=\"token comment\">--registerAM(host, port, userConf, sc.ui.map(_.webUrl))</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                    ApplicationMaster的客户端向RM注册自己，并申请资源</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                    <span class=\"token comment\">--client.register(host, port, yarnConf, _sparkConf, uiAddress, historyAddress)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>               <span class=\"token number\">4.</span> 返回RM分配的容器</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>               <span class=\"token comment\">--createAllocator(driverRef, userConf)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>                   <span class=\"token comment\">// 1.AM 的客户端，' 在 RM 端 '，创建分配器，返回一个分配器</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>                   <span class=\"token comment\">-- allocator = client.createAllocator</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>                   <span class=\"token comment\">// 2. 分配器分配资源，点击 allocateResources</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>                   <span class=\"token comment\">-- allocator.allocateResources()</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>                          <span class=\"token comment\">// 1.AM 的客户端，申请一个分配响应</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>                          <span class=\"token comment\">--val allocateResponse = amClient.allocate(progressIndicator)</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>                          <span class=\"token comment\">// 2. 分配器响应获取所有被分配的容器 container (资源列表)</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>                         <span class=\"token comment\">--val allocatedContainers = allocateResponse.getAllocatedContainers()</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>                         <span class=\"token comment\">// 3. 如果可分配的容器数量大于 0，则调用处理可用容器的方法，点击 handle 方法</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>                          <span class=\"token comment\">--if (allocatedContainers.size > 0) =></span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>                            handleAllocatedContainers<span class=\"token punctuation\">(</span>allocatedContainers<span class=\"token punctuation\">.</span>asScala<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>                               <span class=\"token comment\">// 1. 内部会创建一个线程，并调用线程的 run 方法，在 run 方法中循环遍历 RM 返回的可用容器，然后进行</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>                                  对每个容器进行匹配，此时涉及到首选位置，根据请求匹配选择哪些容器<span class=\"token punctuation\">.</span>首选位置的选择规则见</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>                                  首选位置说明。</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>                               <span class=\"token comment\">// 2. 运行匹配后的资源，点击 runAllocatedContainers</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>                               <span class=\"token comment\">--runAllocatedContainers(containersToUse)</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>                                      <span class=\"token comment\">// 1. 挨个遍历可用的容器资源</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>                                       <span class=\"token comment\">--for (container &lt;- containersToUse)</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>                                       <span class=\"token comment\">// 2. 每个容器中，如果运行执行器的数量小于目标执行器的数量，执行如下代码</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>                                       <span class=\"token comment\">--runningExecutors.size() &lt; targetNumExecutors</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>                                       <span class=\"token comment\">// 3. 线程池，在线程池的内部有：</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>                                       <span class=\"token comment\">--launcherPool.execute(new Runnable </span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>                                            <span class=\"token comment\">// 1. 执行的池子是一个线程池</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>                                            <span class=\"token comment\">--launcherPool = ThreadUtils.newDaemonCachedThreadPool</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>                                       \t\t<span class=\"token comment\">// 2. 一个线程 container 对应一个 ExecutorRunnable，并调用了这个对象的 run 方法</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>                                       \t\t<span class=\"token comment\">--new ExecutorRunnable...run()</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>                                       \t\t     <span class=\"token comment\">//a、在 ExecutorRunnable 中：说明 AM 能够找到 NM</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>                                       \t\t     <span class=\"token comment\">--nmClient，nodeManager</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>                                       \t\t     <span class=\"token comment\">//b、run () 中：其实就是 AM 与 NM 建立连接</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>                                                     <span class=\"token comment\">// 创建 NM 的客户端</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>                                                     <span class=\"token comment\">--nmClient = NMClient.createNMClient()</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>                                                     <span class=\"token comment\">// 初始化 NM</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>                                                     <span class=\"token comment\">--nmClient.init(conf)</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>                                                      <span class=\"token comment\">// 启动 NM</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>                                                     <span class=\"token comment\">-- nmClient.start()</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>                                                      <span class=\"token comment\">// 启动容器，点击</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>                                                      <span class=\"token comment\">--startContainer()</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>                                                           <span class=\"token comment\">// NM 启动容器，启动 executor</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>                                                           <span class=\"token comment\">--nmClient.startContainer(container.get, ctx)</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>                                                           <span class=\"token comment\">// 封装指令，点击 prepareCommand</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>                                                           <span class=\"token comment\">--val commands = prepareCommand()</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>                                                                 \tcommands<span class=\"token operator\">=</span><span class=\"token operator\">/</span>bin<span class=\"token operator\">/</span>java<span class=\"token operator\">/</span>org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>spark<span class=\"token punctuation\">.</span>executor<span class=\"token punctuation\">.</span>CoarseGrainedExecutorBackend<span class=\"token comment\">--> 粗粒度的执行器后台，是一个进程</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>                                                           <span class=\"token comment\">// 将封装好的指令传递到参数中</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>                                                           <span class=\"token comment\">--ctx.setCommands(commands.asJava)</span></pre></td></tr></table></figure><figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 首选位置说明</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token comment\">--1. 移动数据不如移动计算。 </span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token comment\">--2. 首选位置：有多个，和本地化级别有关。</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token comment\">--3. 本地化级别：将数据和计算所在的位置称之为本地化</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>               <span class=\"token number\">1.</span> 计算和数据在同一个Executor中，称之进程本地化</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>               <span class=\"token number\">2.</span> 计算和数据在同一个节点中，称之节点本地化</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>               <span class=\"token number\">3.</span> 计算和数据在同一个机架中，称之机架本地化</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>               <span class=\"token number\">4.</span> 任意</pre></td></tr></table></figure><p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saWFuLXpwLm9zcy1jbi1zaGVuemhlbi5hbGl5dW5jcy5jb20vcGlj\">https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic</span> GO/20200618002757.png&quot; alt=&quot;image-20200618002757465&quot; style=&quot;zoom:50%;&quot; /&gt;</p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saWFuLXpwLm9zcy1jbi1zaGVuemhlbi5hbGl5dW5jcy5jb20vcGlj\">https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic</span> GO/20200618002929.png&quot; alt=&quot;image-20200618002929263&quot; style=&quot;zoom:50%;&quot; /&gt;</p>\n<p>![image-20200619202433592](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saWFuLXpwLm9zcy1jbi1zaGVuemhlbi5hbGl5dW5jcy5jb20vcGlj\">https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic</span> GO/20200619202433.png)</p>\n<h4 id=\"224-coarsegrainedexecutorbackend\"><a class=\"anchor\" href=\"#224-coarsegrainedexecutorbackend\">#</a> 2.2.4 CoarseGrainedExecutorBackend</h4>\n<blockquote>\n<p>执行一次 bin/java 就会执行一个新的进程，则是属于并行执行的感觉，和之前执行的内容是分开的。类似我们在 Windows 中开了一个微信和 qq 程序一样，各自执行，互不影响。</p>\n</blockquote>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 作用：</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   执行CoarseGrainedExecutorBackend<span class=\"token string\">\"执行器后台\"</span>的main方法，在main方法中：</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token number\">1.</span> 首先封装一些参数</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token number\">2.</span> 执行run方法，在run方法中：</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token number\">1.</span> 通过driver的URI，使得CoarseGrainedExecutorBackend与Driver进行关联</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token number\">2.</span> 通过通信环境创建了一个终端，名字为executor，创建一个CoarseGrainedExecutorBackend对象并调用onstart方法：</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>             <span class=\"token number\">1.</span> 获取driver的引用</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>             <span class=\"token number\">2.</span> ExecutorBackend向driver发送消息，注册executor的消息，也称之为反向注册</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>             <span class=\"token number\">3.</span> 在driver端会接收到这个消息，通过executor的引用，发送消息给到ExecutorBackend，注册executor成功 </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>             <span class=\"token number\">4.</span> ExecutorBackend接收driver返回的executor注册成功的消息，</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            </pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">-- 说明：</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>   executor是一个计算对象，在这个对象里面有一个线程池，每一个线程来处理一个从driver端发送过来的任务</pre></td></tr></table></figure><figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1.</span> commands<span class=\"token operator\">=</span><span class=\"token operator\">/</span>bin<span class=\"token operator\">/</span>java<span class=\"token operator\">/</span>org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>spark<span class=\"token punctuation\">.</span>executor<span class=\"token punctuation\">.</span>CoarseGrainedExecutorBackend<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t执行这个指令，那么是调用这个类的main方法。</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">2.</span> main方法中：</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>       <span class=\"token comment\">// 1. 首先是对一些参数进行封装</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>       <span class=\"token comment\">// 2. 执行 run 方法 </span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>       <span class=\"token comment\">-- run(driverUrl, executorId, hostname, cores, appId, workerUrl, userClassPath)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>           <span class=\"token comment\">// 1. 通过 driver 的 uri 和 Driver 进行关联</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token comment\">--driver = fetcher.setupEndpointRefByURI(driverUrl)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token comment\">// 2. 通过通信环境创建了一个终端，名字为 executor，</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            在底层：Executor启动后会注册通信，并收到信息onStart，收到消息后，会执行通信对象CoarseGrainedExecutorBackend</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            的onStart方法，点击CoarseGrainedExecutorBackend</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token comment\">--env.rpcEnv.setupEndpoint(\"Executor\", new CoarseGrainedExecutorBackend(</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        env<span class=\"token punctuation\">.</span>rpcEnv<span class=\"token punctuation\">,</span> driverUrl<span class=\"token punctuation\">,</span> executorId<span class=\"token punctuation\">,</span> hostname<span class=\"token punctuation\">,</span> cores<span class=\"token punctuation\">,</span> userClassPath<span class=\"token punctuation\">,</span> env<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                <span class=\"token comment\">// 1. 获取 driver 的引用</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                <span class=\"token comment\">-- driver = Some(ref)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                <span class=\"token comment\">// 2.ExecutorBackend 向 driver 发送消息，注册 executor 的消息，也称之为反向注册</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                <span class=\"token comment\">--ref.ask[Boolean](RegisterExecutor(executorId, self, hostname, cores, extractLogUrls))</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                <span class=\"token comment\">// 3. 在 driver 端会接收到这个消息，因为在 driver 端，有一个上下文的对象，sparkcontext，在这个类有一个属性：</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                   private var _schedulerBackend: SchedulerBackend <span class=\"token operator\">=</span> _，点击SchedulerBackend，是一个trait，找到</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                   实现类：CoarseGrainedSchedulerBackend，在这个类中，有一个方法：receiveAndReply<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>：</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                      <span class=\"token comment\">//executor 的引用，在 driver 端，发送消息给到 ExecutorBackend，注册 executor 成功</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                      <span class=\"token comment\">--executorRef.send(RegisteredExecutor)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                      </pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                      <span class=\"token comment\">// ExecutorBackend 类中有一个 recive 方法，用来接收 driver 返回的 executor 注册成功的消息，executor 是一</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                         个计算对象，在这个对象里面有一个线程池，每一个线程来处理一个从driver端发送过来的任务</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                     <span class=\"token comment\">--executor = new Executor(executorId, hostname, env, userClassPath, isLocal = false)</span></pre></td></tr></table></figure><p>![image-20200618150421861](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saWFuLXpwLm9zcy1jbi1zaGVuemhlbi5hbGl5dW5jcy5jb20vcGlj\">https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic</span> GO/20200618150421.png)</p>\n<p>![image-20200618150442390](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saWFuLXpwLm9zcy1jbi1zaGVuemhlbi5hbGl5dW5jcy5jb20vcGlj\">https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic</span> GO/20200618150442.png)</p>\n<h4 id=\"225-总结\"><a class=\"anchor\" href=\"#225-总结\">#</a> 2.2.5 总结</h4>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 1. application 是在一个 nodemanager 中 container 中，并且在这个 container 中创建了一个 driver 线程</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">-- 2. 在一个 nodemanager 中，可以创建多个 container，在每个 container 中，会创建 ExecutorBackend 对象，在这个对象中，会创建一个 executor 对象，在这个对象中一个线程池，一个线程用来处理 driver 发来的一个 task，至于能同时执行多少个 task，和 executor 中的 core 数量有关。</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">-- 3. ApplicationMaster 周旋于 Driver 和 ResourceManager 之间</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">-- 4. spark 有两个进程，也就是两个分支</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    创建RM的客户端，创建AM，在AM中，创建Driver的线程</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token string\">\"分支1\"</span>：此时会执行Driver线程的run方法，在run方法中就是执行了应用程序的main方法</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token string\">\"分支2\"</span>：构建SparkContext上下文的对象，再向RM注册AM，然后申请资源和返回可用的资源，最后Driver进行资源的选择，按照首选位置的原则。</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    所以如下图片有一个错误：资源满足以后才执行main方法，实际上是创建了driver线程，还没有申请资源就已经开始执行main方法了。</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">-- 5. 进程、线程、对象</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   <span class=\"token string\">\"进程\"</span>：SparkSubmit、ApplicationMaster和CoarseGrainedExecutorBackend</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   <span class=\"token string\">\"线程\"</span>：Driver，但是我们一般称SparkContext称之为Driver</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   <span class=\"token string\">\"对象\"</span>：Executor和YarnClusterApplication</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>   </pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">-- 6. client 和 cluster 模式的区别：</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      Driver的位置不同，其余的逻辑是一样的。</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      Cluster：在集群中，在nodemanager中的AM对象中，是一个线程</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      client：在集群之外</pre></td></tr></table></figure><p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saWFuLXpwLm9zcy1jbi1zaGVuemhlbi5hbGl5dW5jcy5jb20vcGlj\">https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic</span> GO/20200618155642.png&quot; alt=&quot;image-20200618155642818&quot; style=&quot;zoom:150%;&quot; /&gt;</p>\n<h2 id=\"三-spark内部组件及通信\"><a class=\"anchor\" href=\"#三-spark内部组件及通信\">#</a> 三、Spark 内部组件及通信</h2>\n<h3 id=\"31-通信原理\"><a class=\"anchor\" href=\"#31-通信原理\">#</a> 3.1 通信原理</h3>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 通信原理 - IO - RPC</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token number\">1.</span> 基本的网络通信：Socket<span class=\"token punctuation\">,</span> ServerSocket</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token number\">2.</span> 通信框架：AKKA<span class=\"token punctuation\">(</span>旧<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>  Netty<span class=\"token punctuation\">(</span>新<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>AIO<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token number\">3.</span> 三种IO方式：BIO（阻塞式）<span class=\"token punctuation\">,</span> NIO（非阻塞式）<span class=\"token punctuation\">,</span> AIO（异步）</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token number\">4.</span> Linux<span class=\"token punctuation\">,</span> windows</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t在Linux系统上，AIO的底层实现仍使用EPOLL，与NIO相同，因此在性能上没有明显的优势；Windows的AIO底层实现良好，但是Netty开发人员并没有把Windows作为主要使用平台考虑。微软的windows系统提供了一种异步IO技术：IOCP（I<span class=\"token operator\">/</span>O CompletionPort，I<span class=\"token operator\">/</span>O完成端口）；Linux下由于没有这种异步IO技术，所以使用的是epoll（一种多路复用IO技术的实现）对异步IO进行模拟。所以在Linux上不建议使用AIO</pre></td></tr></table></figure><h3 id=\"32-组件之间通信\"><a class=\"anchor\" href=\"#32-组件之间通信\">#</a> 3.2 组件之间通信</h3>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1.</span> 组件：Driver、executor</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">2.</span> 通信环境：NettyRpcEnvFactory<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   通过env<span class=\"token punctuation\">.</span>rpcEnv<span class=\"token punctuation\">.</span>setupEndpoint，将driver和executor终端放进rpcenv中，那么这个driver和executor就可以通信</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">3.</span> 组件之间的通信：</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    a、通信终端共通类：Endpoint  </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    b、通信终端：RpcEndpoint<span class=\"token punctuation\">(</span>receive<span class=\"token punctuation\">)</span> <span class=\"token comment\">--> 通信的终端，drive 和 executor, 负责接收数据</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    c、通信终端引用：RpcEndpointRef<span class=\"token punctuation\">(</span>send<span class=\"token punctuation\">,</span>ask<span class=\"token punctuation\">)</span> <span class=\"token comment\">--> 通信终端的指代，负责发送和请求</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token number\">4.</span> 一个终端的生命周期：</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>The life<span class=\"token operator\">-</span><span class=\"token keyword\">cycle</span> <span class=\"token keyword\">of</span> an endpoint <span class=\"token operator\">is</span>:</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>创建终端<span class=\"token operator\">-</span><span class=\"token operator\">></span> 启动终端 <span class=\"token operator\">-</span><span class=\"token operator\">></span> 接收消息 <span class=\"token operator\">-</span><span class=\"token operator\">></span> 停止终端</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token operator\">*</span> &#123;<span class=\"token variable\">@code</span> constructor <span class=\"token operator\">-</span><span class=\"token operator\">></span> onStart <span class=\"token operator\">-</span><span class=\"token operator\">></span> receive<span class=\"token operator\">*</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> onStop&#125;</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token number\">5.</span> <span class=\"token string\">\"终端和终端的引用是如何关联的呢？\"</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token number\">1.</span> driver和executor都是通信终端</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token number\">2.</span> 现假如是executor向drive发送数据，那么在executor端，通过driver的引用ref给到driver发消息</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token number\">3.</span> 在driver中有一个接收器，receive。</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token number\">4.</span> 同时driver给Executor发送消息时，在driver端有一个executor的引用，通过executor的引用给到executor发送消息。</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token number\">5.</span> 这样在发送消息的时候，就不用等待返回的结果。</pre></td></tr></table></figure><p>![image-20200618201029135](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saWFuLXpwLm9zcy1jbi1zaGVuemhlbi5hbGl5dW5jcy5jb20vcGlj\">https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic</span> GO/20200618201029.png)</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1.</span> 接收消息就是通过收件箱：Inbox</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">2.</span> 发送消息就是通过发件箱：outbox</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">3.</span> 一个终端：RpcEndpoint，只有一个收件箱，但是有N个发件箱。</pre></td></tr></table></figure><p>![image-20200618202126937](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saWFuLXpwLm9zcy1jbi1zaGVuemhlbi5hbGl5dW5jcy5jb20vcGlj\">https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic</span> GO/20200618202126.png)</p>\n<h2 id=\"四-作业的调度\"><a class=\"anchor\" href=\"#四-作业的调度\">#</a> 四、作业的调度</h2>\n<h3 id=\"41-application\"><a class=\"anchor\" href=\"#41-application\">#</a> 4.1 Application</h3>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1.</span> Yarn中会有application，提交任务以后，就会产生一个应用，并有一个唯一的应用id</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">2.</span> 在SparkConf中配置了setAppName<span class=\"token punctuation\">(</span>xxxx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>设置应用的名字</pre></td></tr></table></figure><p>![image-20200618203801740](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saWFuLXpwLm9zcy1jbi1zaGVuemhlbi5hbGl5dW5jcy5jb20vcGlj\">https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic</span> GO/20200618203801.png)</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">3.</span> SparkContext，是spark核心的对象，核心类，在这个核心类中的一些重要的参数有：</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  private var _conf: SparkConf <span class=\"token operator\">=</span> _  <span class=\"token comment\">-- spark 的关键参数</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  private var _env: SparkEnv <span class=\"token operator\">=</span> _    <span class=\"token comment\">-- spark 的环境，内部有 NettyRpcEnv</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  private var _schedulerBackend: SchedulerBackend <span class=\"token operator\">=</span> _   <span class=\"token comment\">-- spark 的调度后台，Rpc 后台信息交互对象</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  private var _taskScheduler: TaskScheduler <span class=\"token operator\">=</span> _         <span class=\"token comment\">-- 任务调度器</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  private var _heartbeatReceiver: RpcEndpointRef <span class=\"token operator\">=</span> _    <span class=\"token comment\">-- 指心跳接收器，通信终端的引用 </span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token variable\">@volatile</span> private var _dagScheduler: DAGScheduler <span class=\"token operator\">=</span> _ <span class=\"token comment\">-- 有向无环图调度器，负责 job 内部调度，负责阶段划分和任务的切分。</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre> </pre></td></tr><tr><td data-num=\"9\"></td><td><pre> <span class=\"token comment\">-- _conf：下滑线开头，表示内部的变量，不是规范，是早期程序员默认遵守的规范。</span></pre></td></tr></table></figure><figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">4.</span> DAGScheduler ，spark非常核心的调度器。</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>      <span class=\"token number\">1.</span>内部有一个对象<span class=\"token punctuation\">,</span>DAGSchedulerEventProcessLoop<span class=\"token punctuation\">,</span><span class=\"token string\">\"指事件调度的规则\"</span>，点击这个类：</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">--private[spark] val eventProcessLoop = new DAGSchedulerEventProcessLoop(this)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token number\">1.</span>上面类继承于EventLoop<span class=\"token punctuation\">,</span>这个类中有一个属性：事件队列，用来存放事件</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>           BlockingQueue<span class=\"token punctuation\">[</span>E<span class=\"token punctuation\">]</span>：阻塞式队列</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>           LinkedBlockingDeque：双端队列</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token comment\">-- private val eventQueue: BlockingQueue[E] = new LinkedBlockingDeque[E]()</span></pre></td></tr></table></figure><p>![image-20200618211748700](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saWFuLXpwLm9zcy1jbi1zaGVuemhlbi5hbGl5dW5jcy5jb20vcGlj\">https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic</span> GO/20200618211748.png)</p>\n<h3 id=\"42-逻辑代码\"><a class=\"anchor\" href=\"#42-逻辑代码\">#</a> 4.2 逻辑代码</h3>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1.</span> RDD的创建： 从内存中<span class=\"token operator\">/</span>从文件中</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">2.</span> RDD的转换： 转换算子<span class=\"token punctuation\">(</span>单<span class=\"token keyword\">value</span>类型、双<span class=\"token keyword\">value</span>类型、kv类型<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">3.</span> RDD的行动： 行动算子</pre></td></tr></table></figure><h3 id=\"43-job\"><a class=\"anchor\" href=\"#43-job\">#</a> 4.3 job</h3>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1.</span> 触发作业的执行，在行动算子的内部会执行过程：</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token number\">1.</span>sparkContext提交作业</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token comment\">--> sc.runjob </span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token number\">2.</span> 有向无环图的调度器执行runjob</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token comment\">--> dagScheduler.runJob </span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token number\">3.</span> 提交job</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token comment\">--> submitjob</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token number\">4.</span> 消息队列进行存放消息</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token comment\">--> eventProcessLoop.post</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token number\">5.</span> 消息队列将消息放进队列中，这个消息是：JobSubmitted</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token comment\">--> eventQueue.put(event) </span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token number\">6.</span> 在eventQueue有一个线程，线程中有一个run方法</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token comment\">--> eventThread </span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token number\">7.</span>  负责取出消息，因为这个队列是一个阻塞式队列，队列中没有消息，那么就处于阻塞式状态</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token comment\">--> val event = eventQueue.take() </span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token number\">8.</span> 取到消息</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token comment\">--> onReceive(event)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token number\">9.</span> 执行处理消息</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token comment\">--> doOnReceive(event)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token number\">10.</span> 使用模式匹配的的方式处理消息</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token comment\">-->  def doOnReceive(event: DAGSchedulerEvent): Unit = event match &#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>      <span class=\"token keyword\">case</span> JobSubmitted<span class=\"token punctuation\">(</span>jobId<span class=\"token punctuation\">,</span> rdd<span class=\"token punctuation\">,</span> func<span class=\"token punctuation\">,</span> partitions<span class=\"token punctuation\">,</span> callSite<span class=\"token punctuation\">,</span> listener<span class=\"token punctuation\">,</span> properties<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>      dagScheduler<span class=\"token punctuation\">.</span>handleJobSubmitted<span class=\"token punctuation\">(</span>jobId<span class=\"token punctuation\">,</span> rdd<span class=\"token punctuation\">,</span> func<span class=\"token punctuation\">,</span> partitions<span class=\"token punctuation\">,</span> callSite<span class=\"token punctuation\">,</span> listener<span class=\"token punctuation\">,</span> properties<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token number\">11.</span> 有向无环图调度器处理任务的提交 </pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token comment\">--> dagScheduler.handleJobSubmitted(jobId, rdd, func, partitions, callSite, listener, properties)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token number\">12.</span> 创建一个活动的job</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token comment\">--> val job = new ActiveJob</span></pre></td></tr></table></figure><figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 总结：</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>启动一个行动算子 <span class=\"token comment\">--> runjob  -> 将执行事件放进阻塞式队列中 -> 创建一个线程取出队列中的消息 -> 进行模式匹配，处理任务的提交</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">--> 创建一个运行 job</span></pre></td></tr></table></figure><h3 id=\"44-stage\"><a class=\"anchor\" href=\"#44-stage\">#</a> 4.4 stage</h3>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 1. 阶段的划分，取决于转换算子的依赖类型。</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">-- 2. 宽依赖：ShuffleDependency</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">-- 3. 窄依赖：OneToOneDependency extends NarrowDependency</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">-- 4. 分区的数量</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>     a、窄依赖：分区数量保持不变</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>          <span class=\"token number\">1.</span> 获取窄依赖的分区数量，点击 firstParent</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>          <span class=\"token comment\">-- override def getPartitions: Array[Partition] = firstParent[T].partitions</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>               <span class=\"token number\">1.</span> 获取依赖关系的第一个rdd分区数量</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>               <span class=\"token comment\">-- dependencies.head.rdd.asInstanceOf[RDD[U]]</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>     b、宽依赖：</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token number\">1.</span> 获取宽依赖的分区数量</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            partitioner：是一个分区器，partitioner，由上一个RDD传递过来的，在传递的时候，会进行判断，如果当前的RDD的分区器</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            和上一级的分区器一样，那么是不会创建shuffleRDD，只有当前RDD的分区器和上一级的分区器不一样时，才会创建</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            ShuffledRDD</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token comment\">--Array.tabulate[Partition](part.numPartitions)(i => new ShuffledRDDPartition(i))</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token number\">2.</span> 默认情况下，默认的分区器将上一级的RDD传入</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token comment\">--  reduceByKey(defaultPartitioner(self), func)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                <span class=\"token number\">1.</span> 默认的分区数量等于上级RDD的最大值，因为上一级RDD可能有多个</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                <span class=\"token comment\">-- val defaultNumPartitions = rdds.map(_.partitions.length).max</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                <span class=\"token number\">2.</span> 构造分区器的时候，将默认的分区数量传入，分区器的作用是指定数据去到哪个分区，分区的数量默认和上一级RDD</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                   保持一致</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                <span class=\"token comment\">-- new HashPartitioner(defaultNumPartitions)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre> <span class=\"token comment\">-- 5. 总结： </span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>       a、窄依赖默认分区数量保持不变</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>       b、宽依赖，默认和上一级\tRDD最大的分区数量保持一致，如果上一级RDD只有一个，那就和上一级RDD保持一致</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                 但是Shuffle的算子一般都会有改变分区数量的参数</pre></td></tr></table></figure><figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 6. 从文件中创建 RDD 时默认的分区数量</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>      <span class=\"token number\">1.</span> 取<span class=\"token punctuation\">(</span>defaultParallelism<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>的最小值，点击defaultParallelism</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      <span class=\"token comment\">--math.min(defaultParallelism, 2)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token number\">2.</span> 选择yarn模式中的默认平行度。</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token comment\">--defaultParallelism = conf.getInt(\"spark.default.parallelism\", math.max(totalCoreCount.get(), 2))</span></pre></td></tr></table></figure><p>![image-20200620130734058](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saWFuLXpwLm9zcy1jbi1zaGVuemhlbi5hbGl5dW5jcy5jb20vcGlj\">https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic</span> GO/20200620130734.png)</p>\n<h3 id=\"45-task的切分\"><a class=\"anchor\" href=\"#45-task的切分\">#</a> 4.5 task 的切分</h3>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">--1. 任务和阶段 stage 的关系</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>     定位：DAGScheduler类</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     <span class=\"token number\">1.</span> 处理任务的提交handleJobSubmitted，在这个方法的内部：</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token number\">1.</span> 将整个job作为一个finalStage</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    \t<span class=\"token comment\">-- var finalStage: ResultStage = null</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    \t<span class=\"token number\">2.</span> 创建一个结果阶段，并赋值给finalStage</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    \t    finalRDD：最后提交job时的RDD，点击createResultStage</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    \t<span class=\"token comment\">-- finalStage = createResultStage(finalRDD, func, partitions, jobId, callSite)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    \t    <span class=\"token number\">1.</span> 通过当前的RDD获取其上一级的阶段，点击getOrCreateParentStages</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    \t    <span class=\"token comment\">-- val parents = getOrCreateParentStages(rdd, jobId)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    \t         <span class=\"token number\">1.</span>获取最后一个RDD的shuffle依赖，每一个shuffle依赖创建一个shufflemapStage</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    \t         <span class=\"token comment\">--getShuffleDependencies(rdd).map &#123; shuffleDep =>getOrCreateShuffleMapStage(shuffleDep, firstJobId)&#125;.toList</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    \t          a<span class=\"token punctuation\">.</span> 在getShuffleDependencies方法中，找到resultStage的上一级shuffleRDD</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    \t           val parents <span class=\"token operator\">=</span> new HashSet<span class=\"token punctuation\">[</span>ShuffleDependency<span class=\"token punctuation\">[</span>_<span class=\"token punctuation\">,</span> _<span class=\"token punctuation\">,</span> _<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">-- 存放宽依赖</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                    val visited <span class=\"token operator\">=</span> new HashSet<span class=\"token punctuation\">[</span>RDD<span class=\"token punctuation\">[</span>_<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">-- 创建一个 hashSet 集合，用来存放已经被访问过的 RDD</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                    val waitingForVisit <span class=\"token operator\">=</span> new ArrayStack<span class=\"token punctuation\">[</span>RDD<span class=\"token punctuation\">[</span>_<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">-- 集合的栈，创建一个集合，用来存放待访问的 RDD</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                    waitingForVisit<span class=\"token punctuation\">.</span>push<span class=\"token punctuation\">(</span>rdd<span class=\"token punctuation\">)</span>    <span class=\"token comment\">-- 将最后的一个 RDD 传到这个集合中</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>waitingForVisit<span class=\"token punctuation\">.</span>nonEmpty<span class=\"token punctuation\">)</span> &#123; <span class=\"token comment\">-- 集合是否为空，刚放进去，肯定不是空</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                      val toVisit <span class=\"token operator\">=</span> waitingForVisit<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">-- pop，弹栈，将刚刚放进去的 RDD 弹出来，并准备去访问</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>visited<span class=\"token punctuation\">(</span>toVisit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> &#123;  <span class=\"token comment\">-- 当前放进去的 RDD 是否被访问过，如果没有，则继续向下执行</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                        visited <span class=\"token operator\">+</span><span class=\"token operator\">=</span> toVisit      <span class=\"token comment\">-- 将当前获取的 RDD 放进已经被访问的 RDD 集合中</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                        toVisit<span class=\"token punctuation\">.</span>dependencies<span class=\"token punctuation\">.</span>foreach &#123;  <span class=\"token comment\">-- 获取 RDD 与直接上级的 RDD 的依赖关系，并循环遍历。</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                          <span class=\"token keyword\">case</span> shuffleDep: ShuffleDependency<span class=\"token punctuation\">[</span>_<span class=\"token punctuation\">,</span> _<span class=\"token punctuation\">,</span> _<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token comment\">-- 如果是宽依赖</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                            parents <span class=\"token operator\">+</span><span class=\"token operator\">=</span> shuffleDep  <span class=\"token comment\">-- 则将依赖加入 parents 集合中</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                          <span class=\"token keyword\">case</span> dependency <span class=\"token operator\">=</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                            waitingForVisit<span class=\"token punctuation\">.</span>push<span class=\"token punctuation\">(</span>dependency<span class=\"token punctuation\">.</span>rdd<span class=\"token punctuation\">)</span> <span class=\"token comment\">-- 如果是窄依赖，将上级 RDD 放进等待访问的 RDD 中，并</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                                                                 进行循环，判断其与上级RDD的依赖关系，直到当前的RDD为</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                                                                 shuffleRDD</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                             &#125;</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                      &#125;</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                    &#125;</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                    parents   <span class=\"token comment\">-- 将上一级 shuffleRDD 放进 parents 的集合中</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                    </pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                    获取当前RDD与直接上级的RDD的依赖关系，返回一个seq序列集合，因为当前的RDD的直接上级的RDD可能有多个</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                    <span class=\"token comment\">-- toVisit.dependencies</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                 b、通过map方法，对resultStage上级的shuffleRDD进行遍历，调用如下方法：返回获取的ShuffleDependency，执行获取或创建shuffleMapStage，点击这个方法</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                    <span class=\"token comment\">-- getOrCreateShuffleMapStage</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>                        创建shuffleMapStage，每一个shuffleDep创建一个shuffleMapStage</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>                        <span class=\"token comment\">-- createShuffleMapStage(shuffleDep, firstJobId)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>                            new出一个shuffleMapStage</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>                            <span class=\"token comment\">// 将依赖的上一级 RDD 赋值给 rdd</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>                            <span class=\"token comment\">--val rdd = shuffleDep.rdd</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>                            <span class=\"token comment\">// 又调用了创建或获取上一级阶段</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>                            <span class=\"token comment\">-- val parents = getOrCreateParentStages(rdd, jobId)</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>                            <span class=\"token comment\">-- val stage = new ShuffleMapStage</span></pre></td></tr></table></figure><figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">--2. 阶段的类型</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   ResultStage 和 shuffleMapStage</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">--3. 阶段的数量</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token operator\">=</span> ResultStage  <span class=\"token operator\">+</span> n <span class=\"token operator\">*</span>  shuffleMapStage</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">--4. 任务和分区的关系</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>     <span class=\"token number\">1.</span> 提交最后一个阶段：</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>       <span class=\"token comment\">--submitStage(finalStage)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>           <span class=\"token number\">1.</span> 获取当前阶段的上一级阶段</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>           <span class=\"token comment\">--  val missing = getMissingParentStages(stage).sortBy(_.id)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>           <span class=\"token number\">2.</span> 如果有上一级阶段不为空，则循环遍历上一阶段，先假如上一级阶段只有一个，则提交上一个阶段，又调用提交阶段</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>           <span class=\"token comment\">--for (parent &lt;- missing) &#123;submitStage(parent)&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>           </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token string\">\"总结：在提交阶段时，从最后一个阶段往前找，直到最前面的一个阶段，然后再依次从前往后进行提交阶段\"</span>。             </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token number\">2.</span> 当没有上一级阶段以后，提交任务</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>       <span class=\"token comment\">-- submitMissingTasks(stage, jobId.get)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>          <span class=\"token comment\">// 1. 对当前阶段进行模式匹配，确认是 shuffleMapSrage 还是 ResultStage，返回结果为 taskIdToLocations, 任务本地化路径</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>          <span class=\"token comment\">// 2. 如果当前阶段是 ShuffleMapStage，则创建 ShuffleMapTask</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                如果当前阶段是ResultStage ，则创建ResultTask</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>           val tasks: Seq<span class=\"token punctuation\">[</span>Task<span class=\"token punctuation\">[</span>_<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> try &#123;</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token keyword\">case</span> stage: ShuffleMapStage</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            partitionsToCompute<span class=\"token punctuation\">.</span>map  <span class=\"token comment\">--> 计算分区的数量，每一个分区，会执行如下创建任务的代码。</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            &#123;<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            new ShuffleMapTask<span class=\"token punctuation\">(</span>stage<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span> stage<span class=\"token punctuation\">.</span>latestInfo<span class=\"token punctuation\">.</span>attemptNumber</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>&#125;</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>           <span class=\"token keyword\">case</span> stage: ResultStage <span class=\"token operator\">=</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            &#123;                   </pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            new ResultTask<span class=\"token punctuation\">(</span>stage<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span> stage<span class=\"token punctuation\">.</span>latestInfo<span class=\"token punctuation\">.</span>attemptNumber<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                   &#125;</pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token comment\">-- 5. task 的类型：</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>      a、如果当前阶段是ShuffleMapStage，则创建ShuffleMapTask</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>      b、如果当前阶段是ResultStage ，则创建ResultTask</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token comment\">-- 6 . 任务的总数量</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>      <span class=\"token operator\">=</span> 每个阶段的任务总和</pre></td></tr></table></figure><figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 总结：</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">1.</span> 通过resultStage最后一个RDD，进行循环依次向上找，获取resultStage阶段，上一级为shuffleDep的ShuffleDependency，</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   存放到一个parents集合中</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">2.</span> 采用map算子，parents集合中的每个ShuffleDependency，获取到所有上级依赖为shuffleDep的RDD，然后每一个shuffleDep会创建</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>一个ShuffleMapStage阶段。</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token number\">3.</span> 当找到job最前面一个RDD以后，开始从第一个阶段提交阶段，提交阶段时，首先获取当前阶段最后一个RDD的分区数量，在一个阶段中，每一个分区就会创建一个task，task的类型和阶段的类型匹配：</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      a、如果当前阶段是ShuffleMapStage，则创建ShuffleMapTask</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      b、如果当前阶段是ResultStage ，则创建ResultTask</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token number\">4.</span> 当前阶段提交完成以后，就提交下一个阶段，依次类推，最后就会提交resultStage。</pre></td></tr></table></figure><h2 id=\"五-任务的执行\"><a class=\"anchor\" href=\"#五-任务的执行\">#</a> 五、任务的执行</h2>\n<h3 id=\"51-任务包含的内容\"><a class=\"anchor\" href=\"#51-任务包含的内容\">#</a> 5.1 任务包含的内容</h3>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1.</span>任务的提交：</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token comment\">--new ShuffleMapTask(stage.id, stage.latestInfo.attemptNumber,taskBinary, part, locs, properties, serializedTaskMetrics, Option(jobId),Option(sc.applicationId), sc.applicationAttemptId, stage.rdd.isBarrier())</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token number\">2.</span> 提交的重要几个参数有：</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>     a、<span class=\"token string\">\"stage.id\"</span>：任务从属的阶段id</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>     b、<span class=\"token string\">\"taskBinary\"</span>：是一个广播变量，内容为：阶段的<span class=\"token string\">\"RDD\"</span>和<span class=\"token string\">\"依赖关系\"</span>序列化以后的二进制字节码，因为RDD是不保存数据，一旦任务执行失败，需要知道RDD的元数据信息以及依赖关系，才能进行重新计算。</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>         <span class=\"token number\">1.</span> 是一个广播变量</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>         <span class=\"token comment\">--var taskBinary: Broadcast[Array[Byte]] = null</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>         <span class=\"token number\">2.</span> 将任务的二进制的字节码赋值给了这个广播变量</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>         <span class=\"token comment\">--taskBinary = sc.broadcast(taskBinaryBytes)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>         <span class=\"token number\">3.</span> 任务的二进制的字节码是通过对阶段匹配，如果是shuffle阶段，就会采用闭合的序列化器将阶段的RDD和阶段的依赖进行序列化</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>         <span class=\"token comment\">--taskBinaryBytes = stage match &#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>           <span class=\"token keyword\">case</span> stage: ShuffleMapStage <span class=\"token operator\">=</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                JavaUtils<span class=\"token punctuation\">.</span>bufferToArray<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                  closureSerializer<span class=\"token punctuation\">.</span>serialize<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>stage<span class=\"token punctuation\">.</span>rdd<span class=\"token punctuation\">,</span> stage<span class=\"token punctuation\">.</span>shuffleDep<span class=\"token punctuation\">)</span>: AnyRef<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>             <span class=\"token keyword\">case</span> stage: ResultStage <span class=\"token operator\">=</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            \tJavaUtils<span class=\"token punctuation\">.</span>bufferToArray<span class=\"token punctuation\">(</span>closureSerializer<span class=\"token punctuation\">.</span>serialize<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>stage<span class=\"token punctuation\">.</span>rdd<span class=\"token punctuation\">,</span> stage<span class=\"token punctuation\">.</span>func<span class=\"token punctuation\">)</span>: AnyRef<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            &#125;</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      c、 <span class=\"token string\">\"part\"</span> ：分区，指当前的task和哪个<span class=\"token keyword\">partition</span>有关</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>          <span class=\"token comment\">-- val part = partitions(id)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>      d、 <span class=\"token string\">\"locs\"</span> ： 任务的首选位置</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>          <span class=\"token comment\">-- val locs = taskIdToLocations(id)</span></pre></td></tr></table></figure><h3 id=\"52-序列化\"><a class=\"anchor\" href=\"#52-序列化\">#</a> 5.2 序列化</h3>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1.</span> 默认的序列化：<span class=\"token string\">\"JavaSerializer\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token number\">1.</span> 在SparkContext中创建了SparkEnv，点击创建的方法，一层一层往里点：</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">-- _env = createSparkEnv(_conf, isLocal, listenerBus)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token number\">1.</span> 最终看到了默认的序列化器为：JavaSerializer</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token comment\">--val serializer = instantiateClassFromConf[Serializer](</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      \t\t<span class=\"token string\">\"spark.serializer\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"org.apache.spark.serializer.JavaSerializer\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   \t\t\t\t logDebug<span class=\"token punctuation\">(</span>s<span class=\"token string\">\"Using serializer: $&#123;serializer.getClass&#125;\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token number\">2.</span> kryo序列化:</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token comment\">--1. 特点：</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>          a、性能优</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>          b、序列化结果文件的字节数少</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>          c、可以绕过java的序列化，将不能序列的对象也能进行序列化</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>          d、但是，我们在实际的情况下，并不是所有的对象都会采用kryo序列化。</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>     <span class=\"token comment\">--2. 那么哪些对象采用 kryo 序列化会比较有优势呢？</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>          <span class=\"token string\">\"总结：在shuffle阶段，当为kv类型时，k、v的数据类型如果都支持kryo序列，则会采用kryo进行序列化。</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                支持ktyo序列化的数据类型有：String和值类型(anyVal)\"</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>          </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>         底层：当有shuffle阶段时，会选择最好的序列化器</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>         <span class=\"token comment\">-- Pick the best serializer for shuffling an RDD of key-value pairs.</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>         <span class=\"token number\">2.</span> 判断选择的规则：</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            如果kv的k和v都能使用kryo序列化器时，则选择kryo序列化器，否则选择默认的序列化器：javaSerializer</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            当为如下类型（值类型）或者是string类型的时候，则可以使用kyro序列化器</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token comment\">--if (canUseKryo(keyClassTag) &amp;&amp; canUseKryo(valueClassTag)) &#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>              kryoSerializer</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            &#125; <span class=\"token keyword\">else</span> &#123;</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>              defaultSerializer</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            &#125;</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            </pre></td></tr><tr><td data-num=\"29\"></td><td><pre>              <span class=\"token comment\">--  ClassTag.Boolean,</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                  ClassTag<span class=\"token punctuation\">.</span>Byte<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                  ClassTag<span class=\"token punctuation\">.</span><span class=\"token keyword\">Char</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                  ClassTag<span class=\"token punctuation\">.</span><span class=\"token keyword\">Double</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                  ClassTag<span class=\"token punctuation\">.</span><span class=\"token keyword\">Float</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                  ClassTag<span class=\"token punctuation\">.</span><span class=\"token keyword\">Int</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                  ClassTag<span class=\"token punctuation\">.</span>Long<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                  ClassTag<span class=\"token punctuation\">.</span><span class=\"token boolean\">Null</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                  ClassTag<span class=\"token punctuation\">.</span>Short</pre></td></tr></table></figure><h3 id=\"53-任务的调度\"><a class=\"anchor\" href=\"#53-任务的调度\">#</a> 5.3  任务的调度</h3>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 1. driver 生成的任务以后存放在哪里了？</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   a、当driver生成任务以后，并不是立即将任务task就发送给executor，因为可能发送过程有异常，也可能发送过去的时候，executor对象还没有创建，都会导致任务task发送失败</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token number\">1.</span> 一个阶段stage生成tasks以后，如果这个阶段的tasks的数量大于<span class=\"token number\">0</span>，那么这个任务调度器就会提交任务，在提交任务中，会将这个</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>          stage的任务封装成一个TaskSet<span class=\"token punctuation\">,</span>任务集进行提交，点击submitTasks</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token comment\">-- if (tasks.size > 0)，taskScheduler.submitTasks(new TaskSet( tasks.toArray, stage.id, stage.latestInfo.attemptNumber, jobId, properties))</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>              <span class=\"token number\">1.</span>首先取出任务</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>              <span class=\"token comment\">--val tasks = taskSet.tasks</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>              <span class=\"token number\">2.</span> 创建一个任务集taskset的管理者manager</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>              <span class=\"token comment\">-- val manager = createTaskSetManager(taskSet, maxTaskFailures)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>              <span class=\"token number\">3.</span> 构建调度器，将刚刚创建的任务集管理者放到调度器中，点击addTaskSetManager</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>              <span class=\"token comment\">--schedulableBuilder.addTaskSetManager(manager, manager.taskSet.properties)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                  <span class=\"token number\">1.</span>是一个抽象方法，类是一个trait，有两个实现类，分别是：</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                        FIFOSchedulableBuilder <span class=\"token comment\">--> 先进先出调度器</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                        FairSchedulableBuilder <span class=\"token comment\">--> 公平调度器</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                        那么我们新增加进去的manager是采用什么调度器呢？</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                            a、通过源码可知，默认的调度模式为FIFO模式</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                            <span class=\"token comment\">-- private val schedulingModeConf = conf.get(SCHEDULER_MODE_PROPERTY, SchedulingMode.FIFO.toString)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                            b、创建一个任务调度池，当driver生成任务以后，会将任务放进任务池中，由manager来进行调度</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                            val rootPool: Pool <span class=\"token operator\">=</span> new Pool<span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> schedulingMode<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                   <span class=\"token number\">2.</span> 将manager直接放进调度池中，</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                    rootPool<span class=\"token punctuation\">.</span>addSchedulable<span class=\"token punctuation\">(</span>manager<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                <span class=\"token number\">4.</span> 点击<span class=\"token punctuation\">.</span>reviveOffers：恢复当前的操作</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>               <span class=\"token comment\">--backend.reviveOffers()</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                   <span class=\"token number\">1.</span>driver的终端，自己给自己发消息</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                    <span class=\"token comment\">-- driverEndpoint.send(ReviveOffers)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                    <span class=\"token number\">2.</span>在DriverEndpoint中，就有一个receive方法，在这个方法中，匹配获取的消息，如果是ReviveOffers<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                    则执行makeOffers<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>方法，点击makeOffers<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>方法</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                     <span class=\"token comment\">-- case ReviveOffers =>makeOffers()</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                         a、DriverEndpoint调度器从任务池中取出任务，取任务的具体方式：点击resourceOffers</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                          <span class=\"token comment\">-- val taskDescs = scheduler.resourceOffers(workOffers)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                               a、获取一个排好序的任务集合，实现方式，点击getSortedTaskSetQueue</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                                <span class=\"token comment\">--val sortedTaskSets = rootPool.getSortedTaskSetQueue</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                                     a、如下为任务集的调度的算法，依据算法对任务集进行比较排序，返回排好序的任务集，然后将</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                                     返回任务集存放到一个arraybuffer集合中，并返回给到sortedTaskSets，不同的调度的算法</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                                     是不一样的。</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                                     <span class=\"token string\">\"FIFO调度算法\"</span>：先比较优先级，优先级高的先调度，如果优先级相等，则比较阶段id，阶段</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>                                                    id小的先执行。</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>                                     <span class=\"token string\">\"Fair调度算法\"</span>：根据运行任务的数量、权重【默认值为<span class=\"token number\">1</span>】、最小分配数量【默认值为<span class=\"token number\">0</span>】，</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>                                                    进行综合分配</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>                                      <span class=\"token comment\">-- val sortedSchedulableQueue =</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>      schedulableQueue<span class=\"token punctuation\">.</span>asScala<span class=\"token punctuation\">.</span>toSeq<span class=\"token punctuation\">.</span>sortWith<span class=\"token punctuation\">(</span>taskSetSchedulingAlgorithm<span class=\"token punctuation\">.</span>comparator<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"44\"></td><td><pre>                         b、如果任务不为空，则driver发射任务</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>                          <span class=\"token comment\">-- if (!taskDescs.isEmpty) &#123;launchTasks(taskDescs)&#125;</span></pre></td></tr></table></figure><figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 1. 总结</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token number\">1.</span> 一个stage生成tasks以后，由taskSchedule负责任务的调度</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token number\">2.</span> 一个stage就会有一个任务集，taskSet</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token number\">3.</span> 每一个taskSet都会被封装成TaskSetManager，负责监控管理同一个Stage中的Tasks，TaskScheduler调度模式有两种：</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        a、FIFOSchedulableBuilder <span class=\"token comment\">--> 先进先出调度器【默认调度模式】</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        b、FairSchedulableBuilder <span class=\"token comment\">--> 公平调度器</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   <span class=\"token number\">4.</span> TaskScheduler初始化过程中会实例化rootPool任务池，driver准备的任务和管理者会发送到这个任务池中，</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      由TaskScheduler负责将任务调度结果发送给executor</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   <span class=\"token number\">5.</span> driver的终端自己给自己发送一个消息<span class=\"token string\">\"ReviveOffers\"</span>，driverEndpoint收到ReviveOffer消息后调用makeOffers方法，TaskScheduler就开始进行任务集的调度</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   <span class=\"token number\">6.</span> 根据<span class=\"token string\">\"调度算法\"</span>对任务集进行排序，获取一个排好序的队列<span class=\"token string\">\"排序在前的就先执行，排序在后的就后执行\"</span>，将排好序的队列放到一个arraybuffer集合中，并返回给到sortedTaskSets</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>       </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>       <span class=\"token string\">\"FIFO调度算法\"</span>：先比较优先级，优先级高的先调度，如果优先级相等，则比较阶段id，阶段 id小的先执行。</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token string\">\"Fair调度算法\"</span>：根据运行任务的数量、weight【默认值为<span class=\"token number\">1</span>】、minShare【默认值为<span class=\"token number\">0</span>】，进行综合分配</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        minShare、weight的值均在公平调度配置文件<span class=\"token string\">\"fairscheduler.xml\"</span>中被指定，调度池在构建阶段会读取此文件的相关配置</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>   <span class=\"token number\">7.</span> <span class=\"token string\">\"driverEndpoint\"</span>调度器就从这个排好序的任务队列的数组中取任务tasks。</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>   <span class=\"token number\">8.</span> 如果获取的任务不为空，则dirver开始发射任务</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>   </pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">-- 2. 说明：</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>   <span class=\"token number\">1.</span> 从任务池中取出的任务，包含了本地化级别信息以及等待的时长<span class=\"token punctuation\">(</span><span class=\"token string\">\"默认每个级别等待时间为3s，也可以单独设置每个级别的等待时间\"</span><span class=\"token punctuation\">)</span>，当在driver在发送任务的时候，会根据本地化级别进行发送任务<span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>   </pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\">-- 3. 区分本地化级别和调度算法</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    调度算法：是指driverEndpoint在调度任务集时，确定哪个任务集先执行，哪个任务集后执行</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    本地化级别：是指driver在发送向executor发送任务的首选位置，确定任务发送到哪个executor中，如果发送不成功，并进行降级处理</pre></td></tr></table></figure><h3 id=\"54-任务的计算\"><a class=\"anchor\" href=\"#54-任务的计算\">#</a> 5.4  任务的计算</h3>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1.</span> driver发送任务前，会将任务进行编码：</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    \t<span class=\"token comment\">--val serializedTask = TaskDescription.encode(task)  </span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token number\">2.</span> 然后向executor发送已经编码和序列化的任务task</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   \t\t<span class=\"token comment\">-- executorData.executorEndpoint.send(LaunchTask(new SerializableBuffer(serializedTask))</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   <span class=\"token number\">3.</span> 在executorbackend就会收到任务<span class=\"token punctuation\">(</span>receive<span class=\"token punctuation\">)</span>并启动任务<span class=\"token punctuation\">,</span>首先是对任务进行解码，然后executor启动任务，点击launchTask</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    \t<span class=\"token comment\">--val taskDesc = TaskDescription.decode(data.value)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        logInfo<span class=\"token punctuation\">(</span><span class=\"token string\">\"Got assigned task \"</span> <span class=\"token operator\">+</span> taskDesc<span class=\"token punctuation\">.</span>taskId<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        executor<span class=\"token punctuation\">.</span>launchTask<span class=\"token punctuation\">(</span>this<span class=\"token punctuation\">,</span> taskDesc<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   <span class=\"token number\">4.</span>  来一个task就使用一个线程来接收</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token comment\">--val tr = new TaskRunner(context, taskDescription)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        runningTasks<span class=\"token punctuation\">.</span>put<span class=\"token punctuation\">(</span>taskDescription<span class=\"token punctuation\">.</span>taskId<span class=\"token punctuation\">,</span> tr<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        threadPool<span class=\"token punctuation\">.</span><span class=\"token keyword\">execute</span><span class=\"token punctuation\">(</span>tr<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token number\">5.</span> 线程中有一个run方法，方法中有一个逻辑为：task<span class=\"token punctuation\">.</span>run，通过底层发现，其实调用的是具体task对象的runTask<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>方法</pre></td></tr></table></figure><h3 id=\"55-shuffle\"><a class=\"anchor\" href=\"#55-shuffle\">#</a> 5.5 shuffle</h3>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>【在<span class=\"token string\">\"shuffleMapTask类\"</span>中的runTask<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>方法中】</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token number\">1.</span> shuffle<span class=\"token string\">\"写操作\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token comment\">--var writer: ShuffleWriter[Any, Any] = null</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token number\">2.</span> 在写操作之前，也会调用迭代器的方式，所以也可以实现<span class=\"token string\">\"读的操作\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token comment\">--writer.write(rdd.iterator(partition, context)......</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  【在<span class=\"token string\">\"resultTask类\"</span>中的runTask<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>方法中，那么就得有读数据的操作】</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token number\">1.</span> RDD中不保存数据，所以操作的时候数据是一条一条的执行，则会调用迭代器的方法，点击iterator方法</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token comment\">-- func(context, rdd.iterator(partition, context))</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token number\">1.</span> 一层一层的调，在shuffleRDD中的computer中有：<span class=\"token string\">\"读的操作\"</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>       <span class=\"token comment\">-- SparkEnv.get.shuffleManager.getReader(dep.shuffleHandle, split.index, split.index + 1, context).read()</span></pre></td></tr></table></figure><figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token string\">\"分支1\"</span>： Shuffle map<span class=\"token punctuation\">(</span><span class=\"token keyword\">Write</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>      <span class=\"token number\">1.</span> 点击getWrite</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      <span class=\"token comment\">-- writer = manager.getWriter[Any, Any](dep.shuffleHandle, partitionId, context)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token number\">1.</span> getWriter是一个抽象方法，所在的类为：ShuffleManager，<span class=\"token string\">'shuffle管理器'</span>，获取其实现类：<span class=\"token string\">\"SortShuffleManager\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>               是一个可排序的shuffleManager管理器。查询这个管理类的getWriter方法，在这个方法中，对handle的类型进行模式匹</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>               配，所以现在handle就很很重要了，从模式匹配项，可以知道有<span class=\"token number\">3</span>种不同类型的handle，而且handle来自<span class=\"token string\">\"getWriter方法\"</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>               <span class=\"token comment\">-- handle match &#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                  <span class=\"token keyword\">case</span> unsafeShuffleHandle: SerializedShuffleHandle</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                  <span class=\"token keyword\">case</span> bypassMergeSortHandle: BypassMergeSortShuffleHandle</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                  <span class=\"token keyword\">case</span> other: BaseShuffleHandle</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token number\">2.</span>在 <span class=\"token string\">\"manager.getWriter\"</span>方法中的handle到底是什么？看源码</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>             <span class=\"token number\">1.</span> 是shuffle管理器注册shuffle获取的，点击registerShuffle</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>             <span class=\"token comment\">--val shuffleHandle: ShuffleHandle = _rdd.context.env.shuffleManager.registerShuffle(</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        shuffleId<span class=\"token punctuation\">,</span> _rdd<span class=\"token punctuation\">.</span>partitions<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">,</span> this<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>             <span class=\"token number\">2.</span> 是一个抽象方法，获取抽象类<span class=\"token string\">\"ShuffleManager\"</span>的实现类<span class=\"token string\">\"SortShuffleManager\"</span><span class=\"token punctuation\">,</span>查询<span class=\"token string\">\"registerShuffle\"</span>方法</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                    从这里发现，确实有三种handle：</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                    a、如果忽略索引文件的排序 <span class=\"token comment\">--> 创建 BypassMergeSortShuffleHandle</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                    b、如果可以实现序列化    <span class=\"token comment\">--> 创建 SerializedShuffleHandle</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                    c、如果不是以上两种      <span class=\"token comment\">--> 创建 BaseShuffleHandle</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                   <span class=\"token comment\">--if (SortShuffleWriter.shouldBypassMergeSort(conf, dependency)) &#123;  </span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                          new BypassMergeSortShuffleHandle<span class=\"token punctuation\">[</span>K<span class=\"token punctuation\">,</span> V<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                            shuffleId<span class=\"token punctuation\">,</span> numMaps<span class=\"token punctuation\">,</span> dependency<span class=\"token punctuation\">.</span>asInstanceOf<span class=\"token punctuation\">[</span>ShuffleDependency<span class=\"token punctuation\">[</span>K<span class=\"token punctuation\">,</span> V<span class=\"token punctuation\">,</span> V<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                        &#125; <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>SortShuffleManager<span class=\"token punctuation\">.</span>canUseSerializedShuffle<span class=\"token punctuation\">(</span>dependency<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> &#123;  </pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                          new SerializedShuffleHandle<span class=\"token punctuation\">[</span>K<span class=\"token punctuation\">,</span> V<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                            shuffleId<span class=\"token punctuation\">,</span> numMaps<span class=\"token punctuation\">,</span> dependency<span class=\"token punctuation\">.</span>asInstanceOf<span class=\"token punctuation\">[</span>ShuffleDependency<span class=\"token punctuation\">[</span>K<span class=\"token punctuation\">,</span> V<span class=\"token punctuation\">,</span> V<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                        &#125; <span class=\"token keyword\">else</span> &#123;     </pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                          new BaseShuffleHandle<span class=\"token punctuation\">(</span>shuffleId<span class=\"token punctuation\">,</span> numMaps<span class=\"token punctuation\">,</span> dependency<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                        &#125;</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                      &#125;</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                      <span class=\"token number\">1.</span> 点击<span class=\"token string\">\"shouldBypassMergeSort\"</span><span class=\"token punctuation\">,</span>查看什么情况下忽略排序，如果当前rdd的map端有预聚合功能，就</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                         不能忽略排序，如reduceByKey算子</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                        <span class=\"token comment\">-- if (dep.mapSideCombine) &#123;false&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                        如果map端没有预聚合功能，首先获取忽略合并的阈值，如果没有显示设置，就会默认给<span class=\"token number\">200</span>，如果当前RDD的</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                        分区器的分区数量小于这个阈值，那么就返回<span class=\"token boolean\">true</span>，则此时创建<span class=\"token string\">\"BypassMergeSortShuffleHandle\"</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                        <span class=\"token comment\">--else &#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                        val bypassMergeThreshold: <span class=\"token keyword\">Int</span> <span class=\"token operator\">=</span> conf<span class=\"token punctuation\">.</span>getInt<span class=\"token punctuation\">(</span><span class=\"token string\">\"spark.shuffle.sortbypassMergeThreshold\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                        dep<span class=\"token punctuation\">.</span>partitioner<span class=\"token punctuation\">.</span>numPartitions <span class=\"token operator\">&lt;=</span> bypassMergeThreshold</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>                        <span class=\"token comment\">-- 所以总结就是当 rdd 的 map 端没有预聚合功能，且分区器的分区数量小于阈值，那么就会创建</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>                            <span class=\"token string\">\"BypassMergeSortShuffleHandle\"</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>                     <span class=\"token number\">2.</span> 点击<span class=\"token string\">\"canUseSerializedShuffle\"</span><span class=\"token punctuation\">,</span>Spark的内存优化后的解决方案<span class=\"token punctuation\">,</span>对象序列化后不需要反序列化。</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>                          <span class=\"token comment\">// 通过以下代码可知，创建 \"SerializedShuffleHandle\" 的条件为，满足以下三个条件即可：</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>                             a、序列化对象需要<span class=\"token string\">\"支持\"</span>重定义</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>                             b、依赖的map端<span class=\"token string\">\"没有\"</span>预聚合功能</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>                             c、分区数量<span class=\"token string\">\"小于\"</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">24</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span> <span class=\"token operator\">=</span> <span class=\"token number\">16777215</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>                          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>dependency<span class=\"token punctuation\">.</span>serializer<span class=\"token punctuation\">.</span>supportsRelocationOfSerializedObjects<span class=\"token punctuation\">)</span> &#123; <span class=\"token boolean\">false</span>&#125; </pre></td></tr><tr><td data-num=\"46\"></td><td><pre>                          <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dependency<span class=\"token punctuation\">.</span>mapSideCombine<span class=\"token punctuation\">)</span> &#123;<span class=\"token boolean\">false</span> &#125; </pre></td></tr><tr><td data-num=\"47\"></td><td><pre>                          <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>numPartitions <span class=\"token operator\">></span> MAX_SHUFFLE_OUTPUT_PARTITIONS_FOR_SERIALIZED_MODE<span class=\"token punctuation\">)</span> &#123; <span class=\"token boolean\">false</span>&#125; </pre></td></tr><tr><td data-num=\"48\"></td><td><pre>                          <span class=\"token keyword\">else</span> &#123;<span class=\"token boolean\">true</span> &#125;</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>                     <span class=\"token number\">3.</span> 如果以上两个handle都不满足，则选择最后一个handle：<span class=\"token string\">\"BaseShuffleHandle\"</span> <span class=\"token comment\">--> 默认的 handle</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>                                             </pre></td></tr><tr><td data-num=\"51\"></td><td><pre><span class=\"token string\">\"分支2\"</span>：Shuffle reduce<span class=\"token punctuation\">(</span><span class=\"token keyword\">Read</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 总结： shuffle 的 handle 有三种：</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>     <span class=\"token number\">1.</span> BypassMergeSortShuffleHandle  <span class=\"token comment\">--> BypassMergeSortShuffleWriter</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token string\">\"条件\"</span>：</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        a、当前rdd的map端没有预聚合功能，如groupBy</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        b、分区器的分区数量小于阈值<span class=\"token punctuation\">,</span>默认为<span class=\"token number\">200</span>        </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>     <span class=\"token number\">2.</span> SerializedShuffleHandle      <span class=\"token comment\">--> UnsafeShuffleWriter</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token string\">\"条件\"</span>：</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        a、序列化对象需要<span class=\"token string\">\"支持\"</span>重定义</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        b、依赖的map端<span class=\"token string\">\"没有\"</span>预聚合功能</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        c、分区数量<span class=\"token string\">\"小于\"</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">24</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span> <span class=\"token operator\">=</span> <span class=\"token number\">16777215</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>     <span class=\"token number\">3.</span> BaseShuffleHandle           <span class=\"token comment\">--> SortShuffleWriter</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token string\">\"默认的handle\"</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>如果前两种都不满足，那么就使用默认的<span class=\"token keyword\">write</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>拿着这三种handle，再来看这个<span class=\"token string\">\"getWrite\"</span>方法</pre></td></tr></table></figure><figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- handle match &#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>     <span class=\"token comment\">-- case unsafeShuffleHandle: SerializedShuffleHandle =></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        new UnsafeShuffleWriter<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>     <span class=\"token comment\">-- case bypassMergeSortHandle: BypassMergeSortShuffleHandle =></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        new BypassMergeSortShuffleWriter<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>     <span class=\"token comment\">-- case other: BaseShuffleHandle =></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        new SortShuffleWriter<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre> </pre></td></tr><tr><td data-num=\"9\"></td><td><pre> <span class=\"token string\">\"不同的handle对应不同的writer\"</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>     <span class=\"token number\">1.</span> BypassMergeSortShuffleHandle  <span class=\"token comment\">--> BypassMergeSortShuffleWriter</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">// 点击 \"BypassMergeSortShuffleWriter\" 中的 write 方法，如下代码，根据分区的数量进行循环，' 每一个分区就向磁盘写一个文</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        件'。 即map端的每一个task会为reduce端的每一个task都创建一个临时磁盘文件<span class=\"token punctuation\">,</span>根据<span class=\"token keyword\">key</span>的hashcode<span class=\"token operator\">%</span>分区数量，决定数据去到</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        哪个分区文件中。</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token comment\">-- for (int i = 0; i &lt; numPartitions; i++) &#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      partitionWriters<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> blockManager<span class=\"token punctuation\">.</span>getDiskWriter<span class=\"token punctuation\">(</span>blockId<span class=\"token punctuation\">,</span> <span class=\"token keyword\">file</span><span class=\"token punctuation\">,</span> serInstance<span class=\"token punctuation\">,</span> fileBufferSize<span class=\"token punctuation\">,</span> writeMetrics<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>&#125;</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>       </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>     <span class=\"token number\">2.</span> SerializedShuffleHandle       <span class=\"token comment\">--> UnsafeShuffleWriter </span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>   </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>     <span class=\"token number\">3.</span> BaseShuffleHandle<span class=\"token punctuation\">,</span><span class=\"token string\">\"重要\"</span>       <span class=\"token comment\">--> SortShuffleWriter</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>         <span class=\"token comment\">// 点击 \"SortShuffleWriter\" 中的 write 方法，如下代码：</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token comment\">// 1. \"写文件过程\"：写磁盘文件时，首先将数据写到内存中，并在内存中的进行排序，如果内存（5M）不够，会溢写磁盘，</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        生成临时文件<span class=\"token punctuation\">(</span>一个数据文件，一个索引文件<span class=\"token punctuation\">)</span>，最终将所有的临时文件合并<span class=\"token punctuation\">(</span>原来的数据文件和索引文件会被删除<span class=\"token punctuation\">)</span>成数据</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        文件和索引文件。</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>           <span class=\"token number\">2.</span> <span class=\"token string\">\"预聚和的原理\"</span>：在排序时，构造了一种类似于hashtable的结构，所以相同的<span class=\"token keyword\">key</span>就聚合在一起。</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>           <span class=\"token number\">3.</span> <span class=\"token string\">\"排序规则\"</span>：首先会按照分区进行排序，然后按照<span class=\"token keyword\">key</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>           <span class=\"token number\">4.</span> <span class=\"token string\">\"数据进入不同分区的原则\"</span>：按照分区器的原则，默认是hashpartition，根据<span class=\"token keyword\">key</span>的<span class=\"token keyword\">hash</span><span class=\"token operator\">%</span>分区数量。</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>         val partitionLengths <span class=\"token operator\">=</span> sorter<span class=\"token punctuation\">.</span>writePartitionedFile<span class=\"token punctuation\">(</span>blockId<span class=\"token punctuation\">,</span> tmp<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>         shuffleBlockResolver<span class=\"token punctuation\">.</span>writeIndexFileAndCommit<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr></table></figure><p>![image-20200621180817513](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saWFuLXpwLm9zcy1jbi1zaGVuemhlbi5hbGl5dW5jcy5jb20vcGlj\">https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic</span> GO/20200621180817.png)</p>\n<p>![image-20200620004312766](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saWFuLXpwLm9zcy1jbi1zaGVuemhlbi5hbGl5dW5jcy5jb20vcGlj\">https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic</span> GO/20200620004312.png)</p>\n<pre><code class=\"language-sqlite\">-- 面试中常见shuffle的两个问题：\n1. 我们现在spark使用了哪种shuffle，哪一种类型的？\n   a、sortshuffle。\n2. 忽略排序过程的shuffle什么时候会触发？\n   a、map 端没有预聚合功能\n   b、reduce端的分区数量小于一个阈值，默认是200\n</code></pre>\n<h2 id=\"六-spark内存管理\"><a class=\"anchor\" href=\"#六-spark内存管理\">#</a> 六 、 Spark 内存管理</h2>\n<h3 id=\"61-堆内内存和堆外内存\"><a class=\"anchor\" href=\"#61-堆内内存和堆外内存\">#</a> 6.1 堆内内存和堆外内存</h3>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">--1. \"堆内内存\"：</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        是指jvm所能使用的内存，并不是完全可以控制，如GC垃圾回收器的执行时间是不可控的，当你需要内存进行数据处理时，GC并不能立</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        马释放内存给你使用。jvm虚拟机默认使用的内存大小是可用内存的<span class=\"token number\">1</span><span class=\"token operator\">/</span><span class=\"token number\">64</span>，最大值是<span class=\"token number\">1</span><span class=\"token operator\">/</span><span class=\"token number\">4</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">--2. \"堆外内存\"：</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>         在jvm虚拟机之外的内存，可以存储我们的数据，这个内存是咱们向操作系统申请过来的，完全可控。<span class=\"token string\">\"默认是不启用堆外内存\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">--3. 设置堆外内存的参数：</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        a、启动堆外内存参数：spark<span class=\"token punctuation\">.</span>memory<span class=\"token punctuation\">.</span>offHeap<span class=\"token punctuation\">.</span>enabled</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        b、设定堆外内存的大小： spark<span class=\"token punctuation\">.</span>memory<span class=\"token punctuation\">.</span>offHeap<span class=\"token punctuation\">.</span>size </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">--4. 在 spark 中，堆内和堆外内存可以进行统一的管理。</span></pre></td></tr></table></figure><h3 id=\"62-内存空间分配\"><a class=\"anchor\" href=\"#62-内存空间分配\">#</a> 6.2 内存空间分配</h3>\n<h4 id=\"621-早期内存管理\"><a class=\"anchor\" href=\"#621-早期内存管理\">#</a> 6.2.1 早期内存管理</h4>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token string\">\"早期各个区域的内存分配好了以后，就需要严格遵守这个规则，内存大小不可变。\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">--1. 内存空间的分配：</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">1.</span> Storage：缓存RDD数据和广播变量的数据， <span class=\"token string\">\"内存大小占比60%\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">2.</span> Execution：用于缓存在shuffle过程中的中间数据， <span class=\"token string\">\"内存大小占比20%\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">3.</span> Other：用户自定义的一些数据结构或者是Spark内部的元数据 ： <span class=\"token string\">\"内存大小占比20%\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">-- 2. Storage 内存和 Execution 内存都有预留空间，目的是防止 OOM，因为 Spark 堆内内存大小的记录是不准确的，需要留出保险区域。</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">-- 3. 当前不同区域内存大小分配存在的问题：</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      Execution的内存过小，而Storage内存大小过多。</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      </pre></td></tr><tr><td data-num=\"12\"></td><td><pre> 从而就产生了新的内存分配原则</pre></td></tr></table></figure><ul>\n<li>堆内内存</li>\n</ul>\n<p>![image-20200620012427321](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saWFuLXpwLm9zcy1jbi1zaGVuemhlbi5hbGl5dW5jcy5jb20vcGlj\">https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic</span> GO/20200620012427.png)</p>\n<ul>\n<li>堆外内存</li>\n</ul>\n<p>![image-20200620015214858](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saWFuLXpwLm9zcy1jbi1zaGVuemhlbi5hbGl5dW5jcy5jb20vcGlj\">https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic</span> GO/20200620015214.png)</p>\n<h4 id=\"622-统一内存管理\"><a class=\"anchor\" href=\"#622-统一内存管理\">#</a> 6.2.2 统一内存管理</h4>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 1. 什么是统一内存管理？</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   Spark1<span class=\"token punctuation\">.</span><span class=\"token number\">6</span> 之后引入的统一内存管理机制，各个区域内存的大小是可变的<span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token comment\">--2. 与静态内存管理的区别:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   统一内存管理<span class=\"token string\">\"存储内存\"</span>和<span class=\"token string\">\"执行内存共享\"</span>同一块空间，可以动态占用对方的空闲区域</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">-- 3. 当前 spark 默认的内存分配是按照统一内存管理的模式。</span></pre></td></tr></table></figure><ul>\n<li>堆内内存</li>\n</ul>\n<p>![image-20200620015026859](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saWFuLXpwLm9zcy1jbi1zaGVuemhlbi5hbGl5dW5jcy5jb20vcGlj\">https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic</span> GO/20200620015026.png)</p>\n<ul>\n<li>堆外内存</li>\n</ul>\n<p>![image-20200620015251558](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saWFuLXpwLm9zcy1jbi1zaGVuemhlbi5hbGl5dW5jcy5jb20vcGlj\">https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic</span> GO/20200620015251.png)</p>\n<h4 id=\"623-同一管理内存的优点\"><a class=\"anchor\" href=\"#623-同一管理内存的优点\">#</a> 6.2.3 同一管理内存的优点</h4>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 1. 优点</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>设定基本的存储内存和执行内存区域（spark<span class=\"token punctuation\">.</span>storage<span class=\"token punctuation\">.</span>storageFraction参数），该设定确定了双方各自拥有的空间的范围；</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>双方的空间都不足时，则存储到硬盘；若己方空间不足而对方空余时，可借用对方的空间<span class=\"token punctuation\">;</span>（存储空间不足是指不足以放下一个完整的Block）</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>执行内存的空间被对方占用后，可让对方将占用的部分转存到硬盘，然后”归还”借用的空间；</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">4</span><span class=\"token punctuation\">)</span>存储内存的空间被对方占用后，无法让对方”归还”，因为需要考虑 Shuffle过程中的很多因素，实现起来较为复杂。</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">-- 2. 统一内存管理的动态占用机制图如下：</span></pre></td></tr></table></figure><p>![image-20200620015447725](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saWFuLXpwLm9zcy1jbi1zaGVuemhlbi5hbGl5dW5jcy5jb20vcGlj\">https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic</span> GO/20200620015447.png)</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 注意事项</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">1.</span> 如果是storage借了Execution的内存，那么当Execution需使用时，storage占用Execution的内存就要想办法还给Execution，一般可以进行落盘，但是在内存中的数据有一个存储级别，如果仅仅是Memory_Only的话，那么此时占用内存的数据就会丢失。</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">2.</span>  如果是Execution借了storage的内存，那么当storage需使用时，Execution并不会把内存还给storage，那么此时storage的数据就会溢写磁盘，如果不能溢写的话，那么就会丢失或淘汰。</pre></td></tr></table></figure><figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 面试题：</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">1.</span> 动态占用机制图是什么情况？</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">2.</span> 为什么cache为丢失数据？</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">3.</span> 阶段的划分</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">4.</span> task的发送</pre></td></tr></table></figure>",
            "tags": []
        },
        {
            "id": "https://github.com/Mayizono/miyazono.github.io/big-data/spark/7.SparkStreaming/",
            "url": "https://github.com/Mayizono/miyazono.github.io/big-data/spark/7.SparkStreaming/",
            "title": "",
            "date_published": "2021-08-31T10:42:35.373Z",
            "content_html": "<h1 id=\"sparkstreaming\"><a class=\"anchor\" href=\"#sparkstreaming\">#</a> SparkStreaming</h1>\n<hr />\n<h2 id=\"一-sparkstreaming-介绍\"><a class=\"anchor\" href=\"#一-sparkstreaming-介绍\">#</a> 一、SparkStreaming 介绍</h2>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">--0. 几个概念</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>         a、<span class=\"token string\">'实时'</span>：数据处理的延迟，以毫秒级进行响应</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>         b、<span class=\"token string\">'离线'</span>：数据处理的延迟，以小时、天、月、年为级别响应</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>         c、<span class=\"token string\">'批处理'</span>：数据处理的方式，一次处理一批数据</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>         d、<span class=\"token string\">'流式处理'</span>：数据处理的方式，和水流相似，来一条数据处理一条数据，来一点处理一点，一个一个的处理。</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token comment\">--1. 什么是 SparkStreaming</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>         a、流式数据处理，但是实际情况是无法到达真正流式处理，因为底层还是RDD，不能来一条数据处理一条数据</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            那样IO会非常多。</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>         b、接收来自kafka、flume、Twitter等框架的数据</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>         c、是<span class=\"token string\">\"准实时\"\"微批次\"</span>数据处理引擎，使用类似RDD算子进行数据处理，这里的处理的方法称为原语，数据处理的逻辑</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            是相对比较简单的，如果处理的逻辑很复杂，计算时间就会比较长，那么就不能算是准实时的处理</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token string\">\"实时数仓将是未来的方向\"</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>         d、<span class=\"token string\">'处理的数据结果集'</span>可以发送到hdfs、mysql等一些框架中进存储。</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token comment\">--2. 基本流程</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>         a、内部使用离散化流：用DStream表示。</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>         b、DStream是随时间推移而收到数据的序列，在内部，每个时间区间收到的数据作为RDD存在</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>         c、DStream是作为这些RDD所组成的序列</pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token comment\">--3. 和 SparkCore/SparkSQL 之间的区别</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>         a、从环境对象上的区别：</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>             SparkCore  <span class=\"token comment\">--> SparkContext, 使用 sc 表示</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>             SparkSQL <span class=\"token comment\">--> SparkSeeion，内部是对 SparkContext 的封装，使用 spark 表示</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>             SparkStreaming<span class=\"token comment\">--> StreamingContext, 内部是对 SparkContext 的封装</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>         b、处理抽象的区别：</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>             SparkCore <span class=\"token comment\">--> RDD</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>             SparkSQL <span class=\"token comment\">-->  DataFrame / DataSet</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>             SparkStreaming <span class=\"token comment\">--> DStream</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>   <span class=\"token comment\">-- 4. 关键词：</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>          在SparkStreaming中：</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>          a、准实时</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>          b、微批次</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>          c、采集周期：每采集一次数据，就会生成一个RDD</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>          d、DStream</pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>  <span class=\"token comment\">--5. 框架图</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>           a、在executor中有一个采集器，通过采集器，按照采集周期从指定的地方进行采集数据</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>           b、生成的rdd传递给到Driver端，driver端的StreamingContext用来处理所有数据的Spark作业。</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>           c、底层就封装成了RDD，后面的数据处理流程就和SparkCore处理的流程一致。</pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>  <span class=\"token comment\">--6. 背压机制：</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>           a、背景：</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>               由于数据是源源不断向采集器中发送，那么当生产数据的速度<span class=\"token operator\">></span>数据处理的速度时，就会产生背压。</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>           b、解决方法：</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>               在spark1<span class=\"token punctuation\">.</span><span class=\"token number\">5</span>之前：</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>                   通过参数“spark<span class=\"token punctuation\">.</span>streaming<span class=\"token punctuation\">.</span>receiver<span class=\"token punctuation\">.</span>maxRate”来限制接收器接收数据的效率，但是当生产数据的速度 <span class=\"token operator\">></span> 设定接收                    数据的速度，且集群处理数据的速度<span class=\"token operator\">></span>设定接收数据的速度，那么则产生了性能的浪费。</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>               Spark1<span class=\"token punctuation\">.</span><span class=\"token number\">5</span>以后：</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>                   通过参数“spark<span class=\"token punctuation\">.</span>streaming<span class=\"token punctuation\">.</span>backpressure<span class=\"token punctuation\">.</span>enabled”动态的协调数据的接收速率和资源处理能力。</pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>           c、背压机制：根据jobSchedule返回作业的执行信息来动态调整接收器接收数据的速度。</pre></td></tr></table></figure><p>![image-20200617020834367](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saWFuLXpwLm9zcy1jbi1zaGVuemhlbi5hbGl5dW5jcy5jb20vcGlj\">https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic</span> GO/20200617020835.png)</p>\n<p>![image-20200714002519802](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saWFuLXpwLm9zcy1jbi1zaGVuemhlbi5hbGl5dW5jcy5jb20vcGlj\">https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic</span> GO/20200714002526.png)</p>\n<h2 id=\"二-dstream入门\"><a class=\"anchor\" href=\"#二-dstream入门\">#</a> 二、DStream 入门</h2>\n<h3 id=\"21-连接sparkcontext\"><a class=\"anchor\" href=\"#21-连接sparkcontext\">#</a> 2.1 连接 SparkContext</h3>\n<figure class=\"highlight scala\"><figcaption data-lang=\"scala\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 连接 SparkStreaming</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">val</span> sparkConf<span class=\"token operator\">:</span> SparkConf <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> SparkConf<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>setMaster<span class=\"token punctuation\">(</span><span class=\"token string\">\"local[*]\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>setAppName<span class=\"token punctuation\">(</span><span class=\"token string\">\"sparkStreaming\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      1. 方法：StreamingContext (形参)</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      2. 形参：</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        形参 1：conf: SparkConf：spark 配置对象</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        形参 2：batchDuration: Duration：采集时间</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">val</span> ssc <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> StreamingContext<span class=\"token punctuation\">(</span>sparkConf<span class=\"token punctuation\">,</span>Seconds<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"22-案例\"><a class=\"anchor\" href=\"#22-案例\">#</a> 2.2 案例</h3>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 1. Spark 从 socket 中获取数据：一行一行的获取</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">-- 2. Driver 程序执行时，streaming 处理过程不能结束</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">-- 3. 采集器在正常情况下启动后就不应该停止，除非特殊情况</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">-- 4. 采集器位于一个 executor 中，是一个线程，执行时需要一个核，如果设定的总核数为 1 时，那么在运行时因为没有核数，所以不会有打印结果，所以 sparkStreaming 使用的核数至少为 2 个</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">-- 5. print () 方法，默认是打印 10 行结果</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">-- 6. netcat 的指令：</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      在Windows下：nc <span class=\"token operator\">-</span>lp <span class=\"token number\">9999</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      在linux下： nc <span class=\"token operator\">-</span>lk <span class=\"token number\">9999</span></pre></td></tr></table></figure><ul>\n<li>导入依赖</li>\n</ul>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.apache.spark<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spark-streaming_2.12<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>2.4.5<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><ul>\n<li>代码实现</li>\n</ul>\n<figure class=\"highlight scala\"><figcaption data-lang=\"scala\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">val</span> sparkConf<span class=\"token operator\">:</span> SparkConf <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> SparkConf<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>setMaster<span class=\"token punctuation\">(</span><span class=\"token string\">\"local[*]\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>setAppName<span class=\"token punctuation\">(</span><span class=\"token string\">\"sparkStreaming\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">val</span> ssc <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> StreamingContext<span class=\"token punctuation\">(</span>sparkConf<span class=\"token punctuation\">,</span>Seconds<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// 需求：使用 netcat 工具向 9999 端口不断的发送数据，通过 SparkStreaming 读取端口数据并统计不同单词出现的次数</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 1. 获取 netcat 工具 9999 端口的连接，并开始接收数据</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 从 socket 中获取数据：一行一行的获取</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token keyword\">val</span> socketDS<span class=\"token operator\">:</span> ReceiverInputDStream<span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> ssc<span class=\"token punctuation\">.</span>socketTextStream<span class=\"token punctuation\">(</span><span class=\"token string\">\"localhost\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">9999</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">// 2. 数据处理</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">val</span> wordDS<span class=\"token operator\">:</span> DStream<span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> socketDS<span class=\"token punctuation\">.</span>flatMap<span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">val</span> wordToSumDS<span class=\"token operator\">:</span> DStream<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> wordDS<span class=\"token punctuation\">.</span>map<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>reduceByKey<span class=\"token punctuation\">(</span>_ <span class=\"token operator\">+</span> _ <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">// 3. 打印数据</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    wordToSumDS<span class=\"token punctuation\">.</span>print<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token comment\">// 4. Driver 程序执行时，streaming 处理过程不能结束</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token comment\">// 采集器在正常情况下启动后就不应该停止，除非特殊情况</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token comment\">// 启动采集器</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    ssc<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token comment\">// 等待采集器的结束</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    ssc<span class=\"token punctuation\">.</span>awaitTermination<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ul>\n<li>wordcount 解析</li>\n</ul>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a、采集周期时间之间，每一个采集周期生成一个RDD，按照时间的顺序依次进行</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>b、在每一个采集周期内，会执行wordcount计算，最终得出:统计出每一个采集周期时间的wordcount</pre></td></tr></table></figure><h2 id=\"三-dstream的创建\"><a class=\"anchor\" href=\"#三-dstream的创建\">#</a> 三、Dstream 的创建</h2>\n<h3 id=\"31-rdd队列\"><a class=\"anchor\" href=\"#31-rdd队列\">#</a> 3.1 RDD 队列</h3>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 1. 队列：</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>       a、使用场景：测试</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>       b、实现方式: 通过ssc<span class=\"token punctuation\">.</span>queueStream<span class=\"token punctuation\">(</span>queueOfRDDs<span class=\"token punctuation\">)</span>创建DStream，每一个推送这个队列的RDD，都会作为一个DStream处理</pre></td></tr></table></figure><figure class=\"highlight scala\"><figcaption data-lang=\"scala\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">val</span>  sparkconf<span class=\"token operator\">:</span> SparkConf <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> SparkConf<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>setMaster<span class=\"token punctuation\">(</span><span class=\"token string\">\"local[*]\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>setAppName<span class=\"token punctuation\">(</span><span class=\"token string\">\"stream\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">val</span> ssc <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> StreamingContext<span class=\"token punctuation\">(</span>sparkconf<span class=\"token punctuation\">,</span>Seconds<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// 创建一个队列对象，队列中存放的是 RDD</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">val</span> queue <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> mutable<span class=\"token punctuation\">.</span>Queue<span class=\"token punctuation\">[</span>RDD<span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 通过队列创建 DStream</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">val</span> queueDS<span class=\"token operator\">:</span> InputDStream<span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> ssc<span class=\"token punctuation\">.</span>queueStream<span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    queueDS<span class=\"token punctuation\">.</span>print<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">// 启动采集器</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    ssc<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>       <span class=\"token comment\">// 这个操作之所以放在这个位置，是为了模拟流式的感觉，数据源源不断的生产</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>       <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i <span class=\"token keyword\">&lt;-</span> <span class=\"token number\">1</span> to <span class=\"token number\">5</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>          <span class=\"token comment\">// 循环创建 rdd</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>          <span class=\"token keyword\">val</span> rdd<span class=\"token operator\">:</span> RDD<span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> ssc<span class=\"token punctuation\">.</span>sparkContext<span class=\"token punctuation\">.</span>makeRDD<span class=\"token punctuation\">(</span>List<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">.</span>toString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>          <span class=\"token comment\">// 将 RDD 存放到队列中</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>          queue<span class=\"token punctuation\">.</span>enqueue<span class=\"token punctuation\">(</span>rdd<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>          <span class=\"token comment\">// 当前线程休眠 1 秒</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>          Thread<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">6000</span><span class=\"token punctuation\">)</span>         </pre></td></tr><tr><td data-num=\"21\"></td><td><pre>       <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token comment\">// 等待采集器的结束</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    ssc<span class=\"token punctuation\">.</span>awaitTermination<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"32-textfilestream\"><a class=\"anchor\" href=\"#32-textfilestream\">#</a> 3.2 textFileStream</h3>\n<figure class=\"highlight scala\"><figcaption data-lang=\"scala\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">val</span> sparkConf<span class=\"token operator\">:</span> SparkConf <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> SparkConf<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>setMaster<span class=\"token punctuation\">(</span><span class=\"token string\">\"local[*]\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>setAppName<span class=\"token punctuation\">(</span><span class=\"token string\">\"textFileStream\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">val</span> ssc <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> StreamingContext<span class=\"token punctuation\">(</span>sparkConf<span class=\"token punctuation\">,</span>Seconds<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// 从文件中读取数据</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">val</span> textDS<span class=\"token operator\">:</span> DStream<span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> ssc<span class=\"token punctuation\">.</span>textFileStream<span class=\"token punctuation\">(</span><span class=\"token string\">\"in\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    textDS<span class=\"token punctuation\">.</span>print<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 启动采集器</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    ssc<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">// 等待采集器的结束</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    ssc<span class=\"token punctuation\">.</span>awaitTermination<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"33-diy采集器\"><a class=\"anchor\" href=\"#33-diy采集器\">#</a> 3.3 DIY 采集器</h3>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">--1. 自定义采集器</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">--2. 什么情况下需要自定采集器呢？</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>         比如从mysql、hbase中读取数据。</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>         采集器的作用是从指定的地方，按照采集周期对数据进行采集。</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>         目前有：采集kafka、采集netcat工具的指定端口的数据、采集文件目录中的数据等</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">--3. 自定义采集器的步骤，模仿 socketTextStream</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>         a、自定采集器类，继承extends，并指定数据泛型，同时对父类的属性赋值，指定数据存储的级别</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>         b、重写onStart和onStop方法</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            onStart:采集器的如何启动</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            onStop:采集的如何停止</pre></td></tr></table></figure><figure class=\"highlight scala\"><figcaption data-lang=\"scala\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">val</span> sparkConf<span class=\"token operator\">:</span> SparkConf <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> SparkConf<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>setMaster<span class=\"token punctuation\">(</span><span class=\"token string\">\"local[*]\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>setAppName<span class=\"token punctuation\">(</span><span class=\"token string\">\"DIY\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">val</span> ssc <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> StreamingContext<span class=\"token punctuation\">(</span>sparkConf<span class=\"token punctuation\">,</span> Seconds<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// 获取采集的流</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">val</span> ds<span class=\"token operator\">:</span> ReceiverInputDStream<span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> ssc<span class=\"token punctuation\">.</span>receiverStream<span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> MyReciver<span class=\"token punctuation\">(</span><span class=\"token string\">\"localhost\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">9999</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    ds<span class=\"token punctuation\">.</span>print<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    ssc<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    ssc<span class=\"token punctuation\">.</span>awaitTermination<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token comment\">// 继承 extends Reciver，并指定数据泛型，同时对父类的属性赋值，指定数据存储的级别</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token keyword\">class</span> MyReciver<span class=\"token punctuation\">(</span>host<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> port<span class=\"token operator\">:</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">extends</span> Receiver<span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>StorageLevel<span class=\"token punctuation\">.</span>MEMORY_ONLY<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">var</span> socket<span class=\"token operator\">:</span> Socket <span class=\"token operator\">=</span> _</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">def</span> receive <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>     <span class=\"token comment\">// 获取输入流</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      <span class=\"token keyword\">val</span> reader <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> BufferedReader<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">new</span> InputStreamReader<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>          socket<span class=\"token punctuation\">.</span>getInputStream<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>          <span class=\"token string\">\"UTF-8\"</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>      <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>      <span class=\"token comment\">// 设定一个间接变量</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>      <span class=\"token keyword\">var</span> s<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>      <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token comment\">// 按行读取数据</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        s <span class=\"token operator\">=</span> reader<span class=\"token punctuation\">.</span>readLine<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>      <span class=\"token comment\">// 将数据进行封装</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>          store<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token comment\">// 1. 启动采集器</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token keyword\">override</span> <span class=\"token keyword\">def</span> onStart<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Unit</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>      socket <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> Socket<span class=\"token punctuation\">(</span>host<span class=\"token punctuation\">,</span> port<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>      <span class=\"token keyword\">new</span> Thread<span class=\"token punctuation\">(</span><span class=\"token string\">\"Socket Receiver\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        setDaemon<span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token keyword\">override</span> <span class=\"token keyword\">def</span> run<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>          receive</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token comment\">// 2. 停止采集器</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token keyword\">override</span> <span class=\"token keyword\">def</span> onStop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Unit</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>      socket<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>      socket <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre></pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"34-kafka数据源重点\"><a class=\"anchor\" href=\"#34-kafka数据源重点\">#</a> 3.4 kafka 数据源【重点】</h3>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- DirectAPI：是由计算的 Executor 来主动消费 Kafka 的数据，速度由自身控制。</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">-- 配置信息基本上是固定写法</span></pre></td></tr></table></figure><ul>\n<li>实现方式</li>\n</ul>\n<figure class=\"highlight scala\"><figcaption data-lang=\"scala\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// TODO Spark 环境</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// SparkStreaming 使用核数最少是 2 个</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">val</span> sparkConf <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> SparkConf<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>setMaster<span class=\"token punctuation\">(</span><span class=\"token string\">\"local[*]\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>setAppName<span class=\"token punctuation\">(</span><span class=\"token string\">\"streaming\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">val</span> ssc <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> StreamingContext<span class=\"token punctuation\">(</span>sparkConf<span class=\"token punctuation\">,</span> Seconds<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// TODO 使用 SparkStreaming 读取 Kafka 的数据</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// Kafka 的配置信息</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">val</span> kafkaPara<span class=\"token operator\">:</span> Map<span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> Object<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Map<span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> Object<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      ConsumerConfig<span class=\"token punctuation\">.</span>BOOTSTRAP_SERVERS_CONFIG <span class=\"token operator\">-></span> <span class=\"token string\">\"hadoop105:9092,hadoop106:9092,hadoop107:9092\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      ConsumerConfig<span class=\"token punctuation\">.</span>GROUP_ID_CONFIG <span class=\"token operator\">-></span> <span class=\"token string\">\"atguigu\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      <span class=\"token string\">\"key.deserializer\"</span> <span class=\"token operator\">-></span> <span class=\"token string\">\"org.apache.kafka.common.serialization.StringDeserializer\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      <span class=\"token string\">\"value.deserializer\"</span> <span class=\"token operator\">-></span> <span class=\"token string\">\"org.apache.kafka.common.serialization.StringDeserializer\"</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">val</span> kafkaDStream<span class=\"token operator\">:</span> InputDStream<span class=\"token punctuation\">[</span>ConsumerRecord<span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      KafkaUtils<span class=\"token punctuation\">.</span>createDirectStream<span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        ssc<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        LocationStrategies<span class=\"token punctuation\">.</span>PreferConsistent<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        ConsumerStrategies<span class=\"token punctuation\">.</span>Subscribe<span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>Set<span class=\"token punctuation\">(</span><span class=\"token string\">\"atguigu\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> kafkaPara<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>      <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token comment\">// 获取数据，key 是 null，value 是真实的数据</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">val</span> valueDStream<span class=\"token operator\">:</span> DStream<span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> kafkaDStream<span class=\"token punctuation\">.</span>map<span class=\"token punctuation\">(</span>record <span class=\"token keyword\">=></span> record<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>   </pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    valueDStream<span class=\"token punctuation\">.</span>flatMap<span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>      <span class=\"token punctuation\">.</span>map<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>      <span class=\"token punctuation\">.</span>reduceByKey<span class=\"token punctuation\">(</span>_ <span class=\"token operator\">+</span> _<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>      <span class=\"token punctuation\">.</span>print<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    ssc<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token comment\">// 等待采集器的结束</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    ssc<span class=\"token punctuation\">.</span>awaitTermination<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"四-dstream的转换\"><a class=\"anchor\" href=\"#四-dstream的转换\">#</a> 四、DStream 的转换</h2>\n<h3 id=\"41-介绍\"><a class=\"anchor\" href=\"#41-介绍\">#</a> 4.1 介绍</h3>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">--1. Dstream：DStream 的操作和 RDD 类似，Transformations（转换）和 Output Operations（输出）</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>         a、Transformations（转换）:类似RDD的转换算子，还有一些比较特殊的原语：</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>                                  updateStateByKey<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>、transform<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>以及各种Window相关的原语</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>         b、Output Operations（输出）：类似RDD的行动算子</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">--2. 转换分为：</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>          a、无状态转换：计算结果完成以后，不会保存数据</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>          b、有状态转换：把中间的数据保存起来</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   <span class=\"token comment\">-- 3. 代码执行的位置：</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>          a、rdd算子外的代码在driver端执行</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>          b、rdd算子内的代码在executor端执行</pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   \"每一个采集周期会生产一个rdd</pre></td></tr></table></figure><h3 id=\"42-无状态转换\"><a class=\"anchor\" href=\"#42-无状态转换\">#</a> 4.2 无状态转换</h3>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">--1. 什么是无状态转换：</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        就是将简单的RDD操作转化操作应用到每个批次上，也就是转化DStream每一个RDD。</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token comment\">--2. 部分无状态转换的操作有</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>       map、flatmap、filter、repartition、reducebykey</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token comment\">--3. 注意：</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      a、针对键值对的DStream操作，如reduceBykey需要添加<span class=\"token keyword\">import</span> StreamingContext<span class=\"token punctuation\">.</span>_才能在Scala中使用。</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      b、reduceBykey会规约每一个时间区间中的数据，但是不会规约不同时间区间的数据</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   <span class=\"token comment\">--4. 部分无状态转换算子如下：</span></pre></td></tr></table></figure><p>![image-20200622012037225](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saWFuLXpwLm9zcy1jbi1zaGVuemhlbi5hbGl5dW5jcy5jb20vcGlj\">https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic</span> GO/20200622012037.png)</p>\n<h4 id=\"421-transform\"><a class=\"anchor\" href=\"#421-transform\">#</a> 4.2.1 transform</h4>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">--1. 方法：transform [U: ClassTag](transformFunc: RDD [T] => RDD [U]): DStream [U]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">--2. 泛型：可以指定一个泛型，这个泛型则规定了转换后的 RDD 和 DStream 的类型</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">--3. 形参：是一个函数：transformFunc</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>             函数的形参：每个采集周期生成的RDD；</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>             函数的返回值：RDD<span class=\"token punctuation\">[</span>U<span class=\"token punctuation\">]</span>，返回一个RDD，RDD的数据类型和指定的泛型一致。</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">--4. 操作的作用：</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        每个采集周期生成的RDD都会调用一次这个操作。主要是进行RDD的转换，在转换的过程，可以对数据进行处理。</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">--5. 什么时候使用？</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        与采集周期相关的时候使用，这里主要的因为代码执行的次数有关</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>              <span class=\"token comment\">//code1</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            transform<span class=\"token punctuation\">(</span>rdd <span class=\"token operator\">=</span><span class=\"token operator\">></span> &#123;</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>             <span class=\"token comment\">// code2</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>           rdd<span class=\"token punctuation\">.</span>flatMap&#123;</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>             <span class=\"token comment\">// code3</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>           &#125;</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>          <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>       <span class=\"token string\">\"说明\"</span>：</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        code1：在driver中执行，只会执行<span class=\"token number\">1</span>次</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        code2：每一个采集周期会生产一个RDD，每生成一个RDD会执行一次</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        code3：每一个RDD中的数据，会执行一次</pre></td></tr></table></figure><figure class=\"highlight scala\"><figcaption data-lang=\"scala\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">val</span> transformDS<span class=\"token operator\">:</span> DStream<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> ds<span class=\"token punctuation\">.</span>transform<span class=\"token punctuation\">(</span>rdd <span class=\"token keyword\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>      <span class=\"token keyword\">val</span> value<span class=\"token operator\">:</span> RDD<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> rdd<span class=\"token punctuation\">.</span>flatMap<span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>map<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>reduceByKey<span class=\"token punctuation\">(</span>_ <span class=\"token operator\">+</span> _<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      value</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>![image-20200714011137027](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saWFuLXpwLm9zcy1jbi1zaGVuemhlbi5hbGl5dW5jcy5jb20vcGlj\">https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic</span> GO/20200714011137.png)</p>\n<p>![image-20200714011247518](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saWFuLXpwLm9zcy1jbi1zaGVuemhlbi5hbGl5dW5jcy5jb20vcGlj\">https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic</span> GO/20200714011247.png)</p>\n<h4 id=\"422-join\"><a class=\"anchor\" href=\"#422-join\">#</a> 4.2.2 join</h4>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 无状态转换操作之 join</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token number\">1.</span> 操作：<span class=\"token keyword\">join</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token number\">2.</span> 说明：必须是kv形式的RDD</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token number\">3.</span> 作用：</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>       a、两个流之间的<span class=\"token keyword\">join</span>需要两个流的批次大小一致，这样才能做到同时触发计算。</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>       b、计算过程就是对当前批次的两个流中各自的RDD进行<span class=\"token keyword\">join</span>，与两个RDD的<span class=\"token keyword\">join</span>效果相同。</pre></td></tr></table></figure><figure class=\"highlight scala\"><figcaption data-lang=\"scala\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">val</span> sparkConf<span class=\"token operator\">:</span> SparkConf <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> SparkConf<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>setMaster<span class=\"token punctuation\">(</span><span class=\"token string\">\"local[*]\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>setAppName<span class=\"token punctuation\">(</span><span class=\"token string\">\"join\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">val</span> ssc <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> StreamingContext<span class=\"token punctuation\">(</span>sparkConf<span class=\"token punctuation\">,</span>Seconds<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">val</span> ds1<span class=\"token operator\">:</span> ReceiverInputDStream<span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> ssc<span class=\"token punctuation\">.</span>socketTextStream<span class=\"token punctuation\">(</span><span class=\"token string\">\"localhost\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">9999</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">val</span> ds2<span class=\"token operator\">:</span> ReceiverInputDStream<span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> ssc<span class=\"token punctuation\">.</span>socketTextStream<span class=\"token punctuation\">(</span><span class=\"token string\">\"localhost\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">8888</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">val</span> ds11<span class=\"token operator\">:</span> DStream<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> ds1<span class=\"token punctuation\">.</span>map<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">val</span> ds22<span class=\"token operator\">:</span> DStream<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> ds2<span class=\"token punctuation\">.</span>map<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    ds11<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>ds22<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>print<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    ssc<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    ssc<span class=\"token punctuation\">.</span>awaitTermination<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"43-有状态转换\"><a class=\"anchor\" href=\"#43-有状态转换\">#</a> 4.3 有状态转换</h3>\n<pre><code>有状态的转换：将spark每个采集周期处理结果保存起来，然后再一次数据的处理中可以继续使用\n</code></pre>\n<h4 id=\"431-updatestatebykey\"><a class=\"anchor\" href=\"#431-updatestatebykey\">#</a> 4.3.1 updateStateByKey</h4>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">--1. updateStateByKey (形参)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">--2. 泛型：[S: ClassTag]：指定缓冲区中数据的泛型和操作返回值的 v 返回值类型</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">--3. 形参：是一个函数，</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            函数有两个形参</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                形参<span class=\"token number\">1</span>：seq：Seq<span class=\"token punctuation\">[</span>V<span class=\"token punctuation\">]</span>：相同<span class=\"token keyword\">key</span>的<span class=\"token keyword\">value</span>的集合</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                形参<span class=\"token number\">2</span>：buffer：<span class=\"token keyword\">Option</span><span class=\"token punctuation\">[</span>S<span class=\"token punctuation\">]</span>：缓冲区，相同<span class=\"token keyword\">key</span>的缓冲区数据，有可能为空</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            函数的返回值：<span class=\"token keyword\">Option</span><span class=\"token punctuation\">[</span>S<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">--4. 操作的返回值：DStream [(K, S)]：</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>       是一个新的DStream，其内部的RDD序列是由每个时间区间对应的<span class=\"token punctuation\">(</span>键，状态<span class=\"token punctuation\">)</span>对组成的</pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">--5. 作用：</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>       计算的最后结果需要使用到前面的采集周期的计算结果，如计算wordcount</pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\">--6. 说明：</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>       a、用于键值对形式的DStream</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>       b、使用updateStateByKey需要对检查点目录进行配置，会使用检查点来保存状态</pre></td></tr></table></figure><p>![image-20200714012326922](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saWFuLXpwLm9zcy1jbi1zaGVuemhlbi5hbGl5dW5jcy5jb20vcGlj\">https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic</span> GO/20200714012326.png)</p>\n<ul>\n<li>代码实现</li>\n</ul>\n<figure class=\"highlight scala\"><figcaption data-lang=\"scala\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">val</span> sparkConf<span class=\"token operator\">:</span> SparkConf <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> SparkConf<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>setMaster<span class=\"token punctuation\">(</span><span class=\"token string\">\"local[*]\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>setAppName<span class=\"token punctuation\">(</span><span class=\"token string\">\"state\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">val</span> ssc <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> StreamingContext<span class=\"token punctuation\">(</span>sparkConf<span class=\"token punctuation\">,</span>Seconds<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 设置检查点的目录</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    ssc<span class=\"token punctuation\">.</span>sparkContext<span class=\"token punctuation\">.</span>setCheckpointDir<span class=\"token punctuation\">(</span><span class=\"token string\">\"./ck\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">val</span> ds<span class=\"token operator\">:</span> ReceiverInputDStream<span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> ssc<span class=\"token punctuation\">.</span>socketTextStream<span class=\"token punctuation\">(</span><span class=\"token string\">\"localhost\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">9999</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">val</span> stateDS<span class=\"token operator\">:</span> DStream<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> ds<span class=\"token punctuation\">.</span>flatMap<span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>map<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>updateStateByKey <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token keyword\">case</span> <span class=\"token punctuation\">(</span>values<span class=\"token operator\">:</span> Seq<span class=\"token punctuation\">[</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> buffer<span class=\"token operator\">:</span> Option<span class=\"token punctuation\">[</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">// 对相同 key 的 value 进行求和</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">val</span> sum<span class=\"token operator\">:</span> <span class=\"token builtin\">Int</span> <span class=\"token operator\">=</span> values<span class=\"token punctuation\">.</span>sum</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token comment\">// 将相同 key 的 value 计算结果保存到 buffer 中</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        Option<span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">.</span>getOrElse<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> sum<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    stateDS<span class=\"token punctuation\">.</span>print<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    ssc<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    ssc<span class=\"token punctuation\">.</span>awaitTermination<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h4 id=\"432-reducebykeyandwindow\"><a class=\"anchor\" href=\"#432-reducebykeyandwindow\">#</a> 4.3.2 reduceByKeyandwindow</h4>\n<p>![image-20200714012641927](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saWFuLXpwLm9zcy1jbi1zaGVuemhlbi5hbGl5dW5jcy5jb20vcGlj\">https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic</span> GO/20200714012641.png)</p>\n<p>![image-20200714013055313](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saWFuLXpwLm9zcy1jbi1zaGVuemhlbi5hbGl5dW5jcy5jb20vcGlj\">https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic</span> GO/20200714013055.png)</p>\n",
            "tags": []
        },
        {
            "id": "https://github.com/Mayizono/miyazono.github.io/big-data/spark/6.SparkSQL/",
            "url": "https://github.com/Mayizono/miyazono.github.io/big-data/spark/6.SparkSQL/",
            "title": "",
            "date_published": "2021-08-31T10:42:35.369Z",
            "content_html": "<h1 id=\"sparksql\"><a class=\"anchor\" href=\"#sparksql\">#</a> SparkSQL</h1>\n<hr />\n<h2 id=\"一-sparksql概述\"><a class=\"anchor\" href=\"#一-sparksql概述\">#</a> 一、 SparkSQL 概述</h2>\n<h3 id=\"11-sparksql是什么\"><a class=\"anchor\" href=\"#11-sparksql是什么\">#</a> 1.1 SparkSQL 是什么？</h3>\n<p>![image-20200612190658269](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saWFuLXpwLm9zcy1jbi1zaGVuemhlbi5hbGl5dW5jcy5jb20vcGlj\">https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic</span> GO/20200612190658.png)</p>\n<p>![image-20200612190701687](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saWFuLXpwLm9zcy1jbi1zaGVuemhlbi5hbGl5dW5jcy5jb20vcGlj\">https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic</span> GO/20200612190701.png)</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Spark <span class=\"token keyword\">SQL</span>是Spark用于<span class=\"token string\">\"结构化数据\"</span><span class=\"token punctuation\">(</span>structured <span class=\"token keyword\">data</span><span class=\"token punctuation\">)</span>处理的Spark模块</pre></td></tr></table></figure><h3 id=\"12-hive-和-sparksql解析\"><a class=\"anchor\" href=\"#12-hive-和-sparksql解析\">#</a> 1.2 Hive 和 SparkSQL 解析</h3>\n<ul>\n<li>Hive 和 SparkSQL 之间的关系</li>\n</ul>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1.</span> Hive是<span class=\"token keyword\">SQL</span><span class=\"token operator\">-</span><span class=\"token keyword\">on</span><span class=\"token operator\">-</span>Hadoop的工具，但由于底层还是基于MR，所以效率低。</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">2.</span> 产生了大量提升<span class=\"token keyword\">SQL</span><span class=\"token operator\">-</span><span class=\"token keyword\">on</span><span class=\"token operator\">-</span>Hadoop的工具，表现较为突出的是：</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Drill</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>Impala</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>Shark</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token number\">3.</span> Shark是Spark生态环境组件之一，基于Hive开发，性能较hive提高了<span class=\"token number\">10</span><span class=\"token operator\">-</span><span class=\"token number\">100</span>倍。</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token number\">4.</span> 由于Shark性能提升时，有很多Hive的依赖<span class=\"token punctuation\">(</span>如hive的解析器，查询优化器等<span class=\"token punctuation\">)</span>，制约了Shark的发展。</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token number\">5.</span> <span class=\"token number\">2014.6</span><span class=\"token number\">.1</span>，Shark项目终止，开始了SparkSQL项目。</pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token number\">6.</span> 自此，Hive的底层引擎可以是tez、mr、Spark</pre></td></tr></table></figure><ul>\n<li>SparkSQL</li>\n</ul>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1.</span> 简化RDD，提高开发效率</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">2.</span> 提供了<span class=\"token number\">2</span>个编程抽象，类型spark core中的RDD：</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  a、DataFrame <span class=\"token comment\">--DF</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  b、DataSet   <span class=\"token comment\">--DS</span></pre></td></tr></table></figure><h3 id=\"13-dataframe是什么\"><a class=\"anchor\" href=\"#13-dataframe是什么\">#</a> 1.3  DataFrame 是什么</h3>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">--  DataFrame 是什么</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>DataFrame 是一种以RDD为基础的分布式数据集，类似传统数据库中的二维表格。</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">-- DataFrame 与 RDD 的区别</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token number\">1.</span> DF带有结构<span class=\"token punctuation\">(</span><span class=\"token keyword\">Schema</span><span class=\"token punctuation\">)</span>信息<span class=\"token punctuation\">,</span>即包含了二维表数据集每一列的列名和类型；</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token number\">2.</span> Hive类似，DataFrame也支持嵌套数据类型（struct、array和map）</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   <span class=\"token number\">3.</span> 在性能上，DF的执行性能优于RDD，因为它底层会自动优化执行过程，它是如何做到的呢？利用基于关系代数的等价变换，将高成本的操作替换为低成本操作的过程，如简化shuffle阶段，先过滤再进行IO等等。</pre></td></tr></table></figure><p>![image-20200612191859183](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saWFuLXpwLm9zcy1jbi1zaGVuemhlbi5hbGl5dW5jcy5jb20vcGlj\">https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic</span> GO/20200612191859.png)</p>\n<h3 id=\"14-dataset是什么\"><a class=\"anchor\" href=\"#14-dataset是什么\">#</a> 1.4  DataSet 是什么</h3>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">--1. DataSet 是什么？</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    是分布式数据集合，是DataFrame的扩展，是一个强类型集合。</pre></td></tr></table></figure><h3 id=\"15-三者之间的关系\"><a class=\"anchor\" href=\"#15-三者之间的关系\">#</a> 1.5  三者之间的关系</h3>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">--1. 三者出现的时间顺序</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   Spark1<span class=\"token punctuation\">.</span><span class=\"token number\">0</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> RDD </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   Spark1<span class=\"token punctuation\">.</span><span class=\"token number\">3</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> DataFrame</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   Spark1<span class=\"token punctuation\">.</span><span class=\"token number\">6</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> Dataset</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">--2. 三者之间的关系</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   a、DataFrame是在RDD上进行扩展，将数据增加了结构信息</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   b、DataSet是在DataFrame的基础上进行扩展，增加数据的类型。</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   c、DataFrame是DataSet的一个特例，即为数据类型<span class=\"token keyword\">ROW</span>的DataSet</pre></td></tr></table></figure><h2 id=\"二-sparksql核心编程\"><a class=\"anchor\" href=\"#二-sparksql核心编程\">#</a> 二、 SparkSQL 核心编程</h2>\n<h3 id=\"21-sparksql的环境对象\"><a class=\"anchor\" href=\"#21-sparksql的环境对象\">#</a> 2.1 SparkSQL 的环境对象</h3>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">--1. 上下文的环境对象</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">1.</span> SparkCore  <span class=\"token comment\">--> SparkContext, 使用 sc 来代替</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">2.</span> SparkSQL   <span class=\"token comment\">--> SparkSession，使用 spark 代替，实际上是内部封装了 SparkContext, 底层实现还是 SparkContext</span></pre></td></tr></table></figure><p>![image-20200612193832283](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saWFuLXpwLm9zcy1jbi1zaGVuemhlbi5hbGl5dW5jcy5jb20vcGlj\">https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic</span> GO/20200612193832.png)</p>\n<h3 id=\"22-dataframe\"><a class=\"anchor\" href=\"#22-dataframe\">#</a> 2.2 DataFrame</h3>\n<h4 id=\"221-创建dataframe\"><a class=\"anchor\" href=\"#221-创建dataframe\">#</a> 2.2.1 创建 DataFrame</h4>\n<blockquote>\n<p>一共有 三种方式：</p>\n<ol>\n<li>通过 Spark 的数据源进行创建</li>\n<li>从一个存在的 RDD 进行转换</li>\n<li>还可以从 HiveTable 进行查询返回</li>\n</ol>\n</blockquote>\n<p>暂时先讲第一种，就是从数据源中创建，另外两种后续章节讨论。</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 1. 启动 Spark-Local 模式中的 Spark</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token punctuation\">[</span>atguigu<span class=\"token variable\">@hadoop105</span> spark<span class=\"token operator\">-</span><span class=\"token keyword\">local</span><span class=\"token punctuation\">]</span>$ bin<span class=\"token operator\">/</span>spark<span class=\"token operator\">-</span>shell </pre></td></tr><tr><td data-num=\"3\"></td><td><pre> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token comment\">-- 2. 创建 DataFrame</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  scala<span class=\"token operator\">></span> val df <span class=\"token operator\">=</span> spark<span class=\"token punctuation\">.</span><span class=\"token keyword\">read</span><span class=\"token punctuation\">.</span>json<span class=\"token punctuation\">(</span><span class=\"token string\">\"examples/src/main/resources/people.json\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  打印结果：df: org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>spark<span class=\"token punctuation\">.</span><span class=\"token keyword\">sql</span><span class=\"token punctuation\">.</span>DataFrame <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>age: <span class=\"token keyword\">bigint</span><span class=\"token punctuation\">,</span> name: string<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre> </pre></td></tr><tr><td data-num=\"9\"></td><td><pre> <span class=\"token comment\">-- 3. 说明：</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token number\">1.</span> 为啥数据类型是<span class=\"token keyword\">bigint</span>，是因为从文件中读取数据，不知道数据的长度，所用使用<span class=\"token keyword\">bigint</span>来表示，如果是从内存创建df，那么Spark可以知道数据的具体类型。</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token number\">2.</span> spark<span class=\"token punctuation\">.</span><span class=\"token keyword\">read</span><span class=\"token punctuation\">.</span>json<span class=\"token punctuation\">(</span><span class=\"token string\">\"path:String\"</span><span class=\"token punctuation\">)</span>，从指定路径下读取json格式的文件</pre></td></tr><tr><td data-num=\"12\"></td><td><pre> </pre></td></tr><tr><td data-num=\"13\"></td><td><pre> <span class=\"token comment\">-- 4. 展示 df 的内容： show</span></pre></td></tr></table></figure><p>![image-20200612194906529](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saWFuLXpwLm9zcy1jbi1zaGVuemhlbi5hbGl5dW5jcy5jb20vcGlj\">https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic</span> GO/20200612194906.png)</p>\n<h4 id=\"222-sql语法\"><a class=\"anchor\" href=\"#222-sql语法\">#</a> 2.2.2 SQL 语法</h4>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- SQL 语法说明：</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">SQL</span>语法风格是指我们查询数据的时候使用<span class=\"token keyword\">SQL</span>语句来查询，这种风格的查询必须要有临时视图或者全局视图来辅助</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">-- 1. 创建临时视图和全局视图</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>          a、 创建临时视图，</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>              createTempView </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>              createOrReplaceTempView :原视图存在则覆盖，不存在则创建</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>              <span class=\"token comment\">-- 案例</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>              df<span class=\"token punctuation\">.</span>createTempView<span class=\"token punctuation\">(</span><span class=\"token string\">\"People\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>          b、 创建全局视图</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>              createGlobalTempView  </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>              createOrReplaceGlobalTempView  :原视图存在则覆盖，不存在则创建</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>              <span class=\"token comment\">-- 案例</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>              df<span class=\"token punctuation\">.</span>createGlobalTempView<span class=\"token punctuation\">(</span><span class=\"token string\">\"People\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>         c、 两种视图含义上的区别：</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>             临时视图：表示仅此次的sparkSession可以使用</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>             全局视图：表示多次连接均可使用，可以理解为多次连接Mysql</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>         </pre></td></tr><tr><td data-num=\"21\"></td><td><pre>         d、 两种视图在访问上的区别：</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>             全局视图需要加上：<span class=\"token string\">\"global_temp.\"</span>才能进行访问。</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>         </pre></td></tr><tr><td data-num=\"24\"></td><td><pre>         e、 <span class=\"token keyword\">view</span> 和 <span class=\"token keyword\">table</span>的区别：</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>             <span class=\"token keyword\">view</span>:  是临时结果，视图，由查询结果得到的对象，不能进行增删改，只能查询</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>             <span class=\"token keyword\">table</span>：是长久存在，可以进行增删改查操作。</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            </pre></td></tr><tr><td data-num=\"28\"></td><td><pre>   <span class=\"token comment\">-- 总结：</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>     创建临时或者全部表，也就是视图，临时表是仅在本次连接可用，新的连接sparkSession就不能使用，但是全局表是可以跨连接使用，类似咱们的mysql，多次访问mysql的数据库，数据库中的表单都是可以访问的，同时在创建视图的时候，需要给创建的视图进行命名，如果视图名称已存在，那么会报错可以使用createorReplace，如果表存在，那么直接覆盖，如果不存在，则直接创建。</pre></td></tr><tr><td data-num=\"30\"></td><td><pre> </pre></td></tr><tr><td data-num=\"31\"></td><td><pre> <span class=\"token comment\">-- 2. spark.newSession : 创建新的 SparkSQL 的连接</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre> <span class=\"token comment\">-- 3. spark.sql (\"sql 语句\").show</span></pre></td></tr></table></figure><p>![image-20200612200712373](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saWFuLXpwLm9zcy1jbi1zaGVuemhlbi5hbGl5dW5jcy5jb20vcGlj\">https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic</span> GO/20200612200712.png)</p>\n<h4 id=\"223-dsl\"><a class=\"anchor\" href=\"#223-dsl\">#</a> 2.2.3 DSL</h4>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 什么是 DSL</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   一个特定领域的语言，用来管理结构。</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">-- 好处：</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   不用创建临时的绘图。</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">-- 具体的应用见 API，用到的方法和展示的方式是相同的</span></pre></td></tr></table></figure><h4 id=\"224-sql语法和dsl语法的区别\"><a class=\"anchor\" href=\"#224-sql语法和dsl语法的区别\">#</a> 2.2.4 SQL 语法和 DSL 语法的区别</h4>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">--1. 两个的用途是什么：均是用来查询，SQL 是针对数据结构，DSL 是针对数据类型</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token comment\">--2. 区别是什么</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      a、<span class=\"token keyword\">sql</span>需要建立临时的表，而dsl不需要</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      b、调用<span class=\"token keyword\">sql</span>的对象不同，使用<span class=\"token keyword\">sql</span>使用的是sparkSession的对象，而dsl是dataframe或者是dataSet</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      c、语法上的差异：</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>         <span class=\"token keyword\">sql</span>：spark<span class=\"token punctuation\">.</span><span class=\"token keyword\">sql</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sql</span>文<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>         DSL: ds<span class=\"token operator\">/</span>df<span class=\"token punctuation\">.</span></pre></td></tr></table></figure><h3 id=\"23-dataframedatesetrdd三者之间的转换\"><a class=\"anchor\" href=\"#23-dataframedatesetrdd三者之间的转换\">#</a> 2.3 DataFrame/DateSet/RDD 三者之间的转换</h3>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 1. RDD &lt;=> DF</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>      a、RDD <span class=\"token comment\">--> DF </span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>         <span class=\"token string\">\"rdd.toDF(\"</span>列名<span class=\"token number\">1</span><span class=\"token string\">\"，\"</span>列名<span class=\"token number\">2</span><span class=\"token string\">\"，...)\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      b、DF <span class=\"token comment\">--> RDD</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>         <span class=\"token string\">\"df.rdd\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">-- 2. RDD  &lt;=> DS</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      a、 RDD <span class=\"token operator\">=</span><span class=\"token operator\">></span> DS</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>           将rdd的数据转换为样例类的格式。</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>           <span class=\"token string\">\"rdd.toDS\"</span>  </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      b、 DS <span class=\"token operator\">=</span><span class=\"token operator\">></span> RDD</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>           <span class=\"token string\">\"ds.rdd\"</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">-- 3. DF &lt;=> DS</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>     a、DF <span class=\"token operator\">=</span><span class=\"token operator\">></span> DS </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>       <span class=\"token string\">\"df.as[样例类]\"</span>，该样例类必须存在，而且df中的数据个样例类对应</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>     b、 DS <span class=\"token operator\">=</span><span class=\"token operator\">></span> DS</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>       <span class=\"token string\">\"ds.toDF\"</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>       </pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\">-- 说明：</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        a、通过DF转换得来的RDD的数据类型是<span class=\"token keyword\">ROW</span>。</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        b、通过DS转换得来的RDD的数据类型和DS的数据类型一致</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        c、RDD:只关心数据本身</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>           DataFrame:关心数据的结构</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>           DataSet:关心数据类型</pre></td></tr></table></figure><p>![image-20200612193232509](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saWFuLXpwLm9zcy1jbi1zaGVuemhlbi5hbGl5dW5jcy5jb20vcGlj\">https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic</span> GO/20200612193232.png)</p>\n<h3 id=\"24-idea编程\"><a class=\"anchor\" href=\"#24-idea编程\">#</a> 2.4 IDEA 编程</h3>\n<h4 id=\"241-添加依赖\"><a class=\"anchor\" href=\"#241-添加依赖\">#</a> 2.4.1 添加依赖</h4>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.apache.spark<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spark-sql_2.12<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>2.4.5<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h4 id=\"242-构建sparksession对象\"><a class=\"anchor\" href=\"#242-构建sparksession对象\">#</a> 2.4.2 构建 sparkSession 对象</h4>\n<ol>\n<li>重要：连接 SparkSQL</li>\n</ol>\n<figure class=\"highlight scala\"><figcaption data-lang=\"scala\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 1. 创建环境</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">val</span> sparkConf<span class=\"token operator\">:</span> SparkConf <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> SparkConf<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>setMaster<span class=\"token punctuation\">(</span><span class=\"token string\">\"local[*]\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>setAppName<span class=\"token punctuation\">(</span><span class=\"token string\">\"sparksql\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 2. 创建 SparkSession 对象</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">val</span> spark<span class=\"token operator\">:</span> SparkSession <span class=\"token operator\">=</span> SparkSession<span class=\"token punctuation\">.</span>builder<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">(</span>sparkConf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>getOrCreate<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>添加隐式转换，每次构建完对象以后都需要增加这个 隐式转换的代码</li>\n</ol>\n<figure class=\"highlight scala\"><figcaption data-lang=\"scala\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 3. 增加隐式转换</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">import</span> <span class=\"token namespace\">spark<span class=\"token punctuation\">.</span>implicits<span class=\"token punctuation\">.</span></span>_</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\"<span class=\"token number\">1.</span> 这里的spark不是Scala中的包名，而是创建的sparkSession对象的变量名称</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> <span class=\"token number\">2.</span> spark对象不能使用<span class=\"token keyword\">var</span>声明，因为Scala只支持<span class=\"token keyword\">val</span>修饰的对象的引入\"</pre></td></tr></table></figure><ol start=\"3\">\n<li>说明</li>\n</ol>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 为啥要导入隐式转换</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>sparkSQL是在spark的基础上进行延伸，属于功能的扩展，使用隐式转换，体现了OCP开发原则。</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">-- 构建对象为什么不直接 new 呢？</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>因为sparkSession是对sparkContext的包装，创建这个对象时，需要很多步骤，将这些过程进行封装，让开发更容易，使用一个构建器来创建对象。</pre></td></tr></table></figure><h4 id=\"243-代码实现\"><a class=\"anchor\" href=\"#243-代码实现\">#</a> 2.4.3 代码实现</h4>\n<ol>\n<li>创建 df</li>\n</ol>\n<figure class=\"highlight scala\"><figcaption data-lang=\"scala\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">val</span> frame<span class=\"token operator\">:</span> DataFrame <span class=\"token operator\">=</span> spark<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">.</span>json<span class=\"token punctuation\">(</span><span class=\"token string\">\"input/people.json\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>查看 DataFrame 的 Schema 信息</li>\n</ol>\n<figure class=\"highlight scala\"><figcaption data-lang=\"scala\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>frame<span class=\"token punctuation\">.</span>printSchema<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>![image-20200612213154690](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saWFuLXpwLm9zcy1jbi1zaGVuemhlbi5hbGl5dW5jcy5jb20vcGlj\">https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic</span> GO/20200612213154.png)</p>\n<ol start=\"3\">\n<li>只查看 &quot;username&quot; 列数据</li>\n</ol>\n<figure class=\"highlight scala\"><figcaption data-lang=\"scala\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>frame<span class=\"token punctuation\">.</span>select<span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"age\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>![image-20200612213954376](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saWFuLXpwLm9zcy1jbi1zaGVuemhlbi5hbGl5dW5jcy5jb20vcGlj\">https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic</span> GO/20200612213954.png)</p>\n<ol start=\"4\">\n<li>查看 &quot;username&quot; 列数据以及 &quot;age+1&quot; 数据</li>\n</ol>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>说明:</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">1.</span> 涉及到运算的时候<span class=\"token punctuation\">,</span> 每列都必须<span class=\"token string\">\"使用$, 或者采用引号表达式：单引号+字段名\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">2.</span> <span class=\"token keyword\">as</span> 取别名</pre></td></tr></table></figure><figure class=\"highlight scala\"><figcaption data-lang=\"scala\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>frame<span class=\"token punctuation\">.</span>select<span class=\"token punctuation\">(</span><span class=\"token string\">'age,'</span>age <span class=\"token operator\">+</span> <span class=\"token number\">1</span> as <span class=\"token string\">\"newAge\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>![image-20200612214218042](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saWFuLXpwLm9zcy1jbi1zaGVuemhlbi5hbGl5dW5jcy5jb20vcGlj\">https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic</span> GO/20200612214218.png)</p>\n<ol start=\"5\">\n<li>查看 &quot;age&quot; 大于 &quot;20&quot; 的数据</li>\n</ol>\n<figure class=\"highlight scala\"><figcaption data-lang=\"scala\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>frame<span class=\"token punctuation\">.</span>filter<span class=\"token punctuation\">(</span><span class=\"token symbol\">'age</span> <span class=\"token operator\">></span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>![image-20200612214550513](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saWFuLXpwLm9zcy1jbi1zaGVuemhlbi5hbGl5dW5jcy5jb20vcGlj\">https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic</span> GO/20200612214550.png)</p>\n<h3 id=\"25-udf和udaf\"><a class=\"anchor\" href=\"#25-udf和udaf\">#</a> 2.5 UDF 和 UDAF</h3>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 什么是 UDF，什么是 UDAF?</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    a、UDF : UserDefinedFunction<span class=\"token punctuation\">,</span>用户自定义函数，可以类比为map方法，给你一个数据，然后对每条数据进行处理，如取出日期中年信息</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    b、UDAF : UserDefinedAggregateorFunction，用户自定义<span class=\"token string\">\"聚合\"</span>函数，可以类比<span class=\"token keyword\">sql</span>中的count，sum、avg、max、min等方法</pre></td></tr></table></figure><h4 id=\"251-udf\"><a class=\"anchor\" href=\"#251-udf\">#</a> 2.5.1 UDF</h4>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1.</span> 创建dataFrame</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token number\">2.</span> 自定义和注册udf</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>         方法：spark<span class=\"token punctuation\">.</span>udf<span class=\"token punctuation\">.</span>register<span class=\"token punctuation\">(</span>形参<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>         形参：有两个形参</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>              形参<span class=\"token number\">1</span>：自定义函数的名字</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>              形参<span class=\"token number\">2</span>：自定义函数的逻辑，是一个函数</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>       </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>     <span class=\"token number\">3.</span> 使用自定义函数：</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token number\">3.1</span> 使用自定义的udf函数用于<span class=\"token keyword\">sql</span>语法</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            a、创建临时或全局视图</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            b、使用spark<span class=\"token punctuation\">.</span><span class=\"token keyword\">sql</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sql</span>文<span class=\"token punctuation\">)</span>的方法调用自定的UDF方法</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token number\">3.2</span> 使用于DSL语法</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            a、获取注册udf的返回值</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            b、使用df<span class=\"token punctuation\">.</span><span class=\"token keyword\">select</span><span class=\"token punctuation\">(</span>调用函数<span class=\"token punctuation\">(</span>列名<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>，调用自定的udf函数</pre></td></tr></table></figure><ul>\n<li>代码实现</li>\n</ul>\n<figure class=\"highlight scala\"><figcaption data-lang=\"scala\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 1. 创建 dataFrame</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">val</span> frame<span class=\"token operator\">:</span> DataFrame <span class=\"token operator\">=</span> spark<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">.</span>json<span class=\"token punctuation\">(</span><span class=\"token string\">\"input/people.json\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    2. 自定义和注册 udf，并获取返回值</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>     方法：spark.udf.register (形参)</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>     形参：有两个形参</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>          形参 1：自定义函数的名字</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>          形参 2：自定义函数的逻辑，是一个函数</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      */</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>     <span class=\"token keyword\">val</span> udf<span class=\"token operator\">:</span> UserDefinedFunction <span class=\"token operator\">=</span> spark<span class=\"token punctuation\">.</span>udf<span class=\"token punctuation\">.</span>register<span class=\"token punctuation\">(</span><span class=\"token string\">\"newName\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">:</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">=></span> <span class=\"token string\">\"Name:\"</span>  <span class=\"token operator\">+</span> x <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\">// 3.1、使用 sql 语法使用自定义 udf 函数</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\">//  a、创建临时或全局视图</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    frame<span class=\"token punctuation\">.</span>createOrReplaceTempView<span class=\"token punctuation\">(</span><span class=\"token string\">\"people\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token comment\">// 使用 spark.sql (sql 文) 的方法调用自定的 UDF 方法</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    spark<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">(</span><span class=\"token string\">\"select newName(name) from people\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token comment\">// 3.2、使用于 DSL 语法使用自定义 udf 函数</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    frame<span class=\"token punctuation\">.</span>select<span class=\"token punctuation\">(</span>udf<span class=\"token punctuation\">(</span><span class=\"token symbol\">'name</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h4 id=\"252-udaf\"><a class=\"anchor\" href=\"#252-udaf\">#</a> 2.5.2 UDAF</h4>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>自定义的UDAF分为两种：弱类型自定义聚合函数、强类型自定义函数</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token comment\">--1. 关于强类型自定义函数的说明：</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    将数据转换为dataset，此时二维表中的一条数据封装为一个对象因为聚合函数是强类型，那么<span class=\"token keyword\">sql</span>中没有类型的概念，所以<span class=\"token keyword\">SQL</span>语法无法使用， 可以采用DSL语法方法进行访问将聚合函数转换为查询的列让DataSet访问</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">--2、强类型自定义函数和弱类型自定义的区别：</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>       a、<span class=\"token string\">\"使用范围区别\"</span>：</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>          弱类型自定义函数支持<span class=\"token keyword\">SQL</span>语法和DSL语法，</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>          而强类型语言仅支持DSL语法，因为<span class=\"token keyword\">SQL</span>没有类型的概念</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>       b、<span class=\"token string\">\"声明自定义方法方式的差别\"</span>：</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>          <span class=\"token string\">\"弱类型语言\"</span>：</pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>             <span class=\"token number\">1</span>）自定义函数，继承extends UserDefinedAggregatorFunction</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>             <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> 重写<span class=\"token number\">8</span>个方法：</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                方法<span class=\"token number\">1</span>：指明输入值的数据类型，不能是map类型，只能是anyval中的类型，特别注意数据的格式</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                override def inputSchema: StructType <span class=\"token operator\">=</span> ???</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                方法<span class=\"token number\">2</span>：指明缓冲区的数据类型</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                override def bufferSchema: StructType <span class=\"token operator\">=</span> ???</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                方法<span class=\"token number\">3</span>：指明输出值的数据类型</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                override def dataType: DataType <span class=\"token operator\">=</span> ???</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                方法<span class=\"token number\">4</span>：数据的稳定性，设定<span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                override def <span class=\"token keyword\">deterministic</span>: <span class=\"token keyword\">Boolean</span> <span class=\"token operator\">=</span> ???</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                方法<span class=\"token number\">5</span>：初始化缓冲区的值，对缓冲区</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                override def initialize<span class=\"token punctuation\">(</span>buffer: MutableAggregationBuffer<span class=\"token punctuation\">)</span>: Unit <span class=\"token operator\">=</span> ???</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                方法<span class=\"token number\">6</span>：更新缓冲区的数据，每来一条数据，将数据更新到缓冲区内</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                override def <span class=\"token keyword\">update</span><span class=\"token punctuation\">(</span>buffer: MutableAggregationBuffer<span class=\"token punctuation\">,</span> input: <span class=\"token keyword\">Row</span><span class=\"token punctuation\">)</span>: Unit <span class=\"token operator\">=</span> ???</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                方法<span class=\"token number\">7</span>：合并缓冲区中的数据，两两合并</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                override def <span class=\"token keyword\">merge</span><span class=\"token punctuation\">(</span>buffer1: MutableAggregationBuffer<span class=\"token punctuation\">,</span> buffer2: <span class=\"token keyword\">Row</span><span class=\"token punctuation\">)</span>: Unit <span class=\"token operator\">=</span> ???</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                方法<span class=\"token number\">8</span>： 计算最后的结果</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                override def evaluate<span class=\"token punctuation\">(</span>buffer: <span class=\"token keyword\">Row</span><span class=\"token punctuation\">)</span>: <span class=\"token keyword\">Any</span> <span class=\"token operator\">=</span> ???</pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>          <span class=\"token string\">\"强类型语言\"</span>：</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                <span class=\"token number\">1</span>）自定义函数，继承extends Aggregator</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> 指明父类中的三个泛型</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                   <span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token operator\">IN</span><span class=\"token punctuation\">,</span> BUF<span class=\"token punctuation\">,</span> <span class=\"token keyword\">OUT</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                    <span class=\"token operator\">-</span><span class=\"token operator\">IN</span>: 指输入的数据类型，和java中 ? super <span class=\"token operator\">IN</span>相同，指传入的参数类型为<span class=\"token operator\">IN</span>类型或是<span class=\"token operator\">IN</span>的父类类型</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                    BUF：指缓冲区的数据类型</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>                    <span class=\"token keyword\">OUT</span>：指输出的数据类型</pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>                    此时<span class=\"token operator\">-</span><span class=\"token operator\">IN</span>：是指原表的一条数据，因为已经是被封装成了一个对象，所以是People</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>                    BUF：<span class=\"token punctuation\">(</span>对象的年龄，次数<span class=\"token punctuation\">)</span>，<span class=\"token punctuation\">(</span><span class=\"token keyword\">Int</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">Int</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>                    <span class=\"token keyword\">OUT</span>：<span class=\"token punctuation\">(</span>平均年龄<span class=\"token punctuation\">)</span>，<span class=\"token punctuation\">(</span><span class=\"token keyword\">Int</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>                 <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> 重写<span class=\"token number\">6</span>个方法</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>                    方法<span class=\"token number\">1</span>：初始化缓冲区的值</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>                    override def zero: avgAGE</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>                    方法<span class=\"token number\">2</span>：将数据添加到缓冲区</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>                    override def reduce<span class=\"token punctuation\">(</span>b: avgAGE<span class=\"token punctuation\">,</span> a: People<span class=\"token punctuation\">)</span>: avgAGE</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>                    方法<span class=\"token number\">3</span>：合并缓冲区，两两进行合并</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>                    override def <span class=\"token keyword\">merge</span><span class=\"token punctuation\">(</span>b1: avgAGE<span class=\"token punctuation\">,</span> b2: avgAGE<span class=\"token punctuation\">)</span>: avgAGE</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>                    方法<span class=\"token number\">4</span>：计算最后的结果</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>                    override def finish<span class=\"token punctuation\">(</span>reduction: avgAGE<span class=\"token punctuation\">)</span>: Long</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>                    方法<span class=\"token number\">5</span>：固定写法，输入的编码器</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>                    override def bufferEncoder: Encoder<span class=\"token punctuation\">[</span>avgAGE<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Encoders<span class=\"token punctuation\">.</span>product</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>                    方法<span class=\"token number\">6</span>：固定的写法，输入的解码器</pre></td></tr><tr><td data-num=\"55\"></td><td><pre>                    override def outputEncoder: Encoder<span class=\"token punctuation\">[</span>Long<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Encoders<span class=\"token punctuation\">.</span>scalaLong</pre></td></tr><tr><td data-num=\"56\"></td><td><pre></pre></td></tr><tr><td data-num=\"57\"></td><td><pre></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>       c、 <span class=\"token string\">\"使用上的区别\"</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>             <span class=\"token string\">\"弱语言\"</span>：</pre></td></tr><tr><td data-num=\"60\"></td><td><pre>               使用在<span class=\"token keyword\">sql</span>语法上：</pre></td></tr><tr><td data-num=\"61\"></td><td><pre>               a、创建临时视图或者全局视图</pre></td></tr><tr><td data-num=\"62\"></td><td><pre>               b、new 自定义方法</pre></td></tr><tr><td data-num=\"63\"></td><td><pre>                  val uadf <span class=\"token operator\">=</span>  new MyUADF</pre></td></tr><tr><td data-num=\"64\"></td><td><pre>               c、注册自定义方法</pre></td></tr><tr><td data-num=\"65\"></td><td><pre>                   spark<span class=\"token punctuation\">.</span>udf<span class=\"token punctuation\">.</span>register<span class=\"token punctuation\">(</span>函数名，uadf<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>               d、使用自定义方法</pre></td></tr><tr><td data-num=\"67\"></td><td><pre>                   spark<span class=\"token punctuation\">.</span><span class=\"token keyword\">sql</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"select 函数名(输入列) from  全局表\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>               使用在DSL上：</pre></td></tr><tr><td data-num=\"70\"></td><td><pre>               a、new 自定义方法</pre></td></tr><tr><td data-num=\"71\"></td><td><pre>                  val uadf <span class=\"token operator\">=</span>  new MyUADF</pre></td></tr><tr><td data-num=\"72\"></td><td><pre>               b、注册自定义方法，并获取表达式的返回值</pre></td></tr><tr><td data-num=\"73\"></td><td><pre>                  val UADF: UserDefinedAggregateFunction <span class=\"token operator\">=</span> spark<span class=\"token punctuation\">.</span>udf<span class=\"token punctuation\">.</span>register<span class=\"token punctuation\">(</span>函数名，uadf<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>               c、使用自定义方法</pre></td></tr><tr><td data-num=\"75\"></td><td><pre>                  df<span class=\"token punctuation\">.</span><span class=\"token keyword\">select</span><span class=\"token punctuation\">(</span>UADF<span class=\"token punctuation\">(</span>输入列<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>             <span class=\"token string\">\"强类型\"</span>：只用在DSL的语法中</pre></td></tr><tr><td data-num=\"78\"></td><td><pre>                    <span class=\"token comment\">// 1. 创建 df</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>                    val frame: DataFrame <span class=\"token operator\">=</span> spark<span class=\"token punctuation\">.</span><span class=\"token keyword\">read</span><span class=\"token punctuation\">.</span>json<span class=\"token punctuation\">(</span><span class=\"token string\">\"input/people.json\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>                    <span class=\"token comment\">// 2. 将 df 转换成 ds</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>                    val ds: Dataset<span class=\"token punctuation\">[</span>People<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> frame<span class=\"token punctuation\">.</span><span class=\"token keyword\">as</span><span class=\"token punctuation\">[</span>People<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>                    <span class=\"token comment\">// 3. 创建自定义的 UADF 对象</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>                    val udaf <span class=\"token operator\">=</span> new MyUADF</pre></td></tr><tr><td data-num=\"84\"></td><td><pre>                    <span class=\"token comment\">// 4. 将对象转化为一个列</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>                    val <span class=\"token keyword\">column</span>: TypedColumn<span class=\"token punctuation\">[</span>People<span class=\"token punctuation\">,</span> Long<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> udaf<span class=\"token punctuation\">.</span>toColumn</pre></td></tr><tr><td data-num=\"86\"></td><td><pre>                    <span class=\"token comment\">// 5. 调用自定义函数</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>                    ds<span class=\"token punctuation\">.</span><span class=\"token keyword\">select</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">column</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre></pre></td></tr><tr><td data-num=\"89\"></td><td><pre></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>     <span class=\"token comment\">--3、如何选择强类型和弱类型自定义方法</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>        当自定义的方法中，考虑数据作为一个对象进行传输时，需要考虑使用强类型自定义函数</pre></td></tr></table></figure><ul>\n<li>弱类型自定聚合函数</li>\n</ul>\n<figure class=\"highlight scala\"><figcaption data-lang=\"scala\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">object</span> SparkSQL2_udaf <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">def</span> main<span class=\"token punctuation\">(</span>args<span class=\"token operator\">:</span> Array<span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Unit</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">val</span> sparkConf<span class=\"token operator\">:</span> SparkConf <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> SparkConf<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>setMaster<span class=\"token punctuation\">(</span><span class=\"token string\">\"local[*]\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>setAppName<span class=\"token punctuation\">(</span><span class=\"token string\">\"udaf\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">val</span> spark<span class=\"token operator\">:</span> SparkSession <span class=\"token operator\">=</span> SparkSession<span class=\"token punctuation\">.</span>builder<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">(</span>sparkConf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>getOrCreate<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">import</span>  <span class=\"token namespace\">spark<span class=\"token punctuation\">.</span>implicits<span class=\"token punctuation\">.</span></span>_</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 创建 dataframe</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">val</span> rdd<span class=\"token operator\">:</span> RDD<span class=\"token punctuation\">[</span>User<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> spark<span class=\"token punctuation\">.</span>sparkContext<span class=\"token punctuation\">.</span>makeRDD<span class=\"token punctuation\">(</span> </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        List<span class=\"token punctuation\">(</span>User<span class=\"token punctuation\">(</span><span class=\"token string\">\"scala\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> User<span class=\"token punctuation\">(</span><span class=\"token string\">\"spark\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">15</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> User<span class=\"token punctuation\">(</span><span class=\"token string\">\"context\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">val</span> frame<span class=\"token operator\">:</span> DataFrame <span class=\"token operator\">=</span> rdd<span class=\"token punctuation\">.</span>toDF<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">//a、注册自定义的 uadf</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">val</span> udaf <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> MyUDAF</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\">//b、注册自定义函数，并获取返回值。</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>     <span class=\"token keyword\">val</span> UADF<span class=\"token operator\">:</span> UserDefinedAggregateFunction <span class=\"token operator\">=</span> spark<span class=\"token punctuation\">.</span>udf<span class=\"token punctuation\">.</span>register<span class=\"token punctuation\">(</span><span class=\"token string\">\"myUADF\"</span><span class=\"token punctuation\">,</span>udaf<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token comment\">// 方式 1：使用与 mysql 语法</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    spark<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">(</span><span class=\"token string\">\"select myUADF(age) from User\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token comment\">// 方式 2： 使用与 DSL 语法</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    frame<span class=\"token punctuation\">.</span>select<span class=\"token punctuation\">(</span>UADF<span class=\"token punctuation\">(</span><span class=\"token symbol\">'age</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre> <span class=\"token comment\">// 1. 需求：求年龄的平均值</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  <span class=\"token keyword\">class</span> MyUDAF <span class=\"token keyword\">extends</span> UserDefinedAggregateFunction<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token comment\">// 方法 1：输入数据的类型，将年龄一个一个给传进来</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">override</span> <span class=\"token keyword\">def</span> inputSchema<span class=\"token operator\">:</span> StructType <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>      StructType<span class=\"token punctuation\">(</span>Array<span class=\"token punctuation\">(</span>StructField<span class=\"token punctuation\">(</span><span class=\"token string\">\"age\"</span><span class=\"token punctuation\">,</span>IntegerType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token comment\">// 方法 2：缓冲区的数据类型，数据的类型，需要记录年龄的总和，次数，可以存放到一个 map 集合中</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token comment\">// 关于数据的格式有：LongType</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token keyword\">override</span> <span class=\"token keyword\">def</span> bufferSchema<span class=\"token operator\">:</span> StructType <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>      StructType<span class=\"token punctuation\">(</span>Array<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        StructField<span class=\"token punctuation\">(</span><span class=\"token string\">\"totalAge\"</span><span class=\"token punctuation\">,</span>IntegerType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        StructField<span class=\"token punctuation\">(</span><span class=\"token string\">\"count\"</span><span class=\"token punctuation\">,</span>IntegerType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token comment\">// 方法 3：结果数据的数据类型，返回值的数据类型</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token keyword\">override</span> <span class=\"token keyword\">def</span> dataType<span class=\"token operator\">:</span> DataType <span class=\"token operator\">=</span> IntegerType</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token comment\">// 方法 4：数据是否安全</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token keyword\">override</span> <span class=\"token keyword\">def</span> deterministic<span class=\"token operator\">:</span> <span class=\"token builtin\">Boolean</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token comment\">// 方法 5：缓冲区初始化，就是给缓冲区的每个值设定一个初始值</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token keyword\">override</span> <span class=\"token keyword\">def</span> initialize<span class=\"token punctuation\">(</span>buffer<span class=\"token operator\">:</span> MutableAggregationBuffer<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Unit</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>      buffer<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>      buffer<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token comment\">// 方法 6：更新缓冲区</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token keyword\">override</span> <span class=\"token keyword\">def</span> update<span class=\"token punctuation\">(</span>buffer<span class=\"token operator\">:</span> MutableAggregationBuffer<span class=\"token punctuation\">,</span> input<span class=\"token operator\">:</span> Row<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Unit</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>      buffer<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> buffer<span class=\"token punctuation\">.</span>getInt<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span>  input<span class=\"token punctuation\">.</span>getInt<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>      buffer<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> buffer<span class=\"token punctuation\">.</span>getInt<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token comment\">// 方法 7：因为是多 executor 执行，合并所有分区的数据</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token keyword\">override</span> <span class=\"token keyword\">def</span> merge<span class=\"token punctuation\">(</span>buffer1<span class=\"token operator\">:</span> MutableAggregationBuffer<span class=\"token punctuation\">,</span> buffer2<span class=\"token operator\">:</span> Row<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Unit</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>      buffer1<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> buffer1<span class=\"token punctuation\">.</span>getInt<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span>  buffer2<span class=\"token punctuation\">.</span>getInt<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>      buffer1<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> buffer1<span class=\"token punctuation\">.</span>getInt<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> buffer2<span class=\"token punctuation\">.</span>getInt<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    <span class=\"token comment\">// 方法 8：计算最后的结果</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    <span class=\"token keyword\">override</span> <span class=\"token keyword\">def</span> evaluate<span class=\"token punctuation\">(</span>buffer<span class=\"token operator\">:</span> Row<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Any</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>      buffer<span class=\"token punctuation\">.</span>getInt<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> buffer<span class=\"token punctuation\">.</span>getInt<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>  <span class=\"token keyword\">case</span> <span class=\"token keyword\">class</span> User <span class=\"token punctuation\">(</span>name<span class=\"token operator\">:</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span>age <span class=\"token operator\">:</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>解析：</li>\n</ul>\n<figure class=\"highlight scala\"><figcaption data-lang=\"scala\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>buffer<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> buffer<span class=\"token punctuation\">.</span>getInt<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span>  input<span class=\"token punctuation\">.</span>getInt<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   buffer<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> 理解为设置索引位置为<span class=\"token number\">0</span>的值</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   buffer<span class=\"token punctuation\">.</span>getInt<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> ：获取索引为<span class=\"token number\">0</span>位置的数据</pre></td></tr></table></figure><ul>\n<li>强类型自定义的函数</li>\n</ul>\n<figure class=\"highlight scala\"><figcaption data-lang=\"scala\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">object</span> SparkSQL5_UADF <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">def</span> main<span class=\"token punctuation\">(</span>args<span class=\"token operator\">:</span> Array<span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Unit</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">val</span> sparkConf<span class=\"token operator\">:</span> SparkConf <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> SparkConf<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>setMaster<span class=\"token punctuation\">(</span><span class=\"token string\">\"local[*]\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>setAppName<span class=\"token punctuation\">(</span><span class=\"token string\">\"UADF\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">val</span> spark<span class=\"token operator\">:</span> SparkSession <span class=\"token operator\">=</span> SparkSession<span class=\"token punctuation\">.</span>builder<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">(</span>sparkConf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>getOrCreate<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">import</span>  <span class=\"token namespace\">spark<span class=\"token punctuation\">.</span>implicits<span class=\"token punctuation\">.</span></span>_</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 1. 创建 df</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">val</span> frame<span class=\"token operator\">:</span> DataFrame <span class=\"token operator\">=</span> spark<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">.</span>json<span class=\"token punctuation\">(</span><span class=\"token string\">\"input/people.json\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 2. 将 df 转换成 ds</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">val</span> ds<span class=\"token operator\">:</span> Dataset<span class=\"token punctuation\">[</span>People<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> frame<span class=\"token punctuation\">.</span>as<span class=\"token punctuation\">[</span>People<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// 3. 创建自定义的 UADF 对象</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">val</span> udaf <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> MyUADF</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">// 4. 将对象转化为一个列</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">val</span> column<span class=\"token operator\">:</span> TypedColumn<span class=\"token punctuation\">[</span>People<span class=\"token punctuation\">,</span> <span class=\"token builtin\">Long</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> udaf<span class=\"token punctuation\">.</span>toColumn</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   <span class=\"token comment\">// 5. 调用自定义函数</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    ds<span class=\"token punctuation\">.</span>select<span class=\"token punctuation\">(</span>column<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  需求：统计平均年龄</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  1. 自定义类，继承与 extends Aggregator</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  2. 指定 Aggregator 的泛型，分别是：</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    [-IN, BUF, OUT]</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    -IN: 指输入的数据类型，和 java 中？super IN 相同，指传入的参数类型为 IN 类型或是 IN 的父类类型</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    BUF：指缓冲区的数据类型</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    OUT：指输出的数据类型</pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    此时 - IN：是指原表的一条数据，因为已经是被封装成了一个对象，所以是 People</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    BUF：(对象的年龄，次数)，(Int,Int)</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    OUT：(平均年龄)，(Int)</pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>   */</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>  <span class=\"token keyword\">case</span> <span class=\"token keyword\">class</span> People<span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> name<span class=\"token operator\">:</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">var</span> age <span class=\"token operator\">:</span> <span class=\"token builtin\">Long</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>  <span class=\"token keyword\">case</span> <span class=\"token keyword\">class</span> avgAGE <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> sumAge<span class=\"token operator\">:</span> <span class=\"token builtin\">Long</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">var</span> count<span class=\"token operator\">:</span><span class=\"token builtin\">Long</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>  <span class=\"token keyword\">class</span> MyUADF <span class=\"token keyword\">extends</span>  Aggregator<span class=\"token punctuation\">[</span>People<span class=\"token punctuation\">,</span>avgAGE<span class=\"token punctuation\">,</span><span class=\"token builtin\">Long</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>      <span class=\"token comment\">//  方法 1：初始化缓冲区的值</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>      <span class=\"token keyword\">override</span> <span class=\"token keyword\">def</span> zero<span class=\"token operator\">:</span> avgAGE <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>      avgAGE<span class=\"token punctuation\">(</span><span class=\"token number\">0L</span><span class=\"token punctuation\">,</span><span class=\"token number\">0L</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>   <span class=\"token comment\">// 方法 2：将数据添加到缓冲区</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token keyword\">override</span> <span class=\"token keyword\">def</span> reduce<span class=\"token punctuation\">(</span>b<span class=\"token operator\">:</span> avgAGE<span class=\"token punctuation\">,</span> a<span class=\"token operator\">:</span> People<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> avgAGE <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>      b<span class=\"token punctuation\">.</span>sumAge <span class=\"token operator\">+=</span> a<span class=\"token punctuation\">.</span>age</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>      b<span class=\"token punctuation\">.</span>count <span class=\"token operator\">+=</span>  <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>      b</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token comment\">//  方法 3：合并缓冲区，两两进行合并</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token keyword\">override</span> <span class=\"token keyword\">def</span> merge<span class=\"token punctuation\">(</span>b1<span class=\"token operator\">:</span> avgAGE<span class=\"token punctuation\">,</span> b2<span class=\"token operator\">:</span> avgAGE<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> avgAGE <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>      b1<span class=\"token punctuation\">.</span>count <span class=\"token operator\">=</span> b1<span class=\"token punctuation\">.</span>count <span class=\"token operator\">+</span> b2<span class=\"token punctuation\">.</span>count</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>      b1<span class=\"token punctuation\">.</span>sumAge <span class=\"token operator\">=</span>b1<span class=\"token punctuation\">.</span>sumAge <span class=\"token operator\">+</span> b2<span class=\"token punctuation\">.</span>sumAge</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>      b1</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token comment\">//  方法 4：计算最后的结果</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token keyword\">override</span> <span class=\"token keyword\">def</span> finish<span class=\"token punctuation\">(</span>reduction<span class=\"token operator\">:</span> avgAGE<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Long</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>      reduction<span class=\"token punctuation\">.</span>sumAge <span class=\"token operator\">/</span> reduction<span class=\"token punctuation\">.</span>count</pre></td></tr><tr><td data-num=\"56\"></td><td><pre></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>   <span class=\"token comment\">//  方法 5：固定写法，输入的编码器</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    <span class=\"token keyword\">override</span> <span class=\"token keyword\">def</span> bufferEncoder<span class=\"token operator\">:</span> Encoder<span class=\"token punctuation\">[</span>avgAGE<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Encoders<span class=\"token punctuation\">.</span>product</pre></td></tr><tr><td data-num=\"60\"></td><td><pre>  <span class=\"token comment\">//  方法 6：固定的写法，输入的解码器</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    <span class=\"token keyword\">override</span> <span class=\"token keyword\">def</span> outputEncoder<span class=\"token operator\">:</span> Encoder<span class=\"token punctuation\">[</span><span class=\"token builtin\">Long</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Encoders<span class=\"token punctuation\">.</span>scalaLong</pre></td></tr><tr><td data-num=\"62\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre></pre></td></tr><tr><td data-num=\"64\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"26-数据的加载和保存\"><a class=\"anchor\" href=\"#26-数据的加载和保存\">#</a> 2.6 数据的加载和保存</h3>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>数据加载和保存的方式有很多种方式，根据不同的需求，主要有以下几种：</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">-- 方式 1：通用的数据加载和保存方式</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">-- 方式 2：parquet</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">-- 方式 3：JSON</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">-- 方式 4：CSV</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">-- 方式 5：Mysql</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">-- 方式 6：Hive</span></pre></td></tr></table></figure><h4 id=\"261-通用的数据加载和保存方式\"><a class=\"anchor\" href=\"#261-通用的数据加载和保存方式\">#</a> 2.6.1 通用的数据加载和保存方式</h4>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 什么是通用的方式？</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  指使用相同的API，根据不同的参数，读取和保存不同格式的数据。</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">-- 说明：</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   SparkSQL默认读取和保存的文件格式是parquet。</pre></td></tr></table></figure><h5 id=\"2611-读取数据\"><a class=\"anchor\" href=\"#2611-读取数据\">#</a> 2.6.1.1 读取数据</h5>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">--1. 通用的数据加载方式 [默认为 parquet 格式]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    方式：spark<span class=\"token punctuation\">.</span><span class=\"token keyword\">read</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">load</span><span class=\"token punctuation\">(</span>pat:String<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">--2. 读取不同格式的数据，可以对不同的数据格式进行设定</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    方式：spark<span class=\"token punctuation\">.</span><span class=\"token keyword\">read</span><span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"数据格式\"</span>:string<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">load</span><span class=\"token punctuation\">(</span>path:String<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    说明：</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    a、<span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"数据格式\"</span>:string<span class=\"token punctuation\">)</span>:数据格式可以是：<span class=\"token string\">\"csv\"</span>、<span class=\"token string\">\"mysql\"</span>、<span class=\"token string\">\"json\"</span>、<span class=\"token string\">\"jdbc\"</span>、<span class=\"token string\">\"textFile\"</span>、<span class=\"token string\">\"orc\"</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    b、数据的路径</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">--3. 还可以加 option，导入一些参数</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>     方式：spark<span class=\"token punctuation\">.</span><span class=\"token keyword\">read</span><span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"…\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">option</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"…\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">load</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"…\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>     在<span class=\"token string\">\"jdbc\"</span>格式下需要传入JDBC相应参数，url、<span class=\"token keyword\">user</span>、password和dbtable</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>我们前面都是使用<span class=\"token keyword\">read</span> API 先把文件加载到 DataFrame然后再查询，其实，我们也可以直接在文件上进行查询:  <span class=\"token string\">\"文件格式.`文件路径`\"</span></pre></td></tr></table></figure><figure class=\"highlight scala\"><figcaption data-lang=\"scala\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 情况 1：直接 load</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>spark<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">.</span>load<span class=\"token punctuation\">(</span><span class=\"token string\">\"input/users.parquet\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 情况 2：指定文件格式</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>spark<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">.</span>format<span class=\"token punctuation\">(</span><span class=\"token string\">\"json\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>load<span class=\"token punctuation\">(</span><span class=\"token string\">\"input/people.json\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 情况 3：使用文件格式.`文件路径` 方式</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>spark<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">(</span><span class=\"token string\">\"select * from json.`input/people.json`\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 因为在实际生产情况下，json 文件的数据格式的场景是非常多的，Spark 对于 json 文件格式要求如下：</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token number\">1.</span> JSON文件的格式要求整个文件满足JSON的语法规则</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token number\">2.</span> Spark读取文件默认是以行为单位进行读取</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token number\">3.</span> Spark读取JSON文件时，要求文件中的每一行满足JSON格式</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token number\">4.</span> 如果文件格式不正确，那么不会发生错误，而是解析结果不是我们预期的结果。</pre></td></tr></table></figure><h5 id=\"2612-保存数据\"><a class=\"anchor\" href=\"#2612-保存数据\">#</a> 2.6.1.2 保存数据</h5>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1.</span> 保存的方法：</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>       spark<span class=\"token punctuation\">.</span><span class=\"token keyword\">write</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">save</span><span class=\"token punctuation\">(</span>path:String<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token number\">2.</span> 默认的保存格式为parquet格式</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token number\">3.</span> 如果想要指定保存的格式<span class=\"token punctuation\">,</span>增加format方法，在format的方法中指定形参数据保存的格式</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>       frame<span class=\"token punctuation\">.</span><span class=\"token keyword\">write</span><span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"json\"</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">save</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"output\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token number\">4.</span> 如果保存的路径已经存在，那么会报错：output already <span class=\"token keyword\">exists</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token number\">5.</span> 如果文件路径已经存在时不能创建，那么在实际的生产的情况下，岂不是会生成很多小文件？</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>       解决方案：使用<span class=\"token keyword\">mode</span>，指定模式</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>       方法：<span class=\"token keyword\">mode</span><span class=\"token punctuation\">(</span>形参<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>       形参：saveMode: SaveMode<span class=\"token punctuation\">,</span>数据类型是一个枚举类</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>       枚举类的对象有：</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>       a、Append:追加，如果原文件目录或表存在，那么在原路径下进行生产一个新的文件</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>       b、Overwrite:重写，如果原文件目录或表存在，那么将原路径下的文件进行直接覆盖</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>       c、ErrorIfExists：默认值，如果原文件目录存在，则报错</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>       d、<span class=\"token keyword\">Ignore</span>：如果原文件目录或表存在，那么不报错，但是也不保存数据</pre></td></tr></table></figure><figure class=\"highlight scala\"><figcaption data-lang=\"scala\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>frame<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">.</span>mode<span class=\"token punctuation\">(</span><span class=\"token string\">\"Overwrite\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>format<span class=\"token punctuation\">(</span><span class=\"token string\">\"json\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>save<span class=\"token punctuation\">(</span><span class=\"token string\">\"output\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h4 id=\"262-csv\"><a class=\"anchor\" href=\"#262-csv\">#</a> 2.6.2 CSV</h4>\n<figure class=\"highlight scala\"><figcaption data-lang=\"scala\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 读取文件</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">val</span> frame<span class=\"token operator\">:</span> DataFrame <span class=\"token operator\">=</span> spark<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">.</span>format<span class=\"token punctuation\">(</span><span class=\"token string\">\"csv\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      <span class=\"token punctuation\">.</span>option<span class=\"token punctuation\">(</span><span class=\"token string\">\"sep\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\";\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token punctuation\">.</span>option<span class=\"token punctuation\">(</span><span class=\"token string\">\"inferSchema\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"true\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token punctuation\">.</span>option<span class=\"token punctuation\">(</span><span class=\"token string\">\"header\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"true\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token punctuation\">.</span>load<span class=\"token punctuation\">(</span><span class=\"token string\">\"input/people.csv\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    frame<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre> <span class=\"token comment\">// 保存数据</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    frame<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">.</span>mode<span class=\"token punctuation\">(</span><span class=\"token string\">\"Append\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>format<span class=\"token punctuation\">(</span><span class=\"token string\">\"json\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>save<span class=\"token punctuation\">(</span><span class=\"token string\">\"output\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h4 id=\"263-mysql\"><a class=\"anchor\" href=\"#263-mysql\">#</a> 2.6.3 MySQL</h4>\n<ul>\n<li>方式 1：使用 option 的方式进行参数配置</li>\n</ul>\n<figure class=\"highlight scala\"><figcaption data-lang=\"scala\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 从 MYsql 中读取数据</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">val</span> frame<span class=\"token operator\">:</span> DataFrame <span class=\"token operator\">=</span> spark<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">.</span>format<span class=\"token punctuation\">(</span><span class=\"token string\">\"jdbc\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      <span class=\"token punctuation\">.</span>option<span class=\"token punctuation\">(</span><span class=\"token string\">\"url\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"jdbc:mysql://hadoop105:3306/mysql\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token punctuation\">.</span>option<span class=\"token punctuation\">(</span><span class=\"token string\">\"driver\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"com.mysql.jdbc.Driver\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token punctuation\">.</span>option<span class=\"token punctuation\">(</span><span class=\"token string\">\"user\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"root\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token punctuation\">.</span>option<span class=\"token punctuation\">(</span><span class=\"token string\">\"password\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"123456\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token punctuation\">.</span>option<span class=\"token punctuation\">(</span><span class=\"token string\">\"dbtable\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"db\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token punctuation\">.</span>load<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   <span class=\"token comment\">// 保存到数据库中</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    frame<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">.</span>format<span class=\"token punctuation\">(</span><span class=\"token string\">\"jdbc\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token punctuation\">.</span>option<span class=\"token punctuation\">(</span><span class=\"token string\">\"url\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"jdbc:mysql://hadoop105:3306/mysql\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      <span class=\"token punctuation\">.</span>option<span class=\"token punctuation\">(</span><span class=\"token string\">\"driver\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"com.mysql.jdbc.Driver\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      <span class=\"token punctuation\">.</span>option<span class=\"token punctuation\">(</span><span class=\"token string\">\"user\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"root\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      <span class=\"token punctuation\">.</span>option<span class=\"token punctuation\">(</span><span class=\"token string\">\"password\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"123456\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      <span class=\"token punctuation\">.</span>option<span class=\"token punctuation\">(</span><span class=\"token string\">\"dbtable\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"db1\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      <span class=\"token punctuation\">.</span>mode<span class=\"token punctuation\">(</span><span class=\"token string\">\"Append\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>save<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ul>\n<li>方式 2：使用 jdbc 的方法</li>\n</ul>\n<figure class=\"highlight scala\"><figcaption data-lang=\"scala\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 创建连接</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">val</span> props<span class=\"token operator\">:</span> Properties <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> Properties<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    props<span class=\"token punctuation\">.</span>setProperty<span class=\"token punctuation\">(</span><span class=\"token string\">\"user\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"root\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    props<span class=\"token punctuation\">.</span>setProperty<span class=\"token punctuation\">(</span><span class=\"token string\">\"password\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"123456\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">val</span> df<span class=\"token operator\">:</span> DataFrame <span class=\"token operator\">=</span> spark<span class=\"token punctuation\">.</span>read</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                        <span class=\"token punctuation\">.</span>jdbc<span class=\"token punctuation\">(</span><span class=\"token string\">\"jdbc:mysql://hadoop105:3306/mysql\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"db\"</span><span class=\"token punctuation\">,</span> props<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    df<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// 将数据保存到 Mysql 中</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">val</span> rdd<span class=\"token operator\">:</span> RDD<span class=\"token punctuation\">[</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> spark<span class=\"token punctuation\">.</span>sparkContext<span class=\"token punctuation\">.</span>makeRDD<span class=\"token punctuation\">(</span>List<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">val</span> frame<span class=\"token operator\">:</span> DataFrame <span class=\"token operator\">=</span> rdd<span class=\"token punctuation\">.</span>toDF<span class=\"token punctuation\">(</span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    frame<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">.</span>mode<span class=\"token punctuation\">(</span><span class=\"token string\">\"Append\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>jdbc<span class=\"token punctuation\">(</span><span class=\"token string\">\"jdbc:mysql://hadoop105:3306/mysql\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"db2\"</span><span class=\"token punctuation\">,</span> props<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h4 id=\"264-hive\"><a class=\"anchor\" href=\"#264-hive\">#</a> 2.6.4 Hive</h4>\n<pre><code>1. Spark中内嵌了hive。\n</code></pre>\n<figure class=\"highlight scala\"><figcaption data-lang=\"scala\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">val</span> sparkConf<span class=\"token operator\">:</span> SparkConf <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> SparkConf<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>setMaster<span class=\"token punctuation\">(</span><span class=\"token string\">\"local[*]\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>setAppName<span class=\"token punctuation\">(</span><span class=\"token string\">\"Hive\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>     <span class=\"token keyword\">val</span> spark<span class=\"token operator\">:</span> SparkSession <span class=\"token operator\">=</span> SparkSession</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      <span class=\"token punctuation\">.</span>builder<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token punctuation\">.</span>enableHiveSupport<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\">// 支持 hive</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">(</span>sparkConf<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token punctuation\">.</span>getOrCreate<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>     <span class=\"token comment\">// 创建表</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">//    spark.sql(\"create table aa (id int)\")</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>     <span class=\"token comment\">// 查询表</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">//    spark.sql(\"show tables\").show()</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    spark<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">(</span><span class=\"token string\">\"load data  local inpath 'input/id.text' into table aa\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    spark<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">(</span><span class=\"token string\">\"select * from aa \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><pre><code>2. 外置Hive\n 步骤：\n a、导入依赖\n b、将hive\n c、取消tez引擎\n d、代码实现，访问hive中的表\n</code></pre>\n<ul>\n<li>导入依赖</li>\n</ul>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.apache.spark<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spark-hive_2.12<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>2.4.5<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.apache.hive<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>hive-exec<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>3.1.2<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><ul>\n<li>将 hive-site.xml 文件拷贝到项目的 resources 目录中，代码实现</li>\n</ul>\n<figure class=\"highlight scala\"><figcaption data-lang=\"scala\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">val</span> sparkConf<span class=\"token operator\">:</span> SparkConf <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> SparkConf<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>setMaster<span class=\"token punctuation\">(</span><span class=\"token string\">\"local[*]\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>setAppName<span class=\"token punctuation\">(</span><span class=\"token string\">\"hive\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">val</span> spark<span class=\"token operator\">:</span> SparkSession <span class=\"token operator\">=</span> SparkSession<span class=\"token punctuation\">.</span>builder<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>enableHiveSupport<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">(</span>sparkConf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>getOrCreate<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    spark<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">(</span><span class=\"token string\">\"show databases\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    spark<span class=\"token punctuation\">.</span>stop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"三-项目实战\"><a class=\"anchor\" href=\"#三-项目实战\">#</a> 三、项目实战</h2>\n<h3 id=\"31-数据准备\"><a class=\"anchor\" href=\"#31-数据准备\">#</a> 3.1 数据准备</h3>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 我们这次 Spark-sql 操作中所有的数据均来自 Hive，首先在 Hive 中创建表，，并导入数据。一共有 3 张表： 1 张用户行为表，1 张城市表，1 张产品表</span></pre></td></tr></table></figure><figure class=\"highlight scala\"><figcaption data-lang=\"scala\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 修改 hadoop 的用户</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   System<span class=\"token punctuation\">.</span>setProperty<span class=\"token punctuation\">(</span><span class=\"token string\">\"HADOOP_USER_NAME\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"atguigu\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">val</span> sparkConf<span class=\"token operator\">:</span> SparkConf <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> SparkConf<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>setMaster<span class=\"token punctuation\">(</span><span class=\"token string\">\"local[*]\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>setAppName<span class=\"token punctuation\">(</span><span class=\"token string\">\"pro\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">val</span> spark<span class=\"token operator\">:</span> SparkSession <span class=\"token operator\">=</span> SparkSession<span class=\"token punctuation\">.</span>builder<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>enableHiveSupport<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">(</span>sparkConf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>getOrCreate<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    spark<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">(</span><span class=\"token string\">\"use  spark_sql\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    spark<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">(</span><span class=\"token string\">\"show databases\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    spark<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token triple-quoted-string string\">\"\"\"</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        |CREATE TABLE `user_visit_action`(</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        |  `date` string,</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        |  `user_id` bigint,</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        |  `session_id` string,</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        |  `page_id` bigint,</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        |  `action_time` string,</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        |  `search_keyword` string,</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        |  `click_category_id` bigint,</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        |  `click_product_id` bigint,</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        |  `order_category_ids` string,</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        |  `order_product_ids` string,</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        |  `pay_category_ids` string,</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        |  `pay_product_ids` string,</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        |  `city_id` bigint)</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        |row format delimited fields terminated by '\\t'</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>      \"\"\"</span><span class=\"token punctuation\">.</span>stripMargin<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    spark<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">(</span><span class=\"token string\">\"load data local inpath 'input/user_visit_action.txt' into table user_visit_action\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    spark<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>      <span class=\"token triple-quoted-string string\">\"\"\"</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        |CREATE TABLE `product_info`(</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        |  `product_id` bigint,</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        |  `product_name` string,</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        |  `extend_info` string)</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        |row format delimited fields terminated by '\\t'</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>      \"\"\"</span><span class=\"token punctuation\">.</span>stripMargin<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    spark<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">(</span><span class=\"token string\">\"load data local inpath 'input/product_info.txt' into table product_info\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    spark<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>      <span class=\"token triple-quoted-string string\">\"\"\"</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        |CREATE TABLE `city_info`(</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        |  `city_id` bigint,</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        |  `city_name` string,</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        |  `area` string)</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        |row format delimited fields terminated by '\\t'</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>      \"\"\"</span><span class=\"token punctuation\">.</span>stripMargin<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    spark<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">(</span><span class=\"token string\">\"load data local inpath 'input/city_info.txt' into table city_info\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    spark<span class=\"token punctuation\">.</span>stop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"32-需求-各区域热门商品-top3\"><a class=\"anchor\" href=\"#32-需求-各区域热门商品-top3\">#</a> 3.2 需求  ： 各区域热门商品 Top3</h3>\n<h4 id=\"321-需求\"><a class=\"anchor\" href=\"#321-需求\">#</a> 3.2.1 需求</h4>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 这里的热门商品是从点击量的维度来看的，计算各个区域前三大热门商品，并备注上每个商品在主要城市中的分布比例，超过两个城市用其他显示</span></pre></td></tr></table></figure><table>\n<thead>\n<tr>\n<th><em><strong>* 地区 *</strong></em></th>\n<th><em><strong>* 商品名称 *</strong></em></th>\n<th><em><strong>* 点击次数 *</strong></em></th>\n<th><em><strong>* 城市备注 *</strong></em></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><em><strong>* 华北 *</strong></em></td>\n<td>商品 A</td>\n<td>100000</td>\n<td>北京 21.2%，天津 13.2%，其他 65.6%</td>\n</tr>\n<tr>\n<td><em><strong>* 华北 *</strong></em></td>\n<td>商品 P</td>\n<td>80200</td>\n<td>北京 63.0%，太原 10%，其他 27.0%</td>\n</tr>\n<tr>\n<td><em><strong>* 华北 *</strong></em></td>\n<td>商品 M</td>\n<td>40000</td>\n<td>北京 63.0%，太原 10%，其他 27.0%</td>\n</tr>\n<tr>\n<td><em><strong>* 东北 *</strong></em></td>\n<td>商品 J</td>\n<td>92000</td>\n<td>大连 28%，辽宁 17.0%，其他 55.0%</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"322-需求分析\"><a class=\"anchor\" href=\"#322-需求分析\">#</a> 3.2.2 需求分析</h4>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">SELECT</span> t4<span class=\"token punctuation\">.</span>area<span class=\"token punctuation\">,</span>t4<span class=\"token punctuation\">.</span>product_name<span class=\"token punctuation\">,</span>t4<span class=\"token punctuation\">.</span>clickCount</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">FROM</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">SELECT</span> t3<span class=\"token punctuation\">.</span>area<span class=\"token punctuation\">,</span>t3<span class=\"token punctuation\">.</span>product_name<span class=\"token punctuation\">,</span>t3<span class=\"token punctuation\">.</span>clickCount<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tRANK<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">over</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">partition</span> <span class=\"token keyword\">by</span> t3<span class=\"token punctuation\">.</span>area  <span class=\"token keyword\">order</span> <span class=\"token keyword\">by</span> clickCount <span class=\"token keyword\">DESC</span> <span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> click_rank</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">FROM</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t<span class=\"token keyword\">SELECT</span> t2<span class=\"token punctuation\">.</span>area<span class=\"token punctuation\">,</span>t2<span class=\"token punctuation\">.</span>product_name<span class=\"token punctuation\">,</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> clickCount </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token keyword\">FROM</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t<span class=\"token keyword\">SELECT</span> t1<span class=\"token punctuation\">.</span>city_id<span class=\"token punctuation\">,</span>pro<span class=\"token punctuation\">.</span>product_name <span class=\"token punctuation\">,</span>city<span class=\"token punctuation\">.</span>city_name <span class=\"token punctuation\">,</span>city<span class=\"token punctuation\">.</span>area </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t<span class=\"token keyword\">FROM</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t\t<span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t\t<span class=\"token keyword\">FROM</span> user_visit_action </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t\t<span class=\"token keyword\">WHERE</span> click_category_id <span class=\"token operator\">!=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span> </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t\t<span class=\"token punctuation\">)</span>t1 <span class=\"token keyword\">join</span> product_info pro</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t\t<span class=\"token keyword\">on</span>  pro<span class=\"token punctuation\">.</span>product_id  <span class=\"token operator\">=</span> t1<span class=\"token punctuation\">.</span>click_product_id</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t\t<span class=\"token keyword\">join</span> city_info city</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t\t<span class=\"token keyword\">on</span> t1<span class=\"token punctuation\">.</span>city_id <span class=\"token operator\">=</span> city<span class=\"token punctuation\">.</span>city_id</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t\t<span class=\"token punctuation\">)</span>t2</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t<span class=\"token keyword\">group</span> <span class=\"token keyword\">by</span> t2<span class=\"token punctuation\">.</span>area<span class=\"token punctuation\">,</span>t2<span class=\"token punctuation\">.</span>product_name</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token punctuation\">)</span>t3</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token punctuation\">)</span>t4</pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">WHERE</span> t4<span class=\"token punctuation\">.</span>click_rank <span class=\"token operator\">&lt;=</span> <span class=\"token number\">3</span></pre></td></tr></table></figure><p>![image-20200616000034398](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saWFuLXpwLm9zcy1jbi1zaGVuemhlbi5hbGl5dW5jcy5jb20vcGlj\">https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic</span> GO/20200616000036.png)</p>\n<ul>\n<li>补充备注信息</li>\n</ul>\n<pre><code>\n</code></pre>\n",
            "tags": []
        },
        {
            "id": "https://github.com/Mayizono/miyazono.github.io/big-data/spark/5.Spark%E4%B9%8BWordCount/",
            "url": "https://github.com/Mayizono/miyazono.github.io/big-data/spark/5.Spark%E4%B9%8BWordCount/",
            "title": "",
            "date_published": "2021-08-31T10:42:35.366Z",
            "content_html": "<h1 id=\"spark-之-wordcount\"><a class=\"anchor\" href=\"#spark-之-wordcount\">#</a> Spark 之 WordCount</h1>\n<hr />\n<h2 id=\"一-14种wordcount实现方式\"><a class=\"anchor\" href=\"#一-14种wordcount实现方式\">#</a> 一、14 种 wordcount 实现方式</h2>\n<figure class=\"highlight scala\"><figcaption data-lang=\"scala\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 数据准备及环境连接：</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">val</span> sparkConf<span class=\"token operator\">:</span> SparkConf <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> SparkConf<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>setMaster<span class=\"token punctuation\">(</span><span class=\"token string\">\"local[*]\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>setAppName<span class=\"token punctuation\">(</span><span class=\"token string\">\"map\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">val</span> sc <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> SparkContext<span class=\"token punctuation\">(</span>sparkConf<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">val</span> rdd1<span class=\"token operator\">:</span> RDD<span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> sc<span class=\"token punctuation\">.</span>makeRDD<span class=\"token punctuation\">(</span>List<span class=\"token punctuation\">(</span><span class=\"token string\">\"hadoop scala\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"spark spark hello\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"scala\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"11-方法1groupby-map\"><a class=\"anchor\" href=\"#11-方法1groupby-map\">#</a> 1.1 方法 1：groupBy + map</h3>\n<figure class=\"highlight scala\"><figcaption data-lang=\"scala\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 方法 1：groupBy + map</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    rdd1<span class=\"token punctuation\">.</span>flatMap<span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      <span class=\"token punctuation\">.</span>groupBy<span class=\"token punctuation\">(</span>word <span class=\"token keyword\">=></span> word<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token punctuation\">.</span>map <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">case</span> <span class=\"token punctuation\">(</span>word<span class=\"token punctuation\">,</span> iter<span class=\"token punctuation\">)</span> <span class=\"token keyword\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>          <span class=\"token punctuation\">(</span>word<span class=\"token punctuation\">,</span> iter<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token punctuation\">.</span>collect<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token punctuation\">.</span>foreach<span class=\"token punctuation\">(</span>println<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    println<span class=\"token punctuation\">(</span><span class=\"token string\">\"=======如上方法1========\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"12-方法2reducebykey\"><a class=\"anchor\" href=\"#12-方法2reducebykey\">#</a> 1.2 方法 2：reduceByKey</h3>\n<figure class=\"highlight scala\"><figcaption data-lang=\"scala\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 方法 2：reduceByKey</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    rdd1<span class=\"token punctuation\">.</span>flatMap<span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      <span class=\"token punctuation\">.</span>map<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token punctuation\">.</span>reduceByKey<span class=\"token punctuation\">(</span>_ <span class=\"token operator\">+</span> _<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token punctuation\">.</span>collect<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token punctuation\">.</span>foreach<span class=\"token punctuation\">(</span>println<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    println<span class=\"token punctuation\">(</span><span class=\"token string\">\"=======如上方法2========\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"13-方法3aggregatebykey\"><a class=\"anchor\" href=\"#13-方法3aggregatebykey\">#</a> 1.3 方法 3：aggregateByKey</h3>\n<figure class=\"highlight scala\"><figcaption data-lang=\"scala\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 方法 3：aggregateByKey</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    rdd1<span class=\"token punctuation\">.</span>flatMap<span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      <span class=\"token punctuation\">.</span>map<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token punctuation\">.</span>aggregateByKey<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>_ <span class=\"token operator\">+</span> _<span class=\"token punctuation\">,</span> _ <span class=\"token operator\">+</span> _<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token punctuation\">.</span>collect<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token punctuation\">.</span>foreach<span class=\"token punctuation\">(</span>println<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    println<span class=\"token punctuation\">(</span><span class=\"token string\">\"=======如上方法3========\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"14-方法4foldbykey\"><a class=\"anchor\" href=\"#14-方法4foldbykey\">#</a> 1.4 方法 4：foldByKey</h3>\n<figure class=\"highlight scala\"><figcaption data-lang=\"scala\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 方法 4：foldByKey</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    rdd1<span class=\"token punctuation\">.</span>flatMap<span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      <span class=\"token punctuation\">.</span>map<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token punctuation\">.</span>foldByKey<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>_ <span class=\"token operator\">+</span> _<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token punctuation\">.</span>collect<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token punctuation\">.</span>foreach<span class=\"token punctuation\">(</span>println<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    println<span class=\"token punctuation\">(</span><span class=\"token string\">\"=======如上方法4========\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"15-方法5combinebykey\"><a class=\"anchor\" href=\"#15-方法5combinebykey\">#</a> 1.5 方法 5：combineBykey</h3>\n<figure class=\"highlight scala\"><figcaption data-lang=\"scala\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 方法 5：combineBykey</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    rdd1<span class=\"token punctuation\">.</span>flatMap<span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      <span class=\"token punctuation\">.</span>map<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token punctuation\">.</span>combineByKey<span class=\"token punctuation\">(</span>v <span class=\"token keyword\">=></span> v<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>v1<span class=\"token operator\">:</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">,</span> v2<span class=\"token operator\">:</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">=></span> v1 <span class=\"token operator\">+</span> v2<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>v1<span class=\"token operator\">:</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">,</span> v2<span class=\"token operator\">:</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">=></span> v1 <span class=\"token operator\">+</span> v2<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token punctuation\">.</span>collect<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token punctuation\">.</span>foreach<span class=\"token punctuation\">(</span>println<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    println<span class=\"token punctuation\">(</span><span class=\"token string\">\"=======如上方法5========\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"16-方法6groupbykey\"><a class=\"anchor\" href=\"#16-方法6groupbykey\">#</a> 1.6 方法 6：groupByKey</h3>\n<figure class=\"highlight scala\"><figcaption data-lang=\"scala\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 方法 6：groupByKey</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    rdd1<span class=\"token punctuation\">.</span>flatMap<span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      <span class=\"token punctuation\">.</span>map<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token punctuation\">.</span>groupByKey<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token punctuation\">.</span>map <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">case</span> <span class=\"token punctuation\">(</span>word<span class=\"token punctuation\">,</span> iter<span class=\"token punctuation\">)</span> <span class=\"token keyword\">=></span> <span class=\"token punctuation\">(</span>word<span class=\"token punctuation\">,</span> iter<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token punctuation\">.</span>collect<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token punctuation\">.</span>foreach<span class=\"token punctuation\">(</span>println<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    println<span class=\"token punctuation\">(</span><span class=\"token string\">\"=======如上方法6========\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"17-方法7countbykey\"><a class=\"anchor\" href=\"#17-方法7countbykey\">#</a> 1.7 方法 7：countByKey</h3>\n<figure class=\"highlight scala\"><figcaption data-lang=\"scala\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 方法 7：countByKey</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    rdd1<span class=\"token punctuation\">.</span>flatMap<span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      <span class=\"token punctuation\">.</span>map<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token punctuation\">.</span>countByKey<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>foreach<span class=\"token punctuation\">(</span>println<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    println<span class=\"token punctuation\">(</span><span class=\"token string\">\"=======如上方法7========\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"18-方法8countbyvalue\"><a class=\"anchor\" href=\"#18-方法8countbyvalue\">#</a> 1.8 方法 8：countByValue</h3>\n<figure class=\"highlight scala\"><figcaption data-lang=\"scala\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 方法 8：countByValue</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    rdd1<span class=\"token punctuation\">.</span>flatMap<span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      <span class=\"token punctuation\">.</span>map<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> _<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token punctuation\">.</span>countByValue<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>map <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token keyword\">case</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">,</span> word<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">)</span> <span class=\"token keyword\">=></span> <span class=\"token punctuation\">(</span>word<span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token punctuation\">.</span>foreach<span class=\"token punctuation\">(</span>println<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    println<span class=\"token punctuation\">(</span><span class=\"token string\">\"=======如上方法8========\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"19-方法9cogroup\"><a class=\"anchor\" href=\"#19-方法9cogroup\">#</a> 1.9 方法 9：cogroup</h3>\n<figure class=\"highlight scala\"><figcaption data-lang=\"scala\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 方法 9:cogroup</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">val</span> rdd2 <span class=\"token operator\">=</span> sc<span class=\"token punctuation\">.</span>makeRDD<span class=\"token punctuation\">(</span>List<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    rdd1<span class=\"token punctuation\">.</span>flatMap<span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token punctuation\">.</span>map<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token punctuation\">.</span>cogroup<span class=\"token punctuation\">(</span>rdd2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>map <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token keyword\">case</span> <span class=\"token punctuation\">(</span>word<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>iter1<span class=\"token punctuation\">,</span> iter2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token punctuation\">(</span>word<span class=\"token punctuation\">,</span> iter1<span class=\"token punctuation\">.</span>size <span class=\"token operator\">+</span> iter2<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token punctuation\">.</span>filter<span class=\"token punctuation\">(</span>tuple <span class=\"token keyword\">=></span> tuple<span class=\"token punctuation\">.</span>_1 <span class=\"token operator\">!=</span> <span class=\"token string\">\"a\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token punctuation\">.</span>foreach<span class=\"token punctuation\">(</span>println<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    println<span class=\"token punctuation\">(</span><span class=\"token string\">\"=======如上方法9========\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"110-方法10mapvalues\"><a class=\"anchor\" href=\"#110-方法10mapvalues\">#</a> 1.10 方法 10：mapValues</h3>\n<figure class=\"highlight scala\"><figcaption data-lang=\"scala\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 方法 10：mapValues</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    rdd1<span class=\"token punctuation\">.</span>flatMap<span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      <span class=\"token punctuation\">.</span>map<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token punctuation\">.</span>groupBy<span class=\"token punctuation\">(</span>word <span class=\"token keyword\">=></span> word<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token punctuation\">.</span>mapValues<span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token punctuation\">.</span>map <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">case</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>word<span class=\"token punctuation\">,</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">)</span> <span class=\"token keyword\">=></span> <span class=\"token punctuation\">(</span>word<span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token punctuation\">.</span>collect<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token punctuation\">.</span>foreach<span class=\"token punctuation\">(</span>println<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    println<span class=\"token punctuation\">(</span><span class=\"token string\">\"=======如上方法10========\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"111-方法11reduce-foldleft\"><a class=\"anchor\" href=\"#111-方法11reduce-foldleft\">#</a> 1.11 方法 11：reduce + foldLeft</h3>\n<figure class=\"highlight scala\"><figcaption data-lang=\"scala\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 方法 11：reduce + foldLeft</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">val</span> wordcount<span class=\"token operator\">:</span> Map<span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> rdd1<span class=\"token punctuation\">.</span>flatMap<span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      <span class=\"token punctuation\">.</span>map<span class=\"token punctuation\">(</span>word <span class=\"token keyword\">=></span> Map<span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>word<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token punctuation\">.</span>reduce<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token punctuation\">(</span>map1<span class=\"token punctuation\">,</span> map2<span class=\"token punctuation\">)</span> <span class=\"token keyword\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>          map1<span class=\"token punctuation\">.</span>foldLeft<span class=\"token punctuation\">(</span>map2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">,</span> kv<span class=\"token punctuation\">)</span> <span class=\"token keyword\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token keyword\">val</span> word<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span> <span class=\"token operator\">=</span> kv<span class=\"token punctuation\">.</span>_1</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token keyword\">val</span> count<span class=\"token operator\">:</span> <span class=\"token builtin\">Int</span> <span class=\"token operator\">=</span> kv<span class=\"token punctuation\">.</span>_2</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            map<span class=\"token punctuation\">.</span>updated<span class=\"token punctuation\">(</span>word<span class=\"token punctuation\">,</span> map<span class=\"token punctuation\">.</span>getOrElse<span class=\"token punctuation\">(</span>word<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> count<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   wordcount<span class=\"token punctuation\">.</span>foreach<span class=\"token punctuation\">(</span>println<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>   println<span class=\"token punctuation\">(</span><span class=\"token string\">\"=======如上方法11========\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"112-方法12aggregate\"><a class=\"anchor\" href=\"#112-方法12aggregate\">#</a> 1.12 方法 12：aggregate</h3>\n<figure class=\"highlight scala\"><figcaption data-lang=\"scala\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 12. aggregate</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    rdd<span class=\"token punctuation\">.</span>flatMap<span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>       <span class=\"token punctuation\">.</span>map<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token punctuation\">.</span>aggregate<span class=\"token punctuation\">(</span>mutable<span class=\"token punctuation\">.</span>Map<span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">,</span>kv<span class=\"token punctuation\">)</span> <span class=\"token keyword\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token keyword\">val</span> word<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span> <span class=\"token operator\">=</span> kv<span class=\"token punctuation\">.</span>_1</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token keyword\">val</span> num<span class=\"token operator\">:</span> <span class=\"token builtin\">Int</span> <span class=\"token operator\">=</span> kv<span class=\"token punctuation\">.</span>_2</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      map<span class=\"token punctuation\">(</span>word<span class=\"token punctuation\">)</span><span class=\"token operator\">=</span>map<span class=\"token punctuation\">.</span>getOrElse<span class=\"token punctuation\">(</span>word<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> num</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      map</pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span>map1<span class=\"token punctuation\">,</span>map2<span class=\"token punctuation\">)</span><span class=\"token keyword\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      map1<span class=\"token punctuation\">.</span>foldLeft<span class=\"token punctuation\">(</span>map2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">case</span> <span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">,</span>kv<span class=\"token punctuation\">)</span><span class=\"token keyword\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>          map<span class=\"token punctuation\">(</span>kv<span class=\"token punctuation\">.</span>_1<span class=\"token punctuation\">)</span><span class=\"token operator\">=</span>map<span class=\"token punctuation\">.</span>getOrElse<span class=\"token punctuation\">(</span>kv<span class=\"token punctuation\">.</span>_1<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> kv<span class=\"token punctuation\">.</span>_2</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>          map</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>foreach<span class=\"token punctuation\">(</span>println<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>     println<span class=\"token punctuation\">(</span><span class=\"token string\">\" ======== 方法12 ===========\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"113-方法13fold\"><a class=\"anchor\" href=\"#113-方法13fold\">#</a> 1.13 方法 13：fold</h3>\n<figure class=\"highlight scala\"><figcaption data-lang=\"scala\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 13. fold</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    rdd<span class=\"token punctuation\">.</span>flatMap<span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>       <span class=\"token punctuation\">.</span>map<span class=\"token punctuation\">(</span>word <span class=\"token keyword\">=></span> mutable<span class=\"token punctuation\">.</span>Map<span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>word<span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>       <span class=\"token punctuation\">.</span>fold<span class=\"token punctuation\">(</span>mutable<span class=\"token punctuation\">.</span>Map<span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>map1<span class=\"token punctuation\">,</span>map2<span class=\"token punctuation\">)</span><span class=\"token keyword\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>         map1<span class=\"token punctuation\">.</span>foldLeft<span class=\"token punctuation\">(</span>map2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>           <span class=\"token keyword\">case</span> <span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">,</span>kv<span class=\"token punctuation\">)</span><span class=\"token keyword\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>             map<span class=\"token punctuation\">(</span>kv<span class=\"token punctuation\">.</span>_1<span class=\"token punctuation\">)</span><span class=\"token operator\">=</span>map<span class=\"token punctuation\">.</span>getOrElse<span class=\"token punctuation\">(</span>kv<span class=\"token punctuation\">.</span>_1<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> kv<span class=\"token punctuation\">.</span>_2</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>             map</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>           <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>         <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>       <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>foreach<span class=\"token punctuation\">(</span>println<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>     println<span class=\"token punctuation\">(</span><span class=\"token string\">\" ======== 方法13 ===========\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"114-方法14-累加器\"><a class=\"anchor\" href=\"#114-方法14-累加器\">#</a> 1.14 方法 14 ：累加器</h3>\n",
            "tags": []
        },
        {
            "id": "https://github.com/Mayizono/miyazono.github.io/big-data/spark/4.%20Spark%E5%AE%9E%E6%88%98%E9%A1%B9%E7%9B%AE%E2%80%94%E2%80%94%E7%94%B5%E5%95%86%E6%8C%87%E6%A0%87%E7%BB%9F%E8%AE%A1/",
            "url": "https://github.com/Mayizono/miyazono.github.io/big-data/spark/4.%20Spark%E5%AE%9E%E6%88%98%E9%A1%B9%E7%9B%AE%E2%80%94%E2%80%94%E7%94%B5%E5%95%86%E6%8C%87%E6%A0%87%E7%BB%9F%E8%AE%A1/",
            "title": "",
            "date_published": "2021-08-31T10:42:35.363Z",
            "content_html": "<h1 id=\"spark实战项目电商指标统计\"><a class=\"anchor\" href=\"#spark实战项目电商指标统计\">#</a> Spark 实战项目 —— 电商指标统计</h1>\n<hr />\n<h2 id=\"一-引言\"><a class=\"anchor\" href=\"#一-引言\">#</a> 一、引言</h2>\n<p>​        在实战项目中，根据不同的需求进行编程，由于需求不同，核心的计算逻辑会不同，但是其他的一些代码，如获取环境变量、读取文件等等操作是固定。本次我们采用编写框架的模式来完成我们的需求，这样的优势有：</p>\n<blockquote>\n<ol>\n<li>代码的扩展性强；</li>\n<li>减少代码的冗余；</li>\n<li>将相同的功能进行封装，降低代码的耦合度；</li>\n<li>将代码进行分层次，代码的逻辑看起来就非常的清晰。</li>\n</ol>\n</blockquote>\n<p>采用框架的方式，在企业实际生产环境中是非常有优势的，希望大家能够学以致用。</p>\n<h3 id=\"11-框架设计原理\"><a class=\"anchor\" href=\"#11-框架设计原理\">#</a> 1.1 框架设计原理</h3>\n<p>​        框架设计思想可以采取两种模式，一种是 MVC，另外一种是三层架构，由于我们这里没有页面展示的需求，所以我们暂时采取三层架构的方式。</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 1. 三层架构的概念</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  \t<span class=\"token number\">1.</span> Controller:控制层，封装调度作用，数据的流转过程</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token number\">2.</span> Service: 服务层，封装实际的计算逻辑</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token number\">3.</span> DAO ：<span class=\"token keyword\">Data</span> Access Object<span class=\"token punctuation\">,</span>数据访问对象，专门用于和一些关系型数据互相访问，用来和数据源的连接</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">-- 2. 调用的顺序</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   按照下面图示。</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   </pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">-- 3. 架构中一些其他的内容</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   <span class=\"token number\">1.</span> bean ： 用来封装一个bean类，对数据的一些封装，采用样例类，声明在包对象中</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   <span class=\"token number\">2.</span> helper：辅助类，如累加器类</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   <span class=\"token number\">3.</span> Apllication ： 应用程序，主程序</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>   <span class=\"token number\">4.</span> Util : 工具类</pre></td></tr></table></figure><p>![image-20200610231235344](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saWFuLXpwLm9zcy1jbi1zaGVuemhlbi5hbGl5dW5jcy5jb20vcGlj\">https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic</span> GO/20200610231235.png)</p>\n<h3 id=\"12-框架搭建\"><a class=\"anchor\" href=\"#12-框架搭建\">#</a> 1.2 框架搭建</h3>\n<p>![image-20200610232755157](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saWFuLXpwLm9zcy1jbi1zaGVuemhlbi5hbGl5dW5jcy5jb20vcGlj\">https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic</span> GO/20200610232755.png)</p>\n<h4 id=\"121-util\"><a class=\"anchor\" href=\"#121-util\">#</a> 1.2.1 Util</h4>\n<h5 id=\"1211-envutils\"><a class=\"anchor\" href=\"#1211-envutils\">#</a> 1.2.1.1 EnvUtils</h5>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 如何实现三层框架共享数据呢？</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token number\">1.</span> 实现原理：在当前线程中创建一个内存，将共享数据存放在这个内存中，这样三层架构均可以使用。</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token number\">2.</span> 实现方式：</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      a、在线程中一直就保留着可以共享数据的空间</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      b、JDK API 提供了一个工具类，可以直接访问这个空间</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      c、只要调用这个工具类<span class=\"token punctuation\">(</span>ThreadLocal<span class=\"token punctuation\">)</span>将数据存入到共享数据中，也可以从这个内存中调用共享内存中的数据</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   <span class=\"token number\">3.</span> 具体的步骤：</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      a、<span class=\"token string\">\"创建\"</span>一个共享数据 ： 案例如下：</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>         <span class=\"token string\">\"private val scLocal = new ThreadLocal[SparkContext] \"</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      b、将共享数据<span class=\"token string\">\"放进\"</span>共享空间中</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>         <span class=\"token string\">\"scLocal.set(sc)\"</span>    </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      c、从当前线程的共享空间中<span class=\"token string\">\"获取\"</span>共享数据</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>         <span class=\"token string\">\"scLocal.get()\"</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      d、将共享数据从共享空间中<span class=\"token string\">\"清除\"</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>         <span class=\"token string\">\"scLocal.remove()\"</span></pre></td></tr></table></figure><figure class=\"highlight scala\"><figcaption data-lang=\"scala\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>atguigu<span class=\"token punctuation\">.</span>summer<span class=\"token punctuation\">.</span>framework<span class=\"token punctuation\">.</span>util</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>spark<span class=\"token punctuation\">.</span></span><span class=\"token punctuation\">&#123;</span>SparkConf<span class=\"token punctuation\">,</span> SparkContext<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  * @Description</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  * *</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  * @author lianzhipeng</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  * @create 2020-06-09 14:00:02</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  */</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">object</span> EnvUtils <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token comment\">// 创建一个共享数据</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> scLocal <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> ThreadLocal<span class=\"token punctuation\">[</span>SparkContext<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token comment\">// 获取环境对象</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token keyword\">def</span> getEnv<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token comment\">// 从当前线程的共享空间中获取环境对象</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">var</span> sc<span class=\"token operator\">:</span> SparkContext <span class=\"token operator\">=</span> scLocal<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sc <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>      <span class=\"token keyword\">val</span> sparkConf<span class=\"token operator\">:</span> SparkConf <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> SparkConf<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>setMaster<span class=\"token punctuation\">(</span><span class=\"token string\">\"local[*]\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>setAppName<span class=\"token punctuation\">(</span><span class=\"token string\">\"SparkApplication\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>      sc <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> SparkContext<span class=\"token punctuation\">(</span>sparkConf<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>      scLocal<span class=\"token punctuation\">.</span>set<span class=\"token punctuation\">(</span>sc<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    sc</pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>  <span class=\"token comment\">// 清除对象</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>  <span class=\"token keyword\">def</span> clean<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    getEnv<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>stop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token comment\">// 将共享内存中的数据清除</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    scLocal<span class=\"token punctuation\">.</span>remove<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h5 id=\"1212-propertiesutil\"><a class=\"anchor\" href=\"#1212-propertiesutil\">#</a> 1.2.1.2 PropertiesUtil</h5>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 动态获取连接的资源，将需要连接的资源配置文件放置在配置文件中，从配置文件中读取连接需要的资源，这样，当我们需要更换连接的资源时，只要修改配置文件即可。</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>这种思想是非常重要的，类似hadoop的RM，将资源和计算分离开，做资源的调度，扩展起来就非常的方便。</pre></td></tr></table></figure><figure class=\"highlight scala\"><figcaption data-lang=\"scala\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>atguigu<span class=\"token punctuation\">.</span>summer<span class=\"token punctuation\">.</span>framework<span class=\"token punctuation\">.</span>util</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span>ResourceBundle</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  * @Description</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  * *</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  * @author lianzhipeng</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  * @create 2020-05-23 23:37:44</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  */</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">object</span> PropertiesUtil <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token comment\">// 绑定配置文件</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token keyword\">val</span> summer<span class=\"token operator\">:</span> ResourceBundle <span class=\"token operator\">=</span> ResourceBundle<span class=\"token punctuation\">.</span>getBundle<span class=\"token punctuation\">(</span><span class=\"token string\">\"summers\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token keyword\">def</span> getValue<span class=\"token punctuation\">(</span>key<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">String</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token comment\">// 传入一个 key，返回一个 value</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    summer<span class=\"token punctuation\">.</span>getString<span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"122-core\"><a class=\"anchor\" href=\"#122-core\">#</a> 1.2.2 core</h4>\n<h5 id=\"1221-tapplication\"><a class=\"anchor\" href=\"#1221-tapplication\">#</a> 1.2.2.1 TApplication</h5>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 主程序，是个特质，只需要传递执行的逻辑，获取环境和关闭环境自动完成</span></pre></td></tr></table></figure><figure class=\"highlight scala\"><figcaption data-lang=\"scala\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>atguigu<span class=\"token punctuation\">.</span>summer<span class=\"token punctuation\">.</span>framework<span class=\"token punctuation\">.</span>core</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>net<span class=\"token punctuation\">.</span></span><span class=\"token punctuation\">&#123;</span>InetAddress<span class=\"token punctuation\">,</span> ServerSocket<span class=\"token punctuation\">,</span> Socket<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>atguigu<span class=\"token punctuation\">.</span>summer<span class=\"token punctuation\">.</span>framework<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token punctuation\">&#123;</span>EnvUtils<span class=\"token punctuation\">,</span> PropertiesUtil<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>spark<span class=\"token punctuation\">.</span></span><span class=\"token punctuation\">&#123;</span>SparkConf<span class=\"token punctuation\">,</span> SparkContext<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  * @Description</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  * *</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  * @author lianzhipeng</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  * @create 2020-05-22 19:33:39</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  */</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">trait</span> TApplication <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token keyword\">var</span> envdata<span class=\"token operator\">:</span> <span class=\"token builtin\">Any</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token comment\">// 第一步：初始化环境</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token keyword\">def</span> start<span class=\"token punctuation\">(</span>t<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>op<span class=\"token operator\">:</span> <span class=\"token keyword\">=></span> <span class=\"token builtin\">Unit</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>t <span class=\"token operator\">==</span> <span class=\"token string\">\"Socket\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>      envdata <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> Socket<span class=\"token punctuation\">(</span>PropertiesUtil<span class=\"token punctuation\">.</span>getValue<span class=\"token punctuation\">(</span><span class=\"token string\">\"serverhost\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token punctuation\">,</span> PropertiesUtil<span class=\"token punctuation\">.</span>getValue<span class=\"token punctuation\">(</span><span class=\"token string\">\"serverport\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>toInt<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>t <span class=\"token operator\">==</span> <span class=\"token string\">\"ServerSocket\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>      envdata <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> ServerSocket<span class=\"token punctuation\">(</span>PropertiesUtil<span class=\"token punctuation\">.</span>getValue<span class=\"token punctuation\">(</span><span class=\"token string\">\"serverport\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>toInt<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>t <span class=\"token operator\">==</span> <span class=\"token string\">\"Spark\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>      envdata <span class=\"token operator\">=</span> EnvUtils<span class=\"token punctuation\">.</span>getEnv<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token comment\">// 业务逻辑</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>      op</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>      <span class=\"token keyword\">case</span> ex<span class=\"token operator\">:</span> Exception <span class=\"token keyword\">=></span> println<span class=\"token punctuation\">(</span><span class=\"token string\">\"op执行失败，原因是：\"</span> <span class=\"token operator\">+</span> ex<span class=\"token punctuation\">.</span>getMessage<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token comment\">// 环境关闭</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>t <span class=\"token operator\">==</span> <span class=\"token string\">\"ServerSocket\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>      <span class=\"token keyword\">val</span> ServerSocket <span class=\"token operator\">=</span> envdata<span class=\"token punctuation\">.</span>asInstanceOf<span class=\"token punctuation\">[</span>ServerSocket<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>ServerSocket<span class=\"token punctuation\">.</span>isClosed<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        ServerSocket<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>t <span class=\"token operator\">==</span> <span class=\"token string\">\"Socket\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>      <span class=\"token keyword\">val</span> socket <span class=\"token operator\">=</span> envdata<span class=\"token punctuation\">.</span>asInstanceOf<span class=\"token punctuation\">[</span>Socket<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>socket<span class=\"token punctuation\">.</span>isClosed<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        socket<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>t <span class=\"token operator\">==</span> <span class=\"token string\">\"Spark\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>       EnvUtils<span class=\"token punctuation\">.</span>clean<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre></pre></td></tr><tr><td data-num=\"54\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h5 id=\"1222-tcontroller\"><a class=\"anchor\" href=\"#1222-tcontroller\">#</a> 1.2.2.2 TController</h5>\n<figure class=\"highlight scala\"><figcaption data-lang=\"scala\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>atguigu<span class=\"token punctuation\">.</span>summer<span class=\"token punctuation\">.</span>framework<span class=\"token punctuation\">.</span>core</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  * @Description 控制器，封装调度</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  **</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  * @author lianzhipeng</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  * @create 2020-06-08 21:52:39</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  */</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">trait</span> TController <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token comment\">// 执行控制</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token keyword\">def</span> execute<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token builtin\">Unit</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h5 id=\"1223-tservice\"><a class=\"anchor\" href=\"#1223-tservice\">#</a> 1.2.2.3 TService</h5>\n<figure class=\"highlight scala\"><figcaption data-lang=\"scala\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>atguigu<span class=\"token punctuation\">.</span>summer<span class=\"token punctuation\">.</span>framework<span class=\"token punctuation\">.</span>core</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  * @Description 服务，封装逻辑</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  **</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  * @author lianzhipeng</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  * @create 2020-06-08 21:53:31</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  */</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">trait</span> TService <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token comment\">// 数据分析</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token keyword\">def</span> analysis<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token builtin\">Any</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token comment\">// 数据分析</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token keyword\">def</span> analysis<span class=\"token punctuation\">(</span>data <span class=\"token operator\">:</span><span class=\"token builtin\">Any</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token builtin\">Any</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h5 id=\"1224-tdao\"><a class=\"anchor\" href=\"#1224-tdao\">#</a> 1.2.2.4 TDAO</h5>\n<figure class=\"highlight scala\"><figcaption data-lang=\"scala\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>atguigu<span class=\"token punctuation\">.</span>summer<span class=\"token punctuation\">.</span>framework<span class=\"token punctuation\">.</span>core</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>atguigu<span class=\"token punctuation\">.</span>summer<span class=\"token punctuation\">.</span>framework<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span>EnvUtils</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>spark<span class=\"token punctuation\">.</span>rdd<span class=\"token punctuation\">.</span></span>RDD</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  * @Description 数据访问对象，专门负责和关系型数据如 mysql 之间的交互</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  **</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  * @author lianzhipeng</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  * @create 2020-06-08 21:53:56</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  */</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">trait</span> TDAO <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token keyword\">def</span> readFile<span class=\"token punctuation\">(</span>path <span class=\"token operator\">:</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">val</span> fileRDD<span class=\"token operator\">:</span> RDD<span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> EnvUtils<span class=\"token punctuation\">.</span>getEnv<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>textFile<span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    fileRDD</pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"二-实战项目\"><a class=\"anchor\" href=\"#二-实战项目\">#</a> 二 、 实战项目</h2>\n<h3 id=\"21-项目思路\"><a class=\"anchor\" href=\"#21-项目思路\">#</a> 2.1 项目思路</h3>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 完成项目需求的步骤：</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token number\">1.</span> 分析原始数据的结构，包括数据的格式，数据的含义，数据之间的关系</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token number\">2.</span> 分析项目需求 <span class=\"token comment\">-- 非常关键</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>       a、 数据的输入是什么</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>       b、 数据的输出是什么</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token number\">3.</span> 步骤划分：</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>       a、根据原始数据的格式，朝着数据结果的输出一步一步的进行分解</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>       b、几大原则：</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>          缺什么，补什么；</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>          少什么，加什么，</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>          多什么，删什么。</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token number\">4.</span> 完成比完美更重要，先完成需求，再优化</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token number\">5.</span> 当出现的结果不是自己想要的时候，可以从后往前依次进行排查，排查的方式可以打印阶段计算结果，查看是否是自己想到的预期结果。 </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token number\">6.</span> 一般我们会将原始数据的字段进行封装成样例类，相当于数据有了结构，同时可以封装一些方法，并可以进行模式匹配，数据也富有了含义，便于理解</pre></td></tr></table></figure><h3 id=\"22-原始数据\"><a class=\"anchor\" href=\"#22-原始数据\">#</a> 2.2 原始数据</h3>\n<p>![image-20200610235857840](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saWFuLXpwLm9zcy1jbi1zaGVuemhlbi5hbGl5dW5jcy5jb20vcGlj\">https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic</span> GO/20200610235857.png)</p>\n<ul>\n<li>数据说明</li>\n</ul>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 上面的数据图是从数据文件中截取的一部分内容，表示为电商网站的用户行为数据，主要包含用户的 4 种行为：搜索，点击，下单，支付。数据规则如下：</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">1.</span> 数据文件中每行数据采用<span class=\"token string\">\"下划线\"</span>分隔数据</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">2.</span> 每一行数据表示用户的一次行为，这个行为只能是<span class=\"token number\">4</span>种行为的一种</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">3.</span> 如果搜索关键字为<span class=\"token boolean\">null</span><span class=\"token punctuation\">,</span>表示数据不是搜索数据</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">4.</span> 如果点击的品类ID和产品ID为<span class=\"token operator\">-</span><span class=\"token number\">1</span>，表示数据不是点击数据</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token number\">5.</span> 针对于下单行为，一次可以下单多个商品，所以品类ID和产品ID可以是多个，id之间采用逗号分隔，如果本次不是下单行为，则数据采用<span class=\"token boolean\">null</span>表示</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token number\">6.</span> 支付行为和下单行为类似</pre></td></tr></table></figure><ul>\n<li>详细字段说明：</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>编号</th>\n<th>字段名称</th>\n<th>字段类型</th>\n<th>字段含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>date</td>\n<td>String</td>\n<td>用户点击行为的日期</td>\n</tr>\n<tr>\n<td>2</td>\n<td>user_id</td>\n<td>String</td>\n<td>用户的 ID</td>\n</tr>\n<tr>\n<td>3</td>\n<td>session_id</td>\n<td>String</td>\n<td>Session 的 ID</td>\n</tr>\n<tr>\n<td>4</td>\n<td>page_id</td>\n<td>String</td>\n<td>某个页面的 ID</td>\n</tr>\n<tr>\n<td>5</td>\n<td>action_time</td>\n<td>String</td>\n<td>动作的时间点</td>\n</tr>\n<tr>\n<td>6</td>\n<td>search_keyword</td>\n<td>String</td>\n<td>用户搜索的关键词</td>\n</tr>\n<tr>\n<td>7</td>\n<td>click_category_id</td>\n<td>String</td>\n<td>某一个商品品类的 ID</td>\n</tr>\n<tr>\n<td>8</td>\n<td>click_product_id</td>\n<td>String</td>\n<td>某一个商品的 ID</td>\n</tr>\n<tr>\n<td>9</td>\n<td>order_category_ids</td>\n<td>String</td>\n<td>一次订单中所有品类的 ID 集合</td>\n</tr>\n<tr>\n<td>10</td>\n<td>order_product_ids</td>\n<td>String</td>\n<td>一次订单中所有商品的 ID 集合</td>\n</tr>\n<tr>\n<td>11</td>\n<td>pay_category_ids</td>\n<td>String</td>\n<td>一次支付中所有品类的 ID 集合</td>\n</tr>\n<tr>\n<td>12</td>\n<td>pay_product_ids</td>\n<td>String</td>\n<td>一次支付中所有商品的 ID 集合</td>\n</tr>\n<tr>\n<td>13</td>\n<td>city_id</td>\n<td>String</td>\n<td>城市 id</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"23-准备样例类\"><a class=\"anchor\" href=\"#23-准备样例类\">#</a> 2.3 准备样例类</h3>\n<figure class=\"highlight scala\"><figcaption data-lang=\"scala\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 用户访问动作表</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">case</span> <span class=\"token keyword\">class</span> UserVisitAction<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    date<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span><span class=\"token comment\">// 用户点击行为的日期</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    user_id<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span><span class=\"token comment\">// 用户的 ID</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    session_id<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span><span class=\"token comment\">//Session 的 ID</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    page_id<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span><span class=\"token comment\">// 某个页面的 ID</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    action_time<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span><span class=\"token comment\">// 动作的时间点</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    search_keyword<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span><span class=\"token comment\">// 用户搜索的关键词</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    click_category_id<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span><span class=\"token comment\">// 某一个商品品类的 ID</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    click_product_id<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span><span class=\"token comment\">// 某一个商品的 ID</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    order_category_ids<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span><span class=\"token comment\">// 一次订单中所有品类的 ID 集合</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    order_product_ids<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span><span class=\"token comment\">// 一次订单中所有商品的 ID 集合</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    pay_category_ids<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span><span class=\"token comment\">// 一次支付中所有品类的 ID 集合</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    pay_product_ids<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span><span class=\"token comment\">// 一次支付中所有商品的 ID 集合</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    city_id<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span> <span class=\"token comment\">// 城市 id</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"24-需求1top10热门品类\"><a class=\"anchor\" href=\"#24-需求1top10热门品类\">#</a> 2.4 需求 1：Top10 热门品类</h3>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 需求具体说明</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">1.</span> 分别统计每个品类点击的次数，下单的次数和支付的次数：</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>（品类，点击总数）（品类，下单总数）（品类，支付总数）</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">2.</span> 先按照点击数排名，靠前的就排名高；如果点击数相同，再比较下单数；下单数再相同，就比较支付数。</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">3.</span> 取Top10</pre></td></tr></table></figure><h4 id=\"241-数据结构分析\"><a class=\"anchor\" href=\"#241-数据结构分析\">#</a> 2.4.1 数据结构分析</h4>\n<figure class=\"highlight scala\"><figcaption data-lang=\"scala\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">--</span> 原始数据：    </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">//2019-07-27_   ==> 日期     0</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 73_          ==> 用户 ID   1</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">//d79508b4-66bf-4410-a5bb-f67a8831610f_  ==> 会话 ID  2</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 45_          ==> 页面 ID   3</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 2019-07-27 19:47:55_   ==> 动作时间  4</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">//null_        ==> 搜索     5</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 9_           ==> 点击品类 ID，不是则为 - 1     6</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">// 51_          ==> 点击产品 ID，不是则为 - 1     7</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">//null_        ==> 下单品类 ID，不是则为 null   8</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">//null_        ==> 下单产品 ID，不是则为 null   9</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">//null_        ==> 支付品类 ID，不是则为 null   10</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">//null_        ==> 支付产品 ID ，不是则为 null  11</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\">// 6            ==> 城市 ID，不是则为 null       12</span></pre></td></tr></table></figure><h4 id=\"242-数据结果分析\"><a class=\"anchor\" href=\"#242-数据结果分析\">#</a> 2.4.2 数据结果分析</h4>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 最后结果：</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">1.</span> <span class=\"token punctuation\">(</span>品类，<span class=\"token punctuation\">(</span>clickCount<span class=\"token punctuation\">,</span>orderCont<span class=\"token punctuation\">,</span>payCount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">2.</span>  多个品类之间，按照clickCount<span class=\"token punctuation\">,</span>orderCont<span class=\"token punctuation\">,</span>payCount的大小依次进行排序，然后取排名的前<span class=\"token number\">10</span>名。</pre></td></tr></table></figure><h4 id=\"245-实现步骤\"><a class=\"anchor\" href=\"#245-实现步骤\">#</a> 2.4.5 实现步骤</h4>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 具体实现步骤</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">1.</span> 数据进行切分，根据每条数据是哪种行为，将数据转换为：</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token punctuation\">(</span>品类，<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> : 点击行为</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token punctuation\">(</span>品类，<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> : 下单行为</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token punctuation\">(</span>品类，<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> : 支付行为</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   </pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token number\">2.</span> 按照品类进行分组聚合:</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   品类，<span class=\"token punctuation\">(</span>clickCount<span class=\"token punctuation\">,</span>orderCont<span class=\"token punctuation\">,</span>payCount<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   </pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token number\">3.</span> 排序取前<span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">-- 数据来龙去脉分析清楚以后，写代码都是分分钟的事情</span></pre></td></tr></table></figure><h4 id=\"226-代码实现\"><a class=\"anchor\" href=\"#226-代码实现\">#</a> 2.2.6 代码实现</h4>\n<p>![image-20200611014414036](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saWFuLXpwLm9zcy1jbi1zaGVuemhlbi5hbGl5dW5jcy5jb20vcGlj\">https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic</span> GO/20200611014414.png)</p>\n<h5 id=\"2261-bean\"><a class=\"anchor\" href=\"#2261-bean\">#</a> 2.2.6.1 bean</h5>\n<figure class=\"highlight scala\"><figcaption data-lang=\"scala\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>atguigu<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span>hotcategorytop10review</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  * @Description</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  **</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  * @author lianzhipeng</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  * @create 2020-06-11 0:48:41</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  */</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">object</span> bean <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token comment\">// 用户访问动作表</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token keyword\">case</span> <span class=\"token keyword\">class</span> UserVisitAction<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                              date<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span><span class=\"token comment\">// 用户点击行为的日期</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                              user_id<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span><span class=\"token comment\">// 用户的 ID</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                              session_id<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span><span class=\"token comment\">//Session 的 ID</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                              page_id<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span><span class=\"token comment\">// 某个页面的 ID</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                              action_time<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span><span class=\"token comment\">// 动作的时间点</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                              search_keyword<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span><span class=\"token comment\">// 用户搜索的关键词</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                              click_category_id<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span><span class=\"token comment\">// 某一个商品品类的 ID</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                              click_product_id<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span><span class=\"token comment\">// 某一个商品的 ID</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                              order_category_ids<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span><span class=\"token comment\">// 一次订单中所有品类的 ID 集合</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                              order_product_ids<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span><span class=\"token comment\">// 一次订单中所有商品的 ID 集合</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                              pay_category_ids<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span><span class=\"token comment\">// 一次支付中所有品类的 ID 集合</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                              pay_product_ids<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span><span class=\"token comment\">// 一次支付中所有商品的 ID 集合</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                              city_id<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span> <span class=\"token comment\">// 城市 id</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                            <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h5 id=\"2262-hotcategorytop10applicationreview\"><a class=\"anchor\" href=\"#2262-hotcategorytop10applicationreview\">#</a> 2.2.6.2 HotCategoryTOP10ApplicationReview</h5>\n<figure class=\"highlight scala\"><figcaption data-lang=\"scala\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>atguigu<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span>hotcategorytop10review<span class=\"token punctuation\">.</span>application</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>atguigu<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span>hotcategorytop10review<span class=\"token punctuation\">.</span>controller<span class=\"token punctuation\">.</span></span>HotCategoryTop10ControllerReview</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>atguigu<span class=\"token punctuation\">.</span>summer<span class=\"token punctuation\">.</span>framework<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span></span>TApplication</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  * @Description 应用程序启动层</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  **</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  * @author lianzhipeng</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  * @create 2020-06-11 0:35:53</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  */</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">object</span> HotCategoryTOP10ApplicationReview  <span class=\"token keyword\">extends</span> App <span class=\"token keyword\">with</span>   TApplication<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  start<span class=\"token punctuation\">(</span><span class=\"token string\">\"Spark\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">val</span> hotCategoryTop10ControllerReview <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> HotCategoryTop10ControllerReview</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    hotCategoryTop10ControllerReview<span class=\"token punctuation\">.</span>execute<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h5 id=\"2263-hotcategorytop10controllerreview\"><a class=\"anchor\" href=\"#2263-hotcategorytop10controllerreview\">#</a> 2.2.6.3 HotCategoryTop10ControllerReview</h5>\n<figure class=\"highlight scala\"><figcaption data-lang=\"scala\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>atguigu<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span>hotcategorytop10review<span class=\"token punctuation\">.</span>controller</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>atguigu<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span>hotcategorytop10review<span class=\"token punctuation\">.</span>service<span class=\"token punctuation\">.</span></span>HotCategoryTop10ServiceReview</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>atguigu<span class=\"token punctuation\">.</span>summer<span class=\"token punctuation\">.</span>framework<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span></span>TController</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  * @Description  控制层</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  **</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  * @author lianzhipeng</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  * @create 2020-06-11 0:36:40</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  */</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">class</span> HotCategoryTop10ControllerReview <span class=\"token keyword\">extends</span>  TController<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> hotCategoryTop10ServiceReview <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> HotCategoryTop10ServiceReview</pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token keyword\">override</span> <span class=\"token keyword\">def</span> execute<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Unit</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">val</span> result<span class=\"token operator\">:</span> Array<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> hotCategoryTop10ServiceReview<span class=\"token punctuation\">.</span>analysis<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    result<span class=\"token punctuation\">.</span>foreach<span class=\"token punctuation\">(</span>println<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h5 id=\"2264-hotcategorytop10daoreview\"><a class=\"anchor\" href=\"#2264-hotcategorytop10daoreview\">#</a> 2.2.6.4 HotCategoryTop10DAOReview</h5>\n<figure class=\"highlight scala\"><figcaption data-lang=\"scala\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>atguigu<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span>hotcategorytop10review<span class=\"token punctuation\">.</span>dao</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>atguigu<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span>hotcategorytop10review<span class=\"token punctuation\">.</span>bean<span class=\"token punctuation\">.</span></span>UserVisitAction</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>atguigu<span class=\"token punctuation\">.</span>summer<span class=\"token punctuation\">.</span>framework<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span></span>TDAO</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>spark<span class=\"token punctuation\">.</span>rdd<span class=\"token punctuation\">.</span></span>RDD</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  * @Description  资源连接层</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  * *</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  * @author lianzhipeng</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  * @create 2020-06-11 0:38:25</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  */</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">class</span> HotCategoryTop10DAOReview <span class=\"token keyword\">extends</span> TDAO <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token keyword\">def</span> getUserVisitAction<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">// 读取路径下的数据</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">val</span> fileRDD<span class=\"token operator\">:</span> RDD<span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> readFile<span class=\"token punctuation\">(</span><span class=\"token string\">\"input/user_visit_action.txt\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token comment\">// 将数据封装对象</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    fileRDD<span class=\"token punctuation\">.</span>map<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>      data <span class=\"token keyword\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">val</span> datasArray<span class=\"token operator\">:</span> Array<span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">\"_\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        UserVisitAction<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>          datasArray<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>          datasArray<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>          datasArray<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>          datasArray<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>          datasArray<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>          datasArray<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>          datasArray<span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>          datasArray<span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>          datasArray<span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>          datasArray<span class=\"token punctuation\">(</span><span class=\"token number\">9</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>          datasArray<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>          datasArray<span class=\"token punctuation\">(</span><span class=\"token number\">11</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>          datasArray<span class=\"token punctuation\">(</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h5 id=\"2265-hotcategorytop10servicereview\"><a class=\"anchor\" href=\"#2265-hotcategorytop10servicereview\">#</a> 2.2.6.5 HotCategoryTop10ServiceReview</h5>\n<figure class=\"highlight scala\"><figcaption data-lang=\"scala\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>atguigu<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span>hotcategorytop10review<span class=\"token punctuation\">.</span>service</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>atguigu<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span>hotcategorytop10review<span class=\"token punctuation\">.</span>bean</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>atguigu<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span>hotcategorytop10review<span class=\"token punctuation\">.</span>dao<span class=\"token punctuation\">.</span></span>HotCategoryTop10DAOReview</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>atguigu<span class=\"token punctuation\">.</span>summer<span class=\"token punctuation\">.</span>framework<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span></span>TService</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>spark<span class=\"token punctuation\">.</span>rdd<span class=\"token punctuation\">.</span></span>RDD</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  * @Description  计算逻辑层</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  **</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  * @author lianzhipeng</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  * @create 2020-06-11 0:37:41</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  */</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">class</span> HotCategoryTop10ServiceReview  <span class=\"token keyword\">extends</span>  TService<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> hotCategoryTop10DAOReview <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> HotCategoryTop10DAOReview</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token keyword\">override</span> <span class=\"token keyword\">def</span> analysis<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token comment\">// 获取数据，数据已经被封装成一个一个的对象</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">val</span> UserRDD<span class=\"token operator\">:</span> RDD<span class=\"token punctuation\">[</span>bean<span class=\"token punctuation\">.</span>UserVisitAction<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> hotCategoryTop10DAOReview<span class=\"token punctuation\">.</span>getUserVisitAction<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token comment\">//1. 数据进行切分，根据每条数据是哪种行为，将数据转换为：</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token comment\">//   (品类，(1,0,0)) : 点击行为</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token comment\">//   (品类，(0,1,0)) : 下单行为</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token comment\">//   (品类，(0,0,1)) : 支付行为</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">val</span> cagegoryToOneRDD<span class=\"token operator\">:</span> RDD<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> UserRDD<span class=\"token punctuation\">.</span>flatMap<span class=\"token punctuation\">(</span>UserBean <span class=\"token keyword\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>UserBean<span class=\"token punctuation\">.</span>click_category_id <span class=\"token operator\">!=</span> <span class=\"token string\">\"-1\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        List<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>UserBean<span class=\"token punctuation\">.</span>click_category_id<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>UserBean<span class=\"token punctuation\">.</span>order_category_ids <span class=\"token operator\">!=</span> <span class=\"token string\">\"null\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token keyword\">val</span> ids<span class=\"token operator\">:</span> Array<span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> UserBean<span class=\"token punctuation\">.</span>order_category_ids<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        ids<span class=\"token punctuation\">.</span>map<span class=\"token punctuation\">(</span>id <span class=\"token keyword\">=></span> <span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>UserBean<span class=\"token punctuation\">.</span>pay_category_ids <span class=\"token operator\">!=</span> <span class=\"token string\">\"null\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token keyword\">val</span> ids<span class=\"token operator\">:</span> Array<span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> UserBean<span class=\"token punctuation\">.</span>pay_category_ids<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        ids<span class=\"token punctuation\">.</span>map<span class=\"token punctuation\">(</span>id <span class=\"token keyword\">=></span> <span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        Nil</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token comment\">//2. 按照品类进行分组聚合:</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token comment\">//   品类，(clickCount,orderCont,payCount)</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token keyword\">val</span> categorySumRDD<span class=\"token operator\">:</span> RDD<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> cagegoryToOneRDD<span class=\"token punctuation\">.</span>reduceByKey <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>      <span class=\"token keyword\">case</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>click<span class=\"token punctuation\">,</span> order<span class=\"token punctuation\">,</span> pay<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>click1<span class=\"token punctuation\">,</span> order1<span class=\"token punctuation\">,</span> pay1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        <span class=\"token punctuation\">(</span>click <span class=\"token operator\">+</span> click1<span class=\"token punctuation\">,</span> order <span class=\"token operator\">+</span> order1<span class=\"token punctuation\">,</span> pay <span class=\"token operator\">+</span> pay1<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    <span class=\"token comment\">//3. 排序取前 10</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    <span class=\"token keyword\">val</span> result<span class=\"token operator\">:</span> Array<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> categorySumRDD<span class=\"token punctuation\">.</span>sortBy<span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">.</span>_2<span class=\"token punctuation\">,</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>take<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    result</pre></td></tr><tr><td data-num=\"64\"></td><td><pre></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>  <span class=\"token keyword\">override</span> <span class=\"token keyword\">def</span> analysis<span class=\"token punctuation\">(</span>data<span class=\"token operator\">:</span> <span class=\"token builtin\">Any</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Any</span> <span class=\"token operator\">=</span> <span class=\"token operator\">?</span><span class=\"token operator\">?</span><span class=\"token operator\">?</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>计算结果如下</li>\n</ul>\n<p>![](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saWFuLXpwLm9zcy1jbi1zaGVuemhlbi5hbGl5dW5jcy5jb20vcGlj\">https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic</span> GO/20200611014759.png)</p>\n<h4 id=\"227-优化使用累加器\"><a class=\"anchor\" href=\"#227-优化使用累加器\">#</a> 2.2.7 优化：使用累加器</h4>\n<h5 id=\"2271-更新bean\"><a class=\"anchor\" href=\"#2271-更新bean\">#</a> 2.2.7.1 更新 bean</h5>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 添加新的样例类 HotCagetoryBean</span></pre></td></tr></table></figure><figure class=\"highlight scala\"><figcaption data-lang=\"scala\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>atguigu<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span>hotcategorytop10review</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  * @Description</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  **</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  * @author lianzhipeng</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  * @create 2020-06-11 0:48:41</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  */</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">object</span> bean <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token comment\">// 用户访问动作表</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token keyword\">case</span> <span class=\"token keyword\">class</span> HotCagetoryBean<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                              category_id<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span><span class=\"token comment\">// 某一个商品品类的 ID</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                              <span class=\"token keyword\">var</span> clickCount<span class=\"token operator\">:</span> <span class=\"token builtin\">Long</span><span class=\"token punctuation\">,</span><span class=\"token comment\">// 点击的次数</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                              <span class=\"token keyword\">var</span> orderCount<span class=\"token operator\">:</span> <span class=\"token builtin\">Long</span><span class=\"token punctuation\">,</span><span class=\"token comment\">// 下单的次数</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                              <span class=\"token keyword\">var</span> payCount<span class=\"token operator\">:</span> <span class=\"token builtin\">Long</span><span class=\"token punctuation\">,</span><span class=\"token comment\">// 支付的次数</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                            <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token comment\">// 用户访问动作表</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token keyword\">case</span> <span class=\"token keyword\">class</span> UserVisitAction<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                              date<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span><span class=\"token comment\">// 用户点击行为的日期</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                              user_id<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span><span class=\"token comment\">// 用户的 ID</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                              session_id<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span><span class=\"token comment\">//Session 的 ID</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                              page_id<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span><span class=\"token comment\">// 某个页面的 ID</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                              action_time<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span><span class=\"token comment\">// 动作的时间点</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                              search_keyword<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span><span class=\"token comment\">// 用户搜索的关键词</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                              click_category_id<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span><span class=\"token comment\">// 某一个商品品类的 ID</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                              click_product_id<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span><span class=\"token comment\">// 某一个商品的 ID</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                              order_category_ids<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span><span class=\"token comment\">// 一次订单中所有品类的 ID 集合</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                              order_product_ids<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span><span class=\"token comment\">// 一次订单中所有商品的 ID 集合</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                              pay_category_ids<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span><span class=\"token comment\">// 一次支付中所有品类的 ID 集合</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                              pay_product_ids<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span><span class=\"token comment\">// 一次支付中所有商品的 ID 集合</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                              city_id<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span> <span class=\"token comment\">// 城市 id</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                            <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h5 id=\"2272-累加器-hotcategorytop10accumulatorreview\"><a class=\"anchor\" href=\"#2272-累加器-hotcategorytop10accumulatorreview\">#</a> 2.2.7.2 累加器 ： HotCategoryTop10AccumulatorReview</h5>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 因为是统计出现的次数，然后进行累加，所以我们可以使用累加器的方式，从而减少 shuffle 的阶段。</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">-- 累加器重点</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token number\">1.</span> 明确编程累加器的步骤，声明类加器，注册累加器，使用累加器，获取累加器的值</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token number\">2.</span> 明确<span class=\"token number\">6</span>个重写方法的作用</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token number\">3.</span> 明确累加器输入的值和输出值的数据，从而必须知道输入值的类型和输出值的类型 </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">-- 总结：</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  在写累加器的时候出现如下情况：</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token number\">1.</span> 更新<span class=\"token keyword\">add</span>方法时，数据累加出现错误，最后执行结果为<span class=\"token number\">0</span>，发现是</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>     bean<span class=\"token punctuation\">.</span>clickCount <span class=\"token operator\">+</span><span class=\"token operator\">=</span> <span class=\"token number\">1</span> 写成了 bean<span class=\"token punctuation\">.</span>clickCount <span class=\"token operator\">+</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token number\">2.</span> 进行数据累加时，发现通不过，原来的是封装的HotCagetoryBean，属性均是val类型，不可变，需改为var类型</pre></td></tr></table></figure><figure class=\"highlight scala\"><figcaption data-lang=\"scala\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>atguigu<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span>hotcategorytop10review<span class=\"token punctuation\">.</span>helper</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>atguigu<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span>hotcategorytop10review<span class=\"token punctuation\">.</span>bean<span class=\"token punctuation\">.</span></span>HotCagetoryBean</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>spark<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span>AccumulatorV2</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">scala<span class=\"token punctuation\">.</span>collection<span class=\"token punctuation\">.</span>mutable</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  * @Description</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  **</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  * @author lianzhipeng</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  * @create 2020-06-11 1:52:29</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  */</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">class</span> HotCategoryTop10AccumulatorReview  <span class=\"token keyword\">extends</span> AccumulatorV2<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>mutable<span class=\"token punctuation\">.</span>Map<span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span>HotCagetoryBean<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  in: 品类，行为</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  out: 品类，HotCagetoryBean</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>   */</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> hotCategoryMap <span class=\"token operator\">=</span> mutable<span class=\"token punctuation\">.</span>Map<span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span>HotCagetoryBean<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token keyword\">override</span> <span class=\"token keyword\">def</span> isZero<span class=\"token operator\">:</span> <span class=\"token builtin\">Boolean</span> <span class=\"token operator\">=</span> hotCategoryMap<span class=\"token punctuation\">.</span>isEmpty</pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  <span class=\"token keyword\">override</span> <span class=\"token keyword\">def</span> copy<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> AccumulatorV2<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> mutable<span class=\"token punctuation\">.</span>Map<span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> HotCagetoryBean<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">new</span> HotCategoryTop10AccumulatorReview</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  <span class=\"token keyword\">override</span> <span class=\"token keyword\">def</span> reset<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Unit</span> <span class=\"token operator\">=</span> hotCategoryMap<span class=\"token punctuation\">.</span>clear<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>  <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>  add 操作是在同一个 executor 中的操作，将 executor 中的所有数据一个一个进行累加，然后将累加以后的计算结果返回给</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>  Driver。</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>   */</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>  <span class=\"token keyword\">override</span> <span class=\"token keyword\">def</span> add<span class=\"token punctuation\">(</span>v<span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token keyword\">val</span> category<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span> <span class=\"token operator\">=</span> v<span class=\"token punctuation\">.</span>_1</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token keyword\">val</span> action<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span> <span class=\"token operator\">=</span> v<span class=\"token punctuation\">.</span>_2</pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token comment\">// 判断当前的品类在当前的集合中是否存在，如果存在，value，如果没有，则创建对应的 value</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token keyword\">val</span> bean<span class=\"token operator\">:</span> HotCagetoryBean <span class=\"token operator\">=</span> hotCategoryMap<span class=\"token punctuation\">.</span>getOrElse<span class=\"token punctuation\">(</span>category<span class=\"token punctuation\">,</span>HotCagetoryBean<span class=\"token punctuation\">(</span>category<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token comment\">// 根据行为的不同，更新当前累加器的值</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    action <span class=\"token keyword\">match</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>      <span class=\"token keyword\">case</span> <span class=\"token string\">\"click\"</span> <span class=\"token keyword\">=></span> bean<span class=\"token punctuation\">.</span>clickCount <span class=\"token operator\">+=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>      <span class=\"token keyword\">case</span> <span class=\"token string\">\"order\"</span> <span class=\"token keyword\">=></span> bean<span class=\"token punctuation\">.</span>orderCount <span class=\"token operator\">+=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>      <span class=\"token keyword\">case</span> <span class=\"token string\">\"pay\"</span>   <span class=\"token keyword\">=></span> bean<span class=\"token punctuation\">.</span>payCount <span class=\"token operator\">+=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>      <span class=\"token keyword\">case</span> _ <span class=\"token keyword\">=></span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token comment\">// 更新当前 cagetory 的 value 值</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    hotCategoryMap<span class=\"token punctuation\">(</span>category<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> bean</pre></td></tr><tr><td data-num=\"54\"></td><td><pre></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>  <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"58\"></td><td><pre>  merge 操作是在 driver 端完成，所有的 executor 将自己的计算结果，也就是累加器返回给 driver，那么在 driver 端</pre></td></tr><tr><td data-num=\"59\"></td><td><pre>  就会多个累加器，此方法就是实现在 driver 将累加器进行两两合并，得到最后的结果</pre></td></tr><tr><td data-num=\"60\"></td><td><pre>   */</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>  <span class=\"token keyword\">override</span> <span class=\"token keyword\">def</span> merge<span class=\"token punctuation\">(</span>other<span class=\"token operator\">:</span> AccumulatorV2<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> mutable<span class=\"token punctuation\">.</span>Map<span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> HotCagetoryBean<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    other<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">.</span>foreach<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>      <span class=\"token keyword\">case</span> <span class=\"token punctuation\">(</span>category<span class=\"token punctuation\">,</span>bean<span class=\"token punctuation\">)</span> <span class=\"token keyword\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>        <span class=\"token keyword\">val</span> value<span class=\"token operator\">:</span> HotCagetoryBean <span class=\"token operator\">=</span> hotCategoryMap<span class=\"token punctuation\">.</span>getOrElse<span class=\"token punctuation\">(</span>category<span class=\"token punctuation\">,</span>HotCagetoryBean<span class=\"token punctuation\">(</span>category<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>        value<span class=\"token punctuation\">.</span>clickCount <span class=\"token operator\">+=</span> bean<span class=\"token punctuation\">.</span>clickCount</pre></td></tr><tr><td data-num=\"69\"></td><td><pre>        value<span class=\"token punctuation\">.</span>orderCount <span class=\"token operator\">+=</span> bean<span class=\"token punctuation\">.</span>orderCount</pre></td></tr><tr><td data-num=\"70\"></td><td><pre>        value<span class=\"token punctuation\">.</span>payCount <span class=\"token operator\">+=</span> bean<span class=\"token punctuation\">.</span>payCount</pre></td></tr><tr><td data-num=\"71\"></td><td><pre></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>        hotCategoryMap<span class=\"token punctuation\">(</span>category<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> value</pre></td></tr><tr><td data-num=\"73\"></td><td><pre></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>  <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"80\"></td><td><pre>  返回累加器的值</pre></td></tr><tr><td data-num=\"81\"></td><td><pre>   */</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>  <span class=\"token keyword\">override</span> <span class=\"token keyword\">def</span> value<span class=\"token operator\">:</span> mutable<span class=\"token punctuation\">.</span>Map<span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> HotCagetoryBean<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> hotCategoryMap</pre></td></tr><tr><td data-num=\"83\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h5 id=\"2273-更新hotcategorytop10servicereview\"><a class=\"anchor\" href=\"#2273-更新hotcategorytop10servicereview\">#</a> 2.2.7.3 更新 HotCategoryTop10ServiceReview</h5>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 总结：</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token number\">1.</span> 在进行累加器处理时，使用了map算子，错误，应该使用foreach就行，挨个遍历数据</pre></td></tr></table></figure><figure class=\"highlight scala\"><figcaption data-lang=\"scala\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>atguigu<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span>hotcategorytop10review<span class=\"token punctuation\">.</span>service</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>atguigu<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span>hotcategorytop10review<span class=\"token punctuation\">.</span>bean<span class=\"token punctuation\">.</span></span>HotCagetoryBean</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>atguigu<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span>hotcategorytop10review<span class=\"token punctuation\">.</span>dao<span class=\"token punctuation\">.</span></span>HotCategoryTop10DAOReview</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>atguigu<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span>hotcategorytop10review<span class=\"token punctuation\">.</span>helper<span class=\"token punctuation\">.</span></span>HotCategoryTop10AccumulatorReview</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>atguigu<span class=\"token punctuation\">.</span>summer<span class=\"token punctuation\">.</span>framework<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span></span>TService</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>atguigu<span class=\"token punctuation\">.</span>summer<span class=\"token punctuation\">.</span>framework<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span>EnvUtils</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>spark<span class=\"token punctuation\">.</span>rdd<span class=\"token punctuation\">.</span></span>RDD</pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">scala<span class=\"token punctuation\">.</span>collection<span class=\"token punctuation\">.</span>mutable</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  * @Description</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  **</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  * @author lianzhipeng</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  * @create 2020-06-11 0:37:41</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  */</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">class</span> HotCategoryTop10ServiceReview  <span class=\"token keyword\">extends</span>  TService<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> hotCategoryTop10DAOReview <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> HotCategoryTop10DAOReview</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token keyword\">override</span> <span class=\"token keyword\">def</span> analysis<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token comment\">// 1. 获取数据</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre> <span class=\"token keyword\">val</span> fileRDD<span class=\"token operator\">:</span> RDD<span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> hotCategoryTop10DAOReview<span class=\"token punctuation\">.</span>readFile<span class=\"token punctuation\">(</span><span class=\"token string\">\"input/user_visit_action.txt\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token comment\">// 2. 创建累加器</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">val</span> acc <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> HotCategoryTop10AccumulatorReview</pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token comment\">// 3. 注册累加器</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    EnvUtils<span class=\"token punctuation\">.</span>getEnv<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>register<span class=\"token punctuation\">(</span>acc<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>       fileRDD<span class=\"token punctuation\">.</span>foreach<span class=\"token punctuation\">(</span>data <span class=\"token keyword\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>      <span class=\"token keyword\">val</span> datas<span class=\"token operator\">:</span> Array<span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">\"_\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>datas<span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token string\">\"-1\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        acc<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span>datas<span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"click\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>datas<span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span>  <span class=\"token operator\">!=</span> <span class=\"token string\">\"null\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token keyword\">val</span> ids<span class=\"token operator\">:</span> Array<span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span>datas<span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        ids<span class=\"token punctuation\">.</span>foreach<span class=\"token punctuation\">(</span>id <span class=\"token keyword\">=></span> acc<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span><span class=\"token string\">\"order\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>datas<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>  <span class=\"token operator\">!=</span> <span class=\"token string\">\"null\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token keyword\">val</span> ids<span class=\"token operator\">:</span> Array<span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span>datas<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        ids<span class=\"token punctuation\">.</span>foreach<span class=\"token punctuation\">(</span>id <span class=\"token keyword\">=></span> acc<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span><span class=\"token string\">\"pay\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token comment\">//3. 获取累加器的值，排序取前 10</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token keyword\">val</span> HotCagetoryMap<span class=\"token operator\">:</span> mutable<span class=\"token punctuation\">.</span>Map<span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> HotCagetoryBean<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> acc<span class=\"token punctuation\">.</span>value</pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token comment\">// 4. 排序取前 10</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token keyword\">val</span> reslut<span class=\"token operator\">:</span> List<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">Long</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Long</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Long</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> HotCagetoryMap<span class=\"token punctuation\">.</span>map <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>      <span class=\"token keyword\">case</span> <span class=\"token punctuation\">(</span>category<span class=\"token punctuation\">,</span> bean<span class=\"token punctuation\">)</span> <span class=\"token keyword\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>        <span class=\"token punctuation\">(</span>category<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>bean<span class=\"token punctuation\">.</span>clickCount<span class=\"token punctuation\">,</span> bean<span class=\"token punctuation\">.</span>orderCount<span class=\"token punctuation\">,</span> bean<span class=\"token punctuation\">.</span>payCount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">.</span>toList<span class=\"token punctuation\">.</span>sortBy<span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">.</span>_2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>Ordering<span class=\"token punctuation\">.</span>Tuple3<span class=\"token punctuation\">(</span>Ordering<span class=\"token punctuation\">.</span><span class=\"token builtin\">Long</span><span class=\"token punctuation\">.</span>reverse<span class=\"token punctuation\">,</span> Ordering<span class=\"token punctuation\">.</span><span class=\"token builtin\">Long</span><span class=\"token punctuation\">.</span>reverse<span class=\"token punctuation\">,</span> Ordering<span class=\"token punctuation\">.</span><span class=\"token builtin\">Long</span><span class=\"token punctuation\">.</span>reverse<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>      <span class=\"token punctuation\">.</span>take<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>    reslut</pre></td></tr><tr><td data-num=\"67\"></td><td><pre></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>  <span class=\"token keyword\">override</span> <span class=\"token keyword\">def</span> analysis<span class=\"token punctuation\">(</span>data<span class=\"token operator\">:</span> <span class=\"token builtin\">Any</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Any</span> <span class=\"token operator\">=</span> <span class=\"token operator\">?</span><span class=\"token operator\">?</span><span class=\"token operator\">?</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h5 id=\"2274-其余结构不变\"><a class=\"anchor\" href=\"#2274-其余结构不变\">#</a> 2.2.7.4 其余结构不变</h5>\n<h5 id=\"2275-运行结果\"><a class=\"anchor\" href=\"#2275-运行结果\">#</a> 2.2.7.5 运行结果</h5>\n<p>![image-20200611094610570](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saWFuLXpwLm9zcy1jbi1zaGVuemhlbi5hbGl5dW5jcy5jb20vcGlj\">https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic</span> GO/20200611094610.png)</p>\n<h4 id=\"228-需求1总结\"><a class=\"anchor\" href=\"#228-需求1总结\">#</a> 2.2.8 需求 1 总结</h4>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 总结：</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>在写累加器的时候出现如下情况：</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token number\">1.</span> 在进行累加器处理时，使用了map算子，错误，应该使用foreach就行，挨个遍历数据</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token number\">2.</span> 更新<span class=\"token keyword\">add</span>方法时，数据累加出现错误，最后执行结果为<span class=\"token number\">0</span>，发现是</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>     bean<span class=\"token punctuation\">.</span>clickCount <span class=\"token operator\">+</span><span class=\"token operator\">=</span> <span class=\"token number\">1</span> 写成了 bean<span class=\"token punctuation\">.</span>clickCount <span class=\"token operator\">+</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token number\">3.</span> 进行数据累加时，发现通不过，原来的是封装的HotCagetoryBean，属性均是val类型，不可变，需改为var类型</pre></td></tr></table></figure><h3 id=\"25-需求2top10热门品类中每个品类的top10活跃点击session统计\"><a class=\"anchor\" href=\"#25-需求2top10热门品类中每个品类的top10活跃点击session统计\">#</a> 2.5  需求 2：Top10 热门品类中每个品类的 Top10 活跃点击 Session 统计</h3>\n<h4 id=\"251-数据结构\"><a class=\"anchor\" href=\"#251-数据结构\">#</a> 2.5.1 数据结构</h4>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 需求 1 的计算结果</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token number\">15</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token number\">6120</span><span class=\"token punctuation\">,</span><span class=\"token number\">1672</span><span class=\"token punctuation\">,</span><span class=\"token number\">1259</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token number\">6119</span><span class=\"token punctuation\">,</span><span class=\"token number\">1767</span><span class=\"token punctuation\">,</span><span class=\"token number\">1196</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token number\">6098</span><span class=\"token punctuation\">,</span><span class=\"token number\">1776</span><span class=\"token punctuation\">,</span><span class=\"token number\">1244</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token number\">12</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token number\">6095</span><span class=\"token punctuation\">,</span><span class=\"token number\">1740</span><span class=\"token punctuation\">,</span><span class=\"token number\">1218</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token number\">11</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token number\">6093</span><span class=\"token punctuation\">,</span><span class=\"token number\">1781</span><span class=\"token punctuation\">,</span><span class=\"token number\">1202</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token number\">17</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token number\">6079</span><span class=\"token punctuation\">,</span><span class=\"token number\">1752</span><span class=\"token punctuation\">,</span><span class=\"token number\">1231</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token number\">6074</span><span class=\"token punctuation\">,</span><span class=\"token number\">1796</span><span class=\"token punctuation\">,</span><span class=\"token number\">1252</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token number\">6045</span><span class=\"token punctuation\">,</span><span class=\"token number\">1736</span><span class=\"token punctuation\">,</span><span class=\"token number\">1230</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token number\">19</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token number\">6044</span><span class=\"token punctuation\">,</span><span class=\"token number\">1722</span><span class=\"token punctuation\">,</span><span class=\"token number\">1158</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token number\">13</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token number\">6036</span><span class=\"token punctuation\">,</span><span class=\"token number\">1781</span><span class=\"token punctuation\">,</span><span class=\"token number\">1161</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h4 id=\"252-数据结果分析\"><a class=\"anchor\" href=\"#252-数据结果分析\">#</a> 2.5.2 数据结果分析</h4>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1.</span> 统计上面<span class=\"token number\">10</span>个品类中，每个品类，按照<span class=\"token keyword\">session</span>进行分组，按照统计次数从大到小进行排序，然后取出前<span class=\"token number\">10</span>的<span class=\"token keyword\">session</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">2.</span> 说明，同一个<span class=\"token keyword\">session</span>中会执行多个操作，比如点击、下单、支付等操作，那么就说明在一个<span class=\"token keyword\">session</span>中，一个品类会出现多次。</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">3.</span> 希望得到的结果：</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token punctuation\">(</span>品类，Iterator<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>session1<span class=\"token punctuation\">,</span>count1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span>session2<span class=\"token punctuation\">,</span>count2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h4 id=\"253-实现步骤\"><a class=\"anchor\" href=\"#253-实现步骤\">#</a> 2.5.3 实现步骤</h4>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1.</span> 获取需求<span class=\"token number\">1</span>结果的top10的品类</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">2.</span> 过滤数据，</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   a、首先过滤不是点击的数据</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   b、过滤点击数据中，品类不在top10品类中的数据</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">3.</span> 进行数据结构转换，将数据转换成:</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token string\">\"(品类-session，1)\"</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token number\">4.</span> 分组聚合</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token string\">\"(品类-session，count)\"</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token number\">5.</span> 结构转换</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token string\">\"(品类, (session，count))\"</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token number\">6.</span> 按照品类分组</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>     <span class=\"token string\">\"(品类，Iterator((session1,count1),(session2,count2)....))\"</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token number\">7.</span> 结构转换，对<span class=\"token keyword\">value</span>进行排序，然后取<span class=\"token keyword\">value</span>排名的前<span class=\"token number\">10</span></pre></td></tr></table></figure><h4 id=\"254-代码实现\"><a class=\"anchor\" href=\"#254-代码实现\">#</a> 2.5.4 代码实现</h4>\n<h5 id=\"2541-hotcategorysessiontop10applicationreview\"><a class=\"anchor\" href=\"#2541-hotcategorysessiontop10applicationreview\">#</a> 2.5.4.1 HotCategorySessionTOP10ApplicationReview</h5>\n<figure class=\"highlight scala\"><figcaption data-lang=\"scala\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>atguigu<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span>hotcategorytop10review<span class=\"token punctuation\">.</span>application</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>atguigu<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span>hotcategorytop10review<span class=\"token punctuation\">.</span>controller<span class=\"token punctuation\">.</span></span>HotCategorySessionop10ControllerReview</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>atguigu<span class=\"token punctuation\">.</span>summer<span class=\"token punctuation\">.</span>framework<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span></span>TApplication</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  * @Description</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  **</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  * @author lianzhipeng</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  * @create 2020-06-11 0:35:53</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  */</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">object</span> HotCategorySessionTOP10ApplicationReview  <span class=\"token keyword\">extends</span> App <span class=\"token keyword\">with</span>  TApplication<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  start<span class=\"token punctuation\">(</span><span class=\"token string\">\"Spark\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">val</span> hotCategorySessionop10ControllerReview <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span>  HotCategorySessionop10ControllerReview</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    hotCategorySessionop10ControllerReview<span class=\"token punctuation\">.</span>execute<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h5 id=\"2542-hotcategorysessionop10controllerreview\"><a class=\"anchor\" href=\"#2542-hotcategorysessionop10controllerreview\">#</a> 2.5.4.2 HotCategorySessionop10ControllerReview</h5>\n<figure class=\"highlight scala\"><figcaption data-lang=\"scala\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>atguigu<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span>hotcategorytop10review<span class=\"token punctuation\">.</span>controller</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>atguigu<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span>hotcategorytop10review<span class=\"token punctuation\">.</span>service<span class=\"token punctuation\">.</span></span><span class=\"token punctuation\">&#123;</span>HotCategorySessionTop10ServiceReview<span class=\"token punctuation\">,</span> HotCategoryTop10ServiceReview<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>atguigu<span class=\"token punctuation\">.</span>summer<span class=\"token punctuation\">.</span>framework<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span></span>TController</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>spark<span class=\"token punctuation\">.</span>rdd<span class=\"token punctuation\">.</span></span>RDD</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  * @Description</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  * *</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  * @author lianzhipeng</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  * @create 2020-06-11 0:36:40</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  */</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">class</span> HotCategorySessionop10ControllerReview <span class=\"token keyword\">extends</span> TController <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> hotCategorySessionTop10ServiceReview <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> HotCategorySessionTop10ServiceReview</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> hotCategoryTop10ServiceReview <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> HotCategoryTop10ServiceReview</pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token keyword\">override</span> <span class=\"token keyword\">def</span> execute<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Unit</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">val</span> data<span class=\"token operator\">:</span> List<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">Long</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Long</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Long</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> hotCategoryTop10ServiceReview<span class=\"token punctuation\">.</span>analysis<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">val</span> result<span class=\"token operator\">:</span> RDD<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> List<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> hotCategorySessionTop10ServiceReview<span class=\"token punctuation\">.</span>analysis<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    result<span class=\"token punctuation\">.</span>foreach<span class=\"token punctuation\">(</span>println<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h5 id=\"2543-hotcategorysessiontop10daoreview\"><a class=\"anchor\" href=\"#2543-hotcategorysessiontop10daoreview\">#</a> 2.5.4.3  HotCategorySessionTop10DAOReview</h5>\n<figure class=\"highlight scala\"><figcaption data-lang=\"scala\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>atguigu<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span>hotcategorytop10review<span class=\"token punctuation\">.</span>dao</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>atguigu<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span>hotcategorytop10review<span class=\"token punctuation\">.</span>bean<span class=\"token punctuation\">.</span></span>UserVisitAction</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>atguigu<span class=\"token punctuation\">.</span>summer<span class=\"token punctuation\">.</span>framework<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span></span>TDAO</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>spark<span class=\"token punctuation\">.</span>rdd<span class=\"token punctuation\">.</span></span>RDD</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  * @Description</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  * *</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  * @author lianzhipeng</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  * @create 2020-06-11 0:38:25</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  */</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">class</span> HotCategorySessionTop10DAOReview <span class=\"token keyword\">extends</span> TDAO <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token keyword\">def</span> getUserVisitAction<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\">// 读取路径下的数据</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">val</span> fileRDD<span class=\"token operator\">:</span> RDD<span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> readFile<span class=\"token punctuation\">(</span><span class=\"token string\">\"input/user_visit_action.txt\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token comment\">// 将数据封装对象</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    fileRDD<span class=\"token punctuation\">.</span>map<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      data <span class=\"token keyword\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">val</span> datasArray<span class=\"token operator\">:</span> Array<span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">\"_\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        UserVisitAction<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>          datasArray<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>          datasArray<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>          datasArray<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>          datasArray<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>          datasArray<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>          datasArray<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>          datasArray<span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>          datasArray<span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>          datasArray<span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>          datasArray<span class=\"token punctuation\">(</span><span class=\"token number\">9</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>          datasArray<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>          datasArray<span class=\"token punctuation\">(</span><span class=\"token number\">11</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>          datasArray<span class=\"token punctuation\">(</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h5 id=\"2544-hotcategorysessiontop10servicereview\"><a class=\"anchor\" href=\"#2544-hotcategorysessiontop10servicereview\">#</a> 2.5.4.4 HotCategorySessionTop10ServiceReview</h5>\n<figure class=\"highlight scala\"><figcaption data-lang=\"scala\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>atguigu<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span>hotcategorytop10review<span class=\"token punctuation\">.</span>service</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>atguigu<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span>hotcategorytop10review<span class=\"token punctuation\">.</span>bean</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>atguigu<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span>hotcategorytop10review<span class=\"token punctuation\">.</span>dao<span class=\"token punctuation\">.</span></span><span class=\"token punctuation\">&#123;</span>HotCategorySessionTop10DAOReview<span class=\"token punctuation\">,</span> HotCategoryTop10DAOReview<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>atguigu<span class=\"token punctuation\">.</span>summer<span class=\"token punctuation\">.</span>framework<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span></span>TService</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>spark<span class=\"token punctuation\">.</span>rdd<span class=\"token punctuation\">.</span></span>RDD</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  * @Description</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  **</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  * @author lianzhipeng</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  * @create 2020-06-11 0:37:41</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  */</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">class</span> HotCategorySessionTop10ServiceReview  <span class=\"token keyword\">extends</span>  TService<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> hotCategorySessionTop10DAOReview <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> HotCategorySessionTop10DAOReview</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token keyword\">override</span> <span class=\"token keyword\">def</span> analysis<span class=\"token punctuation\">(</span>data<span class=\"token operator\">:</span> <span class=\"token builtin\">Any</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token comment\">// 获取将数据封装成对象的数据</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">val</span> UserRDD<span class=\"token operator\">:</span> RDD<span class=\"token punctuation\">[</span>bean<span class=\"token punctuation\">.</span>UserVisitAction<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> hotCategorySessionTop10DAOReview<span class=\"token punctuation\">.</span>getUserVisitAction<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\">//    1. 获取需求 1 结果的 top10 的品类</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">val</span> datas<span class=\"token operator\">:</span> List<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">Long</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Long</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Long</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span>asInstanceOf<span class=\"token punctuation\">[</span>List<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">Long</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Long</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Long</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">val</span> categoryList<span class=\"token operator\">:</span> List<span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> datas<span class=\"token punctuation\">.</span>map<span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">.</span>_1<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token comment\">//      2. 过滤数据</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token comment\">//   a、首先过滤不是点击的数据</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token comment\">//   b、过滤点击数据中，品类不在 top10 品类中的数据</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">val</span> clickSession<span class=\"token operator\">:</span> RDD<span class=\"token punctuation\">[</span>bean<span class=\"token punctuation\">.</span>UserVisitAction<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> UserRDD<span class=\"token punctuation\">.</span>filter<span class=\"token punctuation\">(</span>Userbean <span class=\"token keyword\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>      Userbean<span class=\"token punctuation\">.</span>click_category_id <span class=\"token operator\">!=</span> <span class=\"token string\">\"-1\"</span> <span class=\"token operator\">&amp;&amp;</span> categoryList<span class=\"token punctuation\">.</span>contains<span class=\"token punctuation\">(</span>Userbean<span class=\"token punctuation\">.</span>click_category_id<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token comment\">//    3. 进行数据结构转换，将数据转换成:</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token comment\">//      \"(品类 & amp;session，1)\"</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token keyword\">val</span> mapRDD<span class=\"token operator\">:</span> RDD<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> clickSession<span class=\"token punctuation\">.</span>map<span class=\"token punctuation\">(</span>Userbean <span class=\"token keyword\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>      <span class=\"token punctuation\">(</span>Userbean<span class=\"token punctuation\">.</span>click_category_id <span class=\"token operator\">+</span> <span class=\"token string\">\"&amp;\"</span> <span class=\"token operator\">+</span> Userbean<span class=\"token punctuation\">.</span>session_id<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token comment\">//    4. 分组聚合</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token comment\">//      \"(品类 & amp;session，count)\"</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token keyword\">val</span> reduceRDD<span class=\"token operator\">:</span> RDD<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> mapRDD<span class=\"token punctuation\">.</span>reduceByKey<span class=\"token punctuation\">(</span>_ <span class=\"token operator\">+</span> _<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token comment\">//    5. 结构转换</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token comment\">//      \"(品类，(session，count))\"</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token keyword\">val</span> mapRDD1<span class=\"token operator\">:</span> RDD<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> reduceRDD<span class=\"token punctuation\">.</span>map <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>      <span class=\"token keyword\">case</span> <span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">)</span> <span class=\"token keyword\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        <span class=\"token keyword\">val</span> array<span class=\"token operator\">:</span> Array<span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">\"&amp;\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre></pre></td></tr><tr><td data-num=\"55\"></td><td><pre><span class=\"token comment\">//    6. 按照品类分组</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre><span class=\"token comment\">//      \"(品类，Iterator ((session1,count1),(session2,count2)....))\"</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token keyword\">val</span> groupByRDD<span class=\"token operator\">:</span> RDD<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> Iterable<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> mapRDD1<span class=\"token punctuation\">.</span>groupByKey<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre><span class=\"token comment\">//    7. 结构转换，对 value 进行排序，然后取 value 排名的前 10</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    <span class=\"token keyword\">val</span> resultRDD<span class=\"token operator\">:</span> RDD<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> List<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> groupByRDD<span class=\"token punctuation\">.</span>mapValues<span class=\"token punctuation\">(</span>iter <span class=\"token keyword\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>      iter<span class=\"token punctuation\">.</span>toList<span class=\"token punctuation\">.</span>sortBy<span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">.</span>_2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>Ordering<span class=\"token punctuation\">.</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">.</span>reverse<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>take<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    resultRDD</pre></td></tr><tr><td data-num=\"64\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>  <span class=\"token keyword\">override</span> <span class=\"token keyword\">def</span> analysis<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h5 id=\"2545-运行结果\"><a class=\"anchor\" href=\"#2545-运行结果\">#</a> 2.5.4.5 运行结果</h5>\n<p>![image-20200611103715005](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saWFuLXpwLm9zcy1jbi1zaGVuemhlbi5hbGl5dW5jcy5jb20vcGlj\">https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic</span> GO/20200611103715.png)</p>\n<h4 id=\"255-优化使用广播变量\"><a class=\"anchor\" href=\"#255-优化使用广播变量\">#</a> 2.5.5 优化：使用广播变量</h4>\n<blockquote>\n<p>仅修改一下 HotCategorySessionTop10ServiceReview 代码即可</p>\n</blockquote>\n<figure class=\"highlight scala\"><figcaption data-lang=\"scala\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 广播变量</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">val</span> broadCast<span class=\"token operator\">:</span> Broadcast<span class=\"token punctuation\">[</span>List<span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> EnvUtils<span class=\"token punctuation\">.</span>getEnv<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>broadcast<span class=\"token punctuation\">(</span>categoryList<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">//      2. 过滤数据</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">//   a、首先过滤不是点击的数据</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">//   b、过滤点击数据中，品类不在 top10 品类中的数据</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">val</span> clickSession<span class=\"token operator\">:</span> RDD<span class=\"token punctuation\">[</span>bean<span class=\"token punctuation\">.</span>UserVisitAction<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> UserRDD<span class=\"token punctuation\">.</span>filter<span class=\"token punctuation\">(</span>Userbean <span class=\"token keyword\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token comment\">// 获取广播变量的值</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      Userbean<span class=\"token punctuation\">.</span>click_category_id <span class=\"token operator\">!=</span> <span class=\"token string\">\"-1\"</span> <span class=\"token operator\">&amp;&amp;</span> broadCast<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">.</span>contains<span class=\"token punctuation\">(</span>Userbean<span class=\"token punctuation\">.</span>click_category_id<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h4 id=\"256-需求2总结\"><a class=\"anchor\" href=\"#256-需求2总结\">#</a> 2.5.6 需求 2 总结</h4>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 1. 在进行数据组合时，分割符和原始数据的分隔符一致，导致后面进行数据切分时，数据产生了丢失。</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  开始是：<span class=\"token string\">\"(品类-session，count)\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  修正后：<span class=\"token string\">\"(品类&amp;session，count)\"</span></pre></td></tr></table></figure><h3 id=\"26-需求3页面单跳转换率统计\"><a class=\"anchor\" href=\"#26-需求3页面单跳转换率统计\">#</a> 2.6 需求 3：页面单跳转换率统计</h3>\n<h4 id=\"261-数据结构\"><a class=\"anchor\" href=\"#261-数据结构\">#</a> 2.6.1  数据结构</h4>\n<figure class=\"highlight scala\"><figcaption data-lang=\"scala\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">--</span> 原始数据：    </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">//2019-07-27_   ==> 日期     0</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 73_          ==> 用户 ID   1</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">//d79508b4-66bf-4410-a5bb-f67a8831610f_  ==> 会话 ID  2</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 45_          ==> 页面 ID   3</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 2019-07-27 19:47:55_   ==> 动作时间  4</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">//null_        ==> 搜索     5</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 9_           ==> 点击品类 ID，不是则为 - 1     6</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">// 51_          ==> 点击产品 ID，不是则为 - 1     7</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">//null_        ==> 下单品类 ID，不是则为 null   8</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">//null_        ==> 下单产品 ID，不是则为 null   9</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">//null_        ==> 支付品类 ID，不是则为 null   10</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">//null_        ==> 支付产品 ID ，不是则为 null  11</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\">// 6            ==> 城市 ID，不是则为 null       12</span></pre></td></tr></table></figure><h4 id=\"262-数据结果分析\"><a class=\"anchor\" href=\"#262-数据结果分析\">#</a> 2.6.2 数据结果分析</h4>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 需求分析</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> 什么是页面单跳转换率?</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> a、在一次会话中，用户会多次且反复执行搜索、点击、下单、支付等操作</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> b、在一次会话中，执行的操作是按照时间依次进行</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> c、转换率就是：假如A页面一共被访问n次，从A页面直接跳转B页面的次数为m次，那么A到B页面的转换率pageFlowRate<span class=\"token operator\">=</span>n<span class=\"token operator\">/</span>m</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre> <span class=\"token comment\">-- 希望得到的结果是：</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">(</span><span class=\"token string\">\"id1-id2\"</span><span class=\"token punctuation\">,</span>pageFlowRate<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">(</span><span class=\"token string\">\"id1-id3\"</span><span class=\"token punctuation\">,</span>pageFlowRate<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr></table></figure><h4 id=\"263-实现步骤\"><a class=\"anchor\" href=\"#263-实现步骤\">#</a> 2.6.3 实现步骤</h4>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1.</span> 根据需求可知，页面转换率是指在同一次会话中才有效</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   统计每个页面id出现的次数</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">2.</span> 按照<span class=\"token keyword\">session</span>进行分组，</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token punctuation\">(</span><span class=\"token keyword\">session</span><span class=\"token punctuation\">,</span>List<span class=\"token punctuation\">(</span>bean1<span class=\"token punctuation\">,</span>bean2<span class=\"token punctuation\">,</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">3.</span> 对<span class=\"token keyword\">value</span>值进行结构转换</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token number\">3.1</span> 按照时间进行升序排序</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   <span class=\"token number\">3.2</span> 对数据进行转换</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>       <span class=\"token punctuation\">(</span>页面id1<span class=\"token punctuation\">,</span>页面id2<span class=\"token punctuation\">,</span>页面id3<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>）</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   <span class=\"token number\">3.3</span> 对数据进行关联</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>       <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>id1<span class=\"token operator\">-</span>id2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>id2<span class=\"token operator\">-</span>id3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token number\">4.</span> 对<span class=\"token number\">3</span>的结果数据进行数据转换，将<span class=\"token keyword\">key</span>去掉，只保留<span class=\"token keyword\">value</span>，并进行扁平化</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>     <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>id1<span class=\"token operator\">-</span>id2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>id2<span class=\"token operator\">-</span>id3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token number\">5.</span> 按照<span class=\"token keyword\">key</span>进行分组聚合</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>     <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>id1<span class=\"token operator\">-</span>id2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>count<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>     <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>id2<span class=\"token operator\">-</span>id3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>count<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token number\">6.</span> 获取转换率</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>id1<span class=\"token operator\">-</span>id2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>count<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>     <span class=\"token number\">6.1</span> 获取id1被访问的总次数</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>     <span class=\"token number\">6.2</span> 使用count<span class=\"token operator\">/</span>总次数就是转换率</pre></td></tr></table></figure><h4 id=\"264-代码实现\"><a class=\"anchor\" href=\"#264-代码实现\">#</a> 2.6.4 代码实现</h4>\n<h5 id=\"2641-pageflowapplicationreview\"><a class=\"anchor\" href=\"#2641-pageflowapplicationreview\">#</a> 2.6.4.1 PageFlowApplicationReview</h5>\n<figure class=\"highlight scala\"><figcaption data-lang=\"scala\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>atguigu<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span>hotcategorytop10review<span class=\"token punctuation\">.</span>application</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>atguigu<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span>hotcategorytop10review<span class=\"token punctuation\">.</span>controller<span class=\"token punctuation\">.</span></span>PageFlowControllerReview</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>atguigu<span class=\"token punctuation\">.</span>summer<span class=\"token punctuation\">.</span>framework<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span></span>TApplication</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  * @Description</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  **</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  * @author lianzhipeng</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  * @create 2020-06-11 0:35:53</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  */</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">object</span> PageFlowApplicationReview  <span class=\"token keyword\">extends</span> App <span class=\"token keyword\">with</span>   TApplication<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  start<span class=\"token punctuation\">(</span><span class=\"token string\">\"Spark\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">val</span> pageFlowControllerReview <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> PageFlowControllerReview</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    pageFlowControllerReview<span class=\"token punctuation\">.</span>execute<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h5 id=\"2642-pageflowcontrollerreview\"><a class=\"anchor\" href=\"#2642-pageflowcontrollerreview\">#</a> 2.6.4.2 PageFlowControllerReview</h5>\n<figure class=\"highlight scala\"><figcaption data-lang=\"scala\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>atguigu<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span>hotcategorytop10review<span class=\"token punctuation\">.</span>controller</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>atguigu<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span>hotcategorytop10review<span class=\"token punctuation\">.</span>service<span class=\"token punctuation\">.</span></span>PageFlowServiceReview</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>atguigu<span class=\"token punctuation\">.</span>summer<span class=\"token punctuation\">.</span>framework<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span></span>TController</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  * @Description</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  * *</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  * @author lianzhipeng</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  * @create 2020-06-11 0:36:40</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  */</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">class</span> PageFlowControllerReview <span class=\"token keyword\">extends</span> TController <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> pageFlowServiceReview <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> PageFlowServiceReview</pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token keyword\">override</span> <span class=\"token keyword\">def</span> execute<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Unit</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    pageFlowServiceReview<span class=\"token punctuation\">.</span>analysis<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">//    result.foreach(println)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h5 id=\"2643-pageflowdaoreview\"><a class=\"anchor\" href=\"#2643-pageflowdaoreview\">#</a> 2.6.4.3 PageFlowDAOReview</h5>\n<figure class=\"highlight scala\"><figcaption data-lang=\"scala\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>atguigu<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span>hotcategorytop10review<span class=\"token punctuation\">.</span>dao</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>atguigu<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span>hotcategorytop10review<span class=\"token punctuation\">.</span>bean<span class=\"token punctuation\">.</span></span>UserVisitAction</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>atguigu<span class=\"token punctuation\">.</span>summer<span class=\"token punctuation\">.</span>framework<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span></span>TDAO</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>spark<span class=\"token punctuation\">.</span>rdd<span class=\"token punctuation\">.</span></span>RDD</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  * @Description</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  * *</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  * @author lianzhipeng</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  * @create 2020-06-11 0:38:25</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  */</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">class</span> PageFlowDAOReview <span class=\"token keyword\">extends</span> TDAO <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token keyword\">def</span> getUserVisitAction<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token comment\">// 读取路径下的数据</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">val</span> fileRDD<span class=\"token operator\">:</span> RDD<span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> readFile<span class=\"token punctuation\">(</span><span class=\"token string\">\"input/user_visit_action.txt\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token comment\">// 将数据封装对象</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    fileRDD<span class=\"token punctuation\">.</span>map<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>      data <span class=\"token keyword\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">val</span> datasArray<span class=\"token operator\">:</span> Array<span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">\"_\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        UserVisitAction<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>          datasArray<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>          datasArray<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>          datasArray<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>          datasArray<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>          datasArray<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>          datasArray<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>          datasArray<span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>          datasArray<span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>          datasArray<span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>          datasArray<span class=\"token punctuation\">(</span><span class=\"token number\">9</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>          datasArray<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>          datasArray<span class=\"token punctuation\">(</span><span class=\"token number\">11</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>          datasArray<span class=\"token punctuation\">(</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h5 id=\"2644-pageflowservicereview\"><a class=\"anchor\" href=\"#2644-pageflowservicereview\">#</a> 2.6.4.4 PageFlowServiceReview</h5>\n<figure class=\"highlight scala\"><figcaption data-lang=\"scala\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>atguigu<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span>hotcategorytop10review<span class=\"token punctuation\">.</span>service</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>atguigu<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span>hotcategorytop10review<span class=\"token punctuation\">.</span>bean</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>atguigu<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span>hotcategorytop10review<span class=\"token punctuation\">.</span>dao<span class=\"token punctuation\">.</span></span>PageFlowDAOReview</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>atguigu<span class=\"token punctuation\">.</span>summer<span class=\"token punctuation\">.</span>framework<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span></span>TService</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>spark<span class=\"token punctuation\">.</span>rdd<span class=\"token punctuation\">.</span></span>RDD</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  * @Description</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  **</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  * @author lianzhipeng</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  * @create 2020-06-11 0:37:41</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  */</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">class</span> PageFlowServiceReview  <span class=\"token keyword\">extends</span>  TService<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> pageFlowDAOReview <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> PageFlowDAOReview</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token keyword\">override</span> <span class=\"token keyword\">def</span> analysis<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">//    1. 根据需求可知，页面转换率是指在同一次会话中才有效</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\">//    统计每个页面 id 出现的次数</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">val</span> UserRDD<span class=\"token operator\">:</span> RDD<span class=\"token punctuation\">[</span>bean<span class=\"token punctuation\">.</span>UserVisitAction<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> pageFlowDAOReview<span class=\"token punctuation\">.</span>getUserVisitAction<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    UserRDD<span class=\"token punctuation\">.</span>cache<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">val</span> pageIDCount<span class=\"token operator\">:</span> Array<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> UserRDD<span class=\"token punctuation\">.</span>groupBy<span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">.</span>page_id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>mapValues<span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>collect<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token comment\">//    2. 按照 session 进行分组，</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token comment\">//    (session,List(bean1,bean2,...))</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">val</span> groupByRDD<span class=\"token operator\">:</span> RDD<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> Iterable<span class=\"token punctuation\">[</span>bean<span class=\"token punctuation\">.</span>UserVisitAction<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> UserRDD<span class=\"token punctuation\">.</span>groupBy<span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">.</span>session_id<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token comment\">//    3. 对 value 值进行结构转换</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token keyword\">val</span> pageIDSToOneRDD<span class=\"token operator\">:</span> RDD<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> List<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> groupByRDD<span class=\"token punctuation\">.</span>mapValues<span class=\"token punctuation\">(</span>iter <span class=\"token keyword\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>      <span class=\"token comment\">//   3.1 按照时间进行升序排序</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>      <span class=\"token keyword\">val</span> sortByList<span class=\"token operator\">:</span> List<span class=\"token punctuation\">[</span>bean<span class=\"token punctuation\">.</span>UserVisitAction<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> iter<span class=\"token punctuation\">.</span>toList<span class=\"token punctuation\">.</span>sortBy<span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">.</span>action_time<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>      <span class=\"token comment\">//   3.2 对数据进行转换</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>      <span class=\"token comment\">//      (页面 id1, 页面 id2, 页面 id3...）</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>      <span class=\"token keyword\">val</span> pageIdList<span class=\"token operator\">:</span> List<span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> sortByList<span class=\"token punctuation\">.</span>map<span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">.</span>page_id<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>      <span class=\"token comment\">//  3.3 对数据进行关联</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>      <span class=\"token comment\">//      ((id1-id2),1),((id2-id3),1)</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>      <span class=\"token keyword\">val</span> zipPageIDList<span class=\"token operator\">:</span> List<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> pageIdList<span class=\"token punctuation\">.</span>zip<span class=\"token punctuation\">(</span>pageIdList<span class=\"token punctuation\">.</span>tail<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>      <span class=\"token keyword\">val</span> mapPageIdList<span class=\"token operator\">:</span> List<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> zipPageIDList<span class=\"token punctuation\">.</span>map<span class=\"token punctuation\">(</span>tuple <span class=\"token keyword\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token punctuation\">(</span>tuple<span class=\"token punctuation\">.</span>_1 <span class=\"token operator\">+</span> <span class=\"token string\">\"-\"</span> <span class=\"token operator\">+</span> tuple<span class=\"token punctuation\">.</span>_2<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>     mapPageIdList</pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre><span class=\"token comment\">//    4. 对 3 的结果数据进行数据转换，将 key 去掉，只保留 value，并进行扁平化</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre><span class=\"token comment\">//    ((id1-id2),1),((id2-id3),1)</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token keyword\">val</span> flatMapRD<span class=\"token operator\">:</span> RDD<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> pageIDSToOneRDD<span class=\"token punctuation\">.</span>map<span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">.</span>_2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>flatMap<span class=\"token punctuation\">(</span>iter <span class=\"token keyword\">=></span> iter<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    println<span class=\"token punctuation\">(</span>flatMapRD<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token comment\">//    5. 按照 key 进行分组聚合</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre><span class=\"token comment\">//      ((id1-id2),count)</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre><span class=\"token comment\">//    ((id2-id3),count)</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token keyword\">val</span> pageFlowCountRDD<span class=\"token operator\">:</span> RDD<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> flatMapRD<span class=\"token punctuation\">.</span>reduceByKey<span class=\"token punctuation\">(</span>_ <span class=\"token operator\">+</span> _<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    <span class=\"token comment\">//    6. 获取转换率</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    pageFlowCountRDD<span class=\"token punctuation\">.</span>foreach<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>      <span class=\"token keyword\">case</span><span class=\"token punctuation\">(</span>ids<span class=\"token punctuation\">,</span>count<span class=\"token punctuation\">)</span> <span class=\"token keyword\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        <span class=\"token comment\">//      ((id1-id2),count)</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>        <span class=\"token comment\">//    6.1 获取 id1 被访问的总次数</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>        <span class=\"token keyword\">val</span> idArray<span class=\"token operator\">:</span> Array<span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> ids<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">\"-\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>        <span class=\"token keyword\">val</span> sum<span class=\"token operator\">:</span> <span class=\"token builtin\">Int</span> <span class=\"token operator\">=</span> pageIDCount<span class=\"token punctuation\">.</span>toMap<span class=\"token punctuation\">.</span>getOrElse<span class=\"token punctuation\">(</span>idArray<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>        <span class=\"token comment\">//    6.2 使用 count / 总次数就是转换率</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>        println<span class=\"token punctuation\">(</span><span class=\"token string\">\"页面id：【\"</span> <span class=\"token operator\">+</span> ids <span class=\"token operator\">+</span> <span class=\"token string\">\"】的转换率为：\"</span> <span class=\"token operator\">+</span> count<span class=\"token punctuation\">.</span>toDouble<span class=\"token operator\">/</span>sum <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>  <span class=\"token keyword\">override</span> <span class=\"token keyword\">def</span> analysis<span class=\"token punctuation\">(</span>data<span class=\"token operator\">:</span> <span class=\"token builtin\">Any</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Any</span> <span class=\"token operator\">=</span> <span class=\"token operator\">?</span><span class=\"token operator\">?</span><span class=\"token operator\">?</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h5 id=\"2645-运行结果\"><a class=\"anchor\" href=\"#2645-运行结果\">#</a> 2.6.4.5 运行结果</h5>\n<p>![image-20200611115202176](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saWFuLXpwLm9zcy1jbi1zaGVuemhlbi5hbGl5dW5jcy5jb20vcGlj\">https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic</span> GO/20200611115202.png)</p>\n<h4 id=\"264-指定页面转换率\"><a class=\"anchor\" href=\"#264-指定页面转换率\">#</a> 2.6.4 指定页面转换率</h4>\n<blockquote>\n<p>在实际开发情况中，我们只需要一些指定的页面流转率。</p>\n</blockquote>\n<p>![image-20200611115320274](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saWFuLXpwLm9zcy1jbi1zaGVuemhlbi5hbGl5dW5jcy5jb20vcGlj\">https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic</span> GO/20200611115320.png)</p>\n<h5 id=\"2641-修改pageflowservicereview\"><a class=\"anchor\" href=\"#2641-修改pageflowservicereview\">#</a> 2.6.4.1 修改 PageFlowServiceReview</h5>\n<figure class=\"highlight scala\"><figcaption data-lang=\"scala\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>atguigu<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span>hotcategorytop10review<span class=\"token punctuation\">.</span>service</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>atguigu<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span>hotcategorytop10review<span class=\"token punctuation\">.</span>bean</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>atguigu<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span>hotcategorytop10review<span class=\"token punctuation\">.</span>dao<span class=\"token punctuation\">.</span></span>PageFlowDAOReview</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>atguigu<span class=\"token punctuation\">.</span>summer<span class=\"token punctuation\">.</span>framework<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span></span>TService</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>atguigu<span class=\"token punctuation\">.</span>summer<span class=\"token punctuation\">.</span>framework<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span>EnvUtils</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>spark<span class=\"token punctuation\">.</span>broadcast<span class=\"token punctuation\">.</span></span>Broadcast</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>spark<span class=\"token punctuation\">.</span>rdd<span class=\"token punctuation\">.</span></span>RDD</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  * @Description</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  **</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  * @author lianzhipeng</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  * @create 2020-06-11 0:37:41</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  */</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">class</span> PageFlowServiceReview  <span class=\"token keyword\">extends</span>  TService<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> pageFlowDAOReview <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> PageFlowDAOReview</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token keyword\">override</span> <span class=\"token keyword\">def</span> analysis<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\">//    1. 根据需求可知，页面转换率是指在同一次会话中才有效</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\">// 1.1 指定的页面 id,(1-2,2-3,3-4...,6-7)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>     <span class=\"token keyword\">val</span> pageid <span class=\"token operator\">=</span> List<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">val</span> pageFlowIDs<span class=\"token operator\">:</span> List<span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> pageid<span class=\"token punctuation\">.</span>zip<span class=\"token punctuation\">(</span>pageid<span class=\"token punctuation\">.</span>tail<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>map<span class=\"token punctuation\">(</span>tuple <span class=\"token keyword\">=></span> tuple<span class=\"token punctuation\">.</span>_1 <span class=\"token operator\">+</span> <span class=\"token string\">\"-\"</span> <span class=\"token operator\">+</span> tuple<span class=\"token punctuation\">.</span>_2<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">val</span> broadCast<span class=\"token operator\">:</span> Broadcast<span class=\"token punctuation\">[</span>List<span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> EnvUtils<span class=\"token punctuation\">.</span>getEnv<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>broadcast<span class=\"token punctuation\">(</span>pageFlowIDs<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token comment\">//  1.2 先过滤掉不需要统计的页面 id，统计剩余页面 id 出现的次数</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">val</span> UserRDD<span class=\"token operator\">:</span> RDD<span class=\"token punctuation\">[</span>bean<span class=\"token punctuation\">.</span>UserVisitAction<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> pageFlowDAOReview<span class=\"token punctuation\">.</span>getUserVisitAction<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    UserRDD<span class=\"token punctuation\">.</span>cache<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token keyword\">val</span> pageIDCount<span class=\"token operator\">:</span> Array<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> UserRDD</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>      <span class=\"token punctuation\">.</span>filter<span class=\"token punctuation\">(</span>bean<span class=\"token keyword\">=></span>pageid<span class=\"token punctuation\">.</span>init<span class=\"token punctuation\">.</span>contains<span class=\"token punctuation\">(</span>bean<span class=\"token punctuation\">.</span>page_id<span class=\"token punctuation\">.</span>toInt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>      <span class=\"token punctuation\">.</span>groupBy<span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">.</span>page_id<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>      <span class=\"token punctuation\">.</span>mapValues<span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>      collect<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token comment\">//    2. 按照 session 进行分组，</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token comment\">//    (session,List(bean1,bean2,...))</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token keyword\">val</span> groupByRDD<span class=\"token operator\">:</span> RDD<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> Iterable<span class=\"token punctuation\">[</span>bean<span class=\"token punctuation\">.</span>UserVisitAction<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> UserRDD<span class=\"token punctuation\">.</span>groupBy<span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">.</span>session_id<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token comment\">//    3. 对 value 值进行结构转换</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token keyword\">val</span> pageIDSToOneRDD<span class=\"token operator\">:</span> RDD<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> List<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> groupByRDD<span class=\"token punctuation\">.</span>mapValues<span class=\"token punctuation\">(</span>iter <span class=\"token keyword\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>      <span class=\"token comment\">//   3.1 按照时间进行升序排序</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>      <span class=\"token keyword\">val</span> sortByList<span class=\"token operator\">:</span> List<span class=\"token punctuation\">[</span>bean<span class=\"token punctuation\">.</span>UserVisitAction<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> iter<span class=\"token punctuation\">.</span>toList<span class=\"token punctuation\">.</span>sortBy<span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">.</span>action_time<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>      <span class=\"token comment\">//   3.2 对数据进行转换</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>      <span class=\"token comment\">//      (页面 id1, 页面 id2, 页面 id3...）</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>      <span class=\"token keyword\">val</span> pageIdList<span class=\"token operator\">:</span> List<span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> sortByList<span class=\"token punctuation\">.</span>map<span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">.</span>page_id<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>      <span class=\"token comment\">//  3.3 对数据进行关联</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>      <span class=\"token comment\">//      ((id1-id2),1),((id2-id3),1)</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>      <span class=\"token keyword\">val</span> zipPageIDList<span class=\"token operator\">:</span> List<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> pageIdList<span class=\"token punctuation\">.</span>zip<span class=\"token punctuation\">(</span>pageIdList<span class=\"token punctuation\">.</span>tail<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>      <span class=\"token keyword\">val</span> mapPageIdList<span class=\"token operator\">:</span> List<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> zipPageIDList<span class=\"token punctuation\">.</span>map<span class=\"token punctuation\">(</span>tuple <span class=\"token keyword\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        <span class=\"token punctuation\">(</span>tuple<span class=\"token punctuation\">.</span>_1 <span class=\"token operator\">+</span> <span class=\"token string\">\"-\"</span> <span class=\"token operator\">+</span> tuple<span class=\"token punctuation\">.</span>_2<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>      <span class=\"token comment\">// 3.4 过滤掉不需要统计的页面流转</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>      <span class=\"token keyword\">val</span> filtPageIDList<span class=\"token operator\">:</span> List<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> mapPageIdList<span class=\"token punctuation\">.</span>filter<span class=\"token punctuation\">(</span>tuple <span class=\"token keyword\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>        broadCast<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">.</span>contains<span class=\"token punctuation\">(</span>tuple<span class=\"token punctuation\">.</span>_1<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>      filtPageIDList</pre></td></tr><tr><td data-num=\"64\"></td><td><pre></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre></pre></td></tr><tr><td data-num=\"67\"></td><td><pre></pre></td></tr><tr><td data-num=\"68\"></td><td><pre><span class=\"token comment\">//    4. 对 3 的结果数据进行数据转换，将 key 去掉，只保留 value，并进行扁平化</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre><span class=\"token comment\">//    ((id1-id2),1),((id2-id3),1)</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>    <span class=\"token keyword\">val</span> flatMapRD<span class=\"token operator\">:</span> RDD<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> pageIDSToOneRDD<span class=\"token punctuation\">.</span>map<span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">.</span>_2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>flatMap<span class=\"token punctuation\">(</span>iter <span class=\"token keyword\">=></span> iter<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>    <span class=\"token comment\">//    5. 按照 key 进行分组聚合</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre><span class=\"token comment\">//      ((id1-id2),count)</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre><span class=\"token comment\">//    ((id2-id3),count)</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>    <span class=\"token keyword\">val</span> pageFlowCountRDD<span class=\"token operator\">:</span> RDD<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> flatMapRD<span class=\"token punctuation\">.</span>reduceByKey<span class=\"token punctuation\">(</span>_ <span class=\"token operator\">+</span> _<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>    <span class=\"token comment\">//    6. 获取转换率</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>    pageFlowCountRDD<span class=\"token punctuation\">.</span>foreach<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>      <span class=\"token keyword\">case</span><span class=\"token punctuation\">(</span>ids<span class=\"token punctuation\">,</span>count<span class=\"token punctuation\">)</span> <span class=\"token keyword\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>        <span class=\"token comment\">//      ((id1-id2),count)</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>        <span class=\"token comment\">//    6.1 获取 id1 被访问的总次数</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>        <span class=\"token keyword\">val</span> idArray<span class=\"token operator\">:</span> Array<span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> ids<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">\"-\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>        <span class=\"token keyword\">val</span> sum<span class=\"token operator\">:</span> <span class=\"token builtin\">Int</span> <span class=\"token operator\">=</span> pageIDCount<span class=\"token punctuation\">.</span>toMap<span class=\"token punctuation\">.</span>getOrElse<span class=\"token punctuation\">(</span>idArray<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>        <span class=\"token comment\">//    6.2 使用 count / 总次数就是转换率</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>        println<span class=\"token punctuation\">(</span><span class=\"token string\">\"页面id：【\"</span> <span class=\"token operator\">+</span> ids <span class=\"token operator\">+</span> <span class=\"token string\">\"】的转换率为：\"</span> <span class=\"token operator\">+</span> count<span class=\"token punctuation\">.</span>toDouble<span class=\"token operator\">/</span>sum <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>  <span class=\"token keyword\">override</span> <span class=\"token keyword\">def</span> analysis<span class=\"token punctuation\">(</span>data<span class=\"token operator\">:</span> <span class=\"token builtin\">Any</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Any</span> <span class=\"token operator\">=</span> <span class=\"token operator\">?</span><span class=\"token operator\">?</span><span class=\"token operator\">?</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h5 id=\"2642-运行结果\"><a class=\"anchor\" href=\"#2642-运行结果\">#</a> 2.6.4.2 运行结果</h5>\n<p>![image-20200611120819130](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saWFuLXpwLm9zcy1jbi1zaGVuemhlbi5hbGl5dW5jcy5jb20vcGlj\">https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic</span> GO/20200611120819.png)</p>\n<h4 id=\"265-需求3总结\"><a class=\"anchor\" href=\"#265-需求3总结\">#</a> 2.6.5 需求 3 总结</h4>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 计算转换率的时候算子使用错误，使用 map 没有结果，后来更换成 foreach 就可以了。</span></pre></td></tr></table></figure><h3 id=\"27-需求4-统计页面id的平均停留时间\"><a class=\"anchor\" href=\"#27-需求4-统计页面id的平均停留时间\">#</a> 2.7 需求 4 ：统计页面 id 的平均停留时间</h3>\n<h4 id=\"271-数据结构\"><a class=\"anchor\" href=\"#271-数据结构\">#</a> 2.7.1 数据结构</h4>\n<figure class=\"highlight scala\"><figcaption data-lang=\"scala\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">--</span> 原始数据：    </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">//2019-07-27_   ==> 日期     0</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 73_          ==> 用户 ID   1</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">//d79508b4-66bf-4410-a5bb-f67a8831610f_  ==> 会话 ID  2</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 45_          ==> 页面 ID   3</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 2019-07-27 19:47:55_   ==> 动作时间  4</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">//null_        ==> 搜索     5</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 9_           ==> 点击品类 ID，不是则为 - 1     6</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">// 51_          ==> 点击产品 ID，不是则为 - 1     7</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">//null_        ==> 下单品类 ID，不是则为 null   8</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">//null_        ==> 下单产品 ID，不是则为 null   9</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">//null_        ==> 支付品类 ID，不是则为 null   10</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">//null_        ==> 支付产品 ID ，不是则为 null  11</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\">// 6            ==> 城市 ID，不是则为 null       12</span></pre></td></tr></table></figure><h4 id=\"272-需求结果分析\"><a class=\"anchor\" href=\"#272-需求结果分析\">#</a> 2.7.2 需求结果分析</h4>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 需求分析：</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token number\">1.</span> 单页面id的平均停留时间，是以一个<span class=\"token keyword\">session</span>会话为单位，计算在一个<span class=\"token keyword\">session</span>中页面A停留时间，然后将所有会话中页面A的停留时间汇总，除于这个页面id出现的次数，就是平均停留时间。</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token number\">2.</span> 但是在一个会话的最后一个页面id只有行为时间，没有停留时间，则最后一个页面id的停留时间则忽略不计</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token number\">3.</span> 统计个数时，最后一个id也不计数</pre></td></tr></table></figure><h4 id=\"273-实现步骤\"><a class=\"anchor\" href=\"#273-实现步骤\">#</a> 2.7.3 实现步骤</h4>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1.</span> 按<span class=\"token keyword\">session</span>进行分组</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token punctuation\">(</span><span class=\"token keyword\">session</span><span class=\"token punctuation\">,</span>Iterator<span class=\"token punctuation\">(</span>bean1<span class=\"token punctuation\">,</span>bean2<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">2.</span> 对分组的<span class=\"token keyword\">value</span>进行操作</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token number\">2.1</span> 根据时间升序排序，再进行结构转换</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token punctuation\">(</span>pageid1，time1<span class=\"token punctuation\">)</span>，<span class=\"token punctuation\">(</span>pageid2，time2<span class=\"token punctuation\">)</span>，<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token number\">2.2</span> 拉链数据</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>pageid1，time1<span class=\"token punctuation\">)</span>，<span class=\"token punctuation\">(</span>pageid2，time2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>  <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>pageid2，time2<span class=\"token punctuation\">)</span>，<span class=\"token punctuation\">(</span>pageid3，time3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   <span class=\"token number\">2.3</span> 结构转换</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">(</span>pageid1，time2<span class=\"token operator\">-</span>time1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>  <span class=\"token punctuation\">(</span>pageid2，time3 <span class=\"token operator\">-</span> time2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token number\">3.</span> 对<span class=\"token number\">2</span>的结果数据，结构转换</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   <span class=\"token punctuation\">(</span><span class=\"token keyword\">session</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>pageid1，time2<span class=\"token operator\">-</span>time1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>  <span class=\"token punctuation\">(</span>pageid2，time3 <span class=\"token operator\">-</span> time2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   <span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">></span>  <span class=\"token punctuation\">(</span>pageid1，time2<span class=\"token operator\">-</span>time1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>  <span class=\"token punctuation\">(</span>pageid2，time3 <span class=\"token operator\">-</span> time2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token number\">4.</span> 分组</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token punctuation\">(</span>pageid1，Iterator<span class=\"token punctuation\">(</span>time2<span class=\"token operator\">-</span>time1<span class=\"token punctuation\">,</span>time2<span class=\"token operator\">-</span>time1<span class=\"token punctuation\">,</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token number\">5.</span> 结构转换</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>     <span class=\"token punctuation\">(</span>pageid1，<span class=\"token punctuation\">(</span>timeSum<span class=\"token operator\">/</span>Count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h4 id=\"274-代码实现\"><a class=\"anchor\" href=\"#274-代码实现\">#</a> 2.7.4 代码实现</h4>\n<blockquote>\n<p>说明：在需求 3 的基础上，修改 PageFlowServiceReview 代码逻辑即可，其余代码不需要做任何的改动</p>\n</blockquote>\n<h5 id=\"2741-修改pageflowservicereview\"><a class=\"anchor\" href=\"#2741-修改pageflowservicereview\">#</a> 2.7.4.1 修改 PageFlowServiceReview</h5>\n<figure class=\"highlight scala\"><figcaption data-lang=\"scala\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>atguigu<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span>hotcategorytop10review<span class=\"token punctuation\">.</span>service</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">.</span></span>SimpleDateFormat</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>atguigu<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span>hotcategorytop10review<span class=\"token punctuation\">.</span>bean</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>atguigu<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span>hotcategorytop10review<span class=\"token punctuation\">.</span>dao<span class=\"token punctuation\">.</span></span>PageFlowDAOReview</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>atguigu<span class=\"token punctuation\">.</span>summer<span class=\"token punctuation\">.</span>framework<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span></span>TService</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>atguigu<span class=\"token punctuation\">.</span>summer<span class=\"token punctuation\">.</span>framework<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span>EnvUtils</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>spark<span class=\"token punctuation\">.</span>broadcast<span class=\"token punctuation\">.</span></span>Broadcast</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>spark<span class=\"token punctuation\">.</span>rdd<span class=\"token punctuation\">.</span></span>RDD</pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  * @Description</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  **</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  * @author lianzhipeng</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  * @create 2020-06-11 0:37:41</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  */</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">class</span> PageFlowServiceReview  <span class=\"token keyword\">extends</span>  TService<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> pageFlowDAOReview <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> PageFlowDAOReview</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token keyword\">override</span> <span class=\"token keyword\">def</span> analysis<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">val</span> UserActionRDD<span class=\"token operator\">:</span> RDD<span class=\"token punctuation\">[</span>bean<span class=\"token punctuation\">.</span>UserVisitAction<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> pageFlowDAOReview<span class=\"token punctuation\">.</span>getUserVisitAction<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>      <span class=\"token comment\">// 1. 按 session 进行分组 (session,Iterator (bean1,bean2...))</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">val</span> groupByRDD<span class=\"token operator\">:</span> RDD<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> Iterable<span class=\"token punctuation\">[</span>bean<span class=\"token punctuation\">.</span>UserVisitAction<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> UserActionRDD<span class=\"token punctuation\">.</span>groupBy<span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">.</span>session_id<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>     <span class=\"token comment\">// 2. 对分组的 value 进行操作</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">val</span> sessionPageIdRDD<span class=\"token operator\">:</span> RDD<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> List<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Long</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> groupByRDD<span class=\"token punctuation\">.</span>mapValues<span class=\"token punctuation\">(</span>iter <span class=\"token keyword\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>      <span class=\"token comment\">//  2.1 结构转换，根据时间进行升序排序 (pageid1，time1)，(pageid2，time2)，.....</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>      <span class=\"token keyword\">val</span> dataFormat <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> SimpleDateFormat<span class=\"token punctuation\">(</span><span class=\"token string\">\"yyyy-MM-dd HH:mm:ss\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>      <span class=\"token keyword\">val</span> sortByList<span class=\"token operator\">:</span> List<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Long</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> iter<span class=\"token punctuation\">.</span>map<span class=\"token punctuation\">(</span>action <span class=\"token keyword\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token keyword\">val</span> action_time<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span> <span class=\"token operator\">=</span> action<span class=\"token punctuation\">.</span>action_time</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token keyword\">val</span> time<span class=\"token operator\">:</span> <span class=\"token builtin\">Long</span> <span class=\"token operator\">=</span> dataFormat<span class=\"token punctuation\">.</span>parse<span class=\"token punctuation\">(</span>action_time<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>getTime</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span>page_id<span class=\"token punctuation\">,</span> time<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>toList<span class=\"token punctuation\">.</span>sortBy<span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">.</span>_2<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>      <span class=\"token comment\">// 2.2 拉链数据  ((pageid1，time1)，(pageid2，time2)),  ((pageid2，time2)，(pageid3，time3))...</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>      <span class=\"token keyword\">val</span> zipList<span class=\"token operator\">:</span> List<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Long</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Long</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> sortByList<span class=\"token punctuation\">.</span>zip<span class=\"token punctuation\">(</span>sortByList<span class=\"token punctuation\">.</span>tail<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>      <span class=\"token comment\">// 2.3 结构转换  (pageid1，time2-time1),  (pageid2，time3 - time2), ...</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>     <span class=\"token keyword\">val</span> zipMapList<span class=\"token operator\">:</span> List<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Long</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> zipList<span class=\"token punctuation\">.</span>map <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token keyword\">case</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>id1<span class=\"token punctuation\">,</span> time1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>id2<span class=\"token punctuation\">,</span> time2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>          <span class=\"token punctuation\">(</span>id1<span class=\"token punctuation\">,</span> time2 <span class=\"token operator\">-</span> time1<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>      zipMapList</pre></td></tr><tr><td data-num=\"54\"></td><td><pre></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token comment\">//3. 对 2 的结果数据，结构转换</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token comment\">//(session, (pageid1，time2-time1),  (pageid2，time3 - time2), ...)</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    <span class=\"token comment\">// ==>  (pageid1，time2-time1),  (pageid2，time3 - time2), ...</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    <span class=\"token keyword\">val</span> pageIdTimeRDD<span class=\"token operator\">:</span> RDD<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Long</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> sessionPageIdRDD<span class=\"token punctuation\">.</span>map<span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">.</span>_2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>flatMap<span class=\"token punctuation\">(</span>iter<span class=\"token keyword\">=></span>iter<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    <span class=\"token comment\">// 4. 分组  (pageid1，Iterator (time2-time1,time2-time1,...),</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    <span class=\"token keyword\">val</span> pageidTimeRDD<span class=\"token operator\">:</span> RDD<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> Iterable<span class=\"token punctuation\">[</span><span class=\"token builtin\">Long</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> pageIdTimeRDD<span class=\"token punctuation\">.</span>groupByKey<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>   <span class=\"token comment\">//  5. 结构转换  (pageid1，(timeSum/Count))</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    pageidTimeRDD<span class=\"token punctuation\">.</span>foreach<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>      <span class=\"token keyword\">case</span><span class=\"token punctuation\">(</span>pageID<span class=\"token punctuation\">,</span>iter<span class=\"token punctuation\">)</span> <span class=\"token keyword\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>      <span class=\"token keyword\">val</span> count<span class=\"token operator\">:</span> <span class=\"token builtin\">Int</span> <span class=\"token operator\">=</span> iter<span class=\"token punctuation\">.</span>size</pre></td></tr><tr><td data-num=\"71\"></td><td><pre>      <span class=\"token keyword\">val</span> timeSum<span class=\"token operator\">:</span> <span class=\"token builtin\">Long</span> <span class=\"token operator\">=</span> iter<span class=\"token punctuation\">.</span>sum</pre></td></tr><tr><td data-num=\"72\"></td><td><pre></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>        println<span class=\"token punctuation\">(</span><span class=\"token string\">\"页面id：\"</span> <span class=\"token operator\">+</span> pageID <span class=\"token operator\">+</span> <span class=\"token string\">\",访问次数：\"</span> <span class=\"token operator\">+</span> count <span class=\"token operator\">+</span> <span class=\"token string\">\",平均停留时间：\"</span> <span class=\"token operator\">+</span> timeSum<span class=\"token operator\">/</span>count<span class=\"token operator\">/</span><span class=\"token number\">1000</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"毫秒\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre></pre></td></tr><tr><td data-num=\"77\"></td><td><pre></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>  <span class=\"token keyword\">override</span> <span class=\"token keyword\">def</span> analysis<span class=\"token punctuation\">(</span>data<span class=\"token operator\">:</span> <span class=\"token builtin\">Any</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Any</span> <span class=\"token operator\">=</span> <span class=\"token operator\">?</span><span class=\"token operator\">?</span><span class=\"token operator\">?</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h5 id=\"2745-运行结果\"><a class=\"anchor\" href=\"#2745-运行结果\">#</a> 2.7.4.5 运行结果</h5>\n<p>![image-20200611182010445](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saWFuLXpwLm9zcy1jbi1zaGVuemhlbi5hbGl5dW5jcy5jb20vcGlj\">https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic</span> GO/20200611182010.png)</p>\n<h4 id=\"275-需求4总结\"><a class=\"anchor\" href=\"#275-需求4总结\">#</a> 2.7.5 需求 4 总结</h4>\n<figure class=\"highlight scala\"><figcaption data-lang=\"scala\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 时间格式转换成时间戳</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">val</span> dataFormat <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> SimpleDateFormat<span class=\"token punctuation\">(</span><span class=\"token string\">\"yyyy-MM-dd HH:mm:ss\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">val</span> action_time<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span> <span class=\"token operator\">=</span> action<span class=\"token punctuation\">.</span>action_time</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">val</span> time<span class=\"token operator\">:</span> <span class=\"token builtin\">Long</span> <span class=\"token operator\">=</span> dataFormat<span class=\"token punctuation\">.</span>parse<span class=\"token punctuation\">(</span>action_time<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>getTime</pre></td></tr></table></figure><h2 id=\"三-项目总结\"><a class=\"anchor\" href=\"#三-项目总结\">#</a> 三 、项目总结</h2>\n<h3 id=\"31-踩过的坑\"><a class=\"anchor\" href=\"#31-踩过的坑\">#</a> 3.1  踩过的坑</h3>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 总结 1：</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>在写累加器的时候出现如下情况：</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token number\">1.</span> 在获取遍历累加器的值时，使用了map算子，错误，应该使用foreach，因为map不是行动算子，不会执行遍历的操作</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token number\">2.</span> 更新<span class=\"token keyword\">add</span>方法时，数据累加出现错误，最后执行结果为<span class=\"token number\">0</span>，发现是</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>     bean<span class=\"token punctuation\">.</span>clickCount <span class=\"token operator\">+</span><span class=\"token operator\">=</span> <span class=\"token number\">1</span> 写成了 bean<span class=\"token punctuation\">.</span>clickCount <span class=\"token operator\">+</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token number\">3.</span> 进行数据累加时，发现通不过，原来的是封装的HotCagetoryBean，属性均是val类型，不可变，需改为var类型</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   </pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">-- 总结 2：</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token number\">1.</span> 在进行数据组合时，分割符和原始数据的分隔符一致，导致后面进行数据切分时，数据产生了丢失。</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      开始是：<span class=\"token string\">\"(品类-session，count)\"</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      修正后：<span class=\"token string\">\"(品类&amp;session，count)\"</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">-- 总结 3：</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   <span class=\"token number\">1.</span> 计算转换率的时候算子使用错误，使用map没有结果，后来更换成foreach就可以了，因为map不是行动算子，不会执行遍历的操作。</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   </pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">-- 总结 4：</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>   <span class=\"token number\">1.</span> 时间格式转换成时间戳，一定不要写错</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      yyyy<span class=\"token operator\">-</span>MM<span class=\"token operator\">-</span>dd HH:mm:ss:代表将时间转换为<span class=\"token number\">24</span>小时制<span class=\"token punctuation\">,</span>例: <span class=\"token number\">2018</span><span class=\"token operator\">-</span><span class=\"token number\">06</span><span class=\"token operator\">-</span><span class=\"token number\">27</span> <span class=\"token number\">15</span>:<span class=\"token number\">24</span>:<span class=\"token number\">21</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      yyyy<span class=\"token operator\">-</span>MM<span class=\"token operator\">-</span>dd hh:mm:ss:代表将时间转换为<span class=\"token number\">12</span>小时制<span class=\"token punctuation\">,</span>例: <span class=\"token number\">2018</span><span class=\"token operator\">-</span><span class=\"token number\">06</span><span class=\"token operator\">-</span><span class=\"token number\">27</span> <span class=\"token number\">03</span>:<span class=\"token number\">24</span>:<span class=\"token number\">21</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>   </pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        val dataFormat <span class=\"token operator\">=</span> new SimpleDateFormat<span class=\"token punctuation\">(</span><span class=\"token string\">\"yyyy-MM-dd hh:mm:ss\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        val action_time: String <span class=\"token operator\">=</span> <span class=\"token keyword\">action</span><span class=\"token punctuation\">.</span>action_time</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        val <span class=\"token keyword\">time</span>: Long <span class=\"token operator\">=</span> dataFormat<span class=\"token punctuation\">.</span>parse<span class=\"token punctuation\">(</span>action_time<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>getTime</pre></td></tr></table></figure><p>![image-20200611154033754](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saWFuLXpwLm9zcy1jbi1zaGVuemhlbi5hbGl5dW5jcy5jb20vcGlj\">https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic</span> GO/20200611154033.png)</p>\n<h3 id=\"32-逻辑及优化总结\"><a class=\"anchor\" href=\"#32-逻辑及优化总结\">#</a> 3.2 逻辑及优化总结</h3>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 逻辑部分：</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token number\">1.</span> 弄清楚数据来源和最终结果数据</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token number\">2.</span> 梳理好中间各个实现步骤</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token number\">3.</span> 清楚各个算子之间的作用以及目的</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token number\">4.</span> 逻辑梳理完成以后，完成代码是很简单的事情</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">-- 优化</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   <span class=\"token number\">1.</span> 尽量减少使用有shuffle阶段的算子，如果一定需要有，尽量减少shuffle阶段数据的Io</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   <span class=\"token number\">2.</span> 可以考虑使用累加器来减少shuffle</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   <span class=\"token number\">3.</span> 逻辑代码层次拆分，逻辑控制层、逻辑执行层、资源连接层，且所有层共享的数据，放置在线程的共享内存中</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   <span class=\"token number\">4.</span> 原始数据使用样例类进行封装，减少代码的耦合</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   <span class=\"token number\">5.</span> 如果涉及到Driver向每个executor传递数据量大的对象，那么采用广播变量的方式，减少IO</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>   <span class=\"token number\">6.</span> 如果涉及到一个变量重复使用，考虑变量的持久化，cache <span class=\"token operator\">+</span> <span class=\"token keyword\">checkPoint</span> </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   <span class=\"token number\">7.</span> 两个map之间的合并方式一定要学会，在实际开发过程中，使用的场景很多</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   <span class=\"token number\">8.</span> 使用累加器的时候，特别注意，如果算子执行两次，那么结果会累计计算两次</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>   <span class=\"token number\">9.</span> 排查错误时，自下而上进行排查，可以打印阶段性计算结果，看看是否是自己预期的结果。</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>   <span class=\"token number\">10.</span> 数据一般先进行过滤，再进行计算，减少数据的传输</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>   <span class=\"token number\">11.</span> reduceBykey不一定会有shuffle阶段。</pre></td></tr></table></figure>",
            "tags": []
        },
        {
            "id": "https://github.com/Mayizono/miyazono.github.io/big-data/spark/3.Spark%E7%BC%96%E7%A8%8B2/",
            "url": "https://github.com/Mayizono/miyazono.github.io/big-data/spark/3.Spark%E7%BC%96%E7%A8%8B2/",
            "title": "",
            "date_published": "2021-08-31T10:42:35.359Z",
            "content_html": "<h1 id=\"spark编程2\"><a class=\"anchor\" href=\"#spark编程2\">#</a> Spark 编程 2</h1>\n<hr />\n<h2 id=\"接2spark架构及编程\"><a class=\"anchor\" href=\"#接2spark架构及编程\">#</a> 接 2.Spark 架构及编程</h2>\n<h2 id=\"五-spark核心编程\"><a class=\"anchor\" href=\"#五-spark核心编程\">#</a> 五、Spark 核心编程</h2>\n<h3 id=\"56-累加器\"><a class=\"anchor\" href=\"#56-累加器\">#</a> 5.6 累加器</h3>\n<h4 id=\"561-累加器基本介绍\"><a class=\"anchor\" href=\"#561-累加器基本介绍\">#</a> 5.6.1 累加器基本介绍</h4>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 1. 什么是累加器？</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  分布式共享只写变量，使用累加器完成数据的累加。 </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token number\">1.</span> 分布式：每一个executor都拥有这个累加器</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token number\">2.</span> 共享：Driver中的变量原封不动的被executor拥有一份副本 </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token number\">3.</span> 只写：同一个executor中可以对这个变量进行改值，其他的executor不能读取。</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">-- 2. 累加器用来解决什么问题？</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   <span class=\"token number\">1.</span> 想通过没有shuffle过程的算子来实现数据的累加<span class=\"token string\">\" 所谓累加器，一般作用就是累加（可以是数值的累加，也可以是数据的累加）\"</span>，我们实现的方式是：在driver代码中，声明一个变量<span class=\"token string\">\"类似一个容器\"</span>，来进行接收累加的结果，但是发现，当前情况，driver端的变量传递给executor以后，并在executor进行计算，该变量无法返回给到driver</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   原因是：</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   a、driver端能够传递给到executor，是因为存在闭包的原因</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   b、executor不能传递过来是因为没有闭包的原因。</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>   因此：我们使用了累计器的方式，将上诉声明的变量封装成累加器的方式，使的executor端计算的累加结果能够传回给到driver端。</pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">-- 3. 累计器实现过程：</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>   累加器用来把Executor端变量信息聚合到Driver端。在Driver程序中定义的变量，在Executor端的每个Task都会得到这个变量的一份新的副本，每个task更新这些副本的值后，传回Driver端进行<span class=\"token keyword\">merge</span></pre></td></tr></table></figure><p>![image-20200608203039476](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saWFuLXpwLm9zcy1jbi1zaGVuemhlbi5hbGl5dW5jcy5jb20vcGlj\">https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic</span> GO/20200608203039.png)</p>\n<h4 id=\"562-累加器的使用\"><a class=\"anchor\" href=\"#562-累加器的使用\">#</a> 5.6.2 累加器的使用</h4>\n<figure class=\"highlight scala\"><figcaption data-lang=\"scala\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">val</span> rdd<span class=\"token operator\">:</span> RDD<span class=\"token punctuation\">[</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> sc<span class=\"token punctuation\">.</span>makeRDD<span class=\"token punctuation\">(</span>List<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     <span class=\"token comment\">//1. 声明累加器</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">val</span> sum<span class=\"token operator\">:</span> LongAccumulator <span class=\"token operator\">=</span> sc<span class=\"token punctuation\">.</span>longAccumulator<span class=\"token punctuation\">(</span><span class=\"token string\">\"sum\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    rdd<span class=\"token punctuation\">.</span>foreach<span class=\"token punctuation\">(</span>num <span class=\"token keyword\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token comment\">//2. 调用累加器</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      sum<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>     <span class=\"token comment\">// 3. 获取累加器的值</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    println<span class=\"token punctuation\">(</span>sum<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 一共有三种自带的累加器类型</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>longAccumulator 、doubleAccumulator<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>、collectionAccumulator<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h4 id=\"563-累加器的具体流程\"><a class=\"anchor\" href=\"#563-累加器的具体流程\">#</a> 5.6.3 累加器的具体流程</h4>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1.</span> 将累加器变量注册到spark中</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token number\">2.</span> 执行计算时<span class=\"token punctuation\">,</span>spark会将累加器发送到executor执行计算</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token number\">3.</span> 计算完毕后<span class=\"token punctuation\">,</span>executor会将累加器的计算结果返回到driver端。</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token number\">4.</span> driver端获取到多个累加器的结果，然后两两合并。最后得到累加器的执行结果</pre></td></tr></table></figure><p>![image-20200608204813705](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saWFuLXpwLm9zcy1jbi1zaGVuemhlbi5hbGl5dW5jcy5jb20vcGlj\">https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic</span> GO/20200608204813.png)</p>\n<h4 id=\"564-自定累加器\"><a class=\"anchor\" href=\"#564-自定累加器\">#</a> 5.6.4 自定累加器</h4>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 步骤：</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>     <span class=\"token number\">1.</span> 自定义累加器类，继承extends  AccumulatorV2<span class=\"token punctuation\">[</span><span class=\"token operator\">IN</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">OUT</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     <span class=\"token number\">2.</span> <span class=\"token operator\">IN</span>：累加器输入数据的类型</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">OUT</span>：累加器返回值的数据类型</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        需指定如上两个参数的数据类型</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>     <span class=\"token number\">3.</span> 重写AccumulatorV2中<span class=\"token number\">6</span>个方法</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>             <span class=\"token comment\">-- 方法 1：判断当前的累加器是初始化</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            override def isZero: <span class=\"token keyword\">Boolean</span> <span class=\"token operator\">=</span> ???</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>             <span class=\"token comment\">-- 方法 2：复制一个累加器</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            override def copy<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>: AccumulatorV2<span class=\"token punctuation\">[</span>String<span class=\"token punctuation\">,</span> mutable<span class=\"token punctuation\">.</span>Map<span class=\"token punctuation\">[</span>String<span class=\"token punctuation\">,</span> <span class=\"token keyword\">Int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> ???</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>             <span class=\"token comment\">-- 方法 3：重置累加器</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            override def reset<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>: Unit <span class=\"token operator\">=</span> ???</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>             <span class=\"token comment\">-- 方法 4：向累加器中增加值</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            override def <span class=\"token keyword\">add</span><span class=\"token punctuation\">(</span>v: String<span class=\"token punctuation\">)</span>: Unit <span class=\"token operator\">=</span> ???</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>             <span class=\"token comment\">-- 方法 5：合并当前累加器和其他累加器，两两合并，此方法由 Driver 端调用，合并由 executor 返回的多个累加器</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            override def <span class=\"token keyword\">merge</span><span class=\"token punctuation\">(</span>other: AccumulatorV2<span class=\"token punctuation\">[</span>String<span class=\"token punctuation\">,</span> mutable<span class=\"token punctuation\">.</span>Map<span class=\"token punctuation\">[</span>String<span class=\"token punctuation\">,</span> <span class=\"token keyword\">Int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>: Unit <span class=\"token operator\">=</span> ???</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>             <span class=\"token comment\">-- 方法 6： 返回当前累加器的值</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            override def <span class=\"token keyword\">value</span>: mutable<span class=\"token punctuation\">.</span>Map<span class=\"token punctuation\">[</span>String<span class=\"token punctuation\">,</span> <span class=\"token keyword\">Int</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> ???</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>     <span class=\"token number\">4.</span> 在Driver端的代码</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            a、 创建累加器</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            b、 注册累加器</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            c、 使用累加器</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            d、 获取累加器的值</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            </pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token comment\">-- 说明：方法 1/2/3 在闭包检测和序列化时会使用到。依次进行调用，调用的顺序是：</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            copy <span class=\"token comment\">--> reset --> isZero</span></pre></td></tr></table></figure><ul>\n<li>自定义累加器实现 wordcount</li>\n</ul>\n<figure class=\"highlight scala\"><figcaption data-lang=\"scala\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">object</span> Scala3_ACC <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">def</span> main<span class=\"token punctuation\">(</span>args<span class=\"token operator\">:</span> Array<span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Unit</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">val</span> sparkConf<span class=\"token operator\">:</span> SparkConf <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> SparkConf<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>setMaster<span class=\"token punctuation\">(</span><span class=\"token string\">\"local[*]\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>setAppName<span class=\"token punctuation\">(</span><span class=\"token string\">\"acc\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">val</span> sc <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> SparkContext<span class=\"token punctuation\">(</span>sparkConf<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">val</span> rdd<span class=\"token operator\">=</span> sc<span class=\"token punctuation\">.</span>makeRDD<span class=\"token punctuation\">(</span>List<span class=\"token punctuation\">(</span><span class=\"token string\">\"spark hadoop\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"scala\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"java hello scala\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">//1. 创建累加器</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">val</span> acc <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> WordCountAccumulator</pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">//2. 注册累加器</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    sc<span class=\"token punctuation\">.</span>register<span class=\"token punctuation\">(</span>acc<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\">//3. 调用累加器</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    rdd<span class=\"token punctuation\">.</span>flatMap<span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>foreach<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      word <span class=\"token keyword\">=></span> acc<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span>word<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token comment\">//4. 获取累加器的值</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    println<span class=\"token punctuation\">(</span>acc<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    sc<span class=\"token punctuation\">.</span>stop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  <span class=\"token comment\">// 自定义累加器</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  <span class=\"token keyword\">class</span> WordCountAccumulator <span class=\"token keyword\">extends</span> AccumulatorV2<span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> mutable<span class=\"token punctuation\">.</span>Map<span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">var</span> wordCountMap<span class=\"token operator\">:</span> mutable<span class=\"token punctuation\">.</span>Map<span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> mutable<span class=\"token punctuation\">.</span>Map<span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token comment\">// 方法 1：判断当前的累加器是初始化</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">override</span> <span class=\"token keyword\">def</span> isZero<span class=\"token operator\">:</span> <span class=\"token builtin\">Boolean</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>      wordCountMap<span class=\"token punctuation\">.</span>isEmpty</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token comment\">// 方法 2：复制一个累加器</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token keyword\">override</span> <span class=\"token keyword\">def</span> copy<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> AccumulatorV2<span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> mutable<span class=\"token punctuation\">.</span>Map<span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>      <span class=\"token keyword\">new</span> WordCountAccumulator</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token comment\">// 方法 3：重置累加器</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token keyword\">override</span> <span class=\"token keyword\">def</span> reset<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Unit</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>      wordCountMap<span class=\"token punctuation\">.</span>clear<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>   <span class=\"token comment\">//- 方法 4：向累加器中增加值</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token keyword\">override</span> <span class=\"token keyword\">def</span> add<span class=\"token punctuation\">(</span>word<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Unit</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>      wordCountMap<span class=\"token punctuation\">(</span>word<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> wordCountMap<span class=\"token punctuation\">.</span>getOrElse<span class=\"token punctuation\">(</span>word<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token comment\">// 方法 5：合并当前累加器和其他累加器，两两合并，此方法由 Driver 端调用，合并由 executor 返回的多个累加器</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token keyword\">override</span> <span class=\"token keyword\">def</span> merge<span class=\"token punctuation\">(</span>other<span class=\"token operator\">:</span> AccumulatorV2<span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> mutable<span class=\"token punctuation\">.</span>Map<span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Unit</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>      <span class=\"token keyword\">val</span> map1 <span class=\"token operator\">=</span> wordCountMap</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>      <span class=\"token keyword\">val</span> map2 <span class=\"token operator\">=</span> other<span class=\"token punctuation\">.</span>value</pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>      wordCountMap <span class=\"token operator\">=</span> map1<span class=\"token punctuation\">.</span>foldLeft<span class=\"token punctuation\">(</span>map2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">,</span> kv<span class=\"token punctuation\">)</span> <span class=\"token keyword\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        map<span class=\"token punctuation\">(</span>kv<span class=\"token punctuation\">.</span>_1<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> map<span class=\"token punctuation\">.</span>getOrElse<span class=\"token punctuation\">(</span>kv<span class=\"token punctuation\">.</span>_1<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> kv<span class=\"token punctuation\">.</span>_2</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        map</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>      <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>   <span class=\"token comment\">// 方法 6：返回当前累加器的值</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    <span class=\"token keyword\">override</span> <span class=\"token keyword\">def</span> value<span class=\"token operator\">:</span> mutable<span class=\"token punctuation\">.</span>Map<span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>      wordCountMap</pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre></pre></td></tr><tr><td data-num=\"64\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"57-广播变量\"><a class=\"anchor\" href=\"#57-广播变量\">#</a> 5.7 广播变量</h3>\n<h4 id=\"571-介绍\"><a class=\"anchor\" href=\"#571-介绍\">#</a> 5.7.1 介绍</h4>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">--1. 当前现状</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   一个Executor有多个core，所以可以同时执行多个task，当Driver需要传递一个数据量很大的对象时，由于每一个task中都含有这么一个变量，这样一来，数据在executor中就存在多份。</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">--2. 导致问题：</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token number\">1.</span>在Executor数据冗余</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token number\">2.</span>Executor内存可能溢出</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   <span class=\"token number\">3.</span>如果存在shuffle阶段，数据传输效率将会非常低。</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   为了解决出现这种性能的问题，可以将数据独立出来，在executor的内存中只保留一份，防止shuffle操作。</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">--3. 由于数据是保存在 task 中，如何独立出来呢？</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  使用广播变量的模式。   </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">--4. 什么是广播变量？</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   分布式共享只读变量</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   <span class=\"token number\">1.</span> 只读：只能被访问，不能被修改</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>   <span class=\"token number\">2.</span> 共享：可以被当前executor中所有task访问，还可以被其他的executor访问</pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\">--5. 广播变量的声明和使用</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>       val list <span class=\"token operator\">=</span> List<span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"c\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"d\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token comment\">-- 声明广播变量</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        val broadcast: Broadcast<span class=\"token punctuation\">[</span>List<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">,</span> <span class=\"token keyword\">Int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> sc<span class=\"token punctuation\">.</span>broadcast<span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token comment\">-- 使用广播变量 </span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span><span class=\"token operator\">-</span> broadcast<span class=\"token punctuation\">.</span><span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>![image-20200608213525912](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saWFuLXpwLm9zcy1jbi1zaGVuemhlbi5hbGl5dW5jcy5jb20vcGlj\">https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic</span> GO/20200608213525.png)</p>\n<h4 id=\"572-编程实现\"><a class=\"anchor\" href=\"#572-编程实现\">#</a> 5.7.2 编程实现</h4>\n<figure class=\"highlight scala\"><figcaption data-lang=\"scala\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">val</span> rdd1 <span class=\"token operator\">=</span> sc<span class=\"token punctuation\">.</span>makeRDD<span class=\"token punctuation\">(</span>List<span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"c\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"d\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">val</span> list <span class=\"token operator\">=</span> List<span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"c\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"d\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 声明广播变量</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">val</span> broadcast<span class=\"token operator\">:</span> Broadcast<span class=\"token punctuation\">[</span>List<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> sc<span class=\"token punctuation\">.</span>broadcast<span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">val</span> resultRDD<span class=\"token operator\">:</span> RDD<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> rdd1<span class=\"token punctuation\">.</span>map <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token keyword\">case</span> <span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> num<span class=\"token punctuation\">)</span> <span class=\"token keyword\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">var</span> num2 <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\">// 使用广播变量</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span> <span class=\"token keyword\">&lt;-</span> broadcast<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>k <span class=\"token operator\">==</span> key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            num2 <span class=\"token operator\">=</span> v</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">,</span> num2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        resultRDD<span class=\"token punctuation\">.</span>collect<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>foreach<span class=\"token punctuation\">(</span>println<span class=\"token punctuation\">)</span></pre></td></tr></table></figure>",
            "tags": []
        },
        {
            "id": "https://github.com/Mayizono/miyazono.github.io/big-data/spark/2.Spark%E6%9E%B6%E6%9E%84%E5%8F%8A%E7%BC%96%E7%A8%8B/",
            "url": "https://github.com/Mayizono/miyazono.github.io/big-data/spark/2.Spark%E6%9E%B6%E6%9E%84%E5%8F%8A%E7%BC%96%E7%A8%8B/",
            "title": "",
            "date_published": "2021-08-31T10:42:35.354Z",
            "content_html": "<h1 id=\"spark架构及编程\"><a class=\"anchor\" href=\"#spark架构及编程\">#</a> Spark 架构及编程</h1>\n<hr />\n<h2 id=\"接spark环境的安装\"><a class=\"anchor\" href=\"#接spark环境的安装\">#</a> 接 Spark 环境的安装</h2>\n<h2 id=\"四-spark运行框架\"><a class=\"anchor\" href=\"#四-spark运行框架\">#</a> 四、Spark 运行框架</h2>\n<h3 id=\"41-运行框架\"><a class=\"anchor\" href=\"#41-运行框架\">#</a> 4.1 运行框架</h3>\n<p>![image-20200602225134787](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saWFuLXpwLm9zcy1jbi1zaGVuemhlbi5hbGl5dW5jcy5jb20vcGlj\">https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic</span> GO/20200602225135.png)</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">--1. Spark 框架可以理解三个部分组成</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>第一部分： Driver <span class=\"token operator\">+</span> Executor  <span class=\"token comment\">-->  任务执行和调度</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>第二部分： Master <span class=\"token operator\">+</span> Worker    <span class=\"token comment\">-->  Saprk 自身的资源调度框架</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>第三部分： Cluster Manager    <span class=\"token comment\">-->  集群管理，中间件</span></pre></td></tr></table></figure><ol>\n<li><mark>Driver + Executor</mark></li>\n</ol>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- Driver：驱动器</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token number\">1.</span> 用于执行Spark任务中的main<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>方法，负责实际代码的执行</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token number\">2.</span> 将用户程序转化为job；</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token number\">3.</span> 调度Executor之间的任务<span class=\"token punctuation\">(</span>task<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token number\">4.</span> 跟踪Executor的执行情况；</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token number\">5.</span> 通过UI展示查询运行的结果。</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">-- Executor: 执行器</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre> \t<span class=\"token number\">1.</span> 是worker的一个JVM进程，负责Spark执行具体的任务<span class=\"token punctuation\">(</span>task<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre> \t<span class=\"token number\">2.</span> 负责运行组成Spark应用的任务，并将结果返回给驱动器进程；</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> \t<span class=\"token number\">3.</span> 在执行器内有块管理器，为用户程序中要求缓存的RDD提供内存的缓存。</pre></td></tr></table></figure><ol start=\"2\">\n<li><mark>Master + worker</mark></li>\n</ol>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- Master</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token number\">1.</span> 类似YARN中的RM<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token number\">2.</span> 负责资源的调度和分配，并进行集群的监控</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre> <span class=\"token comment\">-- worker</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token number\">1.</span> 类似YARN中的NM；</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token number\">2.</span> 是一个进程，一个Worker运行在集群的一个服务器上，由Master分配资源对数据进行并行的处理和计算。</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"9\"></td><td><pre> <span class=\"token comment\">-- 只有独立部署的模式下才有 Master 和 Worker.</span></pre></td></tr></table></figure><ol start=\"3\">\n<li><mark>ApplicationMaster</mark></li>\n</ol>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>ApplicationMaster就是用来为RM<span class=\"token punctuation\">(</span>资源<span class=\"token punctuation\">)</span> 和Driver<span class=\"token punctuation\">(</span>计算<span class=\"token punctuation\">)</span> 之间解耦合</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">-- 如何理解解耦合？</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>Application作为Driver和RM的中间人，Driver和RM不需要直接连接，这样当Driver出现变动时，RM并不需要做任何代码的修改，也就是\"你的改变，我看不见<span class=\"token operator\">~</span><span class=\"token operator\">~</span></pre></td></tr></table></figure><p>![image-20200603085844513](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saWFuLXpwLm9zcy1jbi1zaGVuemhlbi5hbGl5dW5jcy5jb20vcGlj\">https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic</span> GO/20200603085844.png)</p>\n<h3 id=\"42-核心概念\"><a class=\"anchor\" href=\"#42-核心概念\">#</a> 4.2 核心概念</h3>\n<h4 id=\"421-执行器exerutor\"><a class=\"anchor\" href=\"#421-执行器exerutor\">#</a> 4.2.1 执行器 Exerutor</h4>\n<p>如下是执行器的参数，有执行器的个数、每个执行器的内存大小、每个执行器虚拟的 CPU 的核数</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>--num-executors</td>\n<td>配置 Executor 的数量</td>\n</tr>\n<tr>\n<td>--executor-memory</td>\n<td>配置每个 Executor 的内存大小</td>\n</tr>\n<tr>\n<td>--executor-cores</td>\n<td>配置每个 Executor 的虚拟 CPU core 数量</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"422-并行度parallelism\"><a class=\"anchor\" href=\"#422-并行度parallelism\">#</a> 4.2.2 并行度（Parallelism）</h4>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 什么是并行度</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>整个集群并行执行任务的数量称为并行度。</pre></td></tr></table></figure><h4 id=\"423-有向无环图dag\"><a class=\"anchor\" href=\"#423-有向无环图dag\">#</a> 4.2.3 有向无环图（DAG）</h4>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 什么是有向无环图</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>DAG<span class=\"token punctuation\">(</span>Directed Acycli Graph<span class=\"token punctuation\">)</span>:由点和线组成的拓扑图形，该图形具有方向，不会闭环。</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">-- tez ：是作业和作业之间的有向无环图</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">-- Spark：是作业内部的有向无环图</span></pre></td></tr></table></figure><p>![image-20200602232357360](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saWFuLXpwLm9zcy1jbi1zaGVuemhlbi5hbGl5dW5jcy5jb20vcGlj\">https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic</span> GO/20200602232357.png)</p>\n<h4 id=\"424-提交流程\"><a class=\"anchor\" href=\"#424-提交流程\">#</a> 4.2.4 提交流程</h4>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token string\">\"先作为了解，后续再详细讲解\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Spark应用程序提交到Yarn环境中执行的时候，一般会有两种部署执行的方式：Client和Cluster。两种模式，主要区别在于：<span class=\"token string\">\"Driver程序的运行节点\"</span></pre></td></tr></table></figure><p>![image-20200602232448093](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saWFuLXpwLm9zcy1jbi1zaGVuemhlbi5hbGl5dW5jcy5jb20vcGlj\">https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic</span> GO/20200602232448.png)</p>\n<h2 id=\"五-spark核心编程\"><a class=\"anchor\" href=\"#五-spark核心编程\">#</a> 五、Spark 核心编程</h2>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">--Spark 计算框架为了提供高吞吐、高并发的数据处理，提供了三大数据结构，处理不同数据的应用场景。</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>框架<span class=\"token number\">1</span>：RDD：<span class=\"token punctuation\">(</span>Resillient distribute dataset<span class=\"token punctuation\">)</span> 弹性分布式数据集</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>框架<span class=\"token number\">2</span>：累加器：分布式共享<span class=\"token string\">\"只写\"</span>变量</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>框架<span class=\"token number\">3</span>：广播变量：分布式共享<span class=\"token string\">\"只读\"</span>变量</pre></td></tr></table></figure><h3 id=\"51-rdd\"><a class=\"anchor\" href=\"#51-rdd\">#</a> 5.1 RDD</h3>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 什么是 RDD?</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>弹性分布式数据集，一种数据处理的<span class=\"token string\">\"模型\"</span><span class=\"token operator\">&amp;</span><span class=\"token string\">\"数据结构\"</span>，<span class=\"token string\">\"可以理解为在java中我们创建了一个类，在类中构建了很多属性和方法，然后最后使用一个行动算子，将这些方法全部启动运行，并将运行的结果返回\"</span>，是一个抽象类。如汽车模型，航母模型、手机模型等。</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">-- RDD 的特点：</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token number\">1.</span> 可分区：提高消费能力，更适合并发计算，类似kafka的消费者消费数据，<span class=\"token string\">\"一个分区对应一个task，在executor中，一个core对应一个task，这样就体现了并发计算\"</span>。</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token number\">2.</span> 弹性：变化，可变。</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\ta、存储弹性：可以在磁盘和内存之间自动切换；<span class=\"token string\">\"shuffle阶段，就会将数据存入磁盘中，避免数据量过大，导致任务失败。一个任务分很多个阶段，每个阶段内的运行，则是基于内存的。\"</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\tb、容错弹性：数据丢失可以自动恢复；</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\tc、计算弹性：计算出错后重试机制；</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\td、分区弹性： 根据计算结果动态改变分区的数量。<span class=\"token string\">\"每次计算以后，可能数据会减少，这样一来，就会造成数据倾斜的状况，通过动态修改分区的数量，这样就可以数据使尽量均匀分布在不同的分区内。\"</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>     <span class=\"token number\">3.</span> 不可变：类似不可变集合</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>          RDD只存储计算的逻辑，不存储数据，计算的逻辑是不可变的，一旦改变，则会创建新的RDD；</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>     <span class=\"token number\">4.</span> RDD ：一个抽象类，需要子类具体实现<span class=\"token punctuation\">,</span>说明有很多种数据处理方式</pre></td></tr></table></figure><h3 id=\"52-io\"><a class=\"anchor\" href=\"#52-io\">#</a> 5.2 IO</h3>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- IO 流分为：</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>          字节流          字符流</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>输入流   inputStream       <span class=\"token keyword\">read</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>输出流   outPutStream      <span class=\"token keyword\">write</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>节点流  <span class=\"token keyword\">File</span> <span class=\"token operator\">+</span> 字符流<span class=\"token operator\">/</span>字节流</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>处理流  buffer  <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span> <span class=\"token keyword\">File</span><span class=\"token operator\">+</span> 字符流<span class=\"token operator\">/</span>字节流 <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">-- 解读如下三张图流程</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>图<span class=\"token number\">1</span>：使用字节流读取一个文件的内容并打印到控制台，使用一个文件节点流，一次只能读取一部分数据，然后打印，然后再读取一部分数据，再进行打印，慢；</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>图<span class=\"token number\">2</span>：增加一个缓冲流，将获取的数据暂时先存放在内存的一个缓冲区内，等到达一定的数据量以后，再统一处理；</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>图<span class=\"token number\">3</span>：发现字节流获取的数据，打印到控制台，我们是不认识的，中间使用一个字节流转字符流，将读取的数据转化为字符流，然后再将字符缓存到内存，待达到一定的数据量以后，再往控制台上打印。</pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>综上，发现，如上的过程属于装饰者设计模式，前者的结果传递到后者，一层一层的包裹起来。</pre></td></tr></table></figure><p>![image-20200602235042403](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saWFuLXpwLm9zcy1jbi1zaGVuemhlbi5hbGl5dW5jcy5jb20vcGlj\">https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic</span> GO/20200602235042.png)</p>\n<p>![image-20200602235122170](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saWFuLXpwLm9zcy1jbi1zaGVuemhlbi5hbGl5dW5jcy5jb20vcGlj\">https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic</span> GO/20200602235122.png)</p>\n<p>![image-20200602235154706](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saWFuLXpwLm9zcy1jbi1zaGVuemhlbi5hbGl5dW5jcy5jb20vcGlj\">https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic</span> GO/20200602235154.png)</p>\n<h3 id=\"53-rdd执行原理\"><a class=\"anchor\" href=\"#53-rdd执行原理\">#</a> 5.3 RDD 执行原理</h3>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- RDD 的执行原理：</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">1.</span> 类似IO处理；</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">2.</span> 装饰者设计模式，通过new的方式体现装饰者设计模式；</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">3.</span> 延迟加载，RDD只是封装了逻辑，只要当行动算子<span class=\"token string\">\"如collect()\"</span>执行时，才会开始执行整个逻辑。</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">-- 与 IO 的区别：</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>RDD不保存数据，只保留逻辑；</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>IO会保存数据</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">-- 如何理解 RDD</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>不可变集合 <span class=\"token comment\">--> 增加新的数据 --> 创建新的集合</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>RDD <span class=\"token comment\">--> 扩展新的功能 --> 创建新的 RDD</span></pre></td></tr></table></figure><p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saWFuLXpwLm9zcy1jbi1zaGVuemhlbi5hbGl5dW5jcy5jb20vcGlj\">https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic</span> GO/20200603000038.png&quot; alt=&quot;image-20200603000038108&quot;  /&gt;</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 解读 RDD：</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">1.</span> Executor有多个core</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">2.</span> 默认一个分区生成一个task</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">3.</span> 一个task由一个core执行</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">4.</span> 所以一个Executor可以执行多个task</pre></td></tr></table></figure><p>![image-20200603101333142](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saWFuLXpwLm9zcy1jbi1zaGVuemhlbi5hbGl5dW5jcy5jb20vcGlj\">https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic</span> GO/20200603101333.png)</p>\n<h3 id=\"54-rdd的核心属性\"><a class=\"anchor\" href=\"#54-rdd的核心属性\">#</a> 5.4 RDD 的核心属性</h3>\n<h4 id=\"541-分区列表\"><a class=\"anchor\" href=\"#541-分区列表\">#</a> 5.4.1 分区列表</h4>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 什么是分区列表</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>就是RDD中的多个分区</pre></td></tr></table></figure><p>![image-20200603003135290](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saWFuLXpwLm9zcy1jbi1zaGVuemhlbi5hbGl5dW5jcy5jb20vcGlj\">https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic</span> GO/20200603003135.png)</p>\n<h4 id=\"542-分区计算函数\"><a class=\"anchor\" href=\"#542-分区计算函数\">#</a> 5.4.2 分区计算函数</h4>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 什么是分区计算函数</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>就是RDD中的计算逻辑，不同的分区具有相同的计算逻辑。</pre></td></tr></table></figure><p>![image-20200603003153013](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saWFuLXpwLm9zcy1jbi1zaGVuemhlbi5hbGl5dW5jcy5jb20vcGlj\">https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic</span> GO/20200603003153.png)</p>\n<h4 id=\"543-rdd之间的依赖关系\"><a class=\"anchor\" href=\"#543-rdd之间的依赖关系\">#</a> 5.4.3 RDD 之间的依赖关系</h4>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 什么是 RDD 之间的依赖关系</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>当需求中需要将多个计算模型进行组合时，就需要将多个RDD建立依赖关系</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>之所以有依赖关系，是因为假如将所有的执行逻辑封装在一个RDD中时，那么不知道哪个先执行，哪个后执行。</pre></td></tr></table></figure><p>![image-20200603003356558](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saWFuLXpwLm9zcy1jbi1zaGVuemhlbi5hbGl5dW5jcy5jb20vcGlj\">https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic</span> GO/20200603003356.png)</p>\n<h4 id=\"544-分区器可选\"><a class=\"anchor\" href=\"#544-分区器可选\">#</a> 5.4.4 分区器（可选）</h4>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 什么是分区器</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>数据进入分区的规则，对数据进行分区。</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">1.</span> 只能是KV键值对的数据可以指定进入分区的规则</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">2.</span> 默认没有分区器</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token string\">\"分区器和分区的个数有什么关系呢？\"</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>分区器：是一种规则，针对kv数据结构的rdd，指明什么样的数据进入哪个分区</pre></td></tr></table></figure><p>![image-20200603003507224](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saWFuLXpwLm9zcy1jbi1zaGVuemhlbi5hbGl5dW5jcy5jb20vcGlj\">https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic</span> GO/20200603003507.png)</p>\n<h4 id=\"545-首选位置可选\"><a class=\"anchor\" href=\"#545-首选位置可选\">#</a> 5.4.5 首选位置（可选）</h4>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 什么是首选位置</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>根据本地化级别，确定task去到哪一个Executor中进行计算</pre></td></tr></table></figure><p>![image-20200603003641655](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saWFuLXpwLm9zcy1jbi1zaGVuemhlbi5hbGl5dW5jcy5jb20vcGlj\">https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic</span> GO/20200603003641.png)</p>\n<p>![](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saWFuLXpwLm9zcy1jbi1zaGVuemhlbi5hbGl5dW5jcy5jb20vcGlj\">https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic</span> GO/20200603003308.png)</p>\n<h3 id=\"55-基础编程\"><a class=\"anchor\" href=\"#55-基础编程\">#</a> 5.5 基础编程</h3>\n<h4 id=\"551-创建rdd\"><a class=\"anchor\" href=\"#551-创建rdd\">#</a> 5.5.1 创建 RDD</h4>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 4 种创建 RDD 的方式：</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token number\">1.</span> 从内存<span class=\"token punctuation\">(</span>集合<span class=\"token punctuation\">)</span>中创建</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token number\">2.</span> 从磁盘中创建</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token number\">3.</span> 从其他RDD中创建：RDD调用新的逻辑就是创建新的RDD</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token number\">4.</span> 直接创建：通过new的方式，spark框架内部会使用</pre></td></tr></table></figure><h5 id=\"5511-从内存集合中创建\"><a class=\"anchor\" href=\"#5511-从内存集合中创建\">#</a> 5.5.1.1 从内存 (集合) 中创建</h5>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 方法 1：parallelize (形参)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token number\">1.</span> 方法：使用parallelize<span class=\"token punctuation\">(</span>形参<span class=\"token punctuation\">)</span>：创建一个RDD</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token number\">2.</span> 形参：有两个参数：</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>       <span class=\"token string\">\"参数1\"</span>：seq:Seq<span class=\"token punctuation\">[</span>T<span class=\"token punctuation\">]</span>，带泛型的序列，可以传递一个List集合</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>       <span class=\"token string\">\"参数2\"</span>：numSlices：<span class=\"token keyword\">int</span> <span class=\"token operator\">=</span> defaultParallelism，分片的数量，<span class=\"token string\">\"后面讲平行度和分区时详细讲\"</span>。</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> <span class=\"token comment\">-- 方法 2：makeRDD (形参)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token number\">1.</span>发现：底层还是调用了parallelize方法，所以参数和parallelize方法一模一样，只是方法名更好理解</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      \t源码：</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      \tparallelize<span class=\"token punctuation\">(</span>seq<span class=\"token punctuation\">,</span> numSlices<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><figure class=\"highlight scala\"><figcaption data-lang=\"scala\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 构建 Spark 的环境和创建和 Spark 的连接说明</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    setMaster (master：String)：指明 Spark 运行的环境</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    形参：local []    学习期间暂时使用本地环境</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    local [1]: 代表单核</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    local [4]: 代表 4 核</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    local [*]: 代表最大核数，在设备管理器中可以查看，我的电脑是 12 核</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    SetAppName (name:String): 执行程序的名称。</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">val</span> sparkConf<span class=\"token operator\">:</span> SparkConf <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> SparkConf<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>setMaster<span class=\"token punctuation\">(</span><span class=\"token string\">\"local[*]\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>setAppName<span class=\"token punctuation\">(</span><span class=\"token string\">\"wordCount\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">val</span> sc <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> SparkContext<span class=\"token punctuation\">(</span>sparkConf<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><figure class=\"highlight scala\"><figcaption data-lang=\"scala\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">val</span> list <span class=\"token operator\">=</span> List<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 方法 1：parallelize (list)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">val</span> datas<span class=\"token operator\">:</span> RDD<span class=\"token punctuation\">[</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> sc<span class=\"token punctuation\">.</span>parallelize<span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    datas<span class=\"token punctuation\">.</span>saveAsTextFile<span class=\"token punctuation\">(</span><span class=\"token string\">\"output\"</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//local, 单核，数据只存在一个分区</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    datas<span class=\"token punctuation\">.</span>saveAsTextFile<span class=\"token punctuation\">(</span><span class=\"token string\">\"output1\"</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//local [3], 三核，数据存在 3 个分区</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    datas<span class=\"token punctuation\">.</span>saveAsTextFile<span class=\"token punctuation\">(</span><span class=\"token string\">\"output2\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token comment\">//local [*], 最大核数：12 核，生成 12 个分区，但是由于 list 数据没有那么多，所以有些分区没有数据</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// 方法 2：makeRDD (list)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">val</span> rdd<span class=\"token operator\">:</span> RDD<span class=\"token punctuation\">[</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> sc<span class=\"token punctuation\">.</span>makeRDD<span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token comment\">// 将 RDD 的处理后的数据保存到分区文件中</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    rdd<span class=\"token punctuation\">.</span>saveAsTextFile<span class=\"token punctuation\">(</span><span class=\"token string\">\"output3\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h5 id=\"5512-从外部disk存储中创建rdd\"><a class=\"anchor\" href=\"#5512-从外部disk存储中创建rdd\">#</a> 5.5.1.2 从外部 (Disk) 存储中创建 RDD</h5>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 从本地磁盘中创建 RDD</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token number\">1.</span> 方法：textFile<span class=\"token punctuation\">(</span>形参<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token number\">2.</span> 形参：有两个参数</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>       <span class=\"token string\">\"参数1\"</span>：path:String，表示文件的路径</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>              <span class=\"token string\">\"表示方式\"</span>：</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>              a、可以表示一个文件</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>              b、可以表示一个文件夹</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>              c、还可以使用通配符<span class=\"token string\">\"星号\"</span>的方式表示多个文件</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>              如val rdd: RDD<span class=\"token punctuation\">[</span>String<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> sc<span class=\"token punctuation\">.</span>textFile<span class=\"token punctuation\">(</span><span class=\"token string\">\"input/*.txt\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>              <span class=\"token string\">\"路径说明\"</span>：</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>              a、可以是相对路径，在IDEA中，从当前项目的根目录下往下找，path路径根据环境的不同自动发生改变</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>              b、也可以是绝对路径</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>              c、还可以指向第三方存储路径，如HDFS</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      <span class=\"token string\">\"参数2\"</span>：minPartitions：<span class=\"token keyword\">Int</span> <span class=\"token operator\">=</span> defaultMinPartitions</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>              指建议产生的RDD的最小分区数，<span class=\"token string\">\"后面与并行度重点展开\"</span>。</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>          \t  suggested minimum number <span class=\"token keyword\">of</span> partitions <span class=\"token keyword\">for</span> the resulting RDD</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>          \t  </pre></td></tr><tr><td data-num=\"18\"></td><td><pre> <span class=\"token comment\">-- 说明：spark 读取文件时，默认是采用 hadoop 读取文件的规则，按行读取。</span></pre></td></tr></table></figure><figure class=\"highlight scala\"><figcaption data-lang=\"scala\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 环境准备和连接 Spark</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">val</span> sparkConf<span class=\"token operator\">:</span> SparkConf <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> SparkConf<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>setMaster<span class=\"token punctuation\">(</span><span class=\"token string\">\"local\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>setAppName<span class=\"token punctuation\">(</span><span class=\"token string\">\"wordCount\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">val</span> sc <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> SparkContext<span class=\"token punctuation\">(</span>sparkConf<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 创建 RDD</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">val</span> rdd<span class=\"token operator\">:</span> RDD<span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> sc<span class=\"token punctuation\">.</span>textFile<span class=\"token punctuation\">(</span><span class=\"token string\">\"input\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   <span class=\"token comment\">// 将 RDD 处理后的数据保存到分区文件中</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    rdd<span class=\"token punctuation\">.</span>saveAsTextFile<span class=\"token punctuation\">(</span><span class=\"token string\">\"output\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h4 id=\"552-并行度与分区\"><a class=\"anchor\" href=\"#552-并行度与分区\">#</a> 5.5.2 并行度与分区</h4>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 1. 理解一下什么是并行度和分区</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   并行度：parallelism，指整个集群同时执行任务的数量</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   分区：partitions，数据在RDD中分区，在RDD模型中，一个分区将生成一个task，且task执行互不影响。</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">-- 2. 并行度和分区的关系</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   默认情况下（即资源充足的情况下），一个分区生成的一个task，一个task为一个并行度。</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   也就是：分区数量 <span class=\"token operator\">=</span> 并行度。</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   </pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">-- 说明：并行度还和集群的总核数有关，所以资源充足就是指集群可用的核数  core >= task 数量，如果可用的 core &lt; task 数量 (即分区数量)，那么并行度就比 task 小。</span></pre></td></tr></table></figure><h5 id=\"5521-从内存中读取数据\"><a class=\"anchor\" href=\"#5521-从内存中读取数据\">#</a> 5.5.2.1 从内存中读取数据</h5>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1.</span> 创建RDD的方式为：</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">-- 方法 1：parallelize (形参)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">-- 方法 2：makeRDD (形参)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">2.</span> 形参为：<span class=\"token punctuation\">(</span> seq:Seq<span class=\"token punctuation\">[</span>T<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>numSlices：<span class=\"token keyword\">int</span> <span class=\"token operator\">=</span> defaultParallelism<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   形参<span class=\"token number\">2</span>：numSlices：<span class=\"token keyword\">int</span> <span class=\"token operator\">=</span> defaultParallelism</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   <span class=\"token string\">\"参数的含义\"</span>：表示集合被切分分区数量，有默认值： number <span class=\"token keyword\">of</span> partitions <span class=\"token keyword\">to</span> divide the collection <span class=\"token keyword\">into</span>。</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>       分区数量：</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>       a、如果传参数了，那么按照传递的参数为分区数量；</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>       b、如果没有传参数，则使用默认值，默认值的情况如下：</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>          源码中：</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>          默认值：defaultParallelism，<span class=\"token string\">\"默认并行度\"</span>，调用下面这个函数：</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>          scheduler<span class=\"token punctuation\">.</span>conf<span class=\"token punctuation\">.</span>getInt<span class=\"token punctuation\">(</span><span class=\"token string\">\"spark.default.parallelism\"</span><span class=\"token punctuation\">,</span> totalCores<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>           ①如果连接spark的配置中设定spark<span class=\"token punctuation\">.</span><span class=\"token keyword\">default</span><span class=\"token punctuation\">.</span>parallelism参数了，那么就等于设定的参数</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>           ②如果没有设置，那么就等于机器总核数</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>               <span class=\"token string\">\"什么是机器总核数?\"</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>               机器总核数 <span class=\"token operator\">=</span> 当前环境中可用核数</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>               <span class=\"token keyword\">local</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> 单核（单线程）<span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>               <span class=\"token keyword\">local</span><span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token number\">4</span>核（<span class=\"token number\">4</span>个线程） <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token number\">4</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>               <span class=\"token keyword\">local</span><span class=\"token punctuation\">[</span><span class=\"token operator\">*</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> 最大核数 <span class=\"token operator\">=</span><span class=\"token operator\">></span> 我的电脑最大核数为<span class=\"token number\">12</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                </pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token number\">3.</span> 通过参数<span class=\"token number\">2</span>知道了数据的分区数量，那么数据进入不同分区的规则是什么？</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>   如下有三个案例，通过设置不同的分区数量，确认数据在分区中的情况。</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>   </pre></td></tr><tr><td data-num=\"25\"></td><td><pre>   <span class=\"token comment\">-- 规则总结：</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>   内存中的数据在分区中基本上是平均分配的。</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>   如果：数据条数 <span class=\"token operator\">%</span> 分区数 <span class=\"token operator\">=</span><span class=\"token operator\">=</span> <span class=\"token number\">0</span>   <span class=\"token comment\">--> 平均分配，如有 4 个数据，2 个分区，则前面两个数据进入分区 0，后面两个数据进入分区 1</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>         数据条数 <span class=\"token operator\">%</span> 分区数 <span class=\"token operator\">!=</span><span class=\"token number\">0</span>   <span class=\"token comment\">--> 会采用一种基本算法实现分配，源码中具体的实现方法如下</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>   </pre></td></tr><tr><td data-num=\"30\"></td><td><pre>   </pre></td></tr><tr><td data-num=\"31\"></td><td><pre>       <span class=\"token comment\">-- 计算每个分区中数据的起止索引</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>     def positions<span class=\"token punctuation\">(</span>length: Long<span class=\"token punctuation\">,</span> numSlices: <span class=\"token keyword\">Int</span><span class=\"token punctuation\">)</span>: Iterator<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">Int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">Int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> &#123;</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>      <span class=\"token punctuation\">(</span><span class=\"token number\">0</span> until numSlices<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>iterator<span class=\"token punctuation\">.</span>map &#123; i <span class=\"token operator\">=</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        val <span class=\"token keyword\">start</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">*</span> length<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> numSlices<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>toInt</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        val <span class=\"token keyword\">end</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> length<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> numSlices<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>toInt</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token punctuation\">(</span><span class=\"token keyword\">start</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">end</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>      &#125;</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    &#125;</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token comment\">-- Seq 表示内存中的集合</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        seq <span class=\"token keyword\">match</span> &#123;</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token keyword\">case</span> _ <span class=\"token operator\">=</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        val array <span class=\"token operator\">=</span> seq<span class=\"token punctuation\">.</span>toArray  <span class=\"token comment\">-- 将集合中的元素转换为数组</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token comment\">-- 调用了上面的计算分区索引的方法</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        positions<span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">,</span> numSlices<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>map &#123; <span class=\"token keyword\">case</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">start</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">end</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>            array<span class=\"token punctuation\">.</span>slice<span class=\"token punctuation\">(</span><span class=\"token keyword\">start</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">end</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>toSeq  <span class=\"token comment\">-- 根据索引位置对数据进行切分，确定哪些数据进入哪个分区 </span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        &#125;<span class=\"token punctuation\">.</span>toSeq</pre></td></tr></table></figure><figure class=\"highlight scala\"><figcaption data-lang=\"scala\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 情况 1：从内存中读取数据时，集群的并行度、分区及数据进入分区的规则</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 创建 spark 环境和连接 spark</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">val</span> sparkConf<span class=\"token operator\">:</span> SparkConf <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> SparkConf<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>setMaster<span class=\"token punctuation\">(</span><span class=\"token string\">\"local[*]\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>setAppName<span class=\"token punctuation\">(</span><span class=\"token string\">\"wordcount\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">val</span> sc <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> SparkContext<span class=\"token punctuation\">(</span>sparkConf<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 准备数据</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">val</span> list <span class=\"token operator\">=</span> List<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    情况 1：设定分区为 2。</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    解析结果文件：</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    1. 生成两个分区文件</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    2. 分区数据如下：</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>       分区 0：1 2</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>       分区 1：3 4</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre> <span class=\"token keyword\">val</span> rdd1<span class=\"token operator\">:</span> RDD<span class=\"token punctuation\">[</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> sc<span class=\"token punctuation\">.</span>makeRDD<span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre> rdd1<span class=\"token punctuation\">.</span>saveAsTextFile<span class=\"token punctuation\">(</span><span class=\"token string\">\"output1\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>   情况 2：设定分区为 4。</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>   解析结果文件：</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>   1. 生成 4 个分区文件</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>   2. 分区数据如下：</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>      分区 0：1</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>      分区 1：2</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>      分区 2：3</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>      分区 3：4</pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    */</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>  <span class=\"token keyword\">val</span> rdd2<span class=\"token operator\">:</span> RDD<span class=\"token punctuation\">[</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> sc<span class=\"token punctuation\">.</span>makeRDD<span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>  rdd1<span class=\"token punctuation\">.</span>saveAsTextFile<span class=\"token punctuation\">(</span><span class=\"token string\">\"output2\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>      情况 3：设定分区为 3。</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>      解析结果文件：</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>      1. 生成 3 个分区文件</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>      2. 分区数据如下：</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>         分区 0：1</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>         分区 1：2</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>         分区 2：3 4       </pre></td></tr><tr><td data-num=\"42\"></td><td><pre>       */</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token keyword\">val</span> rdd3<span class=\"token operator\">:</span> RDD<span class=\"token punctuation\">[</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> sc<span class=\"token punctuation\">.</span>makeRDD<span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    rdd1<span class=\"token punctuation\">.</span>saveAsTextFile<span class=\"token punctuation\">(</span><span class=\"token string\">\"output3\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h5 id=\"5522-从文件中读取数据\"><a class=\"anchor\" href=\"#5522-从文件中读取数据\">#</a> 5.5.2.2 从文件中读取数据</h5>\n<ol>\n<li>单文件读取情况</li>\n</ol>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 问题 1：分区数如何确定：</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   方法解读：textFile<span class=\"token punctuation\">(</span>path:String<span class=\"token punctuation\">,</span>minPartitions：<span class=\"token keyword\">Int</span> <span class=\"token operator\">=</span> defaultMinPartitions<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token comment\">--1. 建议最小分区数：</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    参数<span class=\"token number\">2</span>：minPartitions：<span class=\"token keyword\">Int</span> <span class=\"token operator\">=</span> defaultMinPartitions，指建议产生的RDD的最小分区数，有默认值</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">--2. 情况一：假如使用默认值：\"取 defaultParallelism【默认并行度】和 2 的最小值\"</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        默认值：defaultMinPartitions，源码中调用了如下方法：<span class=\"token string\">\"取defaultParallelism【默认并行度】和2的最小值\"</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        源码：def defaultMinPartitions: <span class=\"token keyword\">Int</span> <span class=\"token operator\">=</span> math<span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>defaultParallelism<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>         defaultParallelism：源码中调用：</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>         scheduler<span class=\"token punctuation\">.</span>conf<span class=\"token punctuation\">.</span>getInt<span class=\"token punctuation\">(</span><span class=\"token string\">\"spark.default.parallelism\"</span><span class=\"token punctuation\">,</span> totalCores<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>         ①如果连接spark的配置中设定spark<span class=\"token punctuation\">.</span><span class=\"token keyword\">default</span><span class=\"token punctuation\">.</span>parallelism参数了，那么就等于设定的参数</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>         ②如果没有设置，那么就等于总核数</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>               <span class=\"token string\">\"什么是总核数?\"</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>               机器总核数 <span class=\"token operator\">=</span> 当前环境中可用核数</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                <span class=\"token keyword\">local</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> 单核（单线程）<span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                <span class=\"token keyword\">local</span><span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token number\">4</span>核（<span class=\"token number\">4</span>个线程） <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token number\">4</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                <span class=\"token keyword\">local</span><span class=\"token punctuation\">[</span><span class=\"token operator\">*</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> 最大核数 <span class=\"token operator\">=</span><span class=\"token operator\">></span> 我的电脑最大核数为<span class=\"token number\">12</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>     <span class=\"token comment\">--3. 情况二：当传递了参数以后：使用传递的参数值。</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>     <span class=\"token comment\">--4. 什么是最小分区数？</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        所谓的最小分区数，取决于总的字节数是否能整除分区数，并且看剩下的字节数<span class=\"token operator\">/</span>每个分区的字节数是否</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        大于<span class=\"token number\">10</span><span class=\"token operator\">%</span>，如果大于<span class=\"token number\">10</span><span class=\"token operator\">%</span>，则剩余的字节数会生产一个新的分区。</pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token comment\">--5. 实际上的分区数是多少呢？</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token number\">1.</span> 实际的分区数 <span class=\"token operator\">>=</span> 设定的RDD最小分区数</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token number\">2.</span> 算法：文件的字节数 <span class=\"token operator\">/</span> RDD设定的最小分区数  <span class=\"token operator\">=</span> result</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>       a、如果恰好整除，则实际的分区数<span class=\"token operator\">=</span>设定的RDD最小分区数</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>       b、如果除不尽，有余数，如果余数 <span class=\"token operator\">/</span> result <span class=\"token operator\">&lt;=</span> <span class=\"token number\">10</span><span class=\"token operator\">%</span> <span class=\"token punctuation\">,</span>则实际的分区数<span class=\"token operator\">=</span>设定的RDD最小分区数</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                            如果余数 <span class=\"token operator\">/</span> result <span class=\"token operator\">></span> <span class=\"token number\">10</span><span class=\"token operator\">%</span> <span class=\"token punctuation\">,</span>则实际的分区数<span class=\"token operator\">=</span> 设定的RDD最小分区数 <span class=\"token operator\">+</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token comment\">-- 问题 2：在没有指定分区器的情况下，数据依据什么规则进入不同的分区？</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    通过查看源码发现，Spark读取文件采用的是hadoop的读取规则。</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token number\">1</span>、切片规则：<span class=\"token string\">\"以字节的方式来切分数据\"</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token number\">2</span>、数据读取规则：<span class=\"token string\">\"按行读取\"</span>。</pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    回答问题<span class=\"token number\">2</span>之前，我们先来回答如下两个问题。</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    问题a：文件到底切成几片<span class=\"token punctuation\">(</span>也就是分区的数量<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>          按照文件的字节数，确定预计的切片数量。</pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    问题b：分区数据是如何进行存储的？</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token number\">1.</span>换行符为<span class=\"token number\">2</span>个字节</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token number\">2.</span>分区数据按行为单位进行读取，一行的数据不会被拆分。</pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token string\">\"规则\"</span>：数据进行不同分区的规则有二，二者合并一起使用。</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    规则一：数据起始偏移量和字节数。</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    规则二：数据偏移量<span class=\"token punctuation\">(</span><span class=\"token keyword\">offset</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token comment\">-- 具体是什么意思？一起跟着下面案例来详细认识。</span></pre></td></tr></table></figure><ul>\n<li>案例 1：</li>\n</ul>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>举例<span class=\"token number\">1</span>：</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">--word1 数据：</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token number\">12</span>@@</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token number\">234</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        说明：换行符<span class=\"token punctuation\">(</span>用@@代替<span class=\"token punctuation\">)</span>为<span class=\"token number\">2</span>个字节，Spark是按照行进行读取数据。</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">-- 第一步：建议生成 RDD 的最小分区数： => 2</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">-- 第二步：计算实际的分区数：=> 3</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>               <span class=\"token number\">1.</span>计算文件的字节数：<span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token number\">7</span>个字节</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>               <span class=\"token number\">2.</span>计算整除的结果和余数： <span class=\"token number\">7</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token operator\">=</span><span class=\"token number\">3</span> <span class=\"token punctuation\">.</span><span class=\"token number\">.1</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>               <span class=\"token number\">3.</span>计算余数和每个分区字节数的比率：<span class=\"token number\">1</span><span class=\"token operator\">/</span><span class=\"token number\">3</span> <span class=\"token operator\">></span> <span class=\"token number\">10</span><span class=\"token operator\">%</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> 生成一个新的分区  <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">-- 第三步：计算每个分区的数据起始偏移量和每个分区的字节数</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>               分区<span class=\"token number\">0</span>：<span class=\"token punctuation\">(</span>起始偏移量，字节数<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>               分区<span class=\"token number\">1</span>：<span class=\"token punctuation\">(</span>起始偏移量，字节数<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>               分区<span class=\"token number\">2</span>：<span class=\"token punctuation\">(</span>起始偏移量，字节数<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">-- 第四步：计算每行数据的偏移量</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>               <span class=\"token number\">12</span>@@    <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token number\">1</span> <span class=\"token number\">2</span> <span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>               <span class=\"token number\">234</span>     <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token number\">4</span> <span class=\"token number\">5</span> <span class=\"token number\">6</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token comment\">-- 第五步：数据的分配：按行读取，数据只会被读取一次</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>               分区<span class=\"token number\">0</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> 读取索引为<span class=\"token number\">0</span><span class=\"token operator\">/</span><span class=\"token number\">1</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token operator\">/</span><span class=\"token number\">3</span>的数据，读取<span class=\"token number\">12</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>               分区<span class=\"token number\">1</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> 读取索引为<span class=\"token number\">3</span><span class=\"token operator\">/</span><span class=\"token number\">4</span><span class=\"token operator\">/</span><span class=\"token number\">5</span><span class=\"token operator\">/</span><span class=\"token number\">6</span>的数据，发现<span class=\"token number\">3</span>已经被读取了，所以读取<span class=\"token number\">4</span><span class=\"token operator\">/</span><span class=\"token number\">5</span><span class=\"token operator\">/</span><span class=\"token number\">6</span>索引的数据，读取：<span class=\"token number\">234</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>               分区<span class=\"token number\">2</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> 读取索引为<span class=\"token number\">6</span><span class=\"token operator\">/</span><span class=\"token number\">7</span>的数据<span class=\"token punctuation\">,</span>发现<span class=\"token number\">6</span>已经被读取，索引<span class=\"token number\">7</span>无数据，所以分区<span class=\"token number\">2</span>没有数据。</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>     <span class=\"token operator\">*</span><span class=\"token operator\">/</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>     </pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t  \tval rdd1: RDD<span class=\"token punctuation\">[</span>String<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> sc<span class=\"token punctuation\">.</span>textFile<span class=\"token punctuation\">(</span><span class=\"token string\">\"input/word1\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  \t\trdd1<span class=\"token punctuation\">.</span>saveAsTextFile<span class=\"token punctuation\">(</span><span class=\"token string\">\"output\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ul>\n<li>案例 2</li>\n</ul>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>举例<span class=\"token number\">2</span>：</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">--word2 数据：</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token number\">1</span>@@</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token number\">2</span>@@</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token number\">3</span>@@</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token number\">4</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        说明：换行符<span class=\"token punctuation\">(</span>用@@代替<span class=\"token punctuation\">)</span>为<span class=\"token number\">2</span>个字节，Spark是按照行进行读取数据。</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">-- 第一步：建议生成 RDD 的最小分区数： => 3</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">-- 第二步：计算实际的分区数：=> 4</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>               <span class=\"token number\">1.</span>计算文件的字节数：<span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token number\">10</span>个字节</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>               <span class=\"token number\">2.</span>计算整除的结果和余数： <span class=\"token number\">10</span><span class=\"token operator\">/</span><span class=\"token number\">3</span><span class=\"token operator\">=</span><span class=\"token number\">3</span> <span class=\"token punctuation\">.</span><span class=\"token number\">.1</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>               <span class=\"token number\">3.</span>计算余数和每个分区字节数的比率：<span class=\"token number\">1</span><span class=\"token operator\">/</span><span class=\"token number\">3</span> <span class=\"token operator\">></span> <span class=\"token number\">10</span><span class=\"token operator\">%</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> 生成一个新的分区</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\">-- 第三步：计算每个分区的数据起始偏移量和每个分区的字节数</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>               分区<span class=\"token number\">0</span>：<span class=\"token punctuation\">(</span>起始偏移量，字节数<span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>               分区<span class=\"token number\">1</span>：<span class=\"token punctuation\">(</span>起始偏移量，字节数<span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>               分区<span class=\"token number\">2</span>：<span class=\"token punctuation\">(</span>起始偏移量，字节数<span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>               分区<span class=\"token number\">3</span>：<span class=\"token punctuation\">(</span>起始偏移量，字节数<span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token comment\">-- 第四步：计算数据的偏移量</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>               <span class=\"token number\">1</span>@@  <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token number\">1</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>               <span class=\"token number\">2</span>@@  <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token number\">3</span> <span class=\"token number\">4</span> <span class=\"token number\">5</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>               <span class=\"token number\">3</span>@@  <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token number\">6</span> <span class=\"token number\">7</span> <span class=\"token number\">8</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>               <span class=\"token number\">4</span>    <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token number\">9</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token comment\">-- 第五步：数据的分配：按行读取，数据只会被读取一次</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>               分区<span class=\"token number\">0</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> 读取索引为<span class=\"token number\">0</span><span class=\"token operator\">/</span><span class=\"token number\">1</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token operator\">/</span><span class=\"token number\">3</span>的数据，因为第一行数据不够，所以第二行也被读取，</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                       所以实际读取了索引为<span class=\"token number\">0</span><span class=\"token operator\">/</span><span class=\"token number\">1</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token operator\">/</span><span class=\"token number\">3</span><span class=\"token operator\">/</span><span class=\"token number\">4</span><span class=\"token operator\">/</span><span class=\"token number\">5</span>的数据，读取<span class=\"token number\">1</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>               分区<span class=\"token number\">1</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> 读取索引为<span class=\"token number\">3</span><span class=\"token operator\">/</span><span class=\"token number\">4</span><span class=\"token operator\">/</span><span class=\"token number\">5</span><span class=\"token operator\">/</span><span class=\"token number\">6</span>的数据，发现<span class=\"token number\">3</span><span class=\"token operator\">/</span><span class=\"token number\">4</span><span class=\"token operator\">/</span><span class=\"token number\">5</span>已经被读取了，所以只能读取索引为<span class=\"token number\">6</span>的数据，</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                        所以读取<span class=\"token number\">6</span>索引所在行，最后读取了索引为<span class=\"token number\">6</span><span class=\"token operator\">/</span><span class=\"token number\">7</span><span class=\"token operator\">/</span><span class=\"token number\">8</span>的数据，读取：<span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>               分区<span class=\"token number\">2</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> 读取索引为<span class=\"token number\">6</span><span class=\"token operator\">/</span><span class=\"token number\">7</span><span class=\"token operator\">/</span><span class=\"token number\">8</span><span class=\"token operator\">/</span><span class=\"token number\">9</span>的数据<span class=\"token punctuation\">,</span>发现<span class=\"token number\">6</span><span class=\"token operator\">/</span><span class=\"token number\">7</span><span class=\"token operator\">/</span><span class=\"token number\">8</span>已经被读取，所以只能读取索引为<span class=\"token number\">9</span>的数据，</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                        所以读取索引<span class=\"token number\">9</span>所在行，最后读取了索引为<span class=\"token number\">9</span>的数据，读取：<span class=\"token number\">4</span>。</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>               分区<span class=\"token number\">3</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span>  读取索引为<span class=\"token number\">9</span><span class=\"token operator\">/</span><span class=\"token number\">10</span>的数据<span class=\"token punctuation\">,</span>发现<span class=\"token number\">9</span>已经被读取，索引<span class=\"token number\">10</span>无数据，所以分区<span class=\"token number\">2</span>没有数据。</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    val rdd2: RDD<span class=\"token punctuation\">[</span>String<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> sc<span class=\"token punctuation\">.</span>textFile<span class=\"token punctuation\">(</span><span class=\"token string\">\"input/word2\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    rdd2<span class=\"token punctuation\">.</span>saveAsTextFile<span class=\"token punctuation\">(</span><span class=\"token string\">\"output\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>多文件读取情况</li>\n</ol>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>多文件和单文件异同：</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> 字节数为递归计算所有文件的字节数总和</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token number\">2</span>）不能跨文件读取数据</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token number\">3</span>）依然是按行读取</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token number\">4</span>）计算每个分区的字节数的算法保持不变，</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>       但是总分区数增加的个数依据每个文件的字节数是否能整除每个分区的字节数而定。</pre></td></tr></table></figure><ul>\n<li>案例解析</li>\n</ul>\n<figure class=\"highlight scala\"><figcaption data-lang=\"scala\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">object</span> Spark_FliePartitions <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">def</span> main<span class=\"token punctuation\">(</span>args<span class=\"token operator\">:</span> Array<span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Unit</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">val</span> sparkConf<span class=\"token operator\">:</span> SparkConf <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> SparkConf<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>setMaster<span class=\"token punctuation\">(</span><span class=\"token string\">\"local[*]\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>setAppName<span class=\"token punctuation\">(</span><span class=\"token string\">\"FileParallelism\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">val</span> sc <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> SparkContext<span class=\"token punctuation\">(</span>sparkConf<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    文件 1：</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    12@@  => 0,1,2,3</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    234   => 4,5,6</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    文件 2：</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    1@@   => 0,1,2</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    2@@   => 3,4,5</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    3@@   => 6,7,8</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    4     => 9</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    计算过程：</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    1. 字节总数：7+10=17</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    2. 每个分区字节数：17/3=5 .. 2</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    3. 文件 1：</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>       分区 0：(0,5) =>12 234</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>       分区 1：(5,7) => 空</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>     文件 2：</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>       分区 0：(0,5)  =>1 2</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>       分区 1：(5,10) => 3 4</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">val</span> rdd<span class=\"token operator\">:</span> RDD<span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> sc<span class=\"token punctuation\">.</span>textFile<span class=\"token punctuation\">(</span><span class=\"token string\">\"input\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    rdd<span class=\"token punctuation\">.</span>saveAsTextFile<span class=\"token punctuation\">(</span><span class=\"token string\">\"output\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    sc<span class=\"token punctuation\">.</span>stop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"553-rdd算子\"><a class=\"anchor\" href=\"#553-rdd算子\">#</a> 5.5.3 RDD 算子</h4>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>RDD转换算子：</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">-- 1. 什么是算子？</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>       认知心理学，解决问题的思路，也就是方法。</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">-- 2. 所谓的 RDD 算子，其实就是将旧的 RDD 通过方法的调用转换为新的 RDD</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">-- 3. 既然算子也是方法，那么为什么叫做算子呢？</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>          算子是RDD所拥有的，RDD只是封装逻辑，由Driver将task分配给Executor执行，所以是分布式计算的逻辑。</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>          方法：则是在当前的虚拟机中执行。</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">-- 4. 算子的分类：</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      根据RDD处理数据的方式不同分为：<span class=\"token keyword\">value</span>类型、双<span class=\"token keyword\">value</span>类型、<span class=\"token keyword\">key</span><span class=\"token operator\">-</span><span class=\"token keyword\">value</span>类型。</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token keyword\">value</span>：单值数据，如List<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      双<span class=\"token keyword\">value</span>:指多个RDD之间的运算</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      <span class=\"token keyword\">key</span><span class=\"token operator\">-</span><span class=\"token keyword\">value</span>:指数据结构是kv键值对。List<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      那么为什么要这么设计呢？</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      因为不同的数据结构，处理数据的需要不一样，也就有对应的算子来应对。</pre></td></tr></table></figure><h5 id=\"5531-map\"><a class=\"anchor\" href=\"#5531-map\">#</a> 5.5.3.1 map</h5>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 算子：map (形参)：</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token number\">1.</span> 作用：将处理的数据逐条进行映射处理，<span class=\"token string\">\"类比scala中的map，对数据进行结构转换\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token number\">2.</span> 形参：def map<span class=\"token punctuation\">[</span>U: ClassTag<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>f: T <span class=\"token operator\">=</span><span class=\"token operator\">></span> U<span class=\"token punctuation\">)</span>: RDD<span class=\"token punctuation\">[</span>U<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token number\">3.</span> 基本使用如下：</pre></td></tr></table></figure><figure class=\"highlight scala\"><figcaption data-lang=\"scala\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">val</span> list <span class=\"token operator\">=</span> List<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">val</span> rdd<span class=\"token operator\">:</span> RDD<span class=\"token punctuation\">[</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> sc<span class=\"token punctuation\">.</span>makeRDD<span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">val</span> rddmap<span class=\"token operator\">:</span> RDD<span class=\"token punctuation\">[</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> rdd<span class=\"token punctuation\">.</span>map<span class=\"token punctuation\">(</span>_<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    println<span class=\"token punctuation\">(</span>rddmap<span class=\"token punctuation\">.</span>collect<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>mkString<span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 关于 map 算子的两个问题</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">-- 问题 1：分区的问题：RDD 有分区列表，每个 RDD 都有相同的分区计算函数，那么新的 RDD 与旧的 RDD 的分区关系是什么？</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>          默认分区的数量保持不变，数据会转换后输出。</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token comment\">-- 问题 2：Map 中数据处理的顺序是怎么样的？</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>          通过如下验证发现：</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>          a、分区内数据按照顺序依次执行，且第一条数据的所有逻辑执行完成以后再执行第二条数据，依次类推</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>          b、分区间的数据执行是没有顺序，而且无需等待，即分区间执行逻辑互不影响，各自执行各自的逻辑。</pre></td></tr></table></figure><ul>\n<li>验证如下：</li>\n</ul>\n<figure class=\"highlight scala\"><figcaption data-lang=\"scala\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 测试：新旧 RDD 分区的关系 </span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token keyword\">val</span> rdd1<span class=\"token operator\">:</span> RDD<span class=\"token punctuation\">[</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> sc<span class=\"token punctuation\">.</span>makeRDD<span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token keyword\">val</span> rddmap1<span class=\"token operator\">:</span> RDD<span class=\"token punctuation\">[</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> rdd1<span class=\"token punctuation\">.</span>map<span class=\"token punctuation\">(</span> num <span class=\"token keyword\">=></span> num <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token comment\">// 将数据输出到本地文件中，查看分区数量及分区内的数据</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   rdd1<span class=\"token punctuation\">.</span>saveAsTextFile<span class=\"token punctuation\">(</span><span class=\"token string\">\"output1\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   rddmap1<span class=\"token punctuation\">.</span>saveAsTextFile<span class=\"token punctuation\">(</span><span class=\"token string\">\"output\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 测试：分区间的执行顺序</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">val</span> rddmap2<span class=\"token operator\">:</span> RDD<span class=\"token punctuation\">[</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> rdd1<span class=\"token punctuation\">.</span>map<span class=\"token punctuation\">(</span> num <span class=\"token keyword\">=></span> <span class=\"token punctuation\">&#123;</span>println<span class=\"token punctuation\">(</span><span class=\"token string\">\"mapA ->\"</span> <span class=\"token operator\">+</span> num <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>num <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">val</span> rddmap3<span class=\"token operator\">:</span> RDD<span class=\"token punctuation\">[</span><span class=\"token builtin\">Unit</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> rddmap1<span class=\"token punctuation\">.</span>map<span class=\"token punctuation\">(</span>num <span class=\"token keyword\">=></span> println<span class=\"token punctuation\">(</span><span class=\"token string\">\"mapB ->\"</span> <span class=\"token operator\">+</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token comment\">//collect 方法不会转换 RDD，会触发作业的执行，所以将 collect 这样的方法称之为行动（action）算子\t</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\trddmap3<span class=\"token punctuation\">.</span>collect<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ul>\n<li>练习：</li>\n</ul>\n<figure class=\"highlight scala\"><figcaption data-lang=\"scala\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 练习：从服务器日志数据 apache.log 中获取用户请求 URL 资源路径</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">val</span> rdd<span class=\"token operator\">:</span> RDD<span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> sc<span class=\"token punctuation\">.</span>textFile<span class=\"token punctuation\">(</span><span class=\"token string\">\"input/apache.log\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">val</span> result<span class=\"token operator\">:</span> Array<span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> rdd<span class=\"token punctuation\">.</span>map<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      str <span class=\"token keyword\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>          <span class=\"token comment\">// 按照空格拆分一条数据</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">val</span> array<span class=\"token operator\">:</span> Array<span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>          <span class=\"token comment\">// 只取 URL 资源数据</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        array<span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>collect<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   <span class=\"token comment\">// 遍历结果集</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    result<span class=\"token punctuation\">.</span>foreach<span class=\"token punctuation\">(</span>println<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h5 id=\"5532-mappartitions\"><a class=\"anchor\" href=\"#5532-mappartitions\">#</a> 5.5.3.2 mapPartitions</h5>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">--map () 算子问题：</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  在分区内每次只能获取一个数据，而且只有当前一个数据的所有逻辑执行完成以后才会执行下一个数据，这样一来，效率就相对比较慢。</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">-- 引出了另外一个算子:mapPartitions (形参)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>     <span class=\"token comment\">--1. 形参：(f: Iterator [T] => Iterator [U],preservesPartitioning: Boolean = false): RDD [U]</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>           形参<span class=\"token number\">1</span>：f: Iterator<span class=\"token punctuation\">[</span>T<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> Iterator<span class=\"token punctuation\">[</span>U<span class=\"token punctuation\">]</span>，是一个函数</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                 函数的形参：一个迭代器，内容为一个分区中所有的数据；</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                 函数的返回：分区内数据经过转换以后数据形成的<span class=\"token string\">\"迭代器\"</span>。</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>           参数<span class=\"token number\">2</span>：暂时不管。</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">--2. 返回结果：返回一个新的 RDD</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">--3. 算子的作用：</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>           将待处理的数据以分区为单位发送到计算节点进行处理，这里的处理是指可以进行<span class=\"token string\">\"任意的处理\"</span>，哪怕是过滤数据   </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\">--4. 与 map () 算子的不同点：</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>           map 算子是一个全量数据处理，不能丢失数据；</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>           mapPartitions 算子一次获取分区中所有的数据，那么可以执行迭代器所有的操作，如可以进行数据的过滤。</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>   <span class=\"token comment\">--5. mapPartitions 算子存在的问题</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>          如果一个分区的数据没有处理完，那么该分区内所有的数据都不会释放，即使是前面已经处理完的数据也不会释放，</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>          容易出现内存溢出。 </pre></td></tr><tr><td data-num=\"20\"></td><td><pre>   <span class=\"token comment\">--6. map 和 mapPartitions () 算子的选择：</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>      \t  如果内存空间足够大，为了提高效率时，推荐使用mapPartitions<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>算子</pre></td></tr></table></figure><ul>\n<li>代码演示</li>\n</ul>\n<figure class=\"highlight scala\"><figcaption data-lang=\"scala\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">val</span> list <span class=\"token operator\">=</span> List<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">val</span> rdd<span class=\"token operator\">:</span> RDD<span class=\"token punctuation\">[</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> sc<span class=\"token punctuation\">.</span>makeRDD<span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">val</span> rdd1<span class=\"token operator\">:</span> RDD<span class=\"token punctuation\">[</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> rdd<span class=\"token punctuation\">.</span>mapPartitions<span class=\"token punctuation\">(</span>iter <span class=\"token keyword\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token comment\">// 只要分区内为偶数的数据</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      iter<span class=\"token punctuation\">.</span>filter<span class=\"token punctuation\">(</span>_<span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    println<span class=\"token punctuation\">(</span>rdd1<span class=\"token punctuation\">.</span>collect<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>mkString<span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ul>\n<li>练习</li>\n</ul>\n<figure class=\"highlight scala\"><figcaption data-lang=\"scala\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 练习：获取每个数据分区的最大值</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">val</span> list <span class=\"token operator\">=</span> List<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">val</span> rdd<span class=\"token operator\">:</span> RDD<span class=\"token punctuation\">[</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> sc<span class=\"token punctuation\">.</span>makeRDD<span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">val</span> result<span class=\"token operator\">:</span> RDD<span class=\"token punctuation\">[</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> rdd<span class=\"token punctuation\">.</span>mapPartitions<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      iter <span class=\"token keyword\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\">// 求分区内的最大值，返回值为一个值，不是迭代器，所以使用 List 集合进行包装</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        List<span class=\"token punctuation\">(</span>iter<span class=\"token punctuation\">.</span>max<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>iterator</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    println<span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span>collect<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>mkString<span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h5 id=\"5533-mappartitionswithindex\"><a class=\"anchor\" href=\"#5533-mappartitionswithindex\">#</a> 5.5.3.3 mapPartitionsWithIndex</h5>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">--1. 算子：mapPartitionsWithIndex (形参)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">--2. 形参：(f: (Int, Iterator [T]) => Iterator [U],preservesPartitioning: Boolean = false)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>       形参<span class=\"token number\">1</span>：f: <span class=\"token punctuation\">(</span><span class=\"token keyword\">Int</span><span class=\"token punctuation\">,</span> Iterator<span class=\"token punctuation\">[</span>T<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> Iterator<span class=\"token punctuation\">[</span>U<span class=\"token punctuation\">]</span>，是一个函数</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                函数的形参：</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                参数<span class=\"token number\">1</span>：为分区号</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                参数<span class=\"token number\">2</span>：为一个迭代器，内容为一个分区中所有的数据；</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                函数的返回：分区内每个数据经过转换以后数据形成的<span class=\"token string\">\"迭代器\"</span>。</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      形参<span class=\"token number\">2</span>：暂时不管。</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">--3. 算子的作用：将待处理的数据以分区为单位发送到计算节点进行处理，这里的处理是指可以进行任意的处理，哪怕是过滤数据，</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token string\">\"在处理时同时可以获取当前分区索引\"</span></pre></td></tr></table></figure><ul>\n<li>代码演示</li>\n</ul>\n<figure class=\"highlight scala\"><figcaption data-lang=\"scala\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">val</span> list <span class=\"token operator\">=</span> List<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">val</span> rdd<span class=\"token operator\">:</span> RDD<span class=\"token punctuation\">[</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> sc<span class=\"token punctuation\">.</span>makeRDD<span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 获取每个分区最大值以及分区号</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">val</span> rdd1<span class=\"token operator\">:</span> RDD<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> rdd<span class=\"token punctuation\">.</span>mapPartitionsWithIndex<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">,</span> iter<span class=\"token punctuation\">)</span> <span class=\"token keyword\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        List<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">,</span> iter<span class=\"token punctuation\">.</span>max<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>iterator</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    println<span class=\"token punctuation\">(</span>rdd1<span class=\"token punctuation\">.</span>collect<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>mkString<span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ul>\n<li>练习</li>\n</ul>\n<figure class=\"highlight scala\"><figcaption data-lang=\"scala\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 练习：获取第二个数据分区的数据    </span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">val</span> list <span class=\"token operator\">=</span> List<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">val</span> rdd<span class=\"token operator\">:</span> RDD<span class=\"token punctuation\">[</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> sc<span class=\"token punctuation\">.</span>makeRDD<span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">val</span> rdd1<span class=\"token operator\">=</span> rdd<span class=\"token punctuation\">.</span>mapPartitionsWithIndex<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">,</span> iter<span class=\"token punctuation\">)</span> <span class=\"token keyword\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>num <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>          iter</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>          Nil<span class=\"token punctuation\">.</span>iterator</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    println<span class=\"token punctuation\">(</span>rdd1<span class=\"token punctuation\">.</span>collect<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>mkString<span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h5 id=\"5534-flatmap\"><a class=\"anchor\" href=\"#5534-flatmap\">#</a> 5.5.3.4 flatmap</h5>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">--1. 算子：flatMap (形参)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     <span class=\"token comment\">--2. 形参：(f: T => TraversableOnce [U]): 是一个函数</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>           函数的参数：分区内的一个一个的元素</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>           返回值：经过映射以后将数据进行扁平化，返回一个可迭代的集合</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>     </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>     <span class=\"token comment\">--3. 作用：和 scala 中的作用完全一致，映射扁平</span></pre></td></tr></table></figure><ul>\n<li>代码演示</li>\n</ul>\n<figure class=\"highlight scala\"><figcaption data-lang=\"scala\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">val</span> list <span class=\"token operator\">=</span> List<span class=\"token punctuation\">(</span>List<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>List<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">val</span> rdd<span class=\"token operator\">:</span> RDD<span class=\"token punctuation\">[</span>List<span class=\"token punctuation\">[</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> sc<span class=\"token punctuation\">.</span>makeRDD<span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">val</span> rdd1<span class=\"token operator\">:</span> RDD<span class=\"token punctuation\">[</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> rdd<span class=\"token punctuation\">.</span>flatMap<span class=\"token punctuation\">(</span>list<span class=\"token keyword\">=></span>list<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    println<span class=\"token punctuation\">(</span>rdd1<span class=\"token punctuation\">.</span>collect<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>mkString<span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ul>\n<li>练习</li>\n</ul>\n<figure class=\"highlight scala\"><figcaption data-lang=\"scala\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 将 List (List (1,2),3,List (4,5)) 进行扁平化操作</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">val</span> list <span class=\"token operator\">=</span> List<span class=\"token punctuation\">(</span>List<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> List<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">val</span> rdd<span class=\"token operator\">:</span> RDD<span class=\"token punctuation\">[</span><span class=\"token builtin\">Any</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> sc<span class=\"token punctuation\">.</span>makeRDD<span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">val</span> rdd1<span class=\"token operator\">:</span> RDD<span class=\"token punctuation\">[</span><span class=\"token builtin\">Any</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> rdd<span class=\"token punctuation\">.</span>flatMap<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      data <span class=\"token keyword\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        data <span class=\"token keyword\">match</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>          <span class=\"token keyword\">case</span> list<span class=\"token operator\">:</span> List<span class=\"token punctuation\">[</span>_<span class=\"token punctuation\">]</span> <span class=\"token keyword\">=></span> list</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>          <span class=\"token keyword\">case</span> b <span class=\"token keyword\">=></span> List<span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    println<span class=\"token punctuation\">(</span>rdd1<span class=\"token punctuation\">.</span>collect<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>mkString<span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h5 id=\"5535-glom\"><a class=\"anchor\" href=\"#5535-glom\">#</a> 5.5.3.5 glom</h5>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">--1. 算子：glom (形参)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>      <span class=\"token comment\">--2. 形参：空，无形参</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      <span class=\"token comment\">--3. 返回值：RDD [Array [T]]，返回一个一个的数组，数组的数据来自同一个分区</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token comment\">--4. 作用：将同一个分区内的数据转换成数组。</span></pre></td></tr></table></figure><ul>\n<li>代码实现</li>\n</ul>\n<figure class=\"highlight scala\"><figcaption data-lang=\"scala\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">val</span> list <span class=\"token operator\">=</span> List<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">val</span> rdd<span class=\"token operator\">:</span> RDD<span class=\"token punctuation\">[</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> sc<span class=\"token punctuation\">.</span>makeRDD<span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">val</span> rdd1<span class=\"token operator\">:</span> RDD<span class=\"token punctuation\">[</span>Array<span class=\"token punctuation\">[</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> rdd<span class=\"token punctuation\">.</span>glom<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    rdd1<span class=\"token punctuation\">.</span>collect<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>foreach<span class=\"token punctuation\">(</span>array<span class=\"token keyword\">=></span><span class=\"token punctuation\">&#123;</span>println<span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">.</span>mkString<span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ul>\n<li>练习</li>\n</ul>\n<figure class=\"highlight scala\"><figcaption data-lang=\"scala\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 求每个分区的最大值的和</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">val</span> list <span class=\"token operator\">=</span> List<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">val</span> rdd<span class=\"token operator\">:</span> RDD<span class=\"token punctuation\">[</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> sc<span class=\"token punctuation\">.</span>makeRDD<span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// 方法 1：以分区来单位，进行处理</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">val</span> sum<span class=\"token operator\">:</span> <span class=\"token builtin\">Double</span> <span class=\"token operator\">=</span> rdd<span class=\"token punctuation\">.</span>mapPartitions<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      iter <span class=\"token keyword\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        List<span class=\"token punctuation\">(</span>iter<span class=\"token punctuation\">.</span>max<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>iterator</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>sum<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    println<span class=\"token punctuation\">(</span>sum<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">// 方法 2：使用 glom</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    println<span class=\"token punctuation\">(</span>rdd<span class=\"token punctuation\">.</span>glom<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>flatMap<span class=\"token punctuation\">(</span>array <span class=\"token keyword\">=></span> List<span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">.</span>max<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>iterator<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>sum<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h5 id=\"5536-groupby\"><a class=\"anchor\" href=\"#5536-groupby\">#</a> 5.5.3.6 groupBy</h5>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">--1. 算子：groupBy (形参)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>     <span class=\"token comment\">--2. 形参：def groupBy [K](f: T => K,p:Partitioner)(implicit kt: ClassTag [K]): RDD [(K, Iterable [T])]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>            形参<span class=\"token number\">1</span>：f: T <span class=\"token operator\">=</span><span class=\"token operator\">></span> K：是一个函数</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>                  函数的形参为：数据集中的一个一个的元素</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                  返回值为：返回分组的K</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            形参<span class=\"token number\">2</span>：p:Partitioner<span class=\"token punctuation\">,</span>指设定下游的分区数量，如果不设置，则默认为旧RDD的分区数量</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>     <span class=\"token comment\">--3. 算子的返回值：返回一个元组</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>           元组的第一个元素：表示分组的<span class=\"token keyword\">Key</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>           元组的第二个元素：表示相同的<span class=\"token keyword\">key</span>形成可迭代的集合</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>     <span class=\"token comment\">--4. 作用：将数据根据指定的规则进行分组。</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>     <span class=\"token comment\">--5. 特点：</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            a、分区默认不变</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            b、不同分区的数据会被重新打乱进入到不同的分区中；</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            c、我们将上游的分区数据打乱重新组合到下游的分区中，这个操作称之为shuffle</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            d、极限情况下，所有的数据会被分到一个分区</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            e、一个组的数据在一个分区，但是并不是说一个分区中只有一个组，</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>               <span class=\"token string\">\"如当分组数量大于分区数量时，那么一个分区就可能有多个组\"</span>。</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>     <span class=\"token comment\">--6. 存在的问题：    </span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>       \t    groupby方法会导致数据重新组合以后不均匀</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>     <span class=\"token comment\">--7. 解决方案：</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            通过传递参数，改变下游分区的数量。</pre></td></tr></table></figure><p>![image-20200606000907169](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saWFuLXpwLm9zcy1jbi1zaGVuemhlbi5hbGl5dW5jcy5jb20vcGlj\">https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic</span> GO/20200606000907.png)</p>\n<ul>\n<li>代码</li>\n</ul>\n<figure class=\"highlight scala\"><figcaption data-lang=\"scala\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>     1. 一个组的数据在一个分区，但是并不是说一个分区中只有一个组</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     奇偶分组，将数据分成两个组，结果文件中只有一个分区文件，分区文件中有两个分组。</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">val</span> list <span class=\"token operator\">=</span> List<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">val</span> rdd<span class=\"token operator\">:</span> RDD<span class=\"token punctuation\">[</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> sc<span class=\"token punctuation\">.</span>makeRDD<span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">val</span> rdd1<span class=\"token operator\">:</span> RDD<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">,</span> Iterable<span class=\"token punctuation\">[</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> rdd<span class=\"token punctuation\">.</span>groupBy<span class=\"token punctuation\">(</span>_ <span class=\"token operator\">%</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    rdd1<span class=\"token punctuation\">.</span>saveAsTextFile<span class=\"token punctuation\">(</span><span class=\"token string\">\"output\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    2. 当前有 4 个分区，奇偶分组只会有两个分组，所以结果文件中有 4 个分区文件，但是有两个分区分件中没有数据</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">val</span> rdd<span class=\"token operator\">:</span> RDD<span class=\"token punctuation\">[</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> sc<span class=\"token punctuation\">.</span>makeRDD<span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">val</span> rdd1<span class=\"token operator\">:</span> RDD<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">,</span> Iterable<span class=\"token punctuation\">[</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> rdd<span class=\"token punctuation\">.</span>groupBy<span class=\"token punctuation\">(</span>_ <span class=\"token operator\">%</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    rdd1<span class=\"token punctuation\">.</span>saveAsTextFile<span class=\"token punctuation\">(</span><span class=\"token string\">\"output\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    3. 通过设置下游的分区数量解决分区无数据的情况，此时生成的结果文件只有两个分区</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">val</span> rdd<span class=\"token operator\">:</span> RDD<span class=\"token punctuation\">[</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> sc<span class=\"token punctuation\">.</span>makeRDD<span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">val</span> rdd1<span class=\"token operator\">:</span> RDD<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">,</span> Iterable<span class=\"token punctuation\">[</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> rdd<span class=\"token punctuation\">.</span>groupBy<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>num <span class=\"token operator\">:</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">=></span> num <span class=\"token operator\">%</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        rdd1<span class=\"token punctuation\">.</span>saveAsTextFile<span class=\"token punctuation\">(</span><span class=\"token string\">\"output\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ul>\n<li>练习</li>\n</ul>\n<figure class=\"highlight scala\"><figcaption data-lang=\"scala\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//    小功能：将 List (\"Hello\", \"hive\", \"hbase\", \"Hadoop\") 根据单词首写字母进行分组。</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">val</span> list <span class=\"token operator\">=</span> List<span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"hive\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"hbase\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Hadoop\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">val</span> rdd<span class=\"token operator\">:</span> RDD<span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> sc<span class=\"token punctuation\">.</span>makeRDD<span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">val</span> rdd1<span class=\"token operator\">:</span> RDD<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> Iterable<span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> rdd<span class=\"token punctuation\">.</span>groupBy<span class=\"token punctuation\">(</span>word <span class=\"token keyword\">=></span> word<span class=\"token punctuation\">.</span>substring<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    println<span class=\"token punctuation\">(</span>rdd1<span class=\"token punctuation\">.</span>collect<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>mkString<span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">//    小功能：从服务器日志数据 apache.log 中获取每个时间段访问量。</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">val</span> rdd<span class=\"token operator\">:</span> RDD<span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> sc<span class=\"token punctuation\">.</span>textFile<span class=\"token punctuation\">(</span><span class=\"token string\">\"input/apache.log\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">val</span> rdd1<span class=\"token operator\">:</span> RDD<span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> rdd<span class=\"token punctuation\">.</span>flatMap<span class=\"token punctuation\">(</span>str <span class=\"token keyword\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token keyword\">val</span> datas<span class=\"token operator\">:</span> ArrayOps<span class=\"token punctuation\">.</span>ofRef<span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      List<span class=\"token punctuation\">(</span>datas<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>substring<span class=\"token punctuation\">(</span><span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token number\">13</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">val</span> rdd2<span class=\"token operator\">:</span> RDD<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> Iterable<span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> rdd1<span class=\"token punctuation\">.</span>groupBy<span class=\"token punctuation\">(</span>time<span class=\"token keyword\">=></span>time<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    println<span class=\"token punctuation\">(</span>rdd2<span class=\"token punctuation\">.</span>flatMap<span class=\"token punctuation\">(</span>data <span class=\"token keyword\">=></span> List<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span>_1<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">.</span>_2<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>sortBy<span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">.</span>_1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>collect<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>mkString<span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">//    小功能：WordCount。</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      <span class=\"token keyword\">val</span> rdd<span class=\"token operator\">:</span> RDD<span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> sc<span class=\"token punctuation\">.</span>textFile<span class=\"token punctuation\">(</span><span class=\"token string\">\"input/word1\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      <span class=\"token keyword\">val</span> wordcount<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span> <span class=\"token operator\">=</span> rdd<span class=\"token punctuation\">.</span>flatMap<span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>groupBy<span class=\"token punctuation\">(</span>word <span class=\"token keyword\">=></span> word<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      <span class=\"token punctuation\">.</span>map<span class=\"token punctuation\">(</span>tuple <span class=\"token keyword\">=></span> <span class=\"token punctuation\">(</span>tuple<span class=\"token punctuation\">.</span>_1<span class=\"token punctuation\">,</span> tuple<span class=\"token punctuation\">.</span>_2<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>collect<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>mkString<span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>     println<span class=\"token punctuation\">(</span>wordcount<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h5 id=\"5537-filter\"><a class=\"anchor\" href=\"#5537-filter\">#</a> 5.5.3.7 filter</h5>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">--1. 算子：Filter (形参)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">--2. 形参：(f: T => Boolean)：是一个函数，用法和 scala 中的 fliter 类似</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>            函数的形参：RDD中数据集的一个一个的数据</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            返回值：ture或者<span class=\"token boolean\">false</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token boolean\">true</span>：表示数据被保留下来</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token boolean\">false</span>：表示数据被过滤掉</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">--3. 作用：将数据根据指定的规则进行筛选过滤，符合规则的数据保留，不符合规则的数据丢弃。</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">--4. 特点：</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>           a、分区不变</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>           b、分区内的数据可能不均衡，生产环境下，可能会导致数据倾斜</pre></td></tr></table></figure><ul>\n<li>代码演示</li>\n</ul>\n<figure class=\"highlight scala\"><figcaption data-lang=\"scala\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">val</span> list <span class=\"token operator\">=</span> List<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">val</span> rdd<span class=\"token operator\">:</span> RDD<span class=\"token punctuation\">[</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> sc<span class=\"token punctuation\">.</span>makeRDD<span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">val</span> rdd1<span class=\"token operator\">:</span> RDD<span class=\"token punctuation\">[</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> rdd<span class=\"token punctuation\">.</span>filter<span class=\"token punctuation\">(</span>data <span class=\"token keyword\">=></span> data <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    println<span class=\"token punctuation\">(</span>rdd1<span class=\"token punctuation\">.</span>collect<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>mkString<span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ul>\n<li>练习</li>\n</ul>\n<figure class=\"highlight scala\"><figcaption data-lang=\"scala\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 练习：从服务器日志数据 apache.log 中获取 2015 年 5 月 17 日的请求路径</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">val</span> rdd<span class=\"token operator\">:</span> RDD<span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> sc<span class=\"token punctuation\">.</span>textFile<span class=\"token punctuation\">(</span><span class=\"token string\">\"input/apache.log\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">val</span> rdd1<span class=\"token operator\">:</span> RDD<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> rdd<span class=\"token punctuation\">.</span>map<span class=\"token punctuation\">(</span>data <span class=\"token keyword\">=></span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>data<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">val</span> rdd2<span class=\"token operator\">:</span> RDD<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> rdd1<span class=\"token punctuation\">.</span>filter<span class=\"token punctuation\">(</span>tuple <span class=\"token keyword\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      tuple<span class=\"token punctuation\">.</span>_1<span class=\"token punctuation\">.</span>substring<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"17/05/2015\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    rdd2<span class=\"token punctuation\">.</span>collect<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>foreach<span class=\"token punctuation\">(</span>println<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h5 id=\"5538-sample\"><a class=\"anchor\" href=\"#5538-sample\">#</a> 5.5.3.8 Sample</h5>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">--1. 算子：Sample (形参)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">--2. 形参： 有三个参数：</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>           参数<span class=\"token number\">1</span>：withReplacement: <span class=\"token keyword\">Boolean</span>，表示数据从原数据集中抽取以后是否还放回</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>           参数<span class=\"token number\">2</span>：fraction: <span class=\"token keyword\">Double</span>：和参数<span class=\"token number\">1</span>配合一起使用，参数<span class=\"token number\">1</span>的值不同，参数<span class=\"token number\">2</span>表示含义不相同。</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                 情况<span class=\"token number\">1</span>：参数<span class=\"token number\">1</span>为ture，表示抽取以后放回，此时参数<span class=\"token number\">2</span>表示重复抽取的次数</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                 情况<span class=\"token number\">2</span>：参数<span class=\"token number\">1</span>为<span class=\"token boolean\">false</span>，表示抽取后不放回，此时参数<span class=\"token number\">2</span>表示数据被抽取的几率。</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                       说明：几率 <span class=\"token operator\">!=</span> 返回数据集数量 <span class=\"token operator\">/</span> 原数据集的数量</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>           参数<span class=\"token number\">3</span>：seed: Long <span class=\"token operator\">=</span> Utils<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>nextLong：表示随机数的种子，可以确定数据抽取，可以理解</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                 为数据的伪随机。所谓的随机是通过某种算法计算得来的，一旦设置了这个参数，每次获取的随机</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                 数都是固定的。这个参数可选，如果没有设置，那么就是真的随机数，每次返回的结果集都可能是不一样的</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">--3. 作用：</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>          根据指定的规则从数据中抽取数据。</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">--4. 使用场景：</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>          在实际开发中，往往会出现数据倾斜的情况，那么可以从数据倾斜的分区中抽取部分数据，</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>          通过抽取的数据，分析造成数据倾斜的原因。</pre></td></tr></table></figure><figure class=\"highlight scala\"><figcaption data-lang=\"scala\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">val</span> rdd<span class=\"token operator\">:</span> RDD<span class=\"token punctuation\">[</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> sc<span class=\"token punctuation\">.</span>makeRDD<span class=\"token punctuation\">(</span>List<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">val</span> rdd1<span class=\"token operator\">:</span> RDD<span class=\"token punctuation\">[</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> rdd<span class=\"token punctuation\">.</span>sample<span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    println<span class=\"token punctuation\">(</span>rdd1<span class=\"token punctuation\">.</span>collect<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>mkString<span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//1,7</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">val</span> rdd2<span class=\"token operator\">:</span> RDD<span class=\"token punctuation\">[</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> rdd<span class=\"token punctuation\">.</span>sample<span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    println<span class=\"token punctuation\">(</span>rdd2<span class=\"token punctuation\">.</span>collect<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>mkString<span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//1,1,1,1,3,3,3,3,5,5,6,7,7,8,8,8,8</span></pre></td></tr></table></figure><h5 id=\"5539-distinct\"><a class=\"anchor\" href=\"#5539-distinct\">#</a> 5.5.3.9 distinct</h5>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">--1. 算子：distinct (形参)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">--2. 形参：有两个重载的方法：</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>            方法<span class=\"token number\">1</span>：无参</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            方法<span class=\"token number\">2</span>：有一个参数：numPartitions: <span class=\"token keyword\">Int</span>:用来改变去重以后的分区数量。</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">--3. 作用：对数据进行去重操作</span></pre></td></tr></table></figure><figure class=\"highlight scala\"><figcaption data-lang=\"scala\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">val</span> list <span class=\"token operator\">=</span> List<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">12</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">val</span> rdd<span class=\"token operator\">:</span> RDD<span class=\"token punctuation\">[</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> sc<span class=\"token punctuation\">.</span>makeRDD<span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">val</span> rdd1<span class=\"token operator\">:</span> RDD<span class=\"token punctuation\">[</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> rdd<span class=\"token punctuation\">.</span>distinct<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    rdd1<span class=\"token punctuation\">.</span>saveAsTextFile<span class=\"token punctuation\">(</span><span class=\"token string\">\"output\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h5 id=\"55310-coalesce\"><a class=\"anchor\" href=\"#55310-coalesce\">#</a> 5.5.3.10 coalesce</h5>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">--1. 算子：coalesce (形参)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">--2. 形参：有三个参数</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>           参数<span class=\"token number\">1</span>：numPartitions: <span class=\"token keyword\">Int</span>：重置的分区数量</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>           参数<span class=\"token number\">2</span>：shuffle: <span class=\"token keyword\">Boolean</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>：是否需要打乱数据，shuffle</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>           参数<span class=\"token number\">3</span>：partitionCoalescer: <span class=\"token keyword\">Option</span><span class=\"token punctuation\">[</span>PartitionCoalescer<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">Option</span><span class=\"token punctuation\">.</span>empty</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">--3. 作用：缩减分区数量</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">--4. 说明：</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>           a、该算子重点在减少分区，我们在重置分区的个数的时候，参数值不要比原有分区数量多，因为<span class=\"token string\">\"该算子默认是不会</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>              打乱数据重新，没有shuffle\"</span>，所以分区设置多了，多余的分区不会有数据。</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>           b、我们在使用这个算子的时候，只需要传递重置的分区数量即可，其他的参数使用默认值；</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>           c、如果想扩大分区，有新的算子可以实现，不过底层还是调用<span class=\"token keyword\">coalesce</span>，只是将参数<span class=\"token number\">2</span>设置为<span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">--5. 应用场景：</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>           a、数据经过过滤以后，发现数据不均匀，使用这个算子来减少分区的数量</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>           b、数据分区设置的不合理，也可以使用这个方法。</pre></td></tr></table></figure><figure class=\"highlight scala\"><figcaption data-lang=\"scala\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">val</span> list <span class=\"token operator\">=</span> List<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">val</span> rdd<span class=\"token operator\">:</span> RDD<span class=\"token punctuation\">[</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> sc<span class=\"token punctuation\">.</span>makeRDD<span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">val</span> rdd1<span class=\"token operator\">:</span> RDD<span class=\"token punctuation\">[</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> rdd<span class=\"token punctuation\">.</span>distinct<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">val</span> rdd2<span class=\"token operator\">:</span> RDD<span class=\"token punctuation\">[</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> rdd1<span class=\"token punctuation\">.</span>coalesce<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    rdd2<span class=\"token punctuation\">.</span>saveAsTextFile<span class=\"token punctuation\">(</span><span class=\"token string\">\"output\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h5 id=\"55311-repartition\"><a class=\"anchor\" href=\"#55311-repartition\">#</a> 5.5.3.11 rePartition</h5>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">--1. 算子：rePartition (形参)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">--2. 底层逻辑：调用了 coalesce 算子，只是将 shuffle 的值改为了 true，执行 shuffle 过程。</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>            def repartition<span class=\"token punctuation\">(</span>numPartitions: <span class=\"token keyword\">Int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>implicit ord: Ordering<span class=\"token punctuation\">[</span>T<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">null</span><span class=\"token punctuation\">)</span>: RDD<span class=\"token punctuation\">[</span>T<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> withScope &#123;</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token keyword\">coalesce</span><span class=\"token punctuation\">(</span>numPartitions<span class=\"token punctuation\">,</span> shuffle <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>          &#125;</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">--3. 参数：numPartitions: Int: 重新分区的数量</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">--4. 作用：扩大分区，重分区</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">--5. 说明：</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            这个参数即可以扩大分区，也可以缩小分区的数量，但是我们一般用来扩大分区。</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            缩小分区可以使用<span class=\"token keyword\">coalesce</span>算子</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   <span class=\"token comment\">--6. coalesce 和  rePartition 算子的使用选择</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>           a、如果是减少分区，那么就使用<span class=\"token keyword\">coalesce</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>           b、如果是扩大分区，那么就使用rePartition</pre></td></tr></table></figure><figure class=\"highlight scala\"><figcaption data-lang=\"scala\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">val</span> list <span class=\"token operator\">=</span> List<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">val</span> rdd<span class=\"token operator\">:</span> RDD<span class=\"token punctuation\">[</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> sc<span class=\"token punctuation\">.</span>makeRDD<span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">val</span> rdd1<span class=\"token operator\">:</span> RDD<span class=\"token punctuation\">[</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> rdd<span class=\"token punctuation\">.</span>distinct<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    rdd1<span class=\"token punctuation\">.</span>saveAsTextFile<span class=\"token punctuation\">(</span><span class=\"token string\">\"output1\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    output1:</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    分区 0：6 3 12</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    分区 1：4 1</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    分区 2：5 2</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">val</span> rdd2<span class=\"token operator\">:</span> RDD<span class=\"token punctuation\">[</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> rdd1<span class=\"token punctuation\">.</span>coalesce<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    rdd2<span class=\"token punctuation\">.</span>saveAsTextFile<span class=\"token punctuation\">(</span><span class=\"token string\">\"output2\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    output2: 同一分区的数据还在一起</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    分区 0：6 3 12 4 1</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    分区 1：5 2</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    */</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">val</span> rdd3<span class=\"token operator\">:</span> RDD<span class=\"token punctuation\">[</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> rdd1<span class=\"token punctuation\">.</span>repartition<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    rdd3<span class=\"token punctuation\">.</span>saveAsTextFile<span class=\"token punctuation\">(</span><span class=\"token string\">\"output3\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    output3: 数据从原来的分区打乱重组</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    分区 0：6 12 1 5</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    分区 1：3 4 2</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    */</span></pre></td></tr></table></figure><h5 id=\"55312-sortby\"><a class=\"anchor\" href=\"#55312-sortby\">#</a> 5.5.3.12 sortBy</h5>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">--1. 算子：sortBy (形参)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">--2. 形参：参数有 3 个：</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>            形参<span class=\"token number\">1</span>：f: <span class=\"token punctuation\">(</span>T<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> K：</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>                  T：数据集中的每一个元素</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                  K：排序的K</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            形参<span class=\"token number\">2</span>：ascending: <span class=\"token keyword\">Boolean</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                  排序的方式，默认值为ture，为升序，</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                  如果改为<span class=\"token boolean\">false</span>，则是降序</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            形参<span class=\"token number\">3</span>： numPartitions: <span class=\"token keyword\">Int</span> <span class=\"token operator\">=</span> this<span class=\"token punctuation\">.</span>partitions<span class=\"token punctuation\">.</span>length</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                  排序后的分区数量，默认值为前一个RDD的分区数量。</pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">--3. 作用：按照指定的规则进行排序</span></pre></td></tr></table></figure><figure class=\"highlight scala\"><figcaption data-lang=\"scala\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">val</span> list <span class=\"token operator\">=</span> List<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">val</span> rdd<span class=\"token operator\">:</span> RDD<span class=\"token punctuation\">[</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> sc<span class=\"token punctuation\">.</span>makeRDD<span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 降序排序：</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">val</span> rdd1<span class=\"token operator\">:</span> RDD<span class=\"token punctuation\">[</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> rdd<span class=\"token punctuation\">.</span>sortBy<span class=\"token punctuation\">(</span>num <span class=\"token keyword\">=></span> num<span class=\"token punctuation\">,</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    println<span class=\"token punctuation\">(</span>rdd1<span class=\"token punctuation\">.</span>collect<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>mkString<span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//6,5,4,3,2,1</span></pre></td></tr></table></figure><h5 id=\"55313-双value数据类型\"><a class=\"anchor\" href=\"#55313-双value数据类型\">#</a> 5.5.3.13 双 Value 数据类型</h5>\n<blockquote>\n<p>双 Value：表示是两个 RDD 之间进行操作，类似 sacla 中集合的并集 (union)、交集 (intersect)、差集 (diff)、拉链（zip）</p>\n</blockquote>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">--1. 算子：union</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">--2. 作用：并集</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">--3. 说明</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>       a、分区：分区合并</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>       b、数据：数据合并</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>       c、两个RDD的数据类型必须保持一致，否者编译不通过</pre></td></tr></table></figure><figure class=\"highlight scala\"><figcaption data-lang=\"scala\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">val</span> rdd1 <span class=\"token operator\">=</span> sc<span class=\"token punctuation\">.</span>makeRDD<span class=\"token punctuation\">(</span>List<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">val</span> rdd2<span class=\"token operator\">:</span> RDD<span class=\"token punctuation\">[</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> sc<span class=\"token punctuation\">.</span>makeRDD<span class=\"token punctuation\">(</span>List<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">val</span> result1<span class=\"token operator\">:</span> RDD<span class=\"token punctuation\">[</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> rdd1<span class=\"token punctuation\">.</span>union<span class=\"token punctuation\">(</span>rdd2<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    println<span class=\"token punctuation\">(</span>result1<span class=\"token punctuation\">.</span>collect<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>mkString<span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    result1<span class=\"token punctuation\">.</span>saveAsTextFile<span class=\"token punctuation\">(</span><span class=\"token string\">\"output1\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">--1. 算子：intersection</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>     <span class=\"token comment\">--2. 作用：交集</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     <span class=\"token comment\">--3. 说明</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        a、数据打乱重组，有shuffle过程；</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        b、两个RDD的数据类型必须保持一致，否者编译时报错</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        c、返回的RDD的分区数量保留两个RDD最大的分区数量</pre></td></tr></table></figure><figure class=\"highlight scala\"><figcaption data-lang=\"scala\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">val</span> result2 <span class=\"token operator\">=</span> rdd1<span class=\"token punctuation\">.</span>intersection<span class=\"token punctuation\">(</span>rdd2<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">--1. 算子：subtract</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>     <span class=\"token comment\">--2. 作用：差集</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     <span class=\"token comment\">--3. 说明</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        a、分区：返回的RDD的分区数量等于调用这个方法的RDD的分区数量</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        b、有数据打乱重组过程，有shuffle过程</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        c、数据：返回当前RDD除去和参数RDD共同的数据集</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        d、两个RDD的数据类型必须保持一致，否者编译时报错</pre></td></tr></table></figure><figure class=\"highlight scala\"><figcaption data-lang=\"scala\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">val</span> result3<span class=\"token operator\">:</span> RDD<span class=\"token punctuation\">[</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> rdd1<span class=\"token punctuation\">.</span>subtract<span class=\"token punctuation\">(</span>rdd2<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">--1. 算子：zip</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>     <span class=\"token comment\">--2. 作用：拉链</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     <span class=\"token comment\">--3. 说明：</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        a、分区数量相同，每个分区的数据量不相等，</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        报错：Can only zip RDDs <span class=\"token keyword\">with</span> same number <span class=\"token keyword\">of</span> elements <span class=\"token operator\">in</span> each <span class=\"token keyword\">partition</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        只有两个RDD的每个分区数据量相同才能拉链</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        b、分区数量不相同，每个分区的数量量相同，</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        报错：Can't zip RDDs <span class=\"token keyword\">with</span> unequal numbers <span class=\"token keyword\">of</span> partitions</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        RDD的分区数量不同不能拉链</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        综上：只要两个RDD的分区数量和每个分区数据量相等，才不会报错。</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        c、返回的RDD的数据是元组</pre></td></tr></table></figure><figure class=\"highlight scala\"><figcaption data-lang=\"scala\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">val</span> result4<span class=\"token operator\">:</span> RDD<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> rdd1<span class=\"token punctuation\">.</span>zip<span class=\"token punctuation\">(</span>rdd2<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h5 id=\"55314-key-value类型\"><a class=\"anchor\" href=\"#55314-key-value类型\">#</a> 5.5.3.14 key-value 类型</h5>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">--1.Spark 中有很多方法都是基于 Key 进行操作，所以数据格式应该为键值对 (对偶元素) 才能使用这些方法</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">--2. 如果数据类型是 kv 类型，那么 Spark 会将 RDD 自动转换补充很多新的功能 --> 功能的扩展</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">--3. 那么是如果实现的？</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      a、通过隐式转换</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      b、如果数据类型为kv类型，在RDD的伴生对象中会将当前的RDD会转换为PairRDDFunctions对象</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      c、如下的partitionBy就是来自PairRDDFunctions类中的方法</pre></td></tr></table></figure><h5 id=\"55315-partitionby\"><a class=\"anchor\" href=\"#55315-partitionby\">#</a> 5.5.3.15 partitionBy</h5>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">--1. 算子：partitionBy (形参)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">--2. 形参：partitioner: Partitioner：是一个分区器对象。</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">--3. 作用：根据指定的规则对数据进行分区，指定数据进入到哪一个分区。</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">--4. 当前能改变分区的算子有：</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      groupBy、<span class=\"token keyword\">coalesce</span>、rePartition <span class=\"token comment\">--> 改变分区的数据，但是并不能指定数据去到指定的分区</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      而partitionBy就是来处理将数据指定去到哪个分区。</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">--5. 什么是分区器？</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>       a、Partitioner是一个抽象类，有两个抽象方法：</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>          方法<span class=\"token number\">1</span>：def numPartitions: <span class=\"token keyword\">Int</span>  <span class=\"token comment\">-- 用来获取当前的分区数量</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>          方法<span class=\"token number\">2</span>：def getPartition<span class=\"token punctuation\">(</span><span class=\"token keyword\">key</span>: <span class=\"token keyword\">Any</span><span class=\"token punctuation\">)</span>: <span class=\"token keyword\">Int</span>  <span class=\"token comment\">-- 根据数据的 key，返回数据所在的分区号      </span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>       b、Partitioner有三个实现类：</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>          <span class=\"token number\">1.</span>HashPartitioner</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>          <span class=\"token number\">2.</span>RangePartitioner</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>          <span class=\"token number\">3.</span>PythonPartitioner</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>       c、HashPartitioner:</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>          <span class=\"token number\">1.</span>是Spark默认的分区器</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>          <span class=\"token number\">2.</span>分区规则：将当前数据的<span class=\"token keyword\">Key</span>的哈希值 <span class=\"token operator\">%</span> 分区数量</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>          <span class=\"token number\">3.</span>形参需要传递分区的数量。</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>       d、RangePartitioner：范围分区器，指定每个分区的<span class=\"token keyword\">key</span>范围，在这个范围的<span class=\"token keyword\">key</span>就进入这个分区</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>          这需要<span class=\"token keyword\">key</span>能比较大小。</pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>     <span class=\"token comment\">--6. 注意事项：如果重分区的分区器和当前 RDD 的分区器相同，那么数据不会重新分区。</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>     <span class=\"token comment\">--7. 自定义分区器：</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>       步骤：</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>       a、创建一个类，有一个分区数量的属性，然后extends Partitioner</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>       b、重写Partitioner中的两个抽象方法</pre></td></tr></table></figure><figure class=\"highlight scala\"><figcaption data-lang=\"scala\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">val</span> sparkConf<span class=\"token operator\">:</span> SparkConf <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> SparkConf<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>setMaster<span class=\"token punctuation\">(</span><span class=\"token string\">\"local[*]\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>setAppName<span class=\"token punctuation\">(</span><span class=\"token string\">\"RDD\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">val</span> sc <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> SparkContext<span class=\"token punctuation\">(</span>sparkConf<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">val</span> list <span class=\"token operator\">=</span> List<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"a\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"c\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">val</span> rdd<span class=\"token operator\">:</span> RDD<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> sc<span class=\"token punctuation\">.</span>makeRDD<span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">//    rdd.saveAsTextFile(\"output1\")</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">val</span> rdd1<span class=\"token operator\">:</span> RDD<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> rdd<span class=\"token punctuation\">.</span>partitionBy<span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> HashPartitioner<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">//    rdd1.saveAsTextFile(\"output2\")</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">val</span> list1 <span class=\"token operator\">=</span> List<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token punctuation\">(</span><span class=\"token string\">\"cba\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"消息1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      <span class=\"token punctuation\">(</span><span class=\"token string\">\"nba\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"消息5\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      <span class=\"token punctuation\">(</span><span class=\"token string\">\"wnba\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"消息10\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      <span class=\"token punctuation\">(</span><span class=\"token string\">\"cba\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"消息2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      <span class=\"token punctuation\">(</span><span class=\"token string\">\"nba\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"消息2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      <span class=\"token punctuation\">(</span><span class=\"token string\">\"wnba\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"消息6\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      <span class=\"token punctuation\">(</span><span class=\"token string\">\"cba\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"消息1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">val</span> rddInfo<span class=\"token operator\">:</span> RDD<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> sc<span class=\"token punctuation\">.</span>makeRDD<span class=\"token punctuation\">(</span>list1<span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">val</span> partitionRDD<span class=\"token operator\">:</span> RDD<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> rddInfo<span class=\"token punctuation\">.</span>partitionBy<span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> MyPartitioner<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    partitionRDD<span class=\"token punctuation\">.</span>saveAsTextFile<span class=\"token punctuation\">(</span><span class=\"token string\">\"output\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    sc<span class=\"token punctuation\">.</span>stop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token comment\">// 自定义分区器</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  <span class=\"token keyword\">class</span> MyPartitioner<span class=\"token punctuation\">(</span>num<span class=\"token operator\">:</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">extends</span>  Partitioner <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">override</span> <span class=\"token keyword\">def</span> numPartitions<span class=\"token operator\">:</span> <span class=\"token builtin\">Int</span> <span class=\"token operator\">=</span> num</pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">override</span> <span class=\"token keyword\">def</span> getPartition<span class=\"token punctuation\">(</span>key<span class=\"token operator\">:</span> <span class=\"token builtin\">Any</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Int</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>      key <span class=\"token keyword\">match</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token keyword\">case</span> <span class=\"token string\">\"nba\"</span> <span class=\"token keyword\">=></span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token keyword\">case</span> _ <span class=\"token keyword\">=></span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h5 id=\"55316-reducebykey\"><a class=\"anchor\" href=\"#55316-reducebykey\">#</a> 5.5.3.16 reduceByKey</h5>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">--1. 算子：reduceByKey (形参)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>     <span class=\"token comment\">--2. 形参：有三个重载的方法，我们这里介绍两种。</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        方法<span class=\"token number\">1</span>：</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        形参：func: <span class=\"token punctuation\">(</span>V<span class=\"token punctuation\">,</span> V<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> V ，是一个函数</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>             函数的形参为：表示相同<span class=\"token keyword\">Key</span>的<span class=\"token keyword\">value</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>             函数返回值：经过聚合以后的结果，返回值数据类型和原数据<span class=\"token keyword\">value</span>类型一致</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        方法<span class=\"token number\">2</span>：</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        形参：func: <span class=\"token punctuation\">(</span>V<span class=\"token punctuation\">,</span> V<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> V<span class=\"token punctuation\">,</span> numPartitions: <span class=\"token keyword\">Int</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        形参<span class=\"token number\">1</span>：与方法<span class=\"token number\">1</span>一致</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        形参<span class=\"token number\">2</span>：定义聚合以后分区的数量</pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>     <span class=\"token comment\">--3. 作用：根据数据的 Key 进行分组，对相同 Key 的 value 进行数据处理</span></pre></td></tr></table></figure><figure class=\"highlight scala\"><figcaption data-lang=\"scala\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">val</span> list <span class=\"token operator\">=</span> List<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">val</span> rdd<span class=\"token operator\">:</span> RDD<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> sc<span class=\"token punctuation\">.</span>makeRDD<span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    rdd<span class=\"token punctuation\">.</span>saveAsTextFile<span class=\"token punctuation\">(</span><span class=\"token string\">\"output\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">val</span> rdd1<span class=\"token operator\">:</span> RDD<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> rdd<span class=\"token punctuation\">.</span>reduceByKey<span class=\"token punctuation\">(</span>_  <span class=\"token operator\">+</span> _<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    rdd1<span class=\"token punctuation\">.</span>saveAsTextFile<span class=\"token punctuation\">(</span><span class=\"token string\">\"output1\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>![image-20200606000759888](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saWFuLXpwLm9zcy1jbi1zaGVuemhlbi5hbGl5dW5jcy5jb20vcGlj\">https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic</span> GO/20200606000759.png)</p>\n<h5 id=\"55317-groupbykey\"><a class=\"anchor\" href=\"#55317-groupbykey\">#</a> 5.5.3.17 groupByKey</h5>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">--1. 算子：groupByKey (形参)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>     <span class=\"token comment\">--2. 形参：有三个重载的方法：分别是 (无参)、(partitioner: Partitioner)、(numPartitions: Int)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     <span class=\"token comment\">--3. 返回值：RDD [(K, Iterable [V])]，是一个元组</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>               第一元素：表示用于分组的<span class=\"token keyword\">key</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>               第二元素：表示分组后相同<span class=\"token keyword\">key</span>的<span class=\"token keyword\">value</span>的集合</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>     <span class=\"token comment\">--4. 作用：根据数据的 key 进行分组</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>     <span class=\"token comment\">--5. 对比 groupBy: 按照指定的规则进行分组</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>     <span class=\"token comment\">--6. 补充知识点：</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token number\">1.</span> shuffle过程必须落盘。</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token number\">2.</span> 一个分区就是一个task，如果处理过程有shuffle过程，那么将会把task一分为二</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>               有shuffle过程，会生产新的分区，生产新的task。</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token number\">3.</span> 判断一个算子的效率，取决于shuffle的效率，落盘的数据越少，读取的数据越少，则效率越高</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>     <span class=\"token comment\">--7. 关于 reduceByKey 和 groupByKey 的区别。</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token number\">1.</span> 算子的作用：</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                reduceByKey：根据<span class=\"token keyword\">key</span>进行分组，对相同的<span class=\"token keyword\">key</span>的<span class=\"token keyword\">value</span>进行操作</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                groupByKey：对<span class=\"token keyword\">key</span>进行分组</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token number\">2.</span> groupByKey</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                a、对一个分区的数据分区后不能继续执行后续的操作，需要等到其他分区的数据全部到达后，才能执行后续的操作</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                b、groupByKey是面向整个数据集，而不是面向一个分区</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                c、但是如果在内存等待，那么可能由于内存不够，导致执行失败，所以这个等待的过程依靠落盘<span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token number\">3.</span>reduceByKey:</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                a、在shuffle之前进行分区内的聚合操作，称之为预聚合，这样shuffle时，落盘的数据就会减少，提高了shuff的</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                   效率</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                b、分区内和分区间的规则相同。</pre></td></tr></table></figure><figure class=\"highlight scala\"><figcaption data-lang=\"scala\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">val</span> list <span class=\"token operator\">=</span> List<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">val</span> rdd<span class=\"token operator\">:</span> RDD<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> sc<span class=\"token punctuation\">.</span>makeRDD<span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">val</span> rdd1<span class=\"token operator\">:</span> RDD<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> Iterable<span class=\"token punctuation\">[</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> rdd<span class=\"token punctuation\">.</span>groupByKey<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    rdd1<span class=\"token punctuation\">.</span>saveAsTextFile<span class=\"token punctuation\">(</span><span class=\"token string\">\"output\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    println<span class=\"token punctuation\">(</span>rdd1<span class=\"token punctuation\">.</span>collect<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>mkString<span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">//(b,CompactBuffer(1, 5)),(a,CompactBuffer(2, 3))</span></pre></td></tr></table></figure><p>![image-20200606000826608](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saWFuLXpwLm9zcy1jbi1zaGVuemhlbi5hbGl5dW5jcy5jb20vcGlj\">https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic</span> GO/20200606000826.png)</p>\n<h5 id=\"55318-aggregatebykey\"><a class=\"anchor\" href=\"#55318-aggregatebykey\">#</a> 5.5.3.18 aggregateByKey</h5>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">--1. 算子：aggregateByKey (形参)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">--2. 形参：两个形参列表</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>           a、形参列表<span class=\"token number\">1</span>：<span class=\"token punctuation\">(</span>zeroValue: U<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>              参数：表示计算的初始值</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>           b、形参列表<span class=\"token number\">2</span>：<span class=\"token punctuation\">(</span>seqOp: <span class=\"token punctuation\">(</span>U<span class=\"token punctuation\">,</span> V<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> U<span class=\"token punctuation\">,</span>combOp: <span class=\"token punctuation\">(</span>U<span class=\"token punctuation\">,</span> U<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> U<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>              参数<span class=\"token number\">1</span>：seqOp: <span class=\"token punctuation\">(</span>U<span class=\"token punctuation\">,</span> V<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> U：是一个函数，表示分区内相同<span class=\"token keyword\">key</span>的<span class=\"token keyword\">value</span>的计算规则</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                    函数的形参：第一个参数按照计算规则和第一个<span class=\"token keyword\">value</span>计算的结果，类型和初始值类型相同，第二个参数为数据的V</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                    函数的返回值：返回和第一个参数一样的数据类型</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>              参数<span class=\"token number\">2</span>：combOp: <span class=\"token punctuation\">(</span>U<span class=\"token punctuation\">,</span> U<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> U：是一个函数，表示分区间，相同<span class=\"token keyword\">key</span>的<span class=\"token keyword\">value</span>的计算规则</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                    函数的形参：两个参数为每个分区的计算结果，类型和初始值类型相同</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                    函数的返回值：返回和第一个参数一样的数据类型</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">--3. 作用：根据 key 进行聚合，分区内和分区间的执行逻辑均是针对于 value 的操作</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\">--4. 使用场景：</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>         a、当出现分区内和分区间对数据处理的规则不一样时，使用这个算子。</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">--5. 当分区内计算规则和分区间的计算规则相同时，可以使用 foldByKey 进行替代。</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>         def foldByKey<span class=\"token punctuation\">(</span>zeroValue: V<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>func: <span class=\"token punctuation\">(</span>V<span class=\"token punctuation\">,</span> V<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> V<span class=\"token punctuation\">)</span>: RDD<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>K<span class=\"token punctuation\">,</span> V<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token comment\">--6. 说明：</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>         a、初始值只参与分区内相同<span class=\"token keyword\">key</span>的第一次运算，而且初始值为<span class=\"token keyword\">value</span>值</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>         b、可以初始值的方式改变数据结构</pre></td></tr></table></figure><p>![image-20200606000641855](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saWFuLXpwLm9zcy1jbi1zaGVuemhlbi5hbGl5dW5jcy5jb20vcGlj\">https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic</span> GO/20200606000641.png)</p>\n<figure class=\"highlight scala\"><figcaption data-lang=\"scala\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    需求：求分区内相同 key 的 value 最大值，然后再求分区间相同 key 的 value 总和</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    分区内：</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    分区 0：</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    (\"a\",2), (\"a\",3), (\"b\",4),</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    =>(\"a\",3),(\"b\",4)</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    分区 1：</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    (\"b\",2), (\"a\",5), (\"b\",3)</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    =>(\"b\",3),(\"a\",5)</pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    分区间：</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    (\"a\",8)</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    (\"b\",7)</pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">val</span> list <span class=\"token operator\">=</span> List<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      <span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      <span class=\"token punctuation\">(</span><span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">val</span> rdd<span class=\"token operator\">:</span> RDD<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> sc<span class=\"token punctuation\">.</span>makeRDD<span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">val</span> rdd1<span class=\"token operator\">:</span> RDD<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> rdd<span class=\"token punctuation\">.</span>aggregateByKey<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>      <span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span> <span class=\"token keyword\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        x <span class=\"token operator\">+</span> y</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>      <span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span> <span class=\"token keyword\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        x <span class=\"token operator\">+</span> y</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    println<span class=\"token punctuation\">(</span>rdd1<span class=\"token punctuation\">.</span>collect<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>mkString<span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token keyword\">val</span> rdd2<span class=\"token operator\">:</span> RDD<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> rdd<span class=\"token punctuation\">.</span>foldByKey<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>_ <span class=\"token operator\">+</span> _ <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    println<span class=\"token punctuation\">(</span>rdd2<span class=\"token punctuation\">.</span>collect<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>mkString<span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h5 id=\"55319-combinebykey\"><a class=\"anchor\" href=\"#55319-combinebykey\">#</a> 5.5.3.19 combineByKey</h5>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">--1. 算子：combineByKey (形参)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">--2. 形参： 相同 key 内进行操作</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>       参数<span class=\"token number\">1</span>：createCombiner: V <span class=\"token operator\">=</span><span class=\"token operator\">></span> C<span class=\"token punctuation\">,</span>表示将计算的第一个值进行结构转化</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>             形参：相同<span class=\"token keyword\">key</span>组内的第一个<span class=\"token keyword\">value</span>元素</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>             返回：<span class=\"token keyword\">value</span>经过转换后的数据</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>       参数<span class=\"token number\">2</span>：mergeValue: <span class=\"token punctuation\">(</span>C<span class=\"token punctuation\">,</span> V<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> C<span class=\"token punctuation\">,</span>表示分区内的计算规则</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>             形参：参数<span class=\"token number\">1</span>为经过处理后<span class=\"token keyword\">value</span>，参数<span class=\"token number\">2</span>为组内的一个一个的<span class=\"token keyword\">value</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>             返回：<span class=\"token keyword\">value</span>经过处理后的数据</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>       参数<span class=\"token number\">3</span>：mergeCombiners: <span class=\"token punctuation\">(</span>C<span class=\"token punctuation\">,</span> C<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> C<span class=\"token punctuation\">)</span>：表示分区间的计算规则</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>             形参：相同<span class=\"token keyword\">key</span>，两个经过分区内处理过的v</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>             返回：返回两个v的处理结果</pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">--3. 作用：均是对 key 为组进行合并，对 value 进行数据处理</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\">--4. 使用场景：当计算时发现 key 的 value 不符合计算规则的格式时，那么选择 conbineByKey</span></pre></td></tr></table></figure><figure class=\"highlight scala\"><figcaption data-lang=\"scala\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    需求：将数据</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    List ((\"a\", 88), (\"b\", 95), (\"a\", 91), (\"b\", 93), (\"a\", 95), (\"b\", 98))</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    求每个 key 的平均值</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">val</span> list <span class=\"token operator\">=</span> List<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">88</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">95</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">91</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">93</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">95</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">98</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">val</span> rdd<span class=\"token operator\">:</span> RDD<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> sc<span class=\"token punctuation\">.</span>makeRDD<span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">val</span> rdd1<span class=\"token operator\">:</span> RDD<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> rdd<span class=\"token punctuation\">.</span>combineByKey<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      v <span class=\"token keyword\">=></span> <span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token punctuation\">(</span>tuple<span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span> <span class=\"token keyword\">=></span> <span class=\"token punctuation\">(</span>tuple<span class=\"token punctuation\">.</span>_1 <span class=\"token operator\">+</span> v<span class=\"token punctuation\">,</span> tuple<span class=\"token punctuation\">.</span>_2 <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      <span class=\"token punctuation\">(</span>tuple<span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> tuple2<span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token punctuation\">(</span>tuple<span class=\"token punctuation\">.</span>_1 <span class=\"token operator\">+</span> tuple2<span class=\"token punctuation\">.</span>_1<span class=\"token punctuation\">,</span> tuple<span class=\"token punctuation\">.</span>_2 <span class=\"token operator\">+</span> tuple2<span class=\"token punctuation\">.</span>_2<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">val</span> mapRDD<span class=\"token operator\">:</span> RDD<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> rdd1<span class=\"token punctuation\">.</span>map <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      <span class=\"token keyword\">case</span> <span class=\"token punctuation\">(</span>word<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>sum<span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">=></span> <span class=\"token punctuation\">(</span>word<span class=\"token punctuation\">,</span> sum <span class=\"token operator\">/</span> count<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    println<span class=\"token punctuation\">(</span>mapRDD<span class=\"token punctuation\">.</span>collect<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>mkString<span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>![image-20200606000722774](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saWFuLXpwLm9zcy1jbi1zaGVuemhlbi5hbGl5dW5jcy5jb20vcGlj\">https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic</span> GO/20200606000722.png)</p>\n<h5 id=\"55320-几个bykey的区别\"><a class=\"anchor\" href=\"#55320-几个bykey的区别\">#</a> 5.5.3.20 几个 ByKey 的区别</h5>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- reduceByKey、foldByKey、aggregateByKey、combineByKey 的区别</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     <span class=\"token number\">1.</span>从源码的角度发现，如上<span class=\"token number\">4</span>个算子底层逻辑是相同，唯一不同的区别是参数不同。</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>          参数<span class=\"token number\">1</span>： createCombiner，分区内每个<span class=\"token keyword\">key</span>的第一个v的转换逻辑</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>          参数<span class=\"token number\">2</span>： mergeValue，分区内部的计算逻辑</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>          参数<span class=\"token number\">3</span>： mergeCombiners，分区间的计算逻辑</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>              def combineByKeyWithClassTag<span class=\"token punctuation\">[</span>C<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                  createCombiner: V <span class=\"token operator\">=</span><span class=\"token operator\">></span> C<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                  mergeValue: <span class=\"token punctuation\">(</span>C<span class=\"token punctuation\">,</span> V<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> C<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                  mergeCombiners: <span class=\"token punctuation\">(</span>C<span class=\"token punctuation\">,</span> C<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> C<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                  partitioner: Partitioner<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                  mapSideCombine: <span class=\"token keyword\">Boolean</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                  serializer: Serializer <span class=\"token operator\">=</span> <span class=\"token boolean\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token comment\">--2.reduceByKey：</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            源码如下：</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token comment\">-- 参数 1：没有任何的转换，对 key 的第一个 value 没有转换</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token comment\">-- 参数 2 和参数 3 相同，即分区内和分区间的计算逻辑保持一致。</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            combineByKeyWithClassTag<span class=\"token punctuation\">[</span>V<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>v: V<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> v<span class=\"token punctuation\">,</span> func<span class=\"token punctuation\">,</span> func<span class=\"token punctuation\">,</span> partitioner<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token comment\">--3.aggregateByKey</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            源码如下：</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token comment\">-- 参数 1：传递的初始值会和每一个 key 的第一个 value 按照分区内计算逻辑进行计算</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token comment\">-- 参数 2：分区内计算逻辑</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token comment\">-- 参数 3：分区间的计算逻辑</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>           combineByKeyWithClassTag<span class=\"token punctuation\">[</span>U<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>v: V<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> cleanedSeqOp<span class=\"token punctuation\">(</span>createZero<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>cleanedSeqOp<span class=\"token punctuation\">,</span> combOp<span class=\"token punctuation\">,</span> partitioner<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>       </pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token comment\">--4.foldByKey</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            源码如下：</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token comment\">-- 参数 1：传递的初始值会和每一个 key 的第一个 value 按照分区内计算逻辑进行计算</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            <span class=\"token comment\">-- 参数 2 和参数 3 一致：分区内和分区间的计算逻辑保持一致</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>          combineByKeyWithClassTag<span class=\"token punctuation\">[</span>V<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>v: V<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> cleanedFunc<span class=\"token punctuation\">(</span>createZero<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> cleanedFunc<span class=\"token punctuation\">,</span> cleanedFunc<span class=\"token punctuation\">,</span> partitioner<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token comment\">--5.combineByKey</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            源码如下：</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            <span class=\"token comment\">-- 参数 1：分区内每个 key 的第一个 v 的转换逻辑，所以去无需传递初始值</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            <span class=\"token comment\">-- 参数 2：分区内计算逻辑</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            <span class=\"token comment\">-- 参数 3：分区间的计算逻辑</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        combineByKeyWithClassTag<span class=\"token punctuation\">(</span>createCombiner<span class=\"token punctuation\">,</span> mergeValue<span class=\"token punctuation\">,</span> mergeCombiners<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h5 id=\"55321-sortbykey\"><a class=\"anchor\" href=\"#55321-sortbykey\">#</a> 5.5.3.21 sortByKey</h5>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">--1. 算子：sortByKey (形参)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">--2. 形参：有两个形参，均有默认值：</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>           形参<span class=\"token number\">1</span>：ascending: <span class=\"token keyword\">Boolean</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>                 排序的顺序，默认是升序，如果需要降序，则输入<span class=\"token boolean\">false</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>           形参<span class=\"token number\">2</span>：numPartitions: <span class=\"token keyword\">Int</span> <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>partitions<span class=\"token punctuation\">.</span>length：</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                 排序以后分区的数量，默认等于上一个rdd的分区的数量。</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">--3. 作用：根据 key 进行排序，默认是升序</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">--4. 说明:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>           还可以自定义分区的规则。步骤：</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>           <span class=\"token number\">1.</span>继承与ordered，并混入<span class=\"token keyword\">serializable</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>           <span class=\"token number\">2.</span>重写compare方法，指定排序比较的规则</pre></td></tr></table></figure><figure class=\"highlight scala\"><figcaption data-lang=\"scala\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">val</span> rdd<span class=\"token operator\">:</span> RDD<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> sc<span class=\"token punctuation\">.</span>makeRDD<span class=\"token punctuation\">(</span>List<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    println<span class=\"token punctuation\">(</span>rdd<span class=\"token punctuation\">.</span>sortByKey<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>collect<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>mkString<span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">val</span> user1 <span class=\"token operator\">=</span> User<span class=\"token punctuation\">(</span><span class=\"token string\">\"scala\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">val</span> user2<span class=\"token operator\">:</span> User <span class=\"token operator\">=</span> User<span class=\"token punctuation\">(</span><span class=\"token string\">\"scala\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">21</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">val</span> user3<span class=\"token operator\">:</span> User <span class=\"token operator\">=</span> User<span class=\"token punctuation\">(</span><span class=\"token string\">\"hadoop\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">25</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">val</span> rdd2<span class=\"token operator\">:</span> RDD<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>User<span class=\"token punctuation\">,</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> sc<span class=\"token punctuation\">.</span>makeRDD<span class=\"token punctuation\">(</span>List<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>user1<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>user2<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span>user3<span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    println<span class=\"token punctuation\">(</span>rdd2<span class=\"token punctuation\">.</span>sortByKey<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>collect<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>mkString<span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token comment\">// 自定义排序方式</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token keyword\">case</span> <span class=\"token keyword\">class</span> User<span class=\"token punctuation\">(</span>name<span class=\"token operator\">:</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span>age<span class=\"token operator\">:</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">extends</span>  Ordered<span class=\"token punctuation\">[</span>User<span class=\"token punctuation\">]</span> <span class=\"token keyword\">with</span>  Serializable<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>     <span class=\"token keyword\">override</span> <span class=\"token keyword\">def</span> compare<span class=\"token punctuation\">(</span>that<span class=\"token operator\">:</span> User<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Int</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">></span> that<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>          <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">==</span> that<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>          <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">-</span> that<span class=\"token punctuation\">.</span>age</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>          <span class=\"token operator\">-</span><span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>     <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h5 id=\"55322-join\"><a class=\"anchor\" href=\"#55322-join\">#</a> 5.5.3.22 join</h5>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">--1. 算子：Join (形参)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">--2. 形参：(other: RDD [(K, W)]): 另外一个 RDD</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">--3. 算子的返回值：RDD [(K, (V, W))]</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>          返回一个元组：</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>          元组的第一个元素：两个rdd连接的<span class=\"token keyword\">Key</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>          元组的第二个元素：相同<span class=\"token keyword\">key</span>的<span class=\"token keyword\">value</span>，一个来自当前RDD，一个来自另外一个RDD</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">--4. 作用：将两个 RDD 中，key 相同的 value 一一进行连接，类似 mysql 中的 join，会出现笛卡尔积错误</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">--5. 说明:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>       情况<span class=\"token number\">1</span>：如果当前RDD中<span class=\"token keyword\">key</span>在连接的RDD中没有，那么这条数据就不会被关联，数据则没有</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>       情况<span class=\"token number\">2</span>：如果当前RDD中相同的<span class=\"token keyword\">Key</span>有多条数据，且另外一个RDD与子相同的<span class=\"token keyword\">key</span>也有多条数据，那么就出现了笛卡尔积错误</pre></td></tr></table></figure><figure class=\"highlight scala\"><figcaption data-lang=\"scala\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">val</span> rdd<span class=\"token operator\">:</span> RDD<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> sc<span class=\"token punctuation\">.</span>makeRDD<span class=\"token punctuation\">(</span>List<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">val</span> rdd1<span class=\"token operator\">:</span> RDD<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> sc<span class=\"token punctuation\">.</span>makeRDD<span class=\"token punctuation\">(</span>List<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">21</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"c\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    println<span class=\"token punctuation\">(</span>rdd<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>rdd1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>collect<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>mkString<span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//(a,(1,21)),(b,(1,2))</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">val</span> rdd2<span class=\"token operator\">:</span> RDD<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> sc<span class=\"token punctuation\">.</span>makeRDD<span class=\"token punctuation\">(</span>List<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">val</span> rdd3<span class=\"token operator\">:</span> RDD<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> sc<span class=\"token punctuation\">.</span>makeRDD<span class=\"token punctuation\">(</span>List<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">21</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"c\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    println<span class=\"token punctuation\">(</span>rdd2<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>rdd3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>collect<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>mkString<span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">//(a,(1,21)),(a,(1,2)),(a,(2,21)),(a,(2,2)),(b,(1,2))</span></pre></td></tr></table></figure><h5 id=\"55323-leftrightouterjoin\"><a class=\"anchor\" href=\"#55323-leftrightouterjoin\">#</a> 5.5.3.23 Left/rightOuterJoin</h5>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">--1. 算子：LeftOuterJoin/RightOuterJoin</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">--2. 形参：另外一个 RDD</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">--3. 类似 mysql 中的左外连接和右外连接，同样会出现笛卡尔积错误</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">--4. 注意返回值：</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>       如果两个RDD有相同的<span class=\"token keyword\">key</span>，则为：<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">Some</span><span class=\"token punctuation\">(</span><span class=\"token number\">21</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>       如果主RDD中的<span class=\"token keyword\">key</span>，在从RDD没有对应的<span class=\"token keyword\">key</span>，则为：<span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span>None<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><figure class=\"highlight scala\"><figcaption data-lang=\"scala\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">val</span> rdd<span class=\"token operator\">:</span> RDD<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> sc<span class=\"token punctuation\">.</span>makeRDD<span class=\"token punctuation\">(</span>List<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"d\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">val</span> rdd1<span class=\"token operator\">:</span> RDD<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> sc<span class=\"token punctuation\">.</span>makeRDD<span class=\"token punctuation\">(</span>List<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">21</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    println<span class=\"token punctuation\">(</span>rdd<span class=\"token punctuation\">.</span>leftOuterJoin<span class=\"token punctuation\">(</span>rdd1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>collect<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>mkString<span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">//(a,(1,Some(21))),(a,(1,Some(2))),(a,(2,Some(21))),(a,(2,Some(2))),(b,(1,Some(2))),(d,(2,None))</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    println<span class=\"token punctuation\">(</span>rdd<span class=\"token punctuation\">.</span>rightOuterJoin<span class=\"token punctuation\">(</span>rdd1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>collect<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>mkString<span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h5 id=\"55324-cogroup\"><a class=\"anchor\" href=\"#55324-cogroup\">#</a> 5.5.3.24 cogroup</h5>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">--1. 算子：cogroup (形参)  -->co 是 connect 的简写</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">--2. 形参：other: RDD [(K, W)]: 另外一个 RDD</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">--3. 返回值：(K,(Iterable&lt;V>,Iterable&lt;W>))，是一个元组</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>              元组的第一个元素：RDD的<span class=\"token keyword\">key</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>              元组的第二个元素：还是一个元组</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                  元组的第一个元素：当前相同<span class=\"token keyword\">key</span>的所有<span class=\"token keyword\">value</span>的集合，是一个迭代器</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                  元组的第二个元素：另外一个RDD的<span class=\"token keyword\">key</span>的所有<span class=\"token keyword\">value</span>的集合，是一个迭代器</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">--4. 作用：将两个 RDD 中，key 相同的 value 组合在一起。</span></pre></td></tr></table></figure><figure class=\"highlight scala\"><figcaption data-lang=\"scala\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">val</span> rdd<span class=\"token operator\">:</span> RDD<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> sc<span class=\"token punctuation\">.</span>makeRDD<span class=\"token punctuation\">(</span>List<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"c\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">val</span> rdd1<span class=\"token operator\">:</span> RDD<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> sc<span class=\"token punctuation\">.</span>makeRDD<span class=\"token punctuation\">(</span>List<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">21</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"d\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    rdd<span class=\"token punctuation\">.</span>cogroup<span class=\"token punctuation\">(</span>rdd1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>collect<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>foreach<span class=\"token punctuation\">(</span>println<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">//(a,(CompactBuffer(1),CompactBuffer(21)))</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">//(b,(CompactBuffer(1),CompactBuffer(2, 2)))</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">//(c,(CompactBuffer(1),CompactBuffer()))</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">//(d,(CompactBuffer(),CompactBuffer(1)))</span></pre></td></tr></table></figure><h5 id=\"55325-行动算子\"><a class=\"anchor\" href=\"#55325-行动算子\">#</a> 5.5.3.25 行动算子</h5>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 什么是行动算子：</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>       a、所谓行动算子，就是不会产生一个新的RDD，而是触发作业的执行</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>       b、而之前的转换算子，只是功能的扩展和包装，不会触发作业的执行</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>       c、行动算子执行以后，会获取当前作业的执行结果</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>       d、Spark的行动算子执行时，会产生job对象，然后提交job对象</pre></td></tr></table></figure><h5 id=\"55326-reduce\"><a class=\"anchor\" href=\"#55326-reduce\">#</a> 5.5.3.26 reduce</h5>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">--1. 算子：reduce</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">--2. 作用：与 scala 中的 reduce 使用方式相同</span></pre></td></tr></table></figure><figure class=\"highlight scala\"><figcaption data-lang=\"scala\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">val</span> rdd<span class=\"token operator\">:</span> RDD<span class=\"token punctuation\">[</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> sc<span class=\"token punctuation\">.</span>makeRDD<span class=\"token punctuation\">(</span>List<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">val</span> sum<span class=\"token operator\">:</span> <span class=\"token builtin\">Int</span> <span class=\"token operator\">=</span> rdd<span class=\"token punctuation\">.</span>reduce<span class=\"token punctuation\">(</span>_ <span class=\"token operator\">+</span> _<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    println<span class=\"token punctuation\">(</span>sum<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h5 id=\"55327-collect\"><a class=\"anchor\" href=\"#55327-collect\">#</a> 5.5.3.27 collect</h5>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">--1. 算子：collect</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">--2. 作用：采集数据，纯粹的将所有分区的计算结果拉取到当前的节点，可能会出现内存溢出的情况</span></pre></td></tr></table></figure><figure class=\"highlight scala\"><figcaption data-lang=\"scala\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>rdd<span class=\"token punctuation\">.</span>collect<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>foreach<span class=\"token punctuation\">(</span>println<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h5 id=\"55328-count\"><a class=\"anchor\" href=\"#55328-count\">#</a> 5.5.3.28 count</h5>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">--1. 算子：count</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">--2. 作用：返回当前 RDD 中数据的个数</span></pre></td></tr></table></figure><figure class=\"highlight scala\"><figcaption data-lang=\"scala\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>println<span class=\"token punctuation\">(</span>rdd<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h5 id=\"55329-first\"><a class=\"anchor\" href=\"#55329-first\">#</a> 5.5.3.29 first</h5>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">--1. 算子：first</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">--2. 作用：获取 RDD 数据集中的第一个数据</span></pre></td></tr></table></figure><figure class=\"highlight scala\"><figcaption data-lang=\"scala\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>println<span class=\"token punctuation\">(</span>rdd<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h5 id=\"55330-take\"><a class=\"anchor\" href=\"#55330-take\">#</a> 5.5.3.30 take</h5>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">--1. 算子：take</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">--2. 返回当前 RDD 的前几个数据，是一个 Array 集合</span></pre></td></tr></table></figure><figure class=\"highlight scala\"><figcaption data-lang=\"scala\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>rdd<span class=\"token punctuation\">.</span>take<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>foreach<span class=\"token punctuation\">(</span>println<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h5 id=\"55331-takeordered\"><a class=\"anchor\" href=\"#55331-takeordered\">#</a> 5.5.3.31 takeOrdered</h5>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">--1. 算子：takeOrdered</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">--2. 先对 RDD 中的数据进行排序，默认升序，然后取前几个数据</span></pre></td></tr></table></figure><figure class=\"highlight scala\"><figcaption data-lang=\"scala\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>rdd<span class=\"token punctuation\">.</span>takeOrdered<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>foreach<span class=\"token punctuation\">(</span>println<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h5 id=\"55332-sum\"><a class=\"anchor\" href=\"#55332-sum\">#</a> 5.5.3.32 sum</h5>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">--1. 算子：sum</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">--2. 作用：对 RDD 集合数据求和，但是返回值类型为 Double 类型</span></pre></td></tr></table></figure><figure class=\"highlight scala\"><figcaption data-lang=\"scala\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>println<span class=\"token punctuation\">(</span>rdd<span class=\"token punctuation\">.</span>sum<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h5 id=\"55333-aggregate\"><a class=\"anchor\" href=\"#55333-aggregate\">#</a> 5.5.3.33 aggregate</h5>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">--1. 算子：aggregate ，与 aggregateByKey 的用法类似</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">--2. 形参：有两个形参列表：</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>       形参列表<span class=\"token number\">1</span>： <span class=\"token punctuation\">(</span>zeroValue: U<span class=\"token punctuation\">)</span> 初始值</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>       形参列表<span class=\"token number\">2</span>：<span class=\"token punctuation\">(</span>seqOp: <span class=\"token punctuation\">(</span>U<span class=\"token punctuation\">,</span> T<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> U<span class=\"token punctuation\">,</span> combOp: <span class=\"token punctuation\">(</span>U<span class=\"token punctuation\">,</span> U<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> U<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>          参数<span class=\"token number\">1</span>：分区内的计算逻辑</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>          参数<span class=\"token number\">2</span>：分区间的计算逻辑</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">--3. 与 aggregateByKey 的区别：</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>       aggregate的初始值参与分区间和分区内的计算</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>       aggregateByKey的初始值只参与分区内的计算</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>       </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">--4. 重点：初始值可以和集合数据的类型不一致，分区内和分区间最后的结果和初始值的类型一致，说明是可以起到转换结构的作用。</span></pre></td></tr></table></figure><figure class=\"highlight scala\"><figcaption data-lang=\"scala\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>println<span class=\"token punctuation\">(</span>rdd<span class=\"token punctuation\">.</span>aggregate<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>_ <span class=\"token operator\">+</span> _<span class=\"token punctuation\">,</span> _ <span class=\"token operator\">+</span> _<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//12</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    println<span class=\"token punctuation\">(</span>rdd<span class=\"token punctuation\">.</span>aggregate<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>_ <span class=\"token operator\">+</span> _<span class=\"token punctuation\">,</span> _ <span class=\"token operator\">+</span> _<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//42</span></pre></td></tr></table></figure><h5 id=\"55334-fold\"><a class=\"anchor\" href=\"#55334-fold\">#</a> 5.5.3.34 fold</h5>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">--1. 算子：fold</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token punctuation\">(</span>zeroValue: T<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>op: <span class=\"token punctuation\">(</span>T<span class=\"token punctuation\">,</span> T<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> T<span class=\"token punctuation\">)</span>: T </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">--2. 作用：当 aggregate 的分区间和分区内的计算逻辑相同时，可以使用 fold 进行简化</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">--3. 要求：初始值数据类型和集合中的数据类型保持一致</span></pre></td></tr></table></figure><figure class=\"highlight scala\"><figcaption data-lang=\"scala\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>println<span class=\"token punctuation\">(</span>rdd<span class=\"token punctuation\">.</span>fold<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>_ <span class=\"token operator\">+</span> _<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//42</span></pre></td></tr></table></figure><h5 id=\"55335-mapvalues\"><a class=\"anchor\" href=\"#55335-mapvalues\">#</a> 5.5.3.35 mapValues</h5>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">--1. 算子：mapValues (形参)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">--2. 形参：(f: V => U)，是一个函数，仅对 value 进行处理，key 不变</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">--3. 返回值：kv 类型的 RDD。</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">--4. 作用：对 value 的数据结构进行转换</span></pre></td></tr></table></figure><figure class=\"highlight scala\"><figcaption data-lang=\"scala\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">val</span> rdd1<span class=\"token operator\">:</span> RDD<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> sc<span class=\"token punctuation\">.</span>makeRDD<span class=\"token punctuation\">(</span>List<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    println<span class=\"token punctuation\">(</span>rdd1<span class=\"token punctuation\">.</span>mapValues<span class=\"token punctuation\">(</span>_ <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>collect<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>mkString<span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h5 id=\"55336-countbykey\"><a class=\"anchor\" href=\"#55336-countbykey\">#</a> 5.5.3.36 countBykey</h5>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">--1. 算子：countBykey</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">--2. 形参：无参</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">--3. 返回值：Map [K, Long]，返回一个元组</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>             元组的第一个元素：RDD中的<span class=\"token keyword\">Key</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>             元组的第二个元素：RDD中<span class=\"token keyword\">Key</span>出现的次数</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">--4. 作用：计算 key 出现的次数</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">--5. 底层源码：</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>       a、调用mapValues算子，将V转换为<span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>       b、然后再调用reduceByKey，将相同的<span class=\"token keyword\">key</span>的<span class=\"token keyword\">value</span>值进行相加</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>       c、最后转换成map结构</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      self<span class=\"token punctuation\">.</span>mapValues<span class=\"token punctuation\">(</span>_ <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token number\">1</span>L<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>reduceByKey<span class=\"token punctuation\">(</span>_ <span class=\"token operator\">+</span> _<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>collect<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>toMap</pre></td></tr></table></figure><figure class=\"highlight scala\"><figcaption data-lang=\"scala\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>println<span class=\"token punctuation\">(</span>rdd1<span class=\"token punctuation\">.</span>countByKey<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//Map(a -> 2, b -> 1)</span></pre></td></tr></table></figure><h5 id=\"55337-countbyvalues\"><a class=\"anchor\" href=\"#55337-countbyvalues\">#</a> 5.5.3.37 countByValues</h5>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">--1. 算子：countByValues</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">--2. 形参：无</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">--3. 返回值：Map [T, Long] ，返回一个元组</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>             元组的第一个元素：原数据的kv</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>             元组的第二个元素：原数据kv出现的次数</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">--4. 作用：计算 value 出现的次数</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">--5. 源码：</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>       a、将原数据进行处理，<span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">,</span>v<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">,</span><span class=\"token boolean\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>       b、调用countByKey算子，计算v出现的次数</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      map<span class=\"token punctuation\">(</span><span class=\"token keyword\">value</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">value</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>countByKey<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><figure class=\"highlight scala\"><figcaption data-lang=\"scala\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>println<span class=\"token punctuation\">(</span>rdd1<span class=\"token punctuation\">.</span>countByValue<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">//Map((a,1) -> 1, (b,1) -> 1, (a,2) -> 1)</span></pre></td></tr></table></figure><h5 id=\"55338-save\"><a class=\"anchor\" href=\"#55338-save\">#</a> 5.5.3.38 save</h5>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">--1. 算子：</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>             saveAsTextFile</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>             savaAsObjectFile</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>             savaAsSequenceFile</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>     <span class=\"token comment\">--2. 形参：无</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>     <span class=\"token comment\">--3. 作用：将 RDD 的结果以不同的形式保存到文件中，其中 savaAsSequenceFile 要求数据结构的 kv 键值对</span></pre></td></tr></table></figure><h5 id=\"55339-foreach\"><a class=\"anchor\" href=\"#55339-foreach\">#</a> 5.5.3.39 foreach</h5>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">--1. 算子：foreach</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">--2. 形参：无</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">--3. 作用：遍历 RDD 中的数据</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">--4. 算子与方法的区别：</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>       a、rdd<span class=\"token punctuation\">.</span>collect<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>foreach<span class=\"token punctuation\">(</span>println<span class=\"token punctuation\">)</span>  <span class=\"token comment\">-->foreach: 方法</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>       b、rdd<span class=\"token punctuation\">.</span>foreach<span class=\"token punctuation\">(</span>println<span class=\"token punctuation\">)</span>            <span class=\"token comment\">-->foreach: 算子</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>       <span class=\"token number\">1.</span>只要看到rdd的算子，一定要想到两个块，Driver和Executor</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>       <span class=\"token number\">2.</span>算子逻辑代码是在分布式计算节点executor中执行的，算子以外代码是在Driver端执行</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>       <span class=\"token number\">3.</span>foreach是算子时，那么将在不同的executor中同时执行，互不影响。</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>       <span class=\"token number\">4.</span>foreach是方法时，那么是在当前的节点的内存中完成数据的循环。</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>       <span class=\"token number\">5.</span>结果就是：两种方法的结果的顺序会不同。</pre></td></tr></table></figure><figure class=\"highlight scala\"><figcaption data-lang=\"scala\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>rdd<span class=\"token punctuation\">.</span>collect<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>foreach<span class=\"token punctuation\">(</span>println<span class=\"token punctuation\">)</span><span class=\"token comment\">//1 4 5 2</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    println<span class=\"token punctuation\">(</span><span class=\"token string\">\"=====================\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    rdd<span class=\"token punctuation\">.</span>foreach<span class=\"token punctuation\">(</span>println<span class=\"token punctuation\">)</span> <span class=\"token comment\">//5 2 1 4</span></pre></td></tr></table></figure><h4 id=\"554-rdd的序列化\"><a class=\"anchor\" href=\"#554-rdd的序列化\">#</a> 5.5.4 RDD 的序列化</h4>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1.</span>如果算子中使用了算子以外的对象，那么在执行时，需要保证这个对象能序列化</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">2.</span>样例类自动混入了可序列化特质</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">3.</span>Spark算子的操作都是闭包，所以闭包有可能用到外部的变量，如果包含了外部的变量，那么一定要保证这个外部变量可序列化，所以Spark在提交作业之前，应对闭包中的变量进行检测，这个操作我们称为闭包检测。</pre></td></tr></table></figure><ul>\n<li>Kryo 序列化框架</li>\n</ul>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>参考地址: https:<span class=\"token comment\">//github.com/EsotericSoftware/kryo</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Java的序列化能够序列化任何的类。但是比较重（字节多），序列化后，对象的提交也比较大。Spark出于性能的考虑，Spark2<span class=\"token punctuation\">.</span><span class=\"token number\">0</span>开始支持另外一种Kryo序列化机制。Kryo速度是<span class=\"token keyword\">Serializable</span>的<span class=\"token number\">10</span>倍。<span class=\"token string\">\"当RDD在Shuffle数据的时候，简单数据类型、数组和字符串类型已经在Spark内部使用Kryo来序列化\"</span>。</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\"注意：即使使用Kryo序列化，也要继承<span class=\"token keyword\">Serializable</span>接口。</pre></td></tr></table></figure><h4 id=\"555-rdd的依赖关系\"><a class=\"anchor\" href=\"#555-rdd的依赖关系\">#</a> 5.5.5 RDD 的依赖关系</h4>\n<ol>\n<li>toDebugString: 打印当前 RDD 的血缘关系\n<ul>\n<li>获取每个 RDD 的血缘关系</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight scala\"><figcaption data-lang=\"scala\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//3.1 读取数据</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">val</span> str<span class=\"token operator\">:</span> RDD<span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> sc<span class=\"token punctuation\">.</span>textFile<span class=\"token punctuation\">(</span><span class=\"token string\">\"input\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    println<span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">.</span>toDebugString<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">//3.2 扁平化数据</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">val</span> words<span class=\"token operator\">:</span> RDD<span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span>flatMap<span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    println<span class=\"token punctuation\">(</span>words<span class=\"token punctuation\">.</span>toDebugString<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">//3.3 分组</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">val</span> wordtocount<span class=\"token operator\">:</span> RDD<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> Iterable<span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> words<span class=\"token punctuation\">.</span>groupBy<span class=\"token punctuation\">(</span>word <span class=\"token keyword\">=></span> word<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    println<span class=\"token punctuation\">(</span>wordtocount<span class=\"token punctuation\">.</span>toDebugString<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">//3.4 结构化处理 =</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">val</span> wordcount<span class=\"token operator\">:</span> RDD<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> wordtocount<span class=\"token punctuation\">.</span>map <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      <span class=\"token keyword\">case</span> <span class=\"token punctuation\">(</span>word<span class=\"token punctuation\">,</span> iter<span class=\"token punctuation\">)</span> <span class=\"token keyword\">=></span> <span class=\"token punctuation\">(</span>word<span class=\"token punctuation\">,</span> iter<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    println<span class=\"token punctuation\">(</span>wordcount<span class=\"token punctuation\">.</span>toDebugString<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ul>\n<li>打印结果：</li>\n</ul>\n<figure class=\"highlight scala\"><figcaption data-lang=\"scala\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span> input MapPartitionsRDD<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> at textFile at Spark_WordCount<span class=\"token punctuation\">.</span>scala<span class=\"token operator\">:</span><span class=\"token number\">25</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token operator\">|</span>  input HadoopRDD<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> at textFile at Spark_WordCount<span class=\"token punctuation\">.</span>scala<span class=\"token operator\">:</span><span class=\"token number\">25</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span> MapPartitionsRDD<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> at flatMap at Spark_WordCount<span class=\"token punctuation\">.</span>scala<span class=\"token operator\">:</span><span class=\"token number\">29</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token operator\">|</span>  input MapPartitionsRDD<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> at textFile at Spark_WordCount<span class=\"token punctuation\">.</span>scala<span class=\"token operator\">:</span><span class=\"token number\">25</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> <span class=\"token operator\">|</span>  input HadoopRDD<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> at textFile at Spark_WordCount<span class=\"token punctuation\">.</span>scala<span class=\"token operator\">:</span><span class=\"token number\">25</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span> ShuffledRDD<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> at groupBy at Spark_WordCount<span class=\"token punctuation\">.</span>scala<span class=\"token operator\">:</span><span class=\"token number\">33</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> <span class=\"token operator\">+</span><span class=\"token operator\">-</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span> MapPartitionsRDD<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> at groupBy at Spark_WordCount<span class=\"token punctuation\">.</span>scala<span class=\"token operator\">:</span><span class=\"token number\">33</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token operator\">|</span>  MapPartitionsRDD<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> at flatMap at Spark_WordCount<span class=\"token punctuation\">.</span>scala<span class=\"token operator\">:</span><span class=\"token number\">29</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token operator\">|</span>  input MapPartitionsRDD<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> at textFile at Spark_WordCount<span class=\"token punctuation\">.</span>scala<span class=\"token operator\">:</span><span class=\"token number\">25</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token operator\">|</span>  input HadoopRDD<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> at textFile at Spark_WordCount<span class=\"token punctuation\">.</span>scala<span class=\"token operator\">:</span><span class=\"token number\">25</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span> MapPartitionsRDD<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span> at map at Spark_WordCount<span class=\"token punctuation\">.</span>scala<span class=\"token operator\">:</span><span class=\"token number\">38</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre> <span class=\"token operator\">|</span>  ShuffledRDD<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> at groupBy at Spark_WordCount<span class=\"token punctuation\">.</span>scala<span class=\"token operator\">:</span><span class=\"token number\">33</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre> <span class=\"token operator\">+</span><span class=\"token operator\">-</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span> MapPartitionsRDD<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> at groupBy at Spark_WordCount<span class=\"token punctuation\">.</span>scala<span class=\"token operator\">:</span><span class=\"token number\">33</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token operator\">|</span>  MapPartitionsRDD<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> at flatMap at Spark_WordCount<span class=\"token punctuation\">.</span>scala<span class=\"token operator\">:</span><span class=\"token number\">29</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token operator\">|</span>  input MapPartitionsRDD<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> at textFile at Spark_WordCount<span class=\"token punctuation\">.</span>scala<span class=\"token operator\">:</span><span class=\"token number\">25</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token operator\">|</span>  input HadoopRDD<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> at textFile at Spark_WordCount<span class=\"token punctuation\">.</span>scala<span class=\"token operator\">:</span><span class=\"token number\">25</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1.</span> RDD的依赖关系:RDD与直接上级RDD之间的关系</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">2.</span> RDD的血缘关系：包含直接依赖和间接依赖</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">3.</span> 如果Spark的计算过程中某个节点计算失败，那么框架会重新计算</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">4.</span> Spark想要重新对失败的task重新计算，那么需要知道数据来源以及需要知道数据需要经过哪些计算</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">5.</span> RDD不保存数据，仅保持计算的逻辑</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token number\">6.</span> 依赖关系主要是用来解决容错计算</pre></td></tr></table></figure><ol start=\"2\">\n<li>dependencies：获取当前 RDD 与直接上级的 RDD 的依赖关系</li>\n</ol>\n<ul>\n<li>获取直接上级 RDD 的依赖关系</li>\n</ul>\n<figure class=\"highlight scala\"><figcaption data-lang=\"scala\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//3.2 扁平化数据</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">val</span> words<span class=\"token operator\">:</span> RDD<span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span>flatMap<span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    println<span class=\"token punctuation\">(</span>words<span class=\"token punctuation\">.</span>dependencies<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">//3.3 分组</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">val</span> wordtocount<span class=\"token operator\">:</span> RDD<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> Iterable<span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> words<span class=\"token punctuation\">.</span>groupBy<span class=\"token punctuation\">(</span>word <span class=\"token keyword\">=></span> word<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    println<span class=\"token punctuation\">(</span>wordtocount<span class=\"token punctuation\">.</span>dependencies<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">//3.4 结构化处理</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">val</span> wordcount<span class=\"token operator\">:</span> RDD<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> wordtocount<span class=\"token punctuation\">.</span>map <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token keyword\">case</span> <span class=\"token punctuation\">(</span>word<span class=\"token punctuation\">,</span> iter<span class=\"token punctuation\">)</span> <span class=\"token keyword\">=></span> <span class=\"token punctuation\">(</span>word<span class=\"token punctuation\">,</span> iter<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    println<span class=\"token punctuation\">(</span>wordcount<span class=\"token punctuation\">.</span>dependencies<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ul>\n<li>打印结果</li>\n</ul>\n<figure class=\"highlight scala\"><figcaption data-lang=\"scala\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>List<span class=\"token punctuation\">(</span>org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>spark<span class=\"token punctuation\">.</span>OneToOneDependency<span class=\"token annotation punctuation\">@4ca8dbfa</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>List<span class=\"token punctuation\">(</span>org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>spark<span class=\"token punctuation\">.</span>ShuffleDependency<span class=\"token annotation punctuation\">@4d654825</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>List<span class=\"token punctuation\">(</span>org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>spark<span class=\"token punctuation\">.</span>OneToOneDependency<span class=\"token annotation punctuation\">@62db0521</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ul>\n<li>依赖关系解析</li>\n</ul>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 当前 RDD 与上级 RDD 有两种关系：</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token comment\">-- 第一种：OneToOneDependency</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  指上游RDD的一个分区最多只能被下游RDD一个分区使用，称之为窄依赖，类比独生子女</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token comment\">-- 第二种：ShuffleDependency</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  指上游RDD的一个分区被下游RDD的多个分区使用，称之为宽依赖，形成<span class=\"token number\">1</span>对n的关系</pre></td></tr></table></figure><p>![image-20200608013041068](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saWFuLXpwLm9zcy1jbi1zaGVuemhlbi5hbGl5dW5jcy5jb20vcGlj\">https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic</span> GO/20200608013041.png)</p>\n<p>![image-20200608013109377](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saWFuLXpwLm9zcy1jbi1zaGVuemhlbi5hbGl5dW5jcy5jb20vcGlj\">https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic</span> GO/20200608013109.png)</p>\n<p>![image-20200608013128090](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saWFuLXpwLm9zcy1jbi1zaGVuemhlbi5hbGl5dW5jcy5jb20vcGlj\">https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic</span> GO/20200608013128.png)</p>\n<h4 id=\"556-rdd阶段的划分\"><a class=\"anchor\" href=\"#556-rdd阶段的划分\">#</a> 5.5.6 RDD 阶段的划分</h4>\n<blockquote>\n<p>阶段：stage</p>\n</blockquote>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1.</span> 如果Spark计算过程中存在落盘的操作，那么就应该划分阶段</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">2.</span> 如果执行过程中没有落盘操作，那么就应该是一个完成的阶段</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">3.</span> 如果执行过程有落盘的操作，那么应该task应该一分为二</pre></td></tr></table></figure><blockquote>\n<p>spark 中阶段的划分取决于 shuffle 依赖的个数：</p>\n<p>阶段的个数 = shuffle 依赖的数量 +  1</p>\n</blockquote>\n<p>![image-20200608013517259](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saWFuLXpwLm9zcy1jbi1zaGVuemhlbi5hbGl5dW5jcy5jb20vcGlj\">https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic</span> GO/20200608013517.png)</p>\n<h4 id=\"557-rdd任务的划分\"><a class=\"anchor\" href=\"#557-rdd任务的划分\">#</a> 5.5.7 RDD 任务的划分</h4>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 几个概念</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">1.</span> Application：应用程序，初始化一个sparkContext就会产生一个application</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">2.</span> job：一个行动算子就会产生一个job</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">3.</span> stage：宽依赖的个数 <span class=\"token operator\">+</span> <span class=\"token number\">1</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">4.</span> task：一个stage阶段中，最后一个RDD的分区个数就是task的个数。</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">-- 特列：在转换算子中如果调用了行动算子，那么在转换算子的内部也会有 job 的提交。</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>application <span class=\"token operator\">></span> job <span class=\"token operator\">></span> stage <span class=\"token operator\">></span> task ，每一层都是<span class=\"token number\">1</span> 对N 的关系。</pre></td></tr></table></figure><h4 id=\"558-rdd的持久性\"><a class=\"anchor\" href=\"#558-rdd的持久性\">#</a> 5.5.8 RDD 的持久性</h4>\n<h5 id=\"5581-问题\"><a class=\"anchor\" href=\"#5581-问题\">#</a> 5.5.8.1 问题</h5>\n<pre><code class=\"language-sqlite\">-- 问题\nRDD中是不保存数据的，所以如果多个RDD需要共享其中一个RDD的数据，那么必须重头执行，效率非常低，所以需要将一些重复性比较高，比较耗时的操作的结果缓存起来，提高效率，这样，不需要重头执行。\n</code></pre>\n<p>![image-20200608192945181](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saWFuLXpwLm9zcy1jbi1zaGVuemhlbi5hbGl5dW5jcy5jb20vcGlj\">https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic</span> GO/20200608192945.png)</p>\n<p>![image-20200608193135788](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saWFuLXpwLm9zcy1jbi1zaGVuemhlbi5hbGl5dW5jcy5jb20vcGlj\">https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic</span> GO/20200608193135.png)</p>\n<h5 id=\"5582-cache\"><a class=\"anchor\" href=\"#5582-cache\">#</a> 5.5.8.2 cache</h5>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 上述问题的解决方法：将计算结果进行缓存，重复使用，提高效率</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">-- cache 解析：</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token number\">1.</span> 缓存cache底层其实调用的persist方法</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token number\">2.</span> persist方法在持久化数据时会采用不同的存储级别对数据进行持久化操作</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token number\">3.</span> cache缓存的默认操作就是将数据保存到内存</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token number\">4.</span> cache存储的数据在内存中，如果内存不够用，executor可以将内存的数据进行整理，然后可以丢弃数据。</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token number\">5.</span> 如果由于executor端整理内存导致缓存的数据丢失，那么数据操作依然要重头执行。</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token number\">6.</span> 如果cache后的数据重头执行数据操作的话，那么必须要遵循血缘关系，所以cache操作不能删除血缘关系。</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token number\">7.</span> cache操作在行动算子执行后，会在血缘关系中增加和缓存相关的依赖</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token number\">8.</span> cache操作不会切断血缘，一旦发生错误，可以重新执行。</pre></td></tr></table></figure><ul>\n<li>验证缓存的现象</li>\n</ul>\n<figure class=\"highlight scala\"><figcaption data-lang=\"scala\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">val</span> rdd<span class=\"token operator\">:</span> RDD<span class=\"token punctuation\">[</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> sc<span class=\"token punctuation\">.</span>makeRDD<span class=\"token punctuation\">(</span>List<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">val</span> rdd1 <span class=\"token operator\">=</span> rdd<span class=\"token punctuation\">.</span>map<span class=\"token punctuation\">(</span>num <span class=\"token keyword\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      println<span class=\"token punctuation\">(</span><span class=\"token string\">\"map....\"</span> <span class=\"token operator\">+</span> num<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      num</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token comment\">// 将 RDD 的计算结果缓存到内存中</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   rdd1<span class=\"token punctuation\">.</span>cache<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    rdd1<span class=\"token punctuation\">.</span>map<span class=\"token punctuation\">(</span>_ <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>collect<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>foreach<span class=\"token punctuation\">(</span>print<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    println<span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n*************\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    rdd1<span class=\"token punctuation\">.</span>collect<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>foreach<span class=\"token punctuation\">(</span>print<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">// 未加 rdd1.cache () 代码，打印结果为：</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        map<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token number\">.3</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        map<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token number\">.1</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        map<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token number\">.4</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        map<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token number\">.2</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token number\">2468</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        map<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token number\">.1</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        map<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token number\">.2</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        map<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token number\">.3</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        map<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token number\">.4</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token number\">1234</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token comment\">// 加 rdd1.cache () 代码以后，打印结果为：</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        map<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token number\">.3</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        map<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token number\">.1</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        map<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token number\">.4</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        map<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token number\">.2</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token number\">2468</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token number\">1234</span></pre></td></tr></table></figure><ul>\n<li>验证缓存的依赖关系</li>\n</ul>\n<figure class=\"highlight scala\"><figcaption data-lang=\"scala\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">val</span> rdd1 <span class=\"token operator\">=</span> rdd<span class=\"token punctuation\">.</span>map<span class=\"token punctuation\">(</span>num <span class=\"token keyword\">=></span> num<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    rdd1<span class=\"token punctuation\">.</span>cache<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    println<span class=\"token punctuation\">(</span>rdd1<span class=\"token punctuation\">.</span>toDebugString<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    rdd1<span class=\"token punctuation\">.</span>collect<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    println<span class=\"token punctuation\">(</span>rdd1<span class=\"token punctuation\">.</span>toDebugString<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 打印结果：</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> MapPartitionsRDD<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> at map at Spark3_persist<span class=\"token punctuation\">.</span>scala<span class=\"token operator\">:</span><span class=\"token number\">20</span> <span class=\"token punctuation\">[</span>Memory Deserialized <span class=\"token number\">1</span>x Replicated<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre> <span class=\"token operator\">|</span>  ParallelCollectionRDD<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> at makeRDD at Spark3_persist<span class=\"token punctuation\">.</span>scala<span class=\"token operator\">:</span><span class=\"token number\">18</span> <span class=\"token punctuation\">[</span>Memory Deserialized <span class=\"token number\">1</span>x Replicated<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> MapPartitionsRDD<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> at map at Spark3_persist<span class=\"token punctuation\">.</span>scala<span class=\"token operator\">:</span><span class=\"token number\">20</span> <span class=\"token punctuation\">[</span>Memory Deserialized <span class=\"token number\">1</span>x Replicated<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre> <span class=\"token operator\">|</span>       CachedPartitions<span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> MemorySize<span class=\"token operator\">:</span> <span class=\"token number\">48.0</span> B<span class=\"token punctuation\">;</span> ExternalBlockStoreSize<span class=\"token operator\">:</span> <span class=\"token number\">0.0</span> B<span class=\"token punctuation\">;</span> DiskSize<span class=\"token operator\">:</span> <span class=\"token number\">0.0</span> B</pre></td></tr><tr><td data-num=\"12\"></td><td><pre> <span class=\"token operator\">|</span>  ParallelCollectionRDD<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> at makeRDD at Spark3_persist<span class=\"token punctuation\">.</span>scala<span class=\"token operator\">:</span><span class=\"token number\">18</span> <span class=\"token punctuation\">[</span>Memory Deserialized <span class=\"token number\">1</span>x Replicated<span class=\"token punctuation\">]</span></pre></td></tr></table></figure><h5 id=\"5583-persist\"><a class=\"anchor\" href=\"#5583-persist\">#</a> 5.5.8.3 persist</h5>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 问题：默认的缓存是存储在 Executor 端的内存中，数据量大的时候，该如何处理？</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>可以使用persist，将数据保存到当前RDD的磁盘中，但是依然有数据丢失风险。所以我们一般也不这么使用。</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> rdd1<span class=\"token punctuation\">.</span>persist<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ul>\n<li>persist 的数据保存级别</li>\n</ul>\n<figure class=\"highlight scala\"><figcaption data-lang=\"scala\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">val</span> NONE <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> StorageLevel<span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">val</span> DISK_ONLY <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> StorageLevel<span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">val</span> DISK_ONLY_2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> StorageLevel<span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">val</span> MEMORY_ONLY <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> StorageLevel<span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">val</span> MEMORY_ONLY_2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> StorageLevel<span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">val</span> MEMORY_ONLY_SER <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> StorageLevel<span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">val</span> MEMORY_ONLY_SER_2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> StorageLevel<span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">val</span> MEMORY_AND_DISK <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> StorageLevel<span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token keyword\">val</span> MEMORY_AND_DISK_2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> StorageLevel<span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token keyword\">val</span> MEMORY_AND_DISK_SER <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> StorageLevel<span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token keyword\">val</span> MEMORY_AND_DISK_SER_2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> StorageLevel<span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token keyword\">val</span> OFF_HEAP <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> StorageLevel<span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h5 id=\"5584-checkpoint\"><a class=\"anchor\" href=\"#5584-checkpoint\">#</a> 5.5.8.4 checkPoint</h5>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1.</span> 将比较耗时，比较重要的数据一般会保存到分布式文件系统中。</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token number\">2.</span> 使用<span class=\"token keyword\">checkpoint</span>方法将数据保存到文件中</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>         SparkException: <span class=\"token keyword\">Checkpoint</span> directory has <span class=\"token operator\">not</span> been <span class=\"token keyword\">set</span> <span class=\"token operator\">in</span> the SparkContext</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token number\">3.</span> 执行<span class=\"token keyword\">checkpoint</span>方法前应该设定检查点的保存目录</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token number\">4.</span> 检查点的操作中为了保证数据的准确性，执行时，会启动新的job</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token number\">5.</span> 为了提高性能，检查点操作一般会和cache联合使用，先将数据缓存到内存中，这样再进行<span class=\"token keyword\">checkpoint</span>，这样在执行<span class=\"token keyword\">checkpoint</span>的</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>       的时候，就不需重头执行。</pre></td></tr></table></figure><figure class=\"highlight scala\"><figcaption data-lang=\"scala\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 设定检查点的保存目录</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  sc<span class=\"token punctuation\">.</span>setCheckpointDir<span class=\"token punctuation\">(</span><span class=\"token string\">\"output\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">val</span> rdd<span class=\"token operator\">:</span> RDD<span class=\"token punctuation\">[</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> sc<span class=\"token punctuation\">.</span>makeRDD<span class=\"token punctuation\">(</span>List<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">val</span> rdd1 <span class=\"token operator\">=</span> rdd<span class=\"token punctuation\">.</span>map<span class=\"token punctuation\">(</span>num <span class=\"token keyword\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>     println<span class=\"token punctuation\">(</span><span class=\"token string\">\"map...\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      num</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">// 缓存和检查点联合使用</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    rdd1<span class=\"token punctuation\">.</span>cache<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>checkpoint<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    println<span class=\"token punctuation\">(</span>rdd1<span class=\"token punctuation\">.</span>map<span class=\"token punctuation\">(</span>_ <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>collect<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>mkString<span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    println<span class=\"token punctuation\">(</span>rdd1<span class=\"token punctuation\">.</span>collect<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>mkString<span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h5 id=\"5585-缓存和检查点区别\"><a class=\"anchor\" href=\"#5585-缓存和检查点区别\">#</a> 5.5.8.5 缓存和检查点区别</h5>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 缓存和检查点区别</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token number\">1.</span> Cache缓存只是将数据保存起来，不切断血缘依赖。<span class=\"token keyword\">Checkpoint</span>检查点切断血缘依赖。</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token number\">2.</span> Cache缓存的数据通常存储在磁盘、内存等地方，可靠性低。<span class=\"token keyword\">Checkpoint</span>的数据通常存储在HDFS等容错、高可用的文件系统，可靠性高。</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token number\">3.</span> 建议对<span class=\"token keyword\">checkpoint</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>的RDD使用Cache缓存，这样<span class=\"token keyword\">checkpoint</span>的job只需从Cache缓存中读取数据即可，否则需要再从头计算一次RDD</pre></td></tr></table></figure><h4 id=\"559-分区器\"><a class=\"anchor\" href=\"#559-分区器\">#</a> 5.5.9 分区器</h4>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 1. 分区器类别：</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    a、<span class=\"token keyword\">Hash</span>分区，<span class=\"token string\">\"默认分区器\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    b、Range分区</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    c、用户自定义分区</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">-- 2. 分区器的作用：</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      直接决定了RDD分区的个数、RDD中每条数据经过Shuffle后进入哪个分区，进而决定了Reduce的个数</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">--3. 说明</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  a、只有<span class=\"token keyword\">Key</span><span class=\"token operator\">-</span><span class=\"token keyword\">Value</span>类型的RDD才有分区器，非<span class=\"token keyword\">Key</span><span class=\"token operator\">-</span><span class=\"token keyword\">Value</span>类型的RDD分区的值是None</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  b、每个RDD的分区ID范围：<span class=\"token number\">0</span> <span class=\"token operator\">~</span> <span class=\"token punctuation\">(</span>numPartitions <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>，决定这个值是属于那个分区的。</pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">-- 4 分区规则：</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>   <span class=\"token keyword\">Hash</span>分区：对于给定的<span class=\"token keyword\">key</span>，计算其hashCode<span class=\"token punctuation\">,</span>并除以分区个数取余</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   Range分区：将一定范围内的数据映射到一个分区中，尽量保证每个分区数据均匀，而且分区间有序</pre></td></tr></table></figure><p>​</p>\n",
            "tags": []
        },
        {
            "id": "https://github.com/Mayizono/miyazono.github.io/big-data/flink/%E6%A8%A1%E5%9D%97%E6%80%BB%E7%BB%93/",
            "url": "https://github.com/Mayizono/miyazono.github.io/big-data/flink/%E6%A8%A1%E5%9D%97%E6%80%BB%E7%BB%93/",
            "title": "",
            "date_published": "2021-08-31T10:42:03.149Z",
            "content_html": "<h1 id=\"模块总结\"><a class=\"anchor\" href=\"#模块总结\">#</a> 模块总结</h1>\n<hr />\n<h2 id=\"一-业务数据如何到mysql中\"><a class=\"anchor\" href=\"#一-业务数据如何到mysql中\">#</a> 一、业务数据如何到 mysql 中</h2>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>在mysql中创建对应的数据表，然后使用自定义一个函数，自动生成数据。</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># 参数为：日期  订单个数 用户数 是否删除以前的数据</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">call</span> init_data<span class=\"token punctuation\">(</span><span class=\"token string\">\"2019-05-16\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"二-canal监控mysql数据发送到kafka\"><a class=\"anchor\" href=\"#二-canal监控mysql数据发送到kafka\">#</a> 二、canal 监控 mysql 数据发送到 kafka</h2>\n<figure class=\"highlight scala\"><figcaption data-lang=\"scala\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>net<span class=\"token punctuation\">.</span></span><span class=\"token punctuation\">&#123;</span>InetSocketAddress<span class=\"token punctuation\">,</span> SocketAddress<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>alibaba<span class=\"token punctuation\">.</span>fastjson<span class=\"token punctuation\">.</span></span>JSONObject</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>alibaba<span class=\"token punctuation\">.</span>otter<span class=\"token punctuation\">.</span>canal<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span></span><span class=\"token punctuation\">&#123;</span>CanalConnector<span class=\"token punctuation\">,</span> CanalConnectors<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>alibaba<span class=\"token punctuation\">.</span>otter<span class=\"token punctuation\">.</span>canal<span class=\"token punctuation\">.</span>protocol<span class=\"token punctuation\">.</span></span>CanalEntry<span class=\"token punctuation\">.</span><span class=\"token punctuation\">&#123;</span>EventType<span class=\"token punctuation\">,</span> RowChange<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>alibaba<span class=\"token punctuation\">.</span>otter<span class=\"token punctuation\">.</span>canal<span class=\"token punctuation\">.</span>protocol<span class=\"token punctuation\">.</span></span><span class=\"token punctuation\">&#123;</span>CanalEntry<span class=\"token punctuation\">,</span> Message<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>atguigu<span class=\"token punctuation\">.</span>common<span class=\"token punctuation\">.</span></span>Constant</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>google<span class=\"token punctuation\">.</span>protobuf<span class=\"token punctuation\">.</span></span>ByteString</pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">scala<span class=\"token punctuation\">.</span>collection<span class=\"token punctuation\">.</span></span>JavaConversions<span class=\"token punctuation\">.</span>_</pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  * @Description 创建 canal 的客户端</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  **</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  * @author lianzhipeng</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  * @create 2020-07-17 15:38:41</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  */</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">object</span> CanalClient <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    * 解析数据</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    * @param rowDatas 表示一个 sql 语句导致改变的数据，有多行数据</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    * @param TableName 表示这些数据的所在的表</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    * @param eventType 表示 sql 语句的类型，有 insert、upda 等</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    */</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  <span class=\"token keyword\">def</span> handleData<span class=\"token punctuation\">(</span>rowDatas<span class=\"token operator\">:</span> util<span class=\"token punctuation\">.</span>List<span class=\"token punctuation\">[</span>CanalEntry<span class=\"token punctuation\">.</span>RowData<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> TableName<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> eventType<span class=\"token operator\">:</span> CanalEntry<span class=\"token punctuation\">.</span>EventType<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token comment\">// 我们只想获取 order_info 表中的数据，其他表的数据不想处理，同时只想获取新增的数据，新增的数据表示新增的订单的数据</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>TableName<span class=\"token punctuation\">.</span>equals<span class=\"token punctuation\">(</span><span class=\"token string\">\"order_info\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> eventType <span class=\"token operator\">==</span> EventType<span class=\"token punctuation\">.</span>INSERT <span class=\"token operator\">&amp;&amp;</span> rowDatas <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>rowDatas<span class=\"token punctuation\">.</span>isEmpty<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>     </pre></td></tr><tr><td data-num=\"31\"></td><td><pre>      handleMysqlDataToKafka<span class=\"token punctuation\">(</span>rowDatas<span class=\"token punctuation\">,</span>Constant<span class=\"token punctuation\">.</span>TOPIC_ORDER_INFO<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>      </pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span>  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>TableName<span class=\"token punctuation\">.</span>equals<span class=\"token punctuation\">(</span><span class=\"token string\">\"order_detail\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> eventType <span class=\"token operator\">==</span> EventType<span class=\"token punctuation\">.</span>INSERT <span class=\"token operator\">&amp;&amp;</span> rowDatas <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>rowDatas<span class=\"token punctuation\">.</span>isEmpty<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>      </pre></td></tr><tr><td data-num=\"35\"></td><td><pre>      handleMysqlDataToKafka<span class=\"token punctuation\">(</span>rowDatas<span class=\"token punctuation\">,</span>Constant<span class=\"token punctuation\">.</span>TOPIC_ORDER_DETAIL<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>      </pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>  <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    * 解析 mysql 变化的数据，并写到 kafka 中</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    * @param rowDatas 表示一个 sql 语句导致改变的数据，有多行数据</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    * @param topic kafka 的 topic</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    */</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>  <span class=\"token keyword\">private</span> <span class=\"token keyword\">def</span> handleMysqlDataToKafka<span class=\"token punctuation\">(</span>rowDatas<span class=\"token operator\">:</span> util<span class=\"token punctuation\">.</span>List<span class=\"token punctuation\">[</span>CanalEntry<span class=\"token punctuation\">.</span>RowData<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>topic<span class=\"token operator\">:</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token comment\">// 遍历多行数据，获取一条一条的数据</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>rowdata <span class=\"token keyword\">&lt;-</span> rowDatas<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>      <span class=\"token comment\">// 每一条数据由很多列组成。获取了这一行数据的多列，getAfterColumnsList，表示获取变化后的数据</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>      <span class=\"token keyword\">val</span> columnsList<span class=\"token operator\">:</span> util<span class=\"token punctuation\">.</span>List<span class=\"token punctuation\">[</span>CanalEntry<span class=\"token punctuation\">.</span>Column<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> rowdata<span class=\"token punctuation\">.</span>getAfterColumnsList</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>      <span class=\"token comment\">// 创建一个 json 对象，来接收这一行的数据，mysql 中的一行数据到 kafka 中保存为一条 json 数据</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>      <span class=\"token keyword\">val</span> obj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> JSONObject<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>      <span class=\"token comment\">// 遍历这些列</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>column <span class=\"token keyword\">&lt;-</span> columnsList<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        <span class=\"token comment\">// 获取列名</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        <span class=\"token keyword\">val</span> key<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span> <span class=\"token operator\">=</span> column<span class=\"token punctuation\">.</span>getName</pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        <span class=\"token comment\">// 获取这一列的值</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>        <span class=\"token keyword\">val</span> value<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span> <span class=\"token operator\">=</span> column<span class=\"token punctuation\">.</span>getValue</pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        obj<span class=\"token punctuation\">.</span>put<span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>      <span class=\"token comment\">// println(obj)</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>      <span class=\"token comment\">// 将 json 数据转换为字符串</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>      <span class=\"token keyword\">val</span> context<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span> <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">.</span>toJSONString</pre></td></tr><tr><td data-num=\"64\"></td><td><pre>      println<span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>      <span class=\"token comment\">// 将获取的数据发往 kafka 中，指明发往哪个 topic 中和发送什么数据</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>      KafkaUtils<span class=\"token punctuation\">.</span>sentToKafka<span class=\"token punctuation\">(</span>topic<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>  <span class=\"token keyword\">def</span> main<span class=\"token punctuation\">(</span>args<span class=\"token operator\">:</span> Array<span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Unit</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>    <span class=\"token comment\">// 11111 是 canal 的端口</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>    <span class=\"token keyword\">var</span> address<span class=\"token operator\">:</span> SocketAddress <span class=\"token operator\">=</span><span class=\"token keyword\">new</span> InetSocketAddress<span class=\"token punctuation\">(</span><span class=\"token string\">\"hadoop105\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">11111</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>    <span class=\"token comment\">// 1. 连接 canal，\"example\" 是 /opt/module/canal/conf/example,</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>    <span class=\"token comment\">// 1.1 在该目录下有一个配置文件，配置文件中记录了需要监控的 mysql 地址和数据库，当前是监控 gmall0213 数据库下所有的表</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>    <span class=\"token keyword\">val</span> connector<span class=\"token operator\">:</span> CanalConnector <span class=\"token operator\">=</span> CanalConnectors<span class=\"token punctuation\">.</span>newSingleConnector<span class=\"token punctuation\">(</span>address<span class=\"token punctuation\">,</span><span class=\"token string\">\"example\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>    <span class=\"token comment\">// 1.2 连接 canal</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>    connector<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>    <span class=\"token comment\">// 2. 拉取数据</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>    <span class=\"token comment\">// 2.1 canal 客户端订阅 canal 的数据，订阅 canal 监控的 gmall0213 数据库下的所有的表</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>    connector<span class=\"token punctuation\">.</span>subscribe<span class=\"token punctuation\">(</span><span class=\"token string\">\"gmall0213.*\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>    <span class=\"token comment\">// 死循环来不断拉取数据</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>      <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"84\"></td><td><pre>       1. canal 的客户端获取 canal 监控的数据</pre></td></tr><tr><td data-num=\"85\"></td><td><pre>       2. 100 表示最多由 100 条 sql 导致改变的数据，这 100 条数据封装成一个 message 信息</pre></td></tr><tr><td data-num=\"86\"></td><td><pre>       3. 使用死循环来不断的拉取数据</pre></td></tr><tr><td data-num=\"87\"></td><td><pre>        */</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>      <span class=\"token keyword\">val</span> message<span class=\"token operator\">:</span> Message <span class=\"token operator\">=</span> connector<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>      <span class=\"token comment\">// 一个 message 封装了多个 entry，获取 entry</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>      <span class=\"token keyword\">val</span> entries<span class=\"token operator\">:</span> util<span class=\"token punctuation\">.</span>List<span class=\"token punctuation\">[</span>CanalEntry<span class=\"token punctuation\">.</span>Entry<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> message<span class=\"token punctuation\">.</span>getEntries</pre></td></tr><tr><td data-num=\"92\"></td><td><pre>      <span class=\"token comment\">// 一条 entry 表示一条 sql 导致的数据的变化</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>      <span class=\"token comment\">// 如果拉取的数据不为空，那么继续解析数据，如果拉取到的数据为空，那么就等 3 秒再拉数据</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>      <span class=\"token comment\">//  同时进行非空判断，来避免空指针的问题。</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>entries<span class=\"token operator\">!=</span><span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>entries<span class=\"token punctuation\">.</span>isEmpty<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>        <span class=\"token comment\">// 遍历 entries，获取一个一个 entry</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>      <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>entry <span class=\"token keyword\">&lt;-</span> entries<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>        <span class=\"token comment\">// 对一个 entry 进行非空判断和 entry 的类型进行判断</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>entry <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> entry<span class=\"token punctuation\">.</span>hasEntryType <span class=\"token operator\">&amp;&amp;</span> entry<span class=\"token punctuation\">.</span>getEntryType <span class=\"token operator\">==</span> CanalEntry<span class=\"token punctuation\">.</span>EntryType<span class=\"token punctuation\">.</span>ROWDATA <span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>          <span class=\"token comment\">// 一个 entry 是一个 sql 语句导致的变化的数据，一个 entry 封装成了一个 storevalue，获取 storevalue</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>          <span class=\"token keyword\">val</span> storeValue<span class=\"token operator\">:</span> ByteString <span class=\"token operator\">=</span> entry<span class=\"token punctuation\">.</span>getStoreValue</pre></td></tr><tr><td data-num=\"102\"></td><td><pre>          <span class=\"token comment\">// 一个 storeValue 封装成一个 rowchange, 一个 rowchange 表示这个 sql 语句变化的多行数据</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>          <span class=\"token keyword\">val</span> rowChange<span class=\"token operator\">:</span> RowChange <span class=\"token operator\">=</span> RowChange<span class=\"token punctuation\">.</span>parseFrom<span class=\"token punctuation\">(</span>storeValue<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>          <span class=\"token comment\">// 获取多行数据</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>          <span class=\"token keyword\">val</span> rowDatas<span class=\"token operator\">:</span> util<span class=\"token punctuation\">.</span>List<span class=\"token punctuation\">[</span>CanalEntry<span class=\"token punctuation\">.</span>RowData<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> rowChange<span class=\"token punctuation\">.</span>getRowDatasList</pre></td></tr><tr><td data-num=\"106\"></td><td><pre>          <span class=\"token comment\">// 封装一个方法，来处理一个 sql 语句导致变化的多行数据</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>          <span class=\"token comment\">//rowdatas 表示多行数据</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>          <span class=\"token comment\">//entry.getHeader.getTableName: 表示 canal 是监控 gmall2013 数据库中的所有表</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>          <span class=\"token comment\">//rowChange.getEventType: 表示数据被改变的方式，有 insert，update、等等</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>          handleData<span class=\"token punctuation\">(</span>rowDatas<span class=\"token punctuation\">,</span>entry<span class=\"token punctuation\">.</span>getHeader<span class=\"token punctuation\">.</span>getTableName<span class=\"token punctuation\">,</span>rowChange<span class=\"token punctuation\">.</span>getEventType<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println<span class=\"token punctuation\">(</span><span class=\"token string\">\"没有拉取到数据，3s后继续拉取....\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>        <span class=\"token comment\">// 拉取数据的操作等待 3s 后再执行</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>        Thread<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">3000</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"三-往kafka中写数据\"><a class=\"anchor\" href=\"#三-往kafka中写数据\">#</a> 三、往 kafka 中写数据</h2>\n<figure class=\"highlight scala\"><figcaption data-lang=\"scala\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span>Properties</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>kafka<span class=\"token punctuation\">.</span>clients<span class=\"token punctuation\">.</span>producer<span class=\"token punctuation\">.</span></span><span class=\"token punctuation\">&#123;</span>KafkaProducer<span class=\"token punctuation\">,</span> ProducerRecord<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  * @Description 定义一个 kafka 的工具类</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  * @author lianzhipeng</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  * @create 2020-07-17 18:07:07</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  */</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">object</span> KafkaUtils <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token keyword\">var</span> pops <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> Properties<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token comment\">// 设定 kafka 集群的地址</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  pops<span class=\"token punctuation\">.</span>setProperty<span class=\"token punctuation\">(</span><span class=\"token string\">\"bootstrap.servers\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"hadoop105:9092,hadoop106:9092,hadoop107:9092\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token comment\">// 设定 key 的序列化器</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token comment\">// 设定 value 的序列器</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  pops<span class=\"token punctuation\">.</span>setProperty<span class=\"token punctuation\">(</span><span class=\"token string\">\"key.serializer\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"org.apache.kafka.common.serialization.StringSerializer\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  pops<span class=\"token punctuation\">.</span>setProperty<span class=\"token punctuation\">(</span><span class=\"token string\">\"value.serializer\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"org.apache.kafka.common.serialization.StringSerializer\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token keyword\">val</span> producer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> KafkaProducer<span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>pops<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token keyword\">def</span> sentToKafka<span class=\"token punctuation\">(</span>topic<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> context<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    producer<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> ProducerRecord<span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>topic<span class=\"token punctuation\">,</span>context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"四-sparkstreaming读取kafka中的数据\"><a class=\"anchor\" href=\"#四-sparkstreaming读取kafka中的数据\">#</a> 四、sparkStreaming 读取 kafka 中的数据</h2>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>步骤说明：</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">1.</span> 创建kafkaParams参数，参数中包含了</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token number\">1.</span> kafka集群地址</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token number\">2.</span> <span class=\"token keyword\">key</span>和<span class=\"token keyword\">value</span>的序列化器</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token number\">3.</span> 消费者组id</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token number\">4.</span> 消费的<span class=\"token keyword\">offset</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   <span class=\"token number\">5.</span> <span class=\"token keyword\">offset</span>是否自动提交</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token number\">2.</span> 使用kafkautils创建直连的方式，sparkstreaming来连接kafka</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token number\">3.</span> 需要传递的参数有：ssc<span class=\"token punctuation\">(</span>streamingcontext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>一致性，订阅的topic</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token number\">4.</span> 对获取的输入流使用map进行处理，只要<span class=\"token keyword\">value</span>，不要<span class=\"token keyword\">key</span></pre></td></tr></table></figure><figure class=\"highlight scala\"><figcaption data-lang=\"scala\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>atguigu<span class=\"token punctuation\">.</span>realtime<span class=\"token punctuation\">.</span>utils</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>kafka<span class=\"token punctuation\">.</span>common<span class=\"token punctuation\">.</span>serialization<span class=\"token punctuation\">.</span></span>StringDeserializer</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>spark<span class=\"token punctuation\">.</span>streaming<span class=\"token punctuation\">.</span></span>StreamingContext</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>spark<span class=\"token punctuation\">.</span>streaming<span class=\"token punctuation\">.</span>kafka010<span class=\"token punctuation\">.</span></span>_</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>spark<span class=\"token punctuation\">.</span>streaming<span class=\"token punctuation\">.</span>kafka010<span class=\"token punctuation\">.</span></span>LocationStrategies<span class=\"token punctuation\">.</span>PreferConsistent</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>spark<span class=\"token punctuation\">.</span>streaming<span class=\"token punctuation\">.</span>kafka010<span class=\"token punctuation\">.</span></span>ConsumerStrategies<span class=\"token punctuation\">.</span>Subscribe</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  * @Description</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  * @author lianzhipeng</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  * @create 2020-07-14 18:29:12</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  */</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">object</span> MyKafkaUtil <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token keyword\">val</span> kafkaParams <span class=\"token operator\">=</span> Map<span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> Object<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token string\">\"bootstrap.servers\"</span> <span class=\"token operator\">-></span> ConfigUtils<span class=\"token punctuation\">.</span>getProperties<span class=\"token punctuation\">(</span><span class=\"token string\">\"gmall.properties\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"bootstrap.servers\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token string\">\"key.deserializer\"</span> <span class=\"token operator\">-></span> classOf<span class=\"token punctuation\">[</span>StringDeserializer<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token string\">\"value.deserializer\"</span> <span class=\"token operator\">-></span> classOf<span class=\"token punctuation\">[</span>StringDeserializer<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token string\">\"group.id\"</span> <span class=\"token operator\">-></span> ConfigUtils<span class=\"token punctuation\">.</span>getProperties<span class=\"token punctuation\">(</span><span class=\"token string\">\"gmall.properties\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"group.id\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token string\">\"auto.offset.reset\"</span> <span class=\"token operator\">-></span> <span class=\"token string\">\"latest\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token string\">\"enable.auto.commit\"</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token operator\">:</span> java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span><span class=\"token builtin\">Boolean</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  <span class=\"token keyword\">def</span> getKafkaStream<span class=\"token punctuation\">(</span>ssc<span class=\"token operator\">:</span> StreamingContext<span class=\"token punctuation\">,</span> topic<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    KafkaUtils<span class=\"token punctuation\">.</span>createDirectStream<span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>      ssc<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>      PreferConsistent<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>      Subscribe<span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>Set<span class=\"token punctuation\">(</span>topic<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> kafkaParams<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>map<span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"五-如何读取配置文件中的参数\"><a class=\"anchor\" href=\"#五-如何读取配置文件中的参数\">#</a> 五、如何读取配置文件中的参数</h2>\n<figure class=\"highlight scala\"><figcaption data-lang=\"scala\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>atguigu<span class=\"token punctuation\">.</span>realtime<span class=\"token punctuation\">.</span>utils</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span>InputStream</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span>Properties</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  * @Description</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  **</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  * @author lianzhipeng</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  * @create 2020-07-15 11:06:43</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  */</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">object</span> ConfigUtils <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token keyword\">def</span> getProperties<span class=\"token punctuation\">(</span>fileName<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span>configName<span class=\"token operator\">:</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">// 1. 获取类的加载器并获取一个资源输入流</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">val</span> is<span class=\"token operator\">:</span> InputStream <span class=\"token operator\">=</span> ConfigUtils<span class=\"token punctuation\">.</span>getClass<span class=\"token punctuation\">.</span>getClassLoader<span class=\"token punctuation\">.</span>getResourceAsStream<span class=\"token punctuation\">(</span>fileName<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token comment\">// 2. 获取一个配置文件的对象</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">val</span> ps <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> Properties<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token comment\">// 3. 配置文件对象加载这个输入流</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    ps<span class=\"token punctuation\">.</span>load<span class=\"token punctuation\">(</span>is<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token comment\">// 4. 配置对象可以获取配置文件中的配置信息</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    ps<span class=\"token punctuation\">.</span>getProperty<span class=\"token punctuation\">(</span>configName<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  <span class=\"token keyword\">def</span> main<span class=\"token punctuation\">(</span>args<span class=\"token operator\">:</span> Array<span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Unit</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token comment\">// 测试是否能获取到配置信息</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    println<span class=\"token punctuation\">(</span>getProperties<span class=\"token punctuation\">(</span><span class=\"token string\">\"gmall.properties\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"bootstrap.servers\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>   <span class=\"token comment\">// hadoop105:9092,hadoop106:9092,hadoop107:9092</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"六-公共的代码的封装\"><a class=\"anchor\" href=\"#六-公共的代码的封装\">#</a> 六、公共的代码的封装</h2>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>将sparkstreaming公共的代码进行封装成一个trait，创建的sparkstreaming类只要要继承这个trait，实现run方法。</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>封装的内容有：</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">1.</span> sparkstreaming环境对象streamingcontext创建</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">2.</span> 采集器开启</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">3.</span> 线程的阻塞</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token number\">4.</span> run方式就是获取流以后的具体数据处理</pre></td></tr></table></figure><figure class=\"highlight scala\"><figcaption data-lang=\"scala\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>atguigu<span class=\"token punctuation\">.</span>realtime<span class=\"token punctuation\">.</span>app</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>spark<span class=\"token punctuation\">.</span></span>SparkConf</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>spark<span class=\"token punctuation\">.</span>streaming<span class=\"token punctuation\">.</span></span><span class=\"token punctuation\">&#123;</span>Seconds<span class=\"token punctuation\">,</span> StreamingContext<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  * @Description</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  **</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  * @author lianzhipeng</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  * @create 2020-07-17 18:35:06</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  */</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">trait</span> BaseAPP <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token keyword\">def</span> run<span class=\"token punctuation\">(</span>ssc<span class=\"token operator\">:</span> StreamingContext<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token keyword\">def</span> main<span class=\"token punctuation\">(</span>args<span class=\"token operator\">:</span> Array<span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Unit</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">val</span> SparkConf<span class=\"token operator\">:</span> SparkConf <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> SparkConf<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>setAppName<span class=\"token punctuation\">(</span><span class=\"token string\">\"OrderApp\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>setMaster<span class=\"token punctuation\">(</span><span class=\"token string\">\"local[*]\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">val</span> ssc <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> StreamingContext<span class=\"token punctuation\">(</span>SparkConf<span class=\"token punctuation\">,</span> Seconds<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    run<span class=\"token punctuation\">(</span>ssc<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token comment\">// 6. 启动采集器</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    ssc<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token comment\">// 7. 阻塞 main 进程停止</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    ssc<span class=\"token punctuation\">.</span>awaitTermination<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"七-sparkstreaming双流join\"><a class=\"anchor\" href=\"#七-sparkstreaming双流join\">#</a> 七、sparkstreaming 双流 join</h2>\n<figure class=\"highlight scala\"><figcaption data-lang=\"scala\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>atguigu<span class=\"token punctuation\">.</span>realtime<span class=\"token punctuation\">.</span>app</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>alibaba<span class=\"token punctuation\">.</span>fastjson<span class=\"token punctuation\">.</span></span>JSON</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>atguigu<span class=\"token punctuation\">.</span>common<span class=\"token punctuation\">.</span></span>Constant</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>atguigu<span class=\"token punctuation\">.</span>realtime<span class=\"token punctuation\">.</span>bean<span class=\"token punctuation\">.</span></span><span class=\"token punctuation\">&#123;</span>OrderDetail<span class=\"token punctuation\">,</span> OrderInfo<span class=\"token punctuation\">,</span> SaleDetail<span class=\"token punctuation\">,</span> UserInfo<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>atguigu<span class=\"token punctuation\">.</span>realtime<span class=\"token punctuation\">.</span>utils<span class=\"token punctuation\">.</span></span><span class=\"token punctuation\">&#123;</span>EsUtil<span class=\"token punctuation\">,</span> MyKafkaUtil<span class=\"token punctuation\">,</span> MyslqUtil<span class=\"token punctuation\">,</span> RedisUtils<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>spark<span class=\"token punctuation\">.</span>rdd<span class=\"token punctuation\">.</span></span>RDD</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>spark<span class=\"token punctuation\">.</span>streaming<span class=\"token punctuation\">.</span></span>StreamingContext</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>spark<span class=\"token punctuation\">.</span>streaming<span class=\"token punctuation\">.</span>dstream<span class=\"token punctuation\">.</span></span>DStream</pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>json4s<span class=\"token punctuation\">.</span></span>DefaultFormats</pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>json4s<span class=\"token punctuation\">.</span>jackson<span class=\"token punctuation\">.</span></span>Serialization</pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">redis<span class=\"token punctuation\">.</span>clients<span class=\"token punctuation\">.</span>jedis<span class=\"token punctuation\">.</span></span>Jedis</pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  * @Description</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  **</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  * @author lianzhipeng</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  * @create 2020-07-21 16:05:41</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  */</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">object</span> SaleApp <span class=\"token keyword\">extends</span> BaseAPP <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  <span class=\"token keyword\">override</span> <span class=\"token keyword\">def</span> run<span class=\"token punctuation\">(</span>ssc<span class=\"token operator\">:</span> StreamingContext<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Unit</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>      <span class=\"token comment\">// 1. 定义一个方法，用来获取两个流</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>      <span class=\"token keyword\">val</span> <span class=\"token punctuation\">(</span>infoStream<span class=\"token punctuation\">,</span>detailStream<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> getOrderInfoAndOrderDetailStream<span class=\"token punctuation\">(</span>ssc<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>      <span class=\"token comment\">// 2. 双流 join</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>     <span class=\"token keyword\">val</span> fullJoinStream<span class=\"token operator\">:</span> DStream<span class=\"token punctuation\">[</span>SaleDetail<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> fullJoin<span class=\"token punctuation\">(</span>infoStream<span class=\"token punctuation\">,</span>detailStream<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>     <span class=\"token comment\">// 3. 在数据中添加 user_info 数据</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token keyword\">val</span> SaleDetailStream<span class=\"token operator\">:</span> DStream<span class=\"token punctuation\">[</span>SaleDetail<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> addUserInfo<span class=\"token punctuation\">(</span>fullJoinStream<span class=\"token punctuation\">,</span>ssc<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>     <span class=\"token comment\">// 4. 将结果写到 es 中</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    sendToEs<span class=\"token punctuation\">(</span>SaleDetailStream<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>   <span class=\"token comment\">// 5. 测试</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    SaleDetailStream<span class=\"token punctuation\">.</span>print<span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre> </pre></td></tr><tr><td data-num=\"45\"></td><td><pre>  <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    * 将数据写到 es 中，通过获取已有数据的 uid，然后取 mysql 中读取数据，并放置流中</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    * @param fullJoinStream</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    */</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>  <span class=\"token keyword\">def</span> addUserInfo<span class=\"token punctuation\">(</span>fullJoinStream<span class=\"token operator\">:</span> DStream<span class=\"token punctuation\">[</span>SaleDetail<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>ssc<span class=\"token operator\">:</span>StreamingContext<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    fullJoinStream<span class=\"token punctuation\">.</span>transform<span class=\"token punctuation\">(</span> rdd <span class=\"token keyword\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>      <span class=\"token comment\">// 1. 读取指定 mysql 表中数据</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>      <span class=\"token keyword\">val</span> Readrdd<span class=\"token operator\">:</span> RDD<span class=\"token punctuation\">[</span>UserInfo<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> MyslqUtil<span class=\"token punctuation\">.</span>ReadMySQLData<span class=\"token punctuation\">(</span>ssc<span class=\"token punctuation\">,</span><span class=\"token string\">\"user_info\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>      <span class=\"token comment\">// 2. 对数据进行转换，用于和原来的 RDD 进行 join</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>      <span class=\"token keyword\">val</span> useInfoRDD<span class=\"token operator\">:</span> RDD<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> UserInfo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Readrdd<span class=\"token punctuation\">.</span>map<span class=\"token punctuation\">(</span>user <span class=\"token keyword\">=></span> <span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>      <span class=\"token comment\">// 3. 将 saleDetail 转换成 kv，然后和 user 进行 join，补齐 user 的信息</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>      <span class=\"token keyword\">val</span> detailRDD<span class=\"token operator\">:</span> RDD<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> SaleDetail<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> rdd<span class=\"token punctuation\">.</span>map<span class=\"token punctuation\">(</span>saleDetail <span class=\"token keyword\">=></span> <span class=\"token punctuation\">(</span>saleDetail<span class=\"token punctuation\">.</span>user_id<span class=\"token punctuation\">,</span>saleDetail<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>      <span class=\"token comment\">// 4. RDD 进行 join</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>      detailRDD<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>useInfoRDD<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>        <span class=\"token punctuation\">.</span>map<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>          <span class=\"token keyword\">case</span> <span class=\"token punctuation\">(</span>userId<span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span>saleDetail<span class=\"token punctuation\">,</span>userInfo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>            saleDetail<span class=\"token punctuation\">.</span>mergeUserInfo<span class=\"token punctuation\">(</span>userInfo<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre></pre></td></tr><tr><td data-num=\"69\"></td><td><pre></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre></pre></td></tr><tr><td data-num=\"72\"></td><td><pre></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>  <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"74\"></td><td><pre>    * @param infoStream</pre></td></tr><tr><td data-num=\"75\"></td><td><pre>    * @param detailStream</pre></td></tr><tr><td data-num=\"76\"></td><td><pre>    */</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>  <span class=\"token keyword\">def</span> fullJoin<span class=\"token punctuation\">(</span>infoStream<span class=\"token operator\">:</span> DStream<span class=\"token punctuation\">[</span>OrderInfo<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> detailStream<span class=\"token operator\">:</span> DStream<span class=\"token punctuation\">[</span>OrderDetail<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>    <span class=\"token comment\">// 将 info 的数据缓存到 redis 中</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>    <span class=\"token keyword\">def</span> cacheOrderInfoToRedis<span class=\"token punctuation\">(</span>client<span class=\"token operator\">:</span> Jedis<span class=\"token punctuation\">,</span> orderInfo<span class=\"token operator\">:</span> OrderInfo<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">String</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>      <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"81\"></td><td><pre>        * orderinfo 在 redis 中的缓存信息</pre></td></tr><tr><td data-num=\"82\"></td><td><pre>        * key : \"order_info :\" + orderInfo.id</pre></td></tr><tr><td data-num=\"83\"></td><td><pre>        * value : orderInfo 一条数据</pre></td></tr><tr><td data-num=\"84\"></td><td><pre>        */</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>      client<span class=\"token punctuation\">.</span>set<span class=\"token punctuation\">(</span><span class=\"token string\">\"order_info :\"</span> <span class=\"token operator\">+</span> orderInfo<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span> Serialization<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span>orderInfo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>DefaultFormats<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>    <span class=\"token keyword\">def</span> cacheOrderDetailToRedis<span class=\"token punctuation\">(</span>client<span class=\"token operator\">:</span> Jedis<span class=\"token punctuation\">,</span> orderDetail<span class=\"token operator\">:</span> OrderDetail<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">String</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>      client<span class=\"token punctuation\">.</span>set<span class=\"token punctuation\">(</span><span class=\"token string\">\"orderDetail:\"</span> <span class=\"token operator\">+</span> orderDetail<span class=\"token punctuation\">.</span>order_id <span class=\"token operator\">+</span> <span class=\"token string\">\":\"</span> <span class=\"token operator\">+</span> orderDetail<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span> Serialization<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span>orderDetail<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>DefaultFormats<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>    <span class=\"token comment\">// 1. 对 rdd 进行转换，因为只有 kv 类型的数据才能进行 join</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>    <span class=\"token keyword\">val</span> mapInfoStream<span class=\"token operator\">:</span> DStream<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> OrderInfo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> infoStream<span class=\"token punctuation\">.</span>map<span class=\"token punctuation\">(</span>info <span class=\"token keyword\">=></span> <span class=\"token punctuation\">(</span>info<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span>info<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>    <span class=\"token keyword\">val</span> mapDetailStream<span class=\"token operator\">:</span> DStream<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> OrderDetail<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> detailStream<span class=\"token punctuation\">.</span>map<span class=\"token punctuation\">(</span>detail <span class=\"token keyword\">=></span> <span class=\"token punctuation\">(</span>detail<span class=\"token punctuation\">.</span>order_id<span class=\"token punctuation\">,</span>detail<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>    <span class=\"token comment\">// 2. 对流进行 join，join 时是按照相同 key 会 join 在一起。而且是一条一条的 join, 一个订单会对应多个订单详情表</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>    <span class=\"token comment\">// (order_id1,(订单 1，详情 1))，(order_id1,(订单 1，详情 2))</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>    <span class=\"token comment\">// 为了提高效率，使用一个分区的数据同时进行计算</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>    mapInfoStream<span class=\"token punctuation\">.</span>fullOuterJoin<span class=\"token punctuation\">(</span>mapDetailStream<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>mapPartitions<span class=\"token punctuation\">(</span>it <span class=\"token keyword\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>      <span class=\"token comment\">// 1. 获取 redis 的连接，因为需要从 redis 中获取数据</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>      <span class=\"token keyword\">val</span> client<span class=\"token operator\">:</span> Jedis <span class=\"token operator\">=</span> RedisUtils<span class=\"token punctuation\">.</span>getClient</pre></td></tr><tr><td data-num=\"103\"></td><td><pre></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>      <span class=\"token keyword\">val</span> result <span class=\"token operator\">=</span> it<span class=\"token punctuation\">.</span>flatMap <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>        <span class=\"token comment\">//info 和 detail 都有数据</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>        <span class=\"token keyword\">case</span> <span class=\"token punctuation\">(</span>order_id<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>Some<span class=\"token punctuation\">(</span>orderInfo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> Some<span class=\"token punctuation\">(</span>orderDetail<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">=></span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>          <span class=\"token comment\">// 1. 将 info 数据写到缓存中，orderinfo 是对象，需要解析为 json 字符串</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>          cacheOrderInfoToRedis<span class=\"token punctuation\">(</span>client<span class=\"token punctuation\">,</span> orderInfo<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>          <span class=\"token comment\">// 2. 将数据进行合并</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>          <span class=\"token keyword\">val</span> infoDetail<span class=\"token operator\">:</span> SaleDetail <span class=\"token operator\">=</span> SaleDetail<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>mergeOrderInfo<span class=\"token punctuation\">(</span>orderInfo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>mergeOrderDetail<span class=\"token punctuation\">(</span>orderDetail<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>          <span class=\"token comment\">// 3. 从 redis 中获取 detail 的数据</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>          <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"113\"></td><td><pre>            * orderDetails 在 redis 中的缓存信息</pre></td></tr><tr><td data-num=\"114\"></td><td><pre>            * key ： orderDetail + orderInfo.id + orderDetail.id</pre></td></tr><tr><td data-num=\"115\"></td><td><pre>            * value: orderDetail 一条数据</pre></td></tr><tr><td data-num=\"116\"></td><td><pre>            */</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>          <span class=\"token keyword\">val</span> details<span class=\"token operator\">:</span> util<span class=\"token punctuation\">.</span>Set<span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> client<span class=\"token punctuation\">.</span>keys<span class=\"token punctuation\">(</span><span class=\"token string\">\"orderDetail:\"</span> <span class=\"token operator\">+</span> orderInfo<span class=\"token punctuation\">.</span>id <span class=\"token operator\">+</span> <span class=\"token string\">\":*\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>          <span class=\"token comment\">// 创建一个集合来接收 detalis</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>          <span class=\"token keyword\">import</span> <span class=\"token namespace\">scala<span class=\"token punctuation\">.</span>collection<span class=\"token punctuation\">.</span></span>JavaConversions<span class=\"token punctuation\">.</span>_</pre></td></tr><tr><td data-num=\"120\"></td><td><pre>          <span class=\"token keyword\">var</span> saleDetails <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> util<span class=\"token punctuation\">.</span>ArrayList<span class=\"token punctuation\">[</span>SaleDetail<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>          saleDetails<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span>infoDetail<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>          <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>detail <span class=\"token keyword\">&lt;-</span> details<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>            <span class=\"token comment\">// 将字符串转换为样例类</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>            <span class=\"token keyword\">val</span> obj<span class=\"token operator\">:</span> OrderDetail <span class=\"token operator\">=</span> JSON<span class=\"token punctuation\">.</span>parseObject<span class=\"token punctuation\">(</span>detail<span class=\"token punctuation\">,</span> classOf<span class=\"token punctuation\">[</span>OrderDetail<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>            <span class=\"token comment\">// 从缓存中删除已经被使用的数据</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>            client<span class=\"token punctuation\">.</span>del<span class=\"token punctuation\">(</span>detail<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>            <span class=\"token comment\">// 将数据进行合并</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>            <span class=\"token keyword\">val</span> saleDetail <span class=\"token operator\">=</span> SaleDetail<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>mergeOrderInfo<span class=\"token punctuation\">(</span>orderInfo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>mergeOrderDetail<span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>            saleDetails<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span>saleDetail<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>          saleDetails</pre></td></tr><tr><td data-num=\"132\"></td><td><pre></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>        <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"134\"></td><td><pre>          * orderinfo 有数据，但是 detail 没有数据</pre></td></tr><tr><td data-num=\"135\"></td><td><pre>          */</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre>        <span class=\"token keyword\">case</span> <span class=\"token punctuation\">(</span>order_id<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>Some<span class=\"token punctuation\">(</span>orderInfo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> None<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">=></span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre>          <span class=\"token comment\">// 1. 将 info 数据写到缓存中，orderinfo 是对象，需要解析为 json 字符串</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre>          cacheOrderInfoToRedis<span class=\"token punctuation\">(</span>client<span class=\"token punctuation\">,</span> orderInfo<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre>          <span class=\"token comment\">// 2. 从 redis 中获取 detail 的数据</span></pre></td></tr><tr><td data-num=\"140\"></td><td><pre>          <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"141\"></td><td><pre>            * orderDetails 在 redis 中的缓存信息</pre></td></tr><tr><td data-num=\"142\"></td><td><pre>            * key ： orderDetail + orderInfo.id + orderDetail.id</pre></td></tr><tr><td data-num=\"143\"></td><td><pre>            * value: orderDetail 一条数据</pre></td></tr><tr><td data-num=\"144\"></td><td><pre>            */</span></pre></td></tr><tr><td data-num=\"145\"></td><td><pre>          <span class=\"token keyword\">val</span> details<span class=\"token operator\">:</span> util<span class=\"token punctuation\">.</span>Set<span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> client<span class=\"token punctuation\">.</span>keys<span class=\"token punctuation\">(</span><span class=\"token string\">\"orderDetail:\"</span> <span class=\"token operator\">+</span> orderInfo<span class=\"token punctuation\">.</span>id <span class=\"token operator\">+</span> <span class=\"token string\">\":*\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"146\"></td><td><pre>          <span class=\"token comment\">// 创建一个集合来接收 detalis</span></pre></td></tr><tr><td data-num=\"147\"></td><td><pre>          <span class=\"token keyword\">import</span> <span class=\"token namespace\">scala<span class=\"token punctuation\">.</span>collection<span class=\"token punctuation\">.</span></span>JavaConversions<span class=\"token punctuation\">.</span>_</pre></td></tr><tr><td data-num=\"148\"></td><td><pre>          <span class=\"token keyword\">var</span> saleDetails <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> util<span class=\"token punctuation\">.</span>ArrayList<span class=\"token punctuation\">[</span>SaleDetail<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"149\"></td><td><pre>          <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>detail <span class=\"token keyword\">&lt;-</span> details<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"150\"></td><td><pre>            <span class=\"token comment\">// 将字符串转换为样例类</span></pre></td></tr><tr><td data-num=\"151\"></td><td><pre>            <span class=\"token keyword\">val</span> obj<span class=\"token operator\">:</span> OrderDetail <span class=\"token operator\">=</span> JSON<span class=\"token punctuation\">.</span>parseObject<span class=\"token punctuation\">(</span>detail<span class=\"token punctuation\">,</span> classOf<span class=\"token punctuation\">[</span>OrderDetail<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"152\"></td><td><pre>            <span class=\"token comment\">// 从缓存中删除已经被使用的数据</span></pre></td></tr><tr><td data-num=\"153\"></td><td><pre>            client<span class=\"token punctuation\">.</span>del<span class=\"token punctuation\">(</span>detail<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"154\"></td><td><pre>            <span class=\"token comment\">// 将数据进行合并</span></pre></td></tr><tr><td data-num=\"155\"></td><td><pre>            <span class=\"token keyword\">val</span> saleDetail <span class=\"token operator\">=</span> SaleDetail<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>mergeOrderInfo<span class=\"token punctuation\">(</span>orderInfo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>mergeOrderDetail<span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"156\"></td><td><pre>            saleDetails<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span>saleDetail<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"157\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"158\"></td><td><pre>          saleDetails</pre></td></tr><tr><td data-num=\"159\"></td><td><pre></pre></td></tr><tr><td data-num=\"160\"></td><td><pre>        <span class=\"token keyword\">case</span> <span class=\"token punctuation\">(</span>order_id<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>None<span class=\"token punctuation\">,</span> Some<span class=\"token punctuation\">(</span>orderDetail<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">=></span></pre></td></tr><tr><td data-num=\"161\"></td><td><pre>          <span class=\"token comment\">// 1. 从 redis 缓存中读取 info 的数据</span></pre></td></tr><tr><td data-num=\"162\"></td><td><pre>          <span class=\"token keyword\">val</span> value<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span> <span class=\"token operator\">=</span> client<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"order_info :\"</span> <span class=\"token operator\">+</span> orderDetail<span class=\"token punctuation\">.</span>order_id<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"163\"></td><td><pre>          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>value <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"164\"></td><td><pre>            <span class=\"token comment\">// 将 detail 的数据写入缓存中</span></pre></td></tr><tr><td data-num=\"165\"></td><td><pre>            cacheOrderDetailToRedis<span class=\"token punctuation\">(</span>client<span class=\"token punctuation\">,</span> orderDetail<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"166\"></td><td><pre>            List<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"167\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"168\"></td><td><pre>            <span class=\"token keyword\">val</span> info <span class=\"token operator\">=</span> JSON<span class=\"token punctuation\">.</span>parseObject<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> classOf<span class=\"token punctuation\">[</span>OrderInfo<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"169\"></td><td><pre>            <span class=\"token keyword\">val</span> saleDetail <span class=\"token operator\">=</span> SaleDetail<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>mergeOrderInfo<span class=\"token punctuation\">(</span>info<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>mergeOrderDetail<span class=\"token punctuation\">(</span>orderDetail<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"170\"></td><td><pre>            List<span class=\"token punctuation\">(</span>saleDetail<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"171\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"172\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"173\"></td><td><pre>      client<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"174\"></td><td><pre>      result</pre></td></tr><tr><td data-num=\"175\"></td><td><pre></pre></td></tr><tr><td data-num=\"176\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"177\"></td><td><pre></pre></td></tr><tr><td data-num=\"178\"></td><td><pre></pre></td></tr><tr><td data-num=\"179\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"180\"></td><td><pre></pre></td></tr><tr><td data-num=\"181\"></td><td><pre></pre></td></tr><tr><td data-num=\"182\"></td><td><pre>  <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"183\"></td><td><pre>    * 获取 info 流和 detail 流</pre></td></tr><tr><td data-num=\"184\"></td><td><pre>    * @param ssc streamingcontext 对象</pre></td></tr><tr><td data-num=\"185\"></td><td><pre>    * @return</pre></td></tr><tr><td data-num=\"186\"></td><td><pre>    */</span></pre></td></tr><tr><td data-num=\"187\"></td><td><pre>  <span class=\"token keyword\">def</span> getOrderInfoAndOrderDetailStream<span class=\"token punctuation\">(</span>ssc<span class=\"token operator\">:</span> StreamingContext<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"188\"></td><td><pre>    <span class=\"token comment\">// 第一步：获取 topic_order_info 的流，并将数据封装成样例类</span></pre></td></tr><tr><td data-num=\"189\"></td><td><pre>    <span class=\"token keyword\">val</span> infoStream<span class=\"token operator\">:</span> DStream<span class=\"token punctuation\">[</span>OrderInfo<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> MyKafkaUtil<span class=\"token punctuation\">.</span>getKafkaStream<span class=\"token punctuation\">(</span>ssc<span class=\"token punctuation\">,</span>Constant<span class=\"token punctuation\">.</span>TOPIC_ORDER_INFO<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"190\"></td><td><pre>      <span class=\"token punctuation\">.</span>map<span class=\"token punctuation\">(</span>json <span class=\"token keyword\">=></span> JSON<span class=\"token punctuation\">.</span>parseObject<span class=\"token punctuation\">(</span>json<span class=\"token punctuation\">,</span>classOf<span class=\"token punctuation\">[</span>OrderInfo<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"191\"></td><td><pre>    <span class=\"token comment\">// 第二步：获取 topic_order_detail 的流，并将数据封装成样例类</span></pre></td></tr><tr><td data-num=\"192\"></td><td><pre>    <span class=\"token keyword\">val</span> detailStream<span class=\"token operator\">:</span> DStream<span class=\"token punctuation\">[</span>OrderDetail<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> MyKafkaUtil<span class=\"token punctuation\">.</span>getKafkaStream<span class=\"token punctuation\">(</span>ssc<span class=\"token punctuation\">,</span> Constant<span class=\"token punctuation\">.</span>TOPIC_ORDER_DETAIL<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"193\"></td><td><pre>      <span class=\"token punctuation\">.</span>map<span class=\"token punctuation\">(</span>json <span class=\"token keyword\">=></span> JSON<span class=\"token punctuation\">.</span>parseObject<span class=\"token punctuation\">(</span>json<span class=\"token punctuation\">,</span> classOf<span class=\"token punctuation\">[</span>OrderDetail<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"194\"></td><td><pre>    <span class=\"token punctuation\">(</span>infoStream<span class=\"token punctuation\">,</span>detailStream<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"195\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"196\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"八-sparkstreaming的数据写到mysql\"><a class=\"anchor\" href=\"#八-sparkstreaming的数据写到mysql\">#</a> 八、sparkstreaming 的数据写到 mysql</h2>\n<pre><code>\n</code></pre>\n<h2 id=\"九-sparkstreaming的数据写到elasticsearch\"><a class=\"anchor\" href=\"#九-sparkstreaming的数据写到elasticsearch\">#</a> 九、sparkstreaming 的数据写到 elasticsearch</h2>\n<figure class=\"highlight scala\"><figcaption data-lang=\"scala\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>atguigu<span class=\"token punctuation\">.</span>realtime<span class=\"token punctuation\">.</span>utils</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">io<span class=\"token punctuation\">.</span>searchbox<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span></span><span class=\"token punctuation\">&#123;</span>JestClient<span class=\"token punctuation\">,</span> JestClientFactory<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">io<span class=\"token punctuation\">.</span>searchbox<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">.</span></span>HttpClientConfig</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">io<span class=\"token punctuation\">.</span>searchbox<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span></span><span class=\"token punctuation\">&#123;</span>Bulk<span class=\"token punctuation\">,</span> Index<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  * @Description</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  **</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  * @author lianzhipeng</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  * @create 2020-07-20 14:58:11</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  */</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">object</span> EsUtil <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    *  1. 获取 es 的客户端</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    *     a、创建一个工厂对象</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    *     b、es 的配置参数</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    *     c、通过工厂对象 + 配置参数 创建 es 的对象</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    *</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    */</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token keyword\">val</span> factory <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> JestClientFactory</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token comment\">//es 的 url</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  <span class=\"token keyword\">val</span> esurl <span class=\"token operator\">=</span> <span class=\"token string\">\"http://hadoop105:9200\"</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  <span class=\"token keyword\">val</span> conf<span class=\"token operator\">:</span> HttpClientConfig <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> HttpClientConfig<span class=\"token punctuation\">.</span>Builder<span class=\"token punctuation\">(</span>esurl<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">.</span>connTimeout<span class=\"token punctuation\">(</span><span class=\"token number\">1000</span> <span class=\"token operator\">*</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 连接延迟时间</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">.</span>readTimeout<span class=\"token punctuation\">(</span><span class=\"token number\">1000</span> <span class=\"token operator\">*</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 获取数据延迟时间</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">.</span>maxTotalConnection<span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 最大的连接数</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">.</span>multiThreaded<span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 是否启动多线程</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token punctuation\">.</span>build<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>  factory<span class=\"token punctuation\">.</span>setHttpClientConfig<span class=\"token punctuation\">(</span>conf<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>  <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    * 向 es 中添加多条数据</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    * @param index index</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    * @param sources 多条数据源</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    */</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>  <span class=\"token keyword\">def</span> insertBulk<span class=\"token punctuation\">(</span>index<span class=\"token operator\">:</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span>sources<span class=\"token operator\">:</span>Iterator<span class=\"token punctuation\">[</span>Object<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token comment\">// 创建 es 的客户端</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token keyword\">val</span> client<span class=\"token operator\">:</span> JestClient <span class=\"token operator\">=</span> factory<span class=\"token punctuation\">.</span>getObject</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token comment\">// 构建一个 bulk，配置 index 和 type</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token keyword\">var</span> bulkBuilder<span class=\"token operator\">:</span> Bulk<span class=\"token punctuation\">.</span>Builder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> Bulk<span class=\"token punctuation\">.</span>Builder<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>      <span class=\"token punctuation\">.</span>defaultIndex<span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>      <span class=\"token punctuation\">.</span>defaultType<span class=\"token punctuation\">(</span><span class=\"token string\">\"_doc\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token comment\">// 遍历多个数据源，使用模式匹配的方式</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    sources<span class=\"token punctuation\">.</span>foreach<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>      <span class=\"token comment\">// 如果传了 document_id，则使用，如果没有传递，则随机生成一个 document_id</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>      <span class=\"token keyword\">case</span> <span class=\"token punctuation\">(</span>id <span class=\"token operator\">:</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span>source<span class=\"token punctuation\">)</span> <span class=\"token keyword\">=></span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token keyword\">val</span> action <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> Index<span class=\"token punctuation\">.</span>Builder<span class=\"token punctuation\">(</span>source<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>build<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        <span class=\"token comment\">// 添加 action</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        bulkBuilder<span class=\"token punctuation\">.</span>addAction<span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>      <span class=\"token keyword\">case</span> source <span class=\"token keyword\">=></span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        <span class=\"token keyword\">val</span> action<span class=\"token operator\">:</span> Index<span class=\"token punctuation\">.</span>Builder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> Index<span class=\"token punctuation\">.</span>Builder<span class=\"token punctuation\">(</span>source<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        bulkBuilder<span class=\"token punctuation\">.</span>addAction<span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span>build<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    <span class=\"token comment\">// 执行</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    client<span class=\"token punctuation\">.</span>execute<span class=\"token punctuation\">(</span>bulkBuilder<span class=\"token punctuation\">.</span>build<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    <span class=\"token comment\">// 关闭客户端</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    client<span class=\"token punctuation\">.</span>shutdownClient<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>  <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    * 往 es 中写单条数据</pre></td></tr><tr><td data-num=\"68\"></td><td><pre>    * @param index index</pre></td></tr><tr><td data-num=\"69\"></td><td><pre>    * @param source 数据源，具体添加的数据</pre></td></tr><tr><td data-num=\"70\"></td><td><pre>    * @param id document_id</pre></td></tr><tr><td data-num=\"71\"></td><td><pre>    *</pre></td></tr><tr><td data-num=\"72\"></td><td><pre>    */</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>  <span class=\"token keyword\">def</span> insertSingle<span class=\"token punctuation\">(</span>index <span class=\"token operator\">:</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span>source<span class=\"token operator\">:</span>Object<span class=\"token punctuation\">,</span>id <span class=\"token operator\">:</span><span class=\"token builtin\">String</span><span class=\"token operator\">=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Unit</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>    <span class=\"token keyword\">val</span> client<span class=\"token operator\">:</span> JestClient <span class=\"token operator\">=</span> factory<span class=\"token punctuation\">.</span>getObject</pre></td></tr><tr><td data-num=\"76\"></td><td><pre></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"78\"></td><td><pre>      * 2. 往 es 中写数据</pre></td></tr><tr><td data-num=\"79\"></td><td><pre>      */</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>    <span class=\"token keyword\">val</span> action<span class=\"token operator\">:</span> Index <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> Index<span class=\"token punctuation\">.</span>Builder<span class=\"token punctuation\">(</span>source<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>      <span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>      <span class=\"token punctuation\">.</span>`<span class=\"token keyword\">type</span>`<span class=\"token punctuation\">(</span><span class=\"token string\">\"_doc\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>      <span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>      <span class=\"token punctuation\">.</span>build<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>    client<span class=\"token punctuation\">.</span>execute<span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"89\"></td><td><pre>      * 3. 关闭客户端的连接</pre></td></tr><tr><td data-num=\"90\"></td><td><pre>      */</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>    client<span class=\"token punctuation\">.</span>shutdownClient<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre><span class=\"token keyword\">case</span>  <span class=\"token keyword\">class</span>  User<span class=\"token punctuation\">(</span>name <span class=\"token operator\">:</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span>age <span class=\"token operator\">:</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre></pre></td></tr><tr><td data-num=\"96\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"97\"></td><td><pre>    * 将封装好的数据发往 es 中</pre></td></tr><tr><td data-num=\"98\"></td><td><pre>    * @param fullJoinStream</pre></td></tr><tr><td data-num=\"99\"></td><td><pre>    */</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>  <span class=\"token keyword\">def</span> sendToEs<span class=\"token punctuation\">(</span>fullJoinStream<span class=\"token operator\">:</span> DStream<span class=\"token punctuation\">[</span>SaleDetail<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>    <span class=\"token comment\">// 1. 将数据写到 es 中</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>    fullJoinStream<span class=\"token punctuation\">.</span>foreachRDD<span class=\"token punctuation\">(</span>rdd <span class=\"token keyword\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>      rdd<span class=\"token punctuation\">.</span>foreachPartition<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>        it <span class=\"token keyword\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>          EsUtil<span class=\"token punctuation\">.</span>insertBulk<span class=\"token punctuation\">(</span><span class=\"token string\">\"gmall_sale_detail\"</span><span class=\"token punctuation\">,</span> it<span class=\"token punctuation\">.</span>map<span class=\"token punctuation\">(</span>detail <span class=\"token keyword\">=></span> <span class=\"token punctuation\">(</span>detail<span class=\"token punctuation\">.</span>order_id <span class=\"token operator\">+</span> <span class=\"token string\">\"_\"</span> <span class=\"token operator\">+</span> detail<span class=\"token punctuation\">.</span>order_detail_id<span class=\"token punctuation\">,</span> detail<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>      <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"十-sparkstreaming的数据写到hbase\"><a class=\"anchor\" href=\"#十-sparkstreaming的数据写到hbase\">#</a> 十、sparkstreaming 的数据写到 hbase</h2>\n<figure class=\"highlight scala\"><figcaption data-lang=\"scala\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 5. 将新增 mid 的详情写到 hbase 中。</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>      <span class=\"token keyword\">import</span>  <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>phoenix<span class=\"token punctuation\">.</span>spark<span class=\"token punctuation\">.</span></span>_</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      rdd<span class=\"token punctuation\">.</span>saveToPhoenix<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token string\">\"GMALL_DAU\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        Seq<span class=\"token punctuation\">(</span><span class=\"token string\">\"MID\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"UID\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"APPID\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"AREA\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"OS\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"CHANNEL\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"LOGTYPE\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"VERSION\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"TS\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"LOGDATE\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"LOGHOUR\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        zkUrl <span class=\"token operator\">=</span> Some<span class=\"token punctuation\">(</span><span class=\"token string\">\"hadoop105,hadoop106,hadoop107:2181\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"十一-如何连接redis\"><a class=\"anchor\" href=\"#十一-如何连接redis\">#</a> 十一、如何连接 redis</h2>\n<figure class=\"highlight scala\"><figcaption data-lang=\"scala\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>atguigu<span class=\"token punctuation\">.</span>realtime<span class=\"token punctuation\">.</span>utils</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">redis<span class=\"token punctuation\">.</span>clients<span class=\"token punctuation\">.</span>jedis<span class=\"token punctuation\">.</span></span><span class=\"token punctuation\">&#123;</span>Jedis<span class=\"token punctuation\">,</span> JedisPool<span class=\"token punctuation\">,</span> JedisPoolConfig<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  * @Description 获取与 redis 的连接</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  **</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  * @author lianzhipeng</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  * @create 2020-07-15 16:24:08</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  */</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">object</span> RedisUtils <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token keyword\">val</span> conf <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> JedisPoolConfig</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  conf<span class=\"token punctuation\">.</span>setMaxIdle<span class=\"token punctuation\">(</span><span class=\"token number\">30</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 连接池中最大的空闲连接数量</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  conf<span class=\"token punctuation\">.</span>setMinIdle<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 连接池中最小的空闲连接数量</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  conf<span class=\"token punctuation\">.</span>setMaxTotal<span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 最大的连接数量</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  conf<span class=\"token punctuation\">.</span>setBlockWhenExhausted<span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 没有可用的连接时是否等待</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  conf<span class=\"token punctuation\">.</span>setMaxWaitMillis<span class=\"token punctuation\">(</span><span class=\"token number\">10000</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 最大的等待时间</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  conf<span class=\"token punctuation\">.</span>setTestOnCreate<span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 测试是否连接</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  conf<span class=\"token punctuation\">.</span>setTestOnBorrow<span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 每次获得连接的进行测试</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  conf<span class=\"token punctuation\">.</span>setTestOnReturn<span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token comment\">// 验证连接池的属性</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token keyword\">val</span> pool <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> JedisPool<span class=\"token punctuation\">(</span>conf<span class=\"token punctuation\">,</span><span class=\"token string\">\"hadoop105\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">8000</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  <span class=\"token keyword\">def</span> getClient <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token comment\">// 从连接池中获取一个连接</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    pool<span class=\"token punctuation\">.</span>getResource</pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>   <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>   测试是否能够连接 redis 并且是否可以写数据</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    */</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>  <span class=\"token keyword\">def</span> main<span class=\"token punctuation\">(</span>args<span class=\"token operator\">:</span> Array<span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Unit</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token comment\">// 获取一个客户端</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token keyword\">val</span> client<span class=\"token operator\">:</span> Jedis <span class=\"token operator\">=</span> getClient</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token comment\">// 使用客户端往 redis 中写数据</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    client<span class=\"token punctuation\">.</span>set<span class=\"token punctuation\">(</span><span class=\"token string\">\"k2\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"lianzp\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token comment\">// 关闭连接</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    client<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token comment\">// 关闭连接池</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    pool<span class=\"token punctuation\">.</span>destroy<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"十二-sparkstreaming如何连接mysql\"><a class=\"anchor\" href=\"#十二-sparkstreaming如何连接mysql\">#</a> 十二、SparkStreaming 如何连接 mysql</h2>\n<figure class=\"highlight scala\"><figcaption data-lang=\"scala\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>atguigu<span class=\"token punctuation\">.</span>realtime<span class=\"token punctuation\">.</span>utils</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span>Properties</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>atguigu<span class=\"token punctuation\">.</span>realtime<span class=\"token punctuation\">.</span>bean<span class=\"token punctuation\">.</span></span>UserInfo</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>spark<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span>SparkSession</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>spark<span class=\"token punctuation\">.</span>streaming<span class=\"token punctuation\">.</span></span>StreamingContext</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  * @Description SparkStreaming 使用 jdbc 的方式连接 mysql</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  **</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  * @author lianzhipeng</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  * @create 2020-07-21 20:27:52</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  */</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">object</span> MyslqUtil <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token keyword\">val</span> url <span class=\"token operator\">=</span> ConfigUtils<span class=\"token punctuation\">.</span>getProperties<span class=\"token punctuation\">(</span><span class=\"token string\">\"gmall.properties\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"url\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token keyword\">val</span> password <span class=\"token operator\">=</span>  ConfigUtils<span class=\"token punctuation\">.</span>getProperties<span class=\"token punctuation\">(</span><span class=\"token string\">\"gmall.properties\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"password\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token keyword\">val</span> user <span class=\"token operator\">=</span>  ConfigUtils<span class=\"token punctuation\">.</span>getProperties<span class=\"token punctuation\">(</span><span class=\"token string\">\"gmall.properties\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"user\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token keyword\">val</span> props <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> Properties<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  props<span class=\"token punctuation\">.</span>setProperty<span class=\"token punctuation\">(</span><span class=\"token string\">\"user\"</span><span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  props<span class=\"token punctuation\">.</span>setProperty<span class=\"token punctuation\">(</span><span class=\"token string\">\"password\"</span><span class=\"token punctuation\">,</span> password<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token keyword\">def</span> ReadMySQLData<span class=\"token punctuation\">(</span>ssc <span class=\"token operator\">:</span> StreamingContext<span class=\"token punctuation\">,</span>tableName<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>      <span class=\"token comment\">// 构建 sparkSession 对象</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>      <span class=\"token keyword\">val</span> spark<span class=\"token operator\">:</span> SparkSession <span class=\"token operator\">=</span> SparkSession<span class=\"token punctuation\">.</span>builder<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">(</span>ssc<span class=\"token punctuation\">.</span>sparkContext<span class=\"token punctuation\">.</span>getConf<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token punctuation\">.</span>getOrCreate<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>      <span class=\"token keyword\">import</span> <span class=\"token namespace\">spark<span class=\"token punctuation\">.</span>implicits<span class=\"token punctuation\">.</span></span>_</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token comment\">// 读取指定路径下的数据，默认按行读取</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>      spark<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">.</span>jdbc<span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> tableName<span class=\"token punctuation\">,</span> props<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token punctuation\">.</span>as<span class=\"token punctuation\">[</span>UserInfo<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token punctuation\">.</span>rdd</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"十二-es中的数据如何写到前端\"><a class=\"anchor\" href=\"#十二-es中的数据如何写到前端\">#</a> 十二、es 中的数据如何写到前端</h2>\n<h3 id=\"1-需求分析\"><a class=\"anchor\" href=\"#1-需求分析\">#</a> 1. 需求分析</h3>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1.</span> <span class=\"token string\">'思想'</span>：将数据写给前端，首先需要通过mybaits创建一个接口，前端通过这个接口，来访问数据。</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">2.</span> <span class=\"token string\">'实现步骤'</span>：</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token number\">1.</span> 获取es的客户端</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token number\">2.</span> 创建查询的对象</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token number\">3.</span> 执行查询</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token number\">4.</span> 获取数据并对数据进行解析</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   <span class=\"token number\">5.</span> 将解析后的数据发送到网页上进行展示</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   <span class=\"token number\">6.</span> 前端对接发送到网页中的数据，实现数据展示。</pre></td></tr></table></figure><ul>\n<li>第一步：需求分析</li>\n</ul>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 1. ' 用户的需求 '：</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>       用户输入关键词和时间，查询这天的</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>       <span class=\"token number\">1.</span> 男女比例：男生和女生的比例</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>       <span class=\"token number\">2.</span> 年龄比例数据：不同年龄段的用户数量</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>       <span class=\"token number\">3.</span> 同时展示当天的数据明细。</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">-- 2. ' 案例 '：</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>       如用户查询：<span class=\"token number\">2020</span><span class=\"token operator\">-</span><span class=\"token number\">07</span><span class=\"token operator\">-</span><span class=\"token number\">21</span>这天，小米手机订单销售情况，需要的数据有：</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>       <span class=\"token number\">1.</span> 男女比例</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>       <span class=\"token number\">2.</span> 购买的年龄端分布情况</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>       <span class=\"token number\">3.</span> 订单详情信息。</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">-- 3. 实现方式</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>       <span class=\"token number\">1.</span> 如何获取es中的数据</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>          a、连接es</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>          b、通过dsl的语法来获取数据</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>       <span class=\"token number\">2.</span> 如何将获取的数据转换为对应的数据结构 </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>          数据包含：</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>          a、男女比例的数据</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>          b、分年龄段聚合的数据</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>          c、订单详情的数据明细</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>       <span class=\"token number\">3.</span> 数据如何发送到网页中</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>          a、通过mybaits的数据的相应的方式。</pre></td></tr></table></figure><p>![image-20200722144734688](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saWFuLXpwLm9zcy1jbi1zaGVuemhlbi5hbGl5dW5jcy5jb20vcGlj\">https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic</span> GO/20200722144734.png)</p>\n<p>![image-20200722144700964](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saWFuLXpwLm9zcy1jbi1zaGVuemhlbi5hbGl5dW5jcy5jb20vcGlj\">https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic</span> GO/20200722144708.png)</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 4. 在 kibana 中使用 dsl 实现如上的需求为：</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>     <span class=\"token string\">'需求1：统计男女比例数据分析'</span>：</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     GET  gmall_sale_detail<span class=\"token operator\">/</span>_search</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>&#123;</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token string\">\"query\"</span>: &#123;</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token string\">\"bool\"</span>: &#123;</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token string\">\"filter\"</span>: &#123;</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token string\">\"term\"</span>: &#123;</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>          <span class=\"token string\">\"dt\"</span>: <span class=\"token string\">\"2020-07-22\"</span>  <span class=\"token comment\">-- 获取哪一天的数据</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        &#125;</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      &#125;</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      <span class=\"token punctuation\">,</span> <span class=\"token string\">\"must\"</span>: <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        &#123;<span class=\"token string\">\"match\"</span>: &#123;</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>          <span class=\"token string\">\"sku_name\"</span>: <span class=\"token string\">\"小米手机\"</span> <span class=\"token comment\">-- 查询产品，是模糊查询，采用了中文 ik 的分词器</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        &#125;&#125;</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      <span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    &#125;</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  &#125;<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token string\">\"aggs\"</span>: &#123;</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token string\">\"group_by_user_gender\"</span>: &#123;  <span class=\"token comment\">-- 分组的名字</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>      <span class=\"token string\">\"terms\"</span>: &#123;</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token string\">\"field\"</span>: <span class=\"token string\">\"user_gender\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">-- 按照什么进行分组</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token string\">\"size\"</span>: <span class=\"token number\">2</span>               <span class=\"token comment\">-- 分组后的条目数量，假如可以分为 10 个组时，设定分组 size 为 2，则剩余 8 个组为进入其他组</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>      &#125;</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    &#125;</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  &#125;<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  <span class=\"token string\">\"from\"</span>: <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>    <span class=\"token comment\">-- 数据展示时，会将聚合前数据进行展示，也就是过滤出来数据，from 表示从几个开始展示</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  <span class=\"token string\">\"size\"</span>: <span class=\"token number\">3</span>     <span class=\"token comment\">--  表示从 from 开始，展示多少条数据</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>&#125;</pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>  <span class=\"token string\">'需求2'</span>：统计购买这些产品不同年龄端的数据。我们的做法是：</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>          通过dsl的查询语句，得到同一天购买指定商品的同一年龄的数据，如：</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>          <span class=\"token number\">2020</span><span class=\"token operator\">-</span><span class=\"token number\">07</span><span class=\"token operator\">-</span><span class=\"token number\">21</span>，购买有小米手机关键字的订单中各个年龄的数据。</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>          等待拿到了这个数据以后，再对数据进行区间判断，计算出每个年龄端的数量。</pre></td></tr></table></figure><p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saWFuLXpwLm9zcy1jbi1zaGVuemhlbi5hbGl5dW5jcy5jb20vcGlj\">https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic</span> GO/20200722182739.png&quot; alt=&quot;image-20200722182738113&quot; style=&quot;zoom:50%;&quot; /&gt;</p>\n<h3 id=\"2-具体步骤\"><a class=\"anchor\" href=\"#2-具体步骤\">#</a> 2. 具体步骤</h3>\n<h4 id=\"21-第一步获取es的客户端-解析数据-并将数据写给controller\"><a class=\"anchor\" href=\"#21-第一步获取es的客户端-解析数据-并将数据写给controller\">#</a> 2.1 第一步：获取 es 的客户端、解析数据、并将数据写给 controller</h4>\n<p>在<mark> gmall-publisher</mark> 项目中的<mark> service</mark> 包中<mark> PublisherService 接口</mark>中定义一个<mark>抽象方法</mark>，指定获取数据类型以及需要传递的参数</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 1. 参数分析：见参数说明</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">-- 2. 返回值类型说明：</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      <span class=\"token number\">1.</span><span class=\"token string\">'希望返回的数据'</span>：</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token number\">1.</span> 查询数据的总数量：“total”：<span class=\"token number\">4995</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token number\">2.</span> 分组后聚合的数据：</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                    男女的聚合数据：genderAgg：Map<span class=\"token punctuation\">(</span><span class=\"token string\">\"f\"</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token number\">2381</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"M\"</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token number\">2614</span><span class=\"token punctuation\">)</span> <span class=\"token string\">'性别-> 数量'</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                    年龄分布聚合数据：ageAgg ：Map<span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">21</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span> <span class=\"token string\">'年龄->数量'</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token number\">3.</span> 详情数据：detail:List<span class=\"token punctuation\">(</span>Map<span class=\"token punctuation\">(</span>一条数据<span class=\"token punctuation\">)</span>，Map<span class=\"token punctuation\">(</span>一条数据<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                    一条数据：</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                    order_detail_id <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token string\">\"30293\"</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                    user_age <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token number\">17</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>       <span class=\"token number\">2.</span> <span class=\"token string\">'那么这些数据我们都需要'</span>：</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            男女的聚合数据:total <span class=\"token operator\">+</span> gendetAgg <span class=\"token operator\">+</span> detail</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            年龄分布聚合数据:total <span class=\"token operator\">+</span> ageAgg <span class=\"token operator\">+</span> detail</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>       <span class=\"token number\">3.</span> <span class=\"token string\">'返回值类型'</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        Map<span class=\"token operator\">&lt;</span>String<span class=\"token punctuation\">,</span>Object<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>“total”：<span class=\"token number\">4995</span>，</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                              genderAgg：Map<span class=\"token punctuation\">(</span><span class=\"token string\">\"f\"</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token number\">2381</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"M\"</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token number\">2614</span><span class=\"token punctuation\">)</span>，</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                              detail:List<span class=\"token punctuation\">(</span>Map<span class=\"token punctuation\">(</span>一条数据<span class=\"token punctuation\">)</span>，Map<span class=\"token punctuation\">(</span>一条数据<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     * @param dt 查询具体哪一天的数据</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>     * @param keyWords 查询的关键词</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>     * @param aggField 分组的字段</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>     * @param aggCount 分组的组数</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>     * @param startPage 查询哪一页</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>     * @param sizePerPage 查询后每页的数据的数量</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>     * @return</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   Map<span class=\"token operator\">&lt;</span>String<span class=\"token punctuation\">,</span>Object<span class=\"token operator\">></span> getSaleDetailAndAgg<span class=\"token punctuation\">(</span>String dt<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                               String keyWords<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                               String aggField<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                               <span class=\"token keyword\">int</span> aggCount<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                               <span class=\"token keyword\">int</span> startPage<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                               <span class=\"token keyword\">int</span> sizePerPage</pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>在<mark> gmall-publisher</mark> 项目中的<mark> service</mark> 包中<mark> PublisherImpService 实现类</mark>中实现上面接口的抽象方法</li>\n</ul>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 1. 分析 ： 创建一个 util 包，在包中创建 esUtil 类</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   在esUtil工具类中：</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token number\">1.</span> 创建一个获取es客户端的方法</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token number\">2.</span> 创建一个获取dsl语句的方法</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">-- 2. 通过 esUtil 获取 es 的客户端和查询语句</span></pre></td></tr></table></figure><figure class=\"highlight scala\"><figcaption data-lang=\"scala\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>atguigu<span class=\"token punctuation\">.</span>gmallpublisher<span class=\"token punctuation\">.</span>utils</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">io<span class=\"token punctuation\">.</span>searchbox<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span></span><span class=\"token punctuation\">&#123;</span>JestClient<span class=\"token punctuation\">,</span> JestClientFactory<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">io<span class=\"token punctuation\">.</span>searchbox<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">.</span></span>HttpClientConfig</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">io<span class=\"token punctuation\">.</span>searchbox<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span></span><span class=\"token punctuation\">&#123;</span>Bulk<span class=\"token punctuation\">,</span> Index<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  * @Description</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  * @author lianzhipeng</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  * @create 2020-07-20 14:58:11</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  */</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">object</span> EsUtil <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    *  1. 获取 es 的客户端</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    *     a、创建一个工厂对象</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    *     b、es 的配置参数</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    *     c、通过工厂对象 + 配置参数 创建 es 的对象</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    */</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token keyword\">val</span> factory <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> JestClientFactory</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token comment\">//es 的 url</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token keyword\">val</span> esurl <span class=\"token operator\">=</span> <span class=\"token string\">\"http://hadoop105:9200\"</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token keyword\">val</span> conf<span class=\"token operator\">:</span> HttpClientConfig <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> HttpClientConfig<span class=\"token punctuation\">.</span>Builder<span class=\"token punctuation\">(</span>esurl<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">.</span>connTimeout<span class=\"token punctuation\">(</span><span class=\"token number\">1000</span> <span class=\"token operator\">*</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 连接延迟时间</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">.</span>readTimeout<span class=\"token punctuation\">(</span><span class=\"token number\">1000</span> <span class=\"token operator\">*</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 获取数据延迟时间</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">.</span>maxTotalConnection<span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 最大的连接数</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">.</span>multiThreaded<span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 是否启动多线程</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">.</span>build<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  factory<span class=\"token punctuation\">.</span>setHttpClientConfig<span class=\"token punctuation\">(</span>conf<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>  <span class=\"token keyword\">def</span> getESClient<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token comment\">// 创建 es 的客户端</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    factory<span class=\"token punctuation\">.</span>getObject</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>  <span class=\"token keyword\">def</span> getDSL<span class=\"token punctuation\">(</span>dt <span class=\"token operator\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>             keyWords <span class=\"token operator\">:</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>             aggField <span class=\"token operator\">:</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>             aggCount <span class=\"token operator\">:</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>             startPage <span class=\"token operator\">:</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>             sizePerPage <span class=\"token operator\">:</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>   s<span class=\"token triple-quoted-string string\">\"\"\"</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>     |&#123;</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>     |  \"query\": &#123;</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>     |    \"bool\": &#123;</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>     |      \"filter\": &#123;</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>     |        \"term\": &#123;</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>     |          \"dt\": $&#123;dt&#125;</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>     |        &#125;</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>     |      &#125;</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>     |      , \"must\": [</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>     |        &#123;\"match\": &#123;</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>     |          \"sku_name\": $&#123;keyWords&#125;</pre></td></tr><tr><td data-num=\"55\"></td><td><pre>     |        &#125;&#125;</pre></td></tr><tr><td data-num=\"56\"></td><td><pre>     |      ]</pre></td></tr><tr><td data-num=\"57\"></td><td><pre>     |    &#125;</pre></td></tr><tr><td data-num=\"58\"></td><td><pre>     |  &#125;,</pre></td></tr><tr><td data-num=\"59\"></td><td><pre>     |  \"aggs\": &#123;</pre></td></tr><tr><td data-num=\"60\"></td><td><pre>     |    \"group_by_$&#123;aggField&#125;\": &#123;</pre></td></tr><tr><td data-num=\"61\"></td><td><pre>     |      \"terms\": &#123;</pre></td></tr><tr><td data-num=\"62\"></td><td><pre>     |        \"field\": $&#123;aggField&#125;,</pre></td></tr><tr><td data-num=\"63\"></td><td><pre>     |        \"size\": $&#123;aggCount&#125;</pre></td></tr><tr><td data-num=\"64\"></td><td><pre>     |      &#125;</pre></td></tr><tr><td data-num=\"65\"></td><td><pre>     |    &#125;</pre></td></tr><tr><td data-num=\"66\"></td><td><pre>     |  &#125;,</pre></td></tr><tr><td data-num=\"67\"></td><td><pre>     |  \"from\": $&#123;(startPage - 1)*sizePerPage&#125;,</pre></td></tr><tr><td data-num=\"68\"></td><td><pre>     |  \"size\": $&#123;sizePerPage&#125;</pre></td></tr><tr><td data-num=\"69\"></td><td><pre>     |&#125;</pre></td></tr><tr><td data-num=\"70\"></td><td><pre>   \"\"\"</span><span class=\"token punctuation\">.</span>stripMargin</pre></td></tr><tr><td data-num=\"71\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 1. 代码实现，具体的步骤：</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>       <span class=\"token number\">1.</span> 获取es的客户端</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>       <span class=\"token number\">2.</span> 获取查询的对象</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>       <span class=\"token number\">3.</span> 执行查询并返回查询的结果，创建一个结果集合，用来接收这三个部分的数据</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>       <span class=\"token number\">4.</span> 解析total数据</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>       <span class=\"token number\">5.</span> 解析聚合的数据</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token number\">1.</span> 创建一个集合来接收</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token number\">2.</span> 获取聚合的数据，是一个集合</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token number\">3.</span> 遍历集合，取出<span class=\"token keyword\">key</span>和<span class=\"token keyword\">value</span>，并把数据写到创建的集合中</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token number\">4.</span> 将集合写到结果的集合中</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>       <span class=\"token number\">6.</span> 解析订单详情的数据</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token number\">1.</span> 创建一个集合来接收</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token number\">2.</span> 获取聚合的数据，是一个集合</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token number\">3.</span> 遍历集合，将一条数据作为一个整体，并把数据写到创建的集合中</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token number\">4.</span> 将集合写到结果的集合中</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>       <span class=\"token number\">7.</span> 返回结果集合，那么结果集合中的数据为：</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>          （<span class=\"token string\">\"total\"</span>：total，</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token string\">\"agg\"</span>:（<span class=\"token keyword\">key</span>：<span class=\"token keyword\">value</span>，<span class=\"token keyword\">key</span>，<span class=\"token keyword\">value</span>，<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token string\">\"detail\"</span>:<span class=\"token punctuation\">(</span>Map<span class=\"token punctuation\">(</span>一条数据<span class=\"token punctuation\">)</span>，Map<span class=\"token punctuation\">(</span>一条数据<span class=\"token punctuation\">)</span>，<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ul>\n<li>代码实现</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>     * Map (key,vaule) = (</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     * “total”：4995，</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>     * genderAgg：Map (\"f\" -> 2381,\"M\"->2614)，</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>     * detail:List (Map (一条数据)，Map (一条数据))</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>     * )</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>     * @param dt 查询具体哪一天的数据</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>     * @param keyWords 查询的关键词</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>     * @param aggField 分组的字段</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>     * @param aggCount 分组的组数</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>     * @param startPage 查询哪一页</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>     * @param sizePerPage 查询后每页的数据的数量</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>     * @return</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getSaleDetailAndAgg</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> dt<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                                                   <span class=\"token class-name\">String</span> keyWords<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                                                   <span class=\"token class-name\">String</span> aggField<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                                                   <span class=\"token keyword\">int</span> aggCount<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                                                   <span class=\"token keyword\">int</span> startPage<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                                                   <span class=\"token keyword\">int</span> sizePerPage<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token comment\">// 1.  获取 es 的连接</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token class-name\">JestClient</span> client <span class=\"token operator\">=</span> <span class=\"token class-name\">EsUtil</span><span class=\"token punctuation\">.</span><span class=\"token function\">getESClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token comment\">// 2. 创建查询的对象</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token comment\">// 2.1 获取 dsl 语句</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token class-name\">String</span> dsl <span class=\"token operator\">=</span> <span class=\"token class-name\">EsUtil</span><span class=\"token punctuation\">.</span><span class=\"token function\">getDSL</span><span class=\"token punctuation\">(</span>dt<span class=\"token punctuation\">,</span> keyWords<span class=\"token punctuation\">,</span> aggField<span class=\"token punctuation\">,</span> aggCount<span class=\"token punctuation\">,</span> startPage<span class=\"token punctuation\">,</span> sizePerPage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token comment\">// 2.2 创建查询的对象</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token class-name\">Search</span> search <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Search<span class=\"token punctuation\">.</span>Builder</span><span class=\"token punctuation\">(</span>dsl<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">addIndex</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"gmall_sale_detail\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">addType</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"_doc\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token comment\">// 3. 执行查询，并返回查询的结果，当前的结果和 kibana 中显示的数据一致，我们现在需要对数据进行转换</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token comment\">// 然后将转换后的数据发送给 controller。</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token class-name\">SearchResult</span> searchResult <span class=\"token operator\">=</span> client<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span>search<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token comment\">// 创建一个集合来接收最后的结果。</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token comment\">// 4. 解析数据</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token comment\">// 4.1 解析 total 数据</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token class-name\">Long</span> total <span class=\"token operator\">=</span> searchResult<span class=\"token punctuation\">.</span><span class=\"token function\">getTotal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token comment\">// 将解析的数据加入到集合中</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        result<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"total\"</span><span class=\"token punctuation\">,</span>total<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token comment\">// 4.2. 解析聚合数据</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token comment\">// 4.2.1 创建一个集合来接收聚合数据</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Long</span><span class=\"token punctuation\">></span></span> agg <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token comment\">// 4.2.1 获取聚合的数据</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TermsAggregation<span class=\"token punctuation\">.</span>Entry</span><span class=\"token punctuation\">></span></span> buckets <span class=\"token operator\">=</span> searchResult</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">getAggregations</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">getTermsAggregation</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"group_by_\"</span> <span class=\"token operator\">+</span> aggField<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">getBuckets</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token comment\">// 4.2.3 将数据的 key 和 value 取出，放进一个 map 集合中</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">TermsAggregation<span class=\"token punctuation\">.</span>Entry</span> bucket <span class=\"token operator\">:</span> buckets<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>            <span class=\"token class-name\">String</span> key <span class=\"token operator\">=</span> bucket<span class=\"token punctuation\">.</span><span class=\"token function\">getKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>            <span class=\"token class-name\">Long</span> value <span class=\"token operator\">=</span> bucket<span class=\"token punctuation\">.</span><span class=\"token function\">getCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>            agg<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        <span class=\"token comment\">// 4.2.4 将获取的数据写到 result 中</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>        result<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"agg\"</span><span class=\"token punctuation\">,</span>agg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        <span class=\"token comment\">// 4.3 解析订单详情数据</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        <span class=\"token comment\">// 4.3.1 创建一个集合来接收详情数据</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>        <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Map</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> detail <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>        <span class=\"token comment\">// 4..2 获取被击中的数据</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">SearchResult<span class=\"token punctuation\">.</span>Hit</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">HashMap</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Void</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> hits <span class=\"token operator\">=</span> searchResult<span class=\"token punctuation\">.</span><span class=\"token function\">getHits</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HashMap</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>        <span class=\"token comment\">// 4.2.2 遍历获取的数据</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">SearchResult<span class=\"token punctuation\">.</span>Hit</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">HashMap</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Void</span><span class=\"token punctuation\">></span></span> hit <span class=\"token operator\">:</span> hits<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>            <span class=\"token class-name\">HashMap</span> source <span class=\"token operator\">=</span> hit<span class=\"token punctuation\">.</span>source<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>            detail<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>source<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>        <span class=\"token comment\">// 4.2.3 将订单详情数据写到 result 结果中。</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>       result<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"detail\"</span><span class=\"token punctuation\">,</span>detail<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>        <span class=\"token comment\">// 将封装好的数据发送给 controller</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"22-通过controller对数据进行输出\"><a class=\"anchor\" href=\"#22-通过controller对数据进行输出\">#</a> 2.2 通过 controller 对数据进行输出</h4>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 1. 分析：</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>       <span class=\"token string\">'1. 获取网页访问提供的参数'</span>：</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>            通过网页post请求，输入指定的地址和提供指定的参数，那么在controller定义一个方法，只要这个方法处理的请求的路径和</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>       网页输入的地址一致，那么就能获取网页提供的参数。</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>       <span class=\"token string\">'2. 返回请求的结果'</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>             根据网页请求的数据（主要是指参数），对es的数据进行处理，最后将数据返回给到用户访问的页面位置。</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>             </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>             http:<span class=\"token comment\">//localhost:8070/sale_detail?dt=2019-05-20&amp;&amp;startPage=1&amp;&amp;size=5&amp;&amp;keyword = 手机小米</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">-- 2. 具体的实现步骤</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>          <span class=\"token number\">1.</span> 获取用户从网页提供的参数</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>          <span class=\"token number\">2.</span> 对从es中获取的数据进行处理、封装、最后返回结果</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>          <span class=\"token number\">3.</span> 用户在页面就可以看到请求的数据。</pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">-- 3. 需返回给用户的数据</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>         用户需要返回的数据如下图片所示</pre></td></tr></table></figure><p>![image-20200722202841153](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saWFuLXpwLm9zcy1jbi1zaGVuemhlbi5hbGl5dW5jcy5jb20vcGlj\">https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic</span> GO/20200722202904.png)</p>\n<pre><code>\n</code></pre>\n<h2 id=\"十二-小知识点\"><a class=\"anchor\" href=\"#十二-小知识点\">#</a> 十二、小知识点</h2>\n<figure class=\"highlight scala\"><figcaption data-lang=\"scala\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//1. json 对象转换为字符串</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>     <span class=\"token keyword\">val</span> context<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span> <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">.</span>toJSONString</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">//2. json 字符串转换为样例类</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    JSON<span class=\"token punctuation\">.</span>parseObject<span class=\"token punctuation\">(</span>json<span class=\"token punctuation\">,</span>Classof<span class=\"token punctuation\">[</span>OrderInfo<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">//3. 对象转 json 字符串</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tSerialization<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span>orderInfo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>DefaultFormats<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token number\">4.</span> option和either的用法</pre></td></tr></table></figure>",
            "tags": []
        },
        {
            "id": "https://github.com/Mayizono/miyazono.github.io/big-data/flink/7_%E5%AE%9E%E6%97%B6%E9%A2%84%E8%AD%A6/",
            "url": "https://github.com/Mayizono/miyazono.github.io/big-data/flink/7_%E5%AE%9E%E6%97%B6%E9%A2%84%E8%AD%A6/",
            "title": "",
            "date_published": "2021-08-31T10:42:03.146Z",
            "content_html": "",
            "tags": []
        },
        {
            "id": "https://github.com/Mayizono/miyazono.github.io/big-data/flink/6_%E4%B8%9A%E5%8A%A1%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/",
            "url": "https://github.com/Mayizono/miyazono.github.io/big-data/flink/6_%E4%B8%9A%E5%8A%A1%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/",
            "title": "",
            "date_published": "2021-08-31T10:42:03.144Z",
            "content_html": "<h1 id=\"实时数仓二-业务数据处理\"><a class=\"anchor\" href=\"#实时数仓二-业务数据处理\">#</a> 实时数仓（二） 业务数据处理</h1>\n<hr />\n<h2 id=\"1-业务数据处理架构\"><a class=\"anchor\" href=\"#1-业务数据处理架构\">#</a> 1. 业务数据处理架构</h2>\n<p>![1594980972405](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saWFuLXpwLm9zcy1jbi1zaGVuemhlbi5hbGl5dW5jcy5jb20vcGlj\">https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic</span> GO/20200719233018.png)</p>\n<blockquote>\n<p>业务数据，比如用户的订单，支付等操作会存储在 Mysql 中。为便于 SparkStreaming 对这些业务数据实时分析处理，这些数据一般也会再存储到 Kafka 中.</p>\n</blockquote>\n<h2 id=\"2-canal的使用\"><a class=\"anchor\" href=\"#2-canal的使用\">#</a> 2. Canal 的使用</h2>\n<h3 id=\"21-canal概述\"><a class=\"anchor\" href=\"#21-canal概述\">#</a> 2.1 Canal 概述</h3>\n<p>从 Mysql 到 Kafka 的过程中，如果每次都是全表扫描进行数据的转移，则非常耗时，并且也会对 Mysql 造成性能的影响.</p>\n<p>最好的办法是使用专门的工具能够实时的监控 Mysql 数据的变化.</p>\n<p>Canal 就是一个我们想要的工具.</p>\n<p><strong>Canal 的作用就是实时同步 Mysql</strong></p>\n<h3 id=\"22-canal工作原理\"><a class=\"anchor\" href=\"#22-canal工作原理\">#</a> 2.2 Canal 工作原理</h3>\n<h4 id=\"221-mysql主从复制机制\"><a class=\"anchor\" href=\"#221-mysql主从复制机制\">#</a> 2.2.1 MySql 主从复制机制</h4>\n<h5 id=\"主从复制原理\"><a class=\"anchor\" href=\"#主从复制原理\">#</a> 主从复制原理</h5>\n<p>![1594981217507](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saWFuLXpwLm9zcy1jbi1zaGVuemhlbi5hbGl5dW5jcy5jb20vcGlj\">https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic</span> GO/20200719233015.png)</p>\n<p>MySQL 复制过程分成三步：<br />\n1 master 将改变记录到<strong>二进制日志（binary log）</strong>。这些<strong>记录过程叫做二进制日志事件</strong>，binary log events；<br />\n2 slave 将 master 的 binary log events 拷贝到它的中继日志（relay log）；<br />\n3 slave 重做中继日志中的事件，将改变应用到自己的数据库中。 <strong>MySQL 复制是异步的且串行化的</strong></p>\n<blockquote>\n<p>Q：如何理解 MySQL 的复制是异步的</p>\n<p>MySQL 的复制机制是异步的是说当客户端往主库中插入数据后，<strong>只要主库接收数据后持久化到磁盘上，保证了数据的安全性后就返回给客户端确认相应</strong>。<strong>而从库数据有没有复制，数据复制有没有成功，客户端是不关心的</strong>。比如说你的应用程序写入数据是到主库的，而查询数据是从从库查询的，那么就可能会出现查询不到数据的结果。因为从库不一定会那么快从主库把数据读取过来，或者复制数据失败，这就是异步带来的不一致性。而同步就是客户端往主库插入数据，直到从库把数据安全复制过来之后才会返回结果给客户端。可想而知，异步带来的是性能的提升，而同步会降低数据的写入效率。</p>\n</blockquote>\n<h5 id=\"复制的原则\"><a class=\"anchor\" href=\"#复制的原则\">#</a> 复制的原则</h5>\n<ul>\n<li>每个 slave 只有一个 master</li>\n<li>每个 slave 只能有一个唯一的服务器 ID</li>\n<li>每个 master 可以有多个 salve</li>\n</ul>\n<h4 id=\"2-22-binary-log的理解\"><a class=\"anchor\" href=\"#2-22-binary-log的理解\">#</a> 2 2.2 Binary log 的理解</h4>\n<p>MySQL 的二进制日志可以说是 MySQL 最重要的日志了，它记录了所有的 DDL 和 DML (除了数据查询语句) 语句，以事件形式记录，还包含语句所执行的消耗的时间，MySQL 的二进制日志是事务安全型的。</p>\n<p>一般来说开启 binlog 日志大概会有 1% 的性能损耗。 binlog 日志有两个最重要的使用场景:</p>\n<ol>\n<li>\n<p><strong>主从复制</strong>，MySQL Replication 在 Master 端开启 binlog，Mster 把它的二进制日志传递给 slaves 来达到 master-slave 数据一致的目的。</p>\n</li>\n<li>\n<p><strong>数据恢复</strong>，通过使用 mysql binlog 工具来使恢复数据。</p>\n</li>\n</ol>\n<h5 id=\"binlog格式\"><a class=\"anchor\" href=\"#binlog格式\">#</a> binlog 格式</h5>\n<p>binlog 有 3 种格式: STATEMENT, ROW, MIXED</p>\n<ol>\n<li><strong>statement</strong></li>\n</ol>\n<p>语句级别，binlog 会记录每次执行的写操作的语句，注意记录的是语句，slave 会自己重新执行写操作的语句，从而达到与 master 的一致.</p>\n<p>但是有可能会出现主从不一致的情况：比如存储当前时间戳，存储一个随机值等.</p>\n<ul>\n<li>\n<p>优点： 节省空间</p>\n</li>\n<li>\n<p>缺点： 有可能造成数据不一致。</p>\n</li>\n</ul>\n<ol start=\"2\">\n<li><strong>row</strong></li>\n</ol>\n<p>行级， binlog 会记录每次操作后每行记录的变化。</p>\n<ul>\n<li>\n<p>优点：保持数据的绝对一致性。因为不管 sql 是什么，引用了什么函数，他只记录执行后的效果。</p>\n</li>\n<li>\n<p>缺点：占用较大空间。 如果一条语句执行之后导致很多行发生了变化，则会产生很多条记录</p>\n</li>\n</ul>\n<ol start=\"3\">\n<li><strong>mixed</strong></li>\n</ol>\n<p>statement 的升级版，一定程度上解决了因为一些情况而造成的 statement 模式不一致问题</p>\n<ul>\n<li>在某些情况下会按照 ROW 的方式进行处理</li>\n</ul>\n<pre><code> 1. 当函数中包含 UUID() 时\n 2. 包含 AUTO_INCREMENT 字段的表被更新时\n 3. 执行 INSERT DELAYED 语句时；\n 4. 用 UDF 时； \n</code></pre>\n<ul>\n<li>优点：节省空间，同时兼顾了一定的一致性。</li>\n<li>缺点：还有些极个别情况依旧会造成不一致，另外 statement 和 mixed 对于需要对 binlog 的监控的情况都不方便。</li>\n</ul>\n<blockquote>\n<p>由于 canal 是监控的数据的变化，所以 binlog 的格式需要设置成 row 格式</p>\n</blockquote>\n<h4 id=\"223-canal工作原理\"><a class=\"anchor\" href=\"#223-canal工作原理\">#</a> 2.2.3 Canal 工作原理</h4>\n<p>Canal 的工作原理很简单， 就是把自己伪装成 slave，假装从 master 复制数据 。</p>\n<p>![1594982449078](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saWFuLXpwLm9zcy1jbi1zaGVuemhlbi5hbGl5dW5jcy5jb20vcGlj\">https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic</span> GO/20200719233039.png)</p>\n<blockquote>\n<ol>\n<li>\n<p>canal 模拟 mysql slave 的交互协议，伪装自己为 mysql slave，向 mysql master 发送 dump 协议</p>\n</li>\n<li>\n<p>mysql master 收到 dump 请求，开始推送 binary log 给 slave (也就是 canal)</p>\n</li>\n<li>\n<p>canal 解析 binary log 对象 (原始为 byte 流)</p>\n</li>\n</ol>\n</blockquote>\n<h3 id=\"23-mysql配置\"><a class=\"anchor\" href=\"#23-mysql配置\">#</a> 2.3 MySQL 配置</h3>\n<h4 id=\"231-赋予权限\"><a class=\"anchor\" href=\"#231-赋予权限\">#</a> 2.3.1 赋予权限</h4>\n<p>赋权限 (可以省略，后面都是使用的 root 用户)</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">GRANT</span> <span class=\"token keyword\">ALL</span> <span class=\"token keyword\">PRIVILEGES</span> <span class=\"token keyword\">ON</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">.</span><span class=\"token operator\">*</span> <span class=\"token keyword\">TO</span> canal<span class=\"token variable\">@'%'</span> IDENTIFIED <span class=\"token keyword\">BY</span> <span class=\"token string\">'canal'</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"232-开启binlog\"><a class=\"anchor\" href=\"#232-开启binlog\">#</a> 2.3.2 开启 binlog</h4>\n<p>打开文件 /etc/my.cnf, 如果没有就创建一个</p>\n<figure class=\"highlight properties\"><figcaption data-lang=\".properties\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>[mysqld]</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token attr-name\">server-id</span><span class=\"token punctuation\">=</span> <span class=\"token attr-value\">1</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token attr-name\">log-bin</span><span class=\"token punctuation\">=</span> <span class=\"token attr-value\">mysql-bin</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token attr-name\">binlog_format</span><span class=\"token punctuation\">=</span> <span class=\"token attr-value\">row</span></pre></td></tr></table></figure><h4 id=\"233-重启mysql使binlog生效\"><a class=\"anchor\" href=\"#233-重启mysql使binlog生效\">#</a> 2.3.3 重启 mysql 使 binlog 生效</h4>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sudo</span> systemctl restart mysqld</pre></td></tr></table></figure><p>检查 binlog 是否生效</p>\n<p>![1594982896903](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saWFuLXpwLm9zcy1jbi1zaGVuemhlbi5hbGl5dW5jcy5jb20vcGlj\">https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic</span> GO/20200719233046.png)</p>\n<h4 id=\"234-数据准备\"><a class=\"anchor\" href=\"#234-数据准备\">#</a> 2.3.4 数据准备</h4>\n<blockquote>\n<p>注意该步不是主从配置的必要配置，只是该项目的数据准备</p>\n</blockquote>\n<ul>\n<li>创建数据库</li>\n</ul>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">create</span> <span class=\"token keyword\">database</span> gmall <span class=\"token keyword\">DEFAULT</span> <span class=\"token keyword\">CHARACTER</span> <span class=\"token keyword\">SET</span> utf8 <span class=\"token keyword\">COLLATE</span> utf8_general_ci<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>![1594982990975](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saWFuLXpwLm9zcy1jbi1zaGVuemhlbi5hbGl5dW5jcy5jb20vcGlj\">https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic</span> GO/20200719233054.png)</p>\n<ul>\n<li>执行脚本</li>\n<li>数据插入</li>\n</ul>\n<p>上个步骤 中的 sql 脚本执行完毕之后，部分表中已经插入了数据，但是和订单相关的表中没有数据。可以执行存储过程来插入数据.</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 日期  订单个数 用户数 是否删除以前的数据</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">call</span> init_data<span class=\"token punctuation\">(</span><span class=\"token string\">\"2019-05-16\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><blockquote>\n<p>该操作模拟了数据生成到 mysql 的步骤，后续通过该命令手动给 mysql 数据库添加业务数据后完成下一步的操作</p>\n</blockquote>\n<h3 id=\"24-canal部署\"><a class=\"anchor\" href=\"#24-canal部署\">#</a> 2.4 Canal 部署</h3>\n<h4 id=\"241-canal下载\"><a class=\"anchor\" href=\"#241-canal下载\">#</a> 2.4.1 canal 下载</h4>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">wget</span> https://github.com/alibaba/canal/releases/download/canal-1.1.2/canal.deployer-1.1.2.tar.gz</pre></td></tr></table></figure><h4 id=\"242-解压\"><a class=\"anchor\" href=\"#242-解压\">#</a> 2.4.2 解压</h4>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">mkdir</span> /opt/module/canal</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">tar</span> -zxvf canal.deployer-1.1.2.tar.gz -C /opt/module/canal</pre></td></tr></table></figure><h4 id=\"243-配置\"><a class=\"anchor\" href=\"#243-配置\">#</a> 2.4.3 配置</h4>\n<h5 id=\"通用配置\"><a class=\"anchor\" href=\"#通用配置\">#</a> 通用配置</h5>\n<p><strong>conf/canal.properties canal 的通用配置，主要关注下 canal.port, 默认是 11111</strong></p>\n<p>![1594983169281](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saWFuLXpwLm9zcy1jbi1zaGVuemhlbi5hbGl5dW5jcy5jb20vcGlj\">https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic</span> GO/20200719233102.png)</p>\n<blockquote>\n<p>canal.port：canal 客户端与 canal 连接的默认端口号</p>\n</blockquote>\n<h5 id=\"实例配置\"><a class=\"anchor\" href=\"#实例配置\">#</a> 实例配置</h5>\n<p><strong>conf/example/instance.properties instance.properties 是针对要追踪的 mysql 的实例配置</strong></p>\n<figure class=\"highlight properties\"><figcaption data-lang=\".properties\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#################################################</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">## mysql serverId , v1.0.26+ will autoGen</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># slaveId 必须配置，不能和 mysql 的 id 重复</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token attr-name\">canal.instance.mysql.slaveId</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">100</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\"># enable gtid use true/false</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token attr-name\">canal.instance.gtidon</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">false</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\"># position info</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\"># mysql 的位置信息</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token attr-name\">canal.instance.master.address</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">hadoop201:3306</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token attr-name\">canal.instance.master.journal.name</span><span class=\"token punctuation\">=</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token attr-name\">canal.instance.master.position</span><span class=\"token punctuation\">=</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token attr-name\">canal.instance.master.timestamp</span><span class=\"token punctuation\">=</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token attr-name\">canal.instance.master.gtid</span><span class=\"token punctuation\">=</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\"># rds oss binlog</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token attr-name\">canal.instance.rds.accesskey</span><span class=\"token punctuation\">=</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token attr-name\">canal.instance.rds.secretkey</span><span class=\"token punctuation\">=</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token attr-name\">canal.instance.rds.instanceId</span><span class=\"token punctuation\">=</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\"># table meta tsdb info</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token attr-name\">canal.instance.tsdb.enable</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">true</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token comment\">#canal.instance.tsdb.url=jdbc:mysql://127.0.0.1:3306/canal_tsdb</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token comment\">#canal.instance.tsdb.dbUsername=canal</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token comment\">#canal.instance.tsdb.dbPassword=canal</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token comment\">#canal.instance.standby.address =</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token comment\">#canal.instance.standby.journal.name =</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token comment\">#canal.instance.standby.position =</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token comment\">#canal.instance.standby.timestamp =</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token comment\">#canal.instance.standby.gtid=</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token comment\"># username/password</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token comment\"># 用户名和密码</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token attr-name\">canal.instance.dbUsername</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">root</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token attr-name\">canal.instance.dbPassword</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">aaa</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token attr-name\">canal.instance.connectionCharset</span> <span class=\"token punctuation\">=</span> <span class=\"token attr-value\">UTF-8</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token attr-name\">canal.instance.defaultDatabaseName</span> <span class=\"token attr-value\">=</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token comment\"># enable druid Decrypt database password</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token attr-name\">canal.instance.enableDruid</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">false</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token comment\">#canal.instance.pwdPublicKey=MFwwDQYJKoZIhvcNAQEBBQADSwAwSAJBALK4BUxdDltRRE5/zXpVEVPUgunvscYFtEip3pmLlhrWpacX7y7GCMo2/JM6LeHmiiNdH1FWgGCpUfircSwlWKUCAwEAAQ==</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token comment\"># table regex</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token comment\"># db.table</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token attr-name\">canal.instance.filter.regex</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">.*\\\\..*</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token comment\"># table black regex</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token attr-name\">canal.instance.filter.black.regex</span><span class=\"token punctuation\">=</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token comment\"># mq config</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre><span class=\"token attr-name\">canal.mq.topic</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">example</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre><span class=\"token attr-name\">canal.mq.partition</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">0</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre><span class=\"token comment\"># hash partition config</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre><span class=\"token comment\">#canal.mq.partitionsNum=3</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre><span class=\"token comment\">#canal.mq.partitionHash=mytest.person:id,mytest.role:id</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre><span class=\"token comment\">#################################################</span></pre></td></tr></table></figure><blockquote>\n<p>canal.instance.mysql.slaveId 不能和 mysql 主机相同</p>\n<p>canal.instance.master.address：master 的地址</p>\n<p>canal.instance.dbUsername/canal.instance.dbPassword：连接主机的验证信息</p>\n<p>canal.instance.defaultDatabaseName：默认不写</p>\n<p>canal.instance.filter.regex：以正则表达式说明要追踪哪些数据库下的哪些表</p>\n<pre><code>在java中 . ---&gt; 匹配任意一个字符  如果需要一个普通的 . 需要加\\.\n\t\t\\ ---&gt; 如果需要一个普通\\，需要加\\，即\\\\\n.*\\\\..*:表示追踪任意库下的任意表\n</code></pre>\n</blockquote>\n<h4 id=\"244-启停与查看\"><a class=\"anchor\" href=\"#244-启停与查看\">#</a> 2.4.4 启停与查看</h4>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#启动</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>bin/startup.sh</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">#停止</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>bin/stop.sh</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">#查看</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">[</span>atguigu@hadoop109 logs<span class=\"token punctuation\">]</span>$ ll</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>总用量 <span class=\"token number\">8</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>drwxrwxr-x <span class=\"token number\">2</span> atguigu atguigu <span class=\"token number\">4096</span> <span class=\"token number\">7</span>月  <span class=\"token number\">17</span> <span class=\"token number\">10</span>:40 canal</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>drwxrwxr-x <span class=\"token number\">2</span> atguigu atguigu <span class=\"token number\">4096</span> <span class=\"token number\">7</span>月  <span class=\"token number\">17</span> <span class=\"token number\">12</span>:50 example</pre></td></tr></table></figure><blockquote>\n<p>![1594983308873](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saWFuLXpwLm9zcy1jbi1zaGVuemhlbi5hbGl5dW5jcy5jb20vcGlj\">https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic</span> GO/20200719233111.png)</p>\n</blockquote>\n<h2 id=\"3-项目工程部分\"><a class=\"anchor\" href=\"#3-项目工程部分\">#</a> 3. 项目工程部分</h2>\n<p>业务数据处理部分仍从属于实时数仓一中的大项目中，属于项目的一个 module，依赖关系需要继承于父工程</p>\n<h3 id=\"31-父工程依赖\"><a class=\"anchor\" href=\"#31-父工程依赖\">#</a> 3.1 父工程依赖</h3>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>...</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>modules</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>module</span><span class=\"token punctuation\">></span></span>gmall-common<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>module</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>module</span><span class=\"token punctuation\">></span></span>gmall-mock<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>module</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>module</span><span class=\"token punctuation\">></span></span>gmall-logger<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>module</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>module</span><span class=\"token punctuation\">></span></span>gmall-realtime<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>module</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>module</span><span class=\"token punctuation\">></span></span>gmall-publisher<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>module</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>module</span><span class=\"token punctuation\">></span></span>gmall-canal<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>module</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>modules</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>...</pre></td></tr></table></figure><h2 id=\"4-数据采集部分-canal\"><a class=\"anchor\" href=\"#4-数据采集部分-canal\">#</a> 4 数据采集部分 - canal</h2>\n<p>功能：完成从 Canal 中读取数据，然后发送的 Kafka 中</p>\n<p>模块名: <code>gmall-canal</code></p>\n<p>![1594988340781](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saWFuLXpwLm9zcy1jbi1zaGVuemhlbi5hbGl5dW5jcy5jb20vcGlj\">https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic</span> GO/20200719233118.png)</p>\n<h3 id=\"41-canal读取数据\"><a class=\"anchor\" href=\"#41-canal读取数据\">#</a> 4.1 canal 读取数据</h3>\n<h4 id=\"411-依赖添加\"><a class=\"anchor\" href=\"#411-依赖添加\">#</a> 4.1.1 依赖添加</h4>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>project</span> <span class=\"token attr-name\">xmlns</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://maven.apache.org/POM/4.0.0<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>         <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>xsi</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.w3.org/2001/XMLSchema-instance<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>         <span class=\"token attr-name\"><span class=\"token namespace\">xsi:</span>schemaLocation</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>parent</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>realtime-gmall<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.orange.lin<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>1.0-SNAPSHOT<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>parent</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>modelVersion</span><span class=\"token punctuation\">></span></span>4.0.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>modelVersion</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.orange.lin<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>gmall-canal<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>1.0-SNAPSHOT<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependencies</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token comment\">&lt;!-- https://mvnrepository.com/artifact/com.alibaba.otter/canal.client --></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token comment\">&lt;!--canal 客户端，从 canal 服务器读取数据 --></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.alibaba.otter<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>canal.client<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>1.1.2<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token comment\">&lt;!-- https://mvnrepository.com/artifact/org.apache.kafka/kafka-clients --></span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token comment\">&lt;!-- kafka 客户端 --></span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.apache.kafka<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>kafka-clients<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>2.4.1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.orange.lin<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>gmall-common<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>1.0-SNAPSHOT<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependencies</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>project</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h4 id=\"412-kafka生产者工具类\"><a class=\"anchor\" href=\"#412-kafka生产者工具类\">#</a> 4.1.2 kafka 生产者工具类</h4>\n<figure class=\"highlight scala\"><figcaption data-lang=\"scala\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>orange<span class=\"token punctuation\">.</span>lin</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span>Properties</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>kafka<span class=\"token punctuation\">.</span>clients<span class=\"token punctuation\">.</span>producer<span class=\"token punctuation\">.</span></span><span class=\"token punctuation\">&#123;</span>KafkaProducer<span class=\"token punctuation\">,</span> ProducerRecord<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> * @Description:</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> * @author oranglzc</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> * @creat 2020-07-17-14:02</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">object</span> MyKafkaUtil <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token keyword\">val</span> pros <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> Properties<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  pros<span class=\"token punctuation\">.</span>setProperty<span class=\"token punctuation\">(</span><span class=\"token string\">\"bootstrap.servers\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"hadoop109:9092,hadoop110:9092,hadoop111:9092\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  pros<span class=\"token punctuation\">.</span>setProperty<span class=\"token punctuation\">(</span><span class=\"token string\">\"key.serializer\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"org.apache.kafka.common.serialization.StringSerializer\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  pros<span class=\"token punctuation\">.</span>setProperty<span class=\"token punctuation\">(</span><span class=\"token string\">\"value.serializer\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"org.apache.kafka.common.serialization.StringSerializer\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token keyword\">val</span> producer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> KafkaProducer<span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>pros<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>spring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.StringSerializer</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>   */</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token keyword\">def</span> sendToKafka<span class=\"token punctuation\">(</span>topic<span class=\"token operator\">:</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span>content<span class=\"token operator\">:</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>      producer<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> ProducerRecord<span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>topic<span class=\"token punctuation\">,</span>content<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"42-canal读取客户端并发送数据到kafka\"><a class=\"anchor\" href=\"#42-canal读取客户端并发送数据到kafka\">#</a> 4.2 canal 读取客户端并发送数据到 Kafka</h3>\n<ul>\n<li>客户端读取数据的流程\n<ol>\n<li>创建连接 cannal 的对象</li>\n<li>连接 canal</li>\n<li>订阅数据</li>\n<li>解析数据（从 canal 对数据的包装类中解析出数据）</li>\n<li>继续回到第四步，重复获取数据（实时框架一般不会停止</li>\n</ol>\n</li>\n</ul>\n<figure class=\"highlight scala\"><figcaption data-lang=\"scala\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>orange<span class=\"token punctuation\">.</span>lin</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>net<span class=\"token punctuation\">.</span></span>InetSocketAddress</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>alibaba<span class=\"token punctuation\">.</span>fastjson<span class=\"token punctuation\">.</span></span>JSONObject</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>alibaba<span class=\"token punctuation\">.</span>otter<span class=\"token punctuation\">.</span>canal<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span></span><span class=\"token punctuation\">&#123;</span>CanalConnector<span class=\"token punctuation\">,</span> CanalConnectors<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>alibaba<span class=\"token punctuation\">.</span>otter<span class=\"token punctuation\">.</span>canal<span class=\"token punctuation\">.</span>protocol<span class=\"token punctuation\">.</span></span>CanalEntry<span class=\"token punctuation\">.</span><span class=\"token punctuation\">&#123;</span>EntryType<span class=\"token punctuation\">,</span> EventType<span class=\"token punctuation\">,</span> RowChange<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>alibaba<span class=\"token punctuation\">.</span>otter<span class=\"token punctuation\">.</span>canal<span class=\"token punctuation\">.</span>protocol<span class=\"token punctuation\">.</span></span><span class=\"token punctuation\">&#123;</span>CanalEntry<span class=\"token punctuation\">,</span> Message<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>google<span class=\"token punctuation\">.</span>protobuf<span class=\"token punctuation\">.</span></span>ByteString</pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">scala<span class=\"token punctuation\">.</span>collection<span class=\"token punctuation\">.</span></span>JavaConverters<span class=\"token punctuation\">.</span>_</pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"14\"></td><td><pre> * @Description:</pre></td></tr><tr><td data-num=\"15\"></td><td><pre> * @author oranglzc</pre></td></tr><tr><td data-num=\"16\"></td><td><pre> * @creat 2020-07-17-10:51</pre></td></tr><tr><td data-num=\"17\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">object</span> CanalClient <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token keyword\">def</span> handleData<span class=\"token punctuation\">(</span>rowDatas<span class=\"token operator\">:</span> util<span class=\"token punctuation\">.</span>List<span class=\"token punctuation\">[</span>CanalEntry<span class=\"token punctuation\">.</span>RowData<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                 tableName<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                 eventType<span class=\"token operator\">:</span> CanalEntry<span class=\"token punctuation\">.</span>EventType<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>tableName<span class=\"token operator\">==</span><span class=\"token string\">\"order_info\"</span><span class=\"token operator\">&amp;&amp;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>      eventType<span class=\"token operator\">==</span>EventType<span class=\"token punctuation\">.</span>INSERT<span class=\"token operator\">&amp;&amp;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>      rowDatas<span class=\"token operator\">!=</span><span class=\"token keyword\">null</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>      <span class=\"token operator\">&amp;&amp;</span>rowDatas<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>      <span class=\"token comment\">// 变化后的列</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>      <span class=\"token comment\">//mysql 中的一行数据 对应 kafka 中的 一条</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>rowData<span class=\"token keyword\">&lt;-</span>rowDatas<span class=\"token punctuation\">.</span>asScala<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>          <span class=\"token keyword\">val</span> obj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> JSONObject<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>          <span class=\"token keyword\">val</span> columnsList<span class=\"token operator\">:</span> util<span class=\"token punctuation\">.</span>List<span class=\"token punctuation\">[</span>CanalEntry<span class=\"token punctuation\">.</span>Column<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> rowData<span class=\"token punctuation\">.</span>getAfterColumnsList</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>          <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>column<span class=\"token keyword\">&lt;-</span>columnsList<span class=\"token punctuation\">.</span>asScala<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            <span class=\"token comment\">// id: 100  total_amount: 1000.2</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            <span class=\"token keyword\">val</span> key<span class=\"token operator\">=</span>column<span class=\"token punctuation\">.</span>getName</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            <span class=\"token keyword\">val</span> value<span class=\"token operator\">=</span>column<span class=\"token punctuation\">.</span>getValue</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            obj<span class=\"token punctuation\">.</span>put<span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span>value<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token comment\">//          println(obj.toJSONString) //test</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>          <span class=\"token comment\">// 4. 解析后的数据，组成 json 字符串，写入到 kafka</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>          MyKafkaUtil<span class=\"token punctuation\">.</span>sendToKafka<span class=\"token punctuation\">(</span>Constant<span class=\"token punctuation\">.</span>ORDER_INFO_TOPIC<span class=\"token punctuation\">,</span>obj<span class=\"token punctuation\">.</span>toJSONString<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>  <span class=\"token keyword\">def</span> main<span class=\"token punctuation\">(</span>args<span class=\"token operator\">:</span> Array<span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Unit</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token comment\">// 1. 连接 canal</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token keyword\">val</span> connector<span class=\"token operator\">:</span> CanalConnector <span class=\"token operator\">=</span> CanalConnectors<span class=\"token punctuation\">.</span>newSingleConnector<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>      <span class=\"token keyword\">new</span> InetSocketAddress<span class=\"token punctuation\">(</span><span class=\"token string\">\"hadoop109\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11111</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>      <span class=\"token string\">\"example\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>      <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>      <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token comment\">// 连接 canal 服务器</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    connector<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token comment\">// 2. 拉取数据</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token comment\">// 2.1 订阅想读的数据</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    connector<span class=\"token punctuation\">.</span>subscribe<span class=\"token punctuation\">(</span><span class=\"token string\">\"gmall0213.*\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    <span class=\"token comment\">// 2.2 拉取</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>      <span class=\"token comment\">// 100 表示最多拉取由于 100 条 sql 导致变化的数据.</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>      <span class=\"token comment\">// 所有的数据封装到一个 Message 中</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>      <span class=\"token keyword\">val</span> message<span class=\"token operator\">:</span> Message <span class=\"token operator\">=</span> connector<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>      <span class=\"token comment\">// 3. 解析数据</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>      <span class=\"token keyword\">val</span> entries<span class=\"token operator\">:</span> util<span class=\"token punctuation\">.</span>List<span class=\"token punctuation\">[</span>CanalEntry<span class=\"token punctuation\">.</span>Entry<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> message<span class=\"token punctuation\">.</span>getEntries</pre></td></tr><tr><td data-num=\"67\"></td><td><pre></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>      <span class=\"token comment\">// 解析数据</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>entries<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>entry <span class=\"token keyword\">&lt;-</span> entries<span class=\"token punctuation\">.</span>asScala<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>          <span class=\"token comment\">//entry 类型必须是行变化</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>          <span class=\"token comment\">//entry 的类型必须是 ROWDATA</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>entry <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>            entry<span class=\"token punctuation\">.</span>hasEntryType <span class=\"token operator\">&amp;&amp;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>            entry<span class=\"token punctuation\">.</span>getEntryType <span class=\"token operator\">==</span> EntryType<span class=\"token punctuation\">.</span>ROWDATA<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>            <span class=\"token keyword\">val</span> value<span class=\"token operator\">:</span> ByteString <span class=\"token operator\">=</span> entry<span class=\"token punctuation\">.</span>getStoreValue</pre></td></tr><tr><td data-num=\"80\"></td><td><pre>            <span class=\"token keyword\">val</span> rowChange<span class=\"token operator\">:</span> RowChange <span class=\"token operator\">=</span> RowChange<span class=\"token punctuation\">.</span>parseFrom<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>            <span class=\"token comment\">// 所有行变化的数据</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>            <span class=\"token keyword\">val</span> rowDatasList<span class=\"token operator\">:</span> util<span class=\"token punctuation\">.</span>List<span class=\"token punctuation\">[</span>CanalEntry<span class=\"token punctuation\">.</span>RowData<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> rowChange<span class=\"token punctuation\">.</span>getRowDatasList</pre></td></tr><tr><td data-num=\"83\"></td><td><pre></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>            handleData<span class=\"token punctuation\">(</span>rowDatasList<span class=\"token punctuation\">,</span>entry<span class=\"token punctuation\">.</span>getHeader<span class=\"token punctuation\">.</span>getTableName<span class=\"token punctuation\">,</span>rowChange<span class=\"token punctuation\">.</span>getEventType<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 没有拉取到数据</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>        println<span class=\"token punctuation\">(</span><span class=\"token string\">\"没有抓取到数据......,3S之后重新抓取\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>        Thread<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token comment\">// 休眠 3 秒后继续拉取数据</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre></pre></td></tr><tr><td data-num=\"94\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>![1594988792335](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saWFuLXpwLm9zcy1jbi1zaGVuemhlbi5hbGl5dW5jcy5jb20vcGlj\">https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic</span> GO/20200719233129.png)</p>\n<p>StoreValue 是 Entry 的一个属性</p>\n<p>RowChange：多行数据的变化，不包含事务、心跳等变化</p>\n<p>RowData：一行数据，里面有列信息</p>\n<p>列信息里：有列名和列值</p>\n</blockquote>\n<h2 id=\"5-实时处理部分-sparkstreaming重要\"><a class=\"anchor\" href=\"#5-实时处理部分-sparkstreaming重要\">#</a> 5 实时处理部分 -- SparkStreaming（重要）</h2>\n<p>![1594990105699](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saWFuLXpwLm9zcy1jbi1zaGVuemhlbi5hbGl5dW5jcy5jb20vcGlj\">https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic</span> GO/20200719233136.png)</p>\n<p>该部分从属于实时数仓一中的实时处理模块，属于同一 module 下的多个指标</p>\n<h3 id=\"51-从kafka消费流\"><a class=\"anchor\" href=\"#51-从kafka消费流\">#</a> 5.1 从 Kafka 消费流</h3>\n<figure class=\"highlight scala\"><figcaption data-lang=\"scala\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>orange<span class=\"token punctuation\">.</span>lin<span class=\"token punctuation\">.</span>app</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>alibaba<span class=\"token punctuation\">.</span>fastjson<span class=\"token punctuation\">.</span></span>JSON</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>orange<span class=\"token punctuation\">.</span>lin<span class=\"token punctuation\">.</span></span>Constant</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>orange<span class=\"token punctuation\">.</span>lin<span class=\"token punctuation\">.</span>bean<span class=\"token punctuation\">.</span></span>OrderInfo</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>orange<span class=\"token punctuation\">.</span>lin<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span>MyKafkaUtil</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>spark<span class=\"token punctuation\">.</span>streaming<span class=\"token punctuation\">.</span></span>StreamingContext</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>spark<span class=\"token punctuation\">.</span>streaming<span class=\"token punctuation\">.</span>dstream<span class=\"token punctuation\">.</span></span>DStream</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> * @Description:</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> * @author oranglzc</pre></td></tr><tr><td data-num=\"12\"></td><td><pre> * @creat 2020-07-17-15:56</pre></td></tr><tr><td data-num=\"13\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">object</span>  OrderApp <span class=\"token keyword\">extends</span> BaseApp <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token keyword\">override</span> <span class=\"token keyword\">def</span> run<span class=\"token punctuation\">(</span>ssc<span class=\"token operator\">:</span> StreamingContext<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Unit</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">// 获取流</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      <span class=\"token keyword\">val</span> ds<span class=\"token operator\">:</span> DStream<span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> MyKafkaUtil<span class=\"token punctuation\">.</span>getKafkaStream<span class=\"token punctuation\">(</span>ssc<span class=\"token punctuation\">,</span>Constant<span class=\"token punctuation\">.</span>ORDER_INFO_TOPIC<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"52-数据结构转换与脱敏\"><a class=\"anchor\" href=\"#52-数据结构转换与脱敏\">#</a> 5.2 数据结构转换与脱敏</h3>\n<h4 id=\"样例类的生成\"><a class=\"anchor\" href=\"#样例类的生成\">#</a> 样例类的生成</h4>\n<figure class=\"highlight scala\"><figcaption data-lang=\"scala\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>orange<span class=\"token punctuation\">.</span>lin<span class=\"token punctuation\">.</span>bean</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @Description:</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @author oranglzc</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @creat 2020-07-17-16:06</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">case</span> <span class=\"token keyword\">class</span> OrderInfo<span class=\"token punctuation\">(</span>id<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                     province_id<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                     <span class=\"token keyword\">var</span> consignee<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                     order_comment<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                     <span class=\"token keyword\">var</span> consignee_tel<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                     order_status<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                     payment_way<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                     user_id<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                     img_url<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                     total_amount<span class=\"token operator\">:</span> <span class=\"token builtin\">Double</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                     expire_time<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                     delivery_address<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                     create_time<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                     operate_time<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                     tracking_no<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                     parent_order_id<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                     out_trade_no<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                     trade_body<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                     <span class=\"token keyword\">var</span> create_date<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                     <span class=\"token keyword\">var</span> create_hour<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  <span class=\"token comment\">//2020-07-17 03:18:55</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  create_date<span class=\"token operator\">=</span>create_time<span class=\"token punctuation\">.</span>substring<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  create_hour<span class=\"token operator\">=</span>create_time<span class=\"token punctuation\">.</span>substring<span class=\"token punctuation\">(</span><span class=\"token number\">11</span><span class=\"token punctuation\">,</span><span class=\"token number\">13</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>  <span class=\"token comment\">// 敏感信息脱敏 -- 姓名</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>  consignee<span class=\"token operator\">=</span>consignee<span class=\"token punctuation\">.</span>substring<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">\"**\"</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>  <span class=\"token comment\">// 手机号码</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>  consignee_tel<span class=\"token operator\">=</span>consignee_tel<span class=\"token punctuation\">.</span>replaceAll<span class=\"token punctuation\">(</span><span class=\"token string\">\"(\\\\d&#123;3&#125;)\\\\d&#123;4&#125;(\\\\d&#123;4&#125;)\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"$1****$2\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>在样例类中脱敏数据，对用户姓名、手机号码等信息进行脱敏</p>\n</blockquote>\n<h4 id=\"数据结构转化\"><a class=\"anchor\" href=\"#数据结构转化\">#</a> 数据结构转化</h4>\n<figure class=\"highlight scala\"><figcaption data-lang=\"scala\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>orange<span class=\"token punctuation\">.</span>lin<span class=\"token punctuation\">.</span>app</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>alibaba<span class=\"token punctuation\">.</span>fastjson<span class=\"token punctuation\">.</span></span>JSON</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>orange<span class=\"token punctuation\">.</span>lin<span class=\"token punctuation\">.</span></span>Constant</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>orange<span class=\"token punctuation\">.</span>lin<span class=\"token punctuation\">.</span>bean<span class=\"token punctuation\">.</span></span>OrderInfo</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>orange<span class=\"token punctuation\">.</span>lin<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span>MyKafkaUtil</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>spark<span class=\"token punctuation\">.</span>streaming<span class=\"token punctuation\">.</span></span>StreamingContext</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>spark<span class=\"token punctuation\">.</span>streaming<span class=\"token punctuation\">.</span>dstream<span class=\"token punctuation\">.</span></span>DStream</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> * @Description:</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> * @author oranglzc</pre></td></tr><tr><td data-num=\"12\"></td><td><pre> * @creat 2020-07-17-15:56</pre></td></tr><tr><td data-num=\"13\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">object</span>  OrderApp <span class=\"token keyword\">extends</span> BaseApp <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token keyword\">override</span> <span class=\"token keyword\">def</span> run<span class=\"token punctuation\">(</span>ssc<span class=\"token operator\">:</span> StreamingContext<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Unit</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">// 获取流</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      <span class=\"token keyword\">val</span> ds<span class=\"token operator\">:</span> DStream<span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> MyKafkaUtil<span class=\"token punctuation\">.</span>getKafkaStream<span class=\"token punctuation\">(</span>ssc<span class=\"token punctuation\">,</span>Constant<span class=\"token punctuation\">.</span>ORDER_INFO_TOPIC<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token comment\">// 结构转化</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      <span class=\"token keyword\">val</span> orderInfoStream<span class=\"token operator\">:</span> DStream<span class=\"token punctuation\">[</span>OrderInfo<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> ds<span class=\"token punctuation\">.</span>map<span class=\"token punctuation\">(</span>jsonStr<span class=\"token keyword\">=></span>JSON<span class=\"token punctuation\">.</span>parseObject<span class=\"token punctuation\">(</span>jsonStr<span class=\"token punctuation\">,</span>classOf<span class=\"token punctuation\">[</span>OrderInfo<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"53-流的输出-hbase\"><a class=\"anchor\" href=\"#53-流的输出-hbase\">#</a> 5.3 流的输出 - HBase</h3>\n<figure class=\"highlight scala\"><figcaption data-lang=\"scala\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>orange<span class=\"token punctuation\">.</span>lin<span class=\"token punctuation\">.</span>app</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>alibaba<span class=\"token punctuation\">.</span>fastjson<span class=\"token punctuation\">.</span></span>JSON</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>orange<span class=\"token punctuation\">.</span>lin<span class=\"token punctuation\">.</span></span>Constant</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>orange<span class=\"token punctuation\">.</span>lin<span class=\"token punctuation\">.</span>bean<span class=\"token punctuation\">.</span></span>OrderInfo</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>orange<span class=\"token punctuation\">.</span>lin<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span>MyKafkaUtil</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>spark<span class=\"token punctuation\">.</span>streaming<span class=\"token punctuation\">.</span></span>StreamingContext</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>spark<span class=\"token punctuation\">.</span>streaming<span class=\"token punctuation\">.</span>dstream<span class=\"token punctuation\">.</span></span>DStream</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> * @Description:</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> * @author oranglzc</pre></td></tr><tr><td data-num=\"12\"></td><td><pre> * @creat 2020-07-17-15:56</pre></td></tr><tr><td data-num=\"13\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">object</span>  OrderApp <span class=\"token keyword\">extends</span> BaseApp <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token keyword\">override</span> <span class=\"token keyword\">def</span> run<span class=\"token punctuation\">(</span>ssc<span class=\"token operator\">:</span> StreamingContext<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Unit</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">// 获取流</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      <span class=\"token keyword\">val</span> ds<span class=\"token operator\">:</span> DStream<span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> MyKafkaUtil<span class=\"token punctuation\">.</span>getKafkaStream<span class=\"token punctuation\">(</span>ssc<span class=\"token punctuation\">,</span>Constant<span class=\"token punctuation\">.</span>ORDER_INFO_TOPIC<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token comment\">// 结构转化</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      <span class=\"token keyword\">val</span> orderInfoStream<span class=\"token operator\">:</span> DStream<span class=\"token punctuation\">[</span>OrderInfo<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> ds<span class=\"token punctuation\">.</span>map<span class=\"token punctuation\">(</span>jsonStr<span class=\"token keyword\">=></span>JSON<span class=\"token punctuation\">.</span>parseObject<span class=\"token punctuation\">(</span>jsonStr<span class=\"token punctuation\">,</span>classOf<span class=\"token punctuation\">[</span>OrderInfo<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token comment\">// 把数据写入 HBase</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    orderInfoStream<span class=\"token punctuation\">.</span>foreachRDD<span class=\"token punctuation\">(</span>rdd<span class=\"token keyword\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>      <span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>phoenix<span class=\"token punctuation\">.</span>spark<span class=\"token punctuation\">.</span></span>_</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>      rdd<span class=\"token punctuation\">.</span>saveToPhoenix<span class=\"token punctuation\">(</span><span class=\"token string\">\"GMALL_ORDER_INFO\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        Seq<span class=\"token punctuation\">(</span><span class=\"token string\">\"ID\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"PROVINCE_ID\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"CONSIGNEE\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"ORDER_COMMENT\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"CONSIGNEE_TEL\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"ORDER_STATUS\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"PAYMENT_WAY\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"USER_ID\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"IMG_URL\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"TOTAL_AMOUNT\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"EXPIRE_TIME\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"DELIVERY_ADDRESS\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"CREATE_TIME\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"OPERATE_TIME\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"TRACKING_NO\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"PARENT_ORDER_ID\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"OUT_TRADE_NO\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"TRADE_BODY\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"CREATE_DATE\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"CREATE_HOUR\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        zkUrl <span class=\"token operator\">=</span> Option<span class=\"token punctuation\">(</span><span class=\"token string\">\"hadoop109,hadoop110,hadoop111:2181\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>      <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"6-数据查询接口\"><a class=\"anchor\" href=\"#6-数据查询接口\">#</a> 6 数据查询接口</h2>\n<p>需求 1：销售总额 sum (total_amount)</p>\n<p>需求 2：分时销售总额 ，（按小时分组后求取 sum）</p>\n<h3 id=\"61-模块从属说明\"><a class=\"anchor\" href=\"#61-模块从属说明\">#</a> 6.1 模块从属说明</h3>\n<p>该查询接口与实时数仓一同属与 <code>gmall-publisher</code> ，属于一个查询接口下的多个指标</p>\n<h3 id=\"62-mapper数据层\"><a class=\"anchor\" href=\"#62-mapper数据层\">#</a> 6.2 Mapper 数据层</h3>\n<h4 id=\"621-mapper层接口类\"><a class=\"anchor\" href=\"#621-mapper层接口类\">#</a> 6.2.1 Mapper 层接口类</h4>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>orange<span class=\"token punctuation\">.</span>lin<span class=\"token punctuation\">.</span>gmallpublisher<span class=\"token punctuation\">.</span>mapper</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">List</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Map</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * @author oranglzc</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> * @Description:</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> * @creat 2020-07-17-16:29</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">OrderMapper</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">// 当日的销售总额</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token class-name\">Double</span> <span class=\"token function\">getTotalAmount</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\">// 当日销售额的时分统计</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Map</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getHourAmount</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"622-数据层xml文件\"><a class=\"anchor\" href=\"#622-数据层xml文件\">#</a> 6.2.2 数据层 XML 文件</h4>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">mapper</span> <span class=\"token name\">SYSTEM</span> <span class=\"token string\">\"http://mybatis.org/dtd/mybatis-3-mapper.dtd\"</span> <span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">&lt;!--namespace 对应前面定义的接口 --></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>mapper</span> <span class=\"token attr-name\">namespace</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.orange.lin.gmallpublisher.mapper.OrderMapper<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">&lt;!-- 对应前面接口中的方法，标签内写响应的查询语句，查询的接口会赋值给这个方法的返回值 --></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>select</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>getTotalAmount<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">resultType</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>java.lang.Double<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        select sum(TOTAL_AMOUNT) from GMALL_ORDER_INFO where CREATE_DATE=#&#123;date &#125;</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>select</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>select</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>getHourAmount<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">resultMap</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>hourOrderList<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        select CREATE_HOUR,sum(TOTAL_AMOUNT) SUM from GMALL_ORDER_INFO where CREATE_DATE=#&#123;date&#125; group by CREATE_HOUR</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>select</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>resultMap</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>hourOrderList<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>java.util.Map<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>resultMap</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>mapper</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h3 id=\"63-service服务层\"><a class=\"anchor\" href=\"#63-service服务层\">#</a> 6.3 Service 服务层</h3>\n<h4 id=\"631-service层接口\"><a class=\"anchor\" href=\"#631-service层接口\">#</a> 6.3.1 Service 层接口</h4>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>orange<span class=\"token punctuation\">.</span>lin<span class=\"token punctuation\">.</span>gmallpublisher<span class=\"token punctuation\">.</span>service</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>stereotype<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Service</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Map</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> * @author oranglzc</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> * @Description:</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> * @creat 2020-07-15-16:04</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">PublisherService</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\">// 获取总得日活</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token class-name\">Long</span> <span class=\"token function\">getDau</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>       <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        数据层</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        // List (Map (\"loghour\": \"10\", count: 100), Map,.....)</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        List&lt;Map&lt;String, Object>> getHourDau (String date);</pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        //  Map (\"10\"->100, \"11\"->200. \"12\"->100)</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Long</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getHourDau</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token comment\">//==========================================</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token comment\">// 销售总额</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token class-name\">Double</span> <span class=\"token function\">getTotalAmount</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token comment\">// 分时销售总额</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Double</span><span class=\"token punctuation\">></span></span><span class=\"token function\">getHourAmount</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"632-service层实现类\"><a class=\"anchor\" href=\"#632-service层实现类\">#</a> 6.3.2 Service 层实现类</h4>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>orange<span class=\"token punctuation\">.</span>lin<span class=\"token punctuation\">.</span>gmallpublisher<span class=\"token punctuation\">.</span>service</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>orange<span class=\"token punctuation\">.</span>lin<span class=\"token punctuation\">.</span>gmallpublisher<span class=\"token punctuation\">.</span>mapper<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">DauMapper</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>orange<span class=\"token punctuation\">.</span>lin<span class=\"token punctuation\">.</span>gmallpublisher<span class=\"token punctuation\">.</span>mapper<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">OrderMapper</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>beans<span class=\"token punctuation\">.</span>factory<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Autowired</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>stereotype<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Service</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>math<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">BigDecimal</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HashMap</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">List</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Map</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"14\"></td><td><pre> * @author oranglzc</pre></td></tr><tr><td data-num=\"15\"></td><td><pre> * @Description:</pre></td></tr><tr><td data-num=\"16\"></td><td><pre> * @creat 2020-07-15-16:05</pre></td></tr><tr><td data-num=\"17\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token annotation punctuation\">@Service</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PublisherServiceImp</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">PublisherService</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token class-name\">DauMapper</span> dau<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Long</span> <span class=\"token function\">getDau</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> date<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">return</span> dau<span class=\"token punctuation\">.</span><span class=\"token function\">getDau</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  数据层</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>  // List (Map (\"loghour\": \"10\", count: 100), Map,.....)</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>  List&lt;Map&lt;String, Object>> getHourDau (String date);</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>  select LOGHOUR, count (*) COUNT from GMALL_DAU where LOGDATE=#&#123;date &#125; group by LOGHOUR</pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>  //  Map (\"10\"->100, \"11\"->200. \"12\"->100)</pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Long</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getHourDau</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> date<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Map</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> hourDau <span class=\"token operator\">=</span> dau<span class=\"token punctuation\">.</span><span class=\"token function\">getHourDau</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Long</span><span class=\"token punctuation\">></span></span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> map <span class=\"token operator\">:</span> hourDau<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>            <span class=\"token class-name\">String</span> key <span class=\"token operator\">=</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"LOGHOUR\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>            <span class=\"token class-name\">Long</span> value <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Long</span><span class=\"token punctuation\">)</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"COUNT\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>            result<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token comment\">// 以上为日活指标</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token comment\">//========================================</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token class-name\">OrderMapper</span> order<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Double</span> <span class=\"token function\">getTotalAmount</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> date<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        <span class=\"token class-name\">Double</span> result <span class=\"token operator\">=</span> order<span class=\"token punctuation\">.</span><span class=\"token function\">getTotalAmount</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>        <span class=\"token keyword\">return</span> result <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">?</span> <span class=\"token number\">0</span> <span class=\"token operator\">:</span> result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Double</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getHourAmount</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> date<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Map</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> hourAmount <span class=\"token operator\">=</span> order<span class=\"token punctuation\">.</span><span class=\"token function\">getHourAmount</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>        <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Double</span><span class=\"token punctuation\">></span></span> resultMap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> map <span class=\"token operator\">:</span> hourAmount<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>            <span class=\"token class-name\">String</span> key <span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"CREATE_HOUR\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>            <span class=\"token keyword\">double</span> value <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BigDecimal</span><span class=\"token punctuation\">)</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SUM\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">doubleValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>            resultMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>        <span class=\"token keyword\">return</span> resultMap<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"64-controller控制层\"><a class=\"anchor\" href=\"#64-controller控制层\">#</a> 6.4 controller 控制层</h3>\n<blockquote>\n<p>补充显示销售总额部分以及分时统计部分</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>orange<span class=\"token punctuation\">.</span>lin<span class=\"token punctuation\">.</span>gmallpublisher<span class=\"token punctuation\">.</span>controller</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>alibaba<span class=\"token punctuation\">.</span>fastjson<span class=\"token punctuation\">.</span></span>JSON<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>orange<span class=\"token punctuation\">.</span>lin<span class=\"token punctuation\">.</span>gmallpublisher<span class=\"token punctuation\">.</span>service<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">PublisherService</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">it<span class=\"token punctuation\">.</span>unimi<span class=\"token punctuation\">.</span>dsi<span class=\"token punctuation\">.</span>fastutil<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Hash</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>beans<span class=\"token punctuation\">.</span>factory<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Autowired</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">GetMapping</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RestController</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">LocalDate</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"14\"></td><td><pre> * @author oranglzc</pre></td></tr><tr><td data-num=\"15\"></td><td><pre> * @Description:</pre></td></tr><tr><td data-num=\"16\"></td><td><pre> * @creat 2020-07-15-16:07</pre></td></tr><tr><td data-num=\"17\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token annotation punctuation\">@RestController</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> publisherController <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token class-name\">PublisherService</span> service<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/realtime-total\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">public</span>  <span class=\"token class-name\">String</span> <span class=\"token function\">realtimeTotal</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token comment\">// 日活相关</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token class-name\">Long</span> dau <span class=\"token operator\">=</span> service<span class=\"token punctuation\">.</span><span class=\"token function\">getDau</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token comment\">//json 字符串先用 java 的数据结构表示，最后使用 json 序列化工具直接转成 json 字符串</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Map</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> map1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        result<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>map1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        map1<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"dau\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        map1<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"新增日活\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        map1<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"value\"</span><span class=\"token punctuation\">,</span> dau<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> map2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        result<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>map2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        map2<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"new_mid\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        map2<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"新增设备\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        map2<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"value\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"233\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token comment\">// 销售总额</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token comment\">//&#123;\"id\":\"order_amount\",\"name\":\"新增交易额\",\"value\":1000.2&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> map3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        result<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>map3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        map3<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"order_amount\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        map3<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"新增交易额\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        map3<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"value\"</span><span class=\"token punctuation\">,</span> service<span class=\"token punctuation\">.</span><span class=\"token function\">getTotalAmount</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        <span class=\"token keyword\">return</span> JSON<span class=\"token punctuation\">.</span><span class=\"token function\">toJSONString</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/realtime-hour\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getRealTimeHour</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> id<span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span> date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"dau\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>            <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Long</span><span class=\"token punctuation\">></span></span> today <span class=\"token operator\">=</span> service<span class=\"token punctuation\">.</span><span class=\"token function\">getHourDau</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>            <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Long</span><span class=\"token punctuation\">></span></span> yesterday <span class=\"token operator\">=</span> service<span class=\"token punctuation\">.</span><span class=\"token function\">getHourDau</span><span class=\"token punctuation\">(</span><span class=\"token function\">getYesterday</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>                        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"60\"></td><td><pre>            &#123;\"yesterday\":&#123;\"11\":383,\"12\":123,\"17\":88,\"19\":200 &#125;,</pre></td></tr><tr><td data-num=\"61\"></td><td><pre>                \"today\":&#123;\"12\":38,\"13\":1233,\"17\":123,\"19\":688 &#125;&#125;</pre></td></tr><tr><td data-num=\"62\"></td><td><pre>             */</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>            <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span> <span class=\"token punctuation\">,</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Long</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>            result<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"today\"</span><span class=\"token punctuation\">,</span> today<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>            result<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"yesterday\"</span><span class=\"token punctuation\">,</span> yesterday<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>            <span class=\"token keyword\">return</span> JSON<span class=\"token punctuation\">.</span><span class=\"token function\">toJSONString</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"order_amount\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>            <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Double</span><span class=\"token punctuation\">></span></span> today <span class=\"token operator\">=</span> service<span class=\"token punctuation\">.</span><span class=\"token function\">getHourAmount</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>            <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Double</span><span class=\"token punctuation\">></span></span> yesterday <span class=\"token operator\">=</span> service<span class=\"token punctuation\">.</span><span class=\"token function\">getHourAmount</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>            <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span> <span class=\"token punctuation\">,</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Double</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>            result<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"today\"</span><span class=\"token punctuation\">,</span> today<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>            result<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"yesterday\"</span><span class=\"token punctuation\">,</span> yesterday<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>            <span class=\"token keyword\">return</span> JSON<span class=\"token punctuation\">.</span><span class=\"token function\">toJSONString</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>        <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>            <span class=\"token keyword\">return</span>  <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"83\"></td><td><pre>     * 返回昨天的年月日</pre></td></tr><tr><td data-num=\"84\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"85\"></td><td><pre>     * @param date</pre></td></tr><tr><td data-num=\"86\"></td><td><pre>     * @return</pre></td></tr><tr><td data-num=\"87\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getYesterday</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> date<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token class-name\">LocalDate</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">plusDays</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre></pre></td></tr><tr><td data-num=\"92\"></td><td><pre></pre></td></tr><tr><td data-num=\"93\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre></pre></td></tr><tr><td data-num=\"95\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"96\"></td><td><pre>1.\t日活总数:</pre></td></tr><tr><td data-num=\"97\"></td><td><pre>http://localhost:8070/realtime-total?date=2020-02-11</pre></td></tr><tr><td data-num=\"98\"></td><td><pre></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>2.\t日活分时统计</pre></td></tr><tr><td data-num=\"100\"></td><td><pre>http://localhost:8070/realtime-hour?id=dau&amp;date=2020-07-15</pre></td></tr><tr><td data-num=\"101\"></td><td><pre></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>1.\t日活总数</pre></td></tr><tr><td data-num=\"103\"></td><td><pre>[&#123;\"id\":\"dau\",\"name\":\"新增日活\",\"value\":1200&#125;,</pre></td></tr><tr><td data-num=\"104\"></td><td><pre>&#123;\"id\":\"new_mid\",\"name\":\"新增设备\",\"value\":233&#125; ]</pre></td></tr><tr><td data-num=\"105\"></td><td><pre></pre></td></tr><tr><td data-num=\"106\"></td><td><pre></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>2.\t日活分时统计</pre></td></tr><tr><td data-num=\"108\"></td><td><pre>&#123;\"yesterday\":&#123;\"11\":383,\"12\":123,\"17\":88,\"19\":200 &#125;,</pre></td></tr><tr><td data-num=\"109\"></td><td><pre>\"today\":&#123;\"12\":38,\"13\":1233,\"17\":123,\"19\":688 &#125;&#125;</pre></td></tr><tr><td data-num=\"110\"></td><td><pre></pre></td></tr><tr><td data-num=\"111\"></td><td><pre></pre></td></tr><tr><td data-num=\"112\"></td><td><pre></pre></td></tr><tr><td data-num=\"113\"></td><td><pre> */</span></pre></td></tr></table></figure><h2 id=\"7-数据可视化\"><a class=\"anchor\" href=\"#7-数据可视化\">#</a> 7 数据可视化</h2>\n<p>无</p>\n<h2 id=\"8-数据完整启动流程\"><a class=\"anchor\" href=\"#8-数据完整启动流程\">#</a> 8 数据完整启动流程</h2>\n<ol>\n<li>启动 HDFS、Zookeeper、Kafka、HBase</li>\n<li>启动 publisher 数据接口</li>\n<li>启动 OrderApp 流处理</li>\n<li>启动 Canal 客户端接收业务数据后作为 Kafka 集群生产者</li>\n<li>启动 mysql 客户端，选中相应数据库，使用存储过程</li>\n</ol>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">call</span> init_data<span class=\"token punctuation\">(</span><span class=\"token string\">\"2019-05-16\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ol start=\"6\">\n<li>启动数据可视化工具（可选）</li>\n</ol>\n<blockquote>\n<p>重读第四步，观察数据变化</p>\n<p>![1594991582828](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saWFuLXpwLm9zcy1jbi1zaGVuemhlbi5hbGl5dW5jcy5jb20vcGlj\">https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic</span> GO/20200719233152.png)</p>\n</blockquote>\n<h2 id=\"补充-正则表达式\"><a class=\"anchor\" href=\"#补充-正则表达式\">#</a> 补充 正则表达式</h2>\n<pre><code>grep -e 使用扩展正则表达式\n\n</code></pre>\n<h3 id=\"通配符\"><a class=\"anchor\" href=\"#通配符\">#</a> 通配符</h3>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>atguigu@hadoop109 ~<span class=\"token punctuation\">]</span>$ <span class=\"token function\">touch</span> a</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">[</span>atguigu@hadoop109 ~<span class=\"token punctuation\">]</span>$ <span class=\"token function\">touch</span> ab</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">[</span>atguigu@hadoop109 ~<span class=\"token punctuation\">]</span>$ <span class=\"token function\">touch</span> abc</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">[</span>atguigu@hadoop109 ~<span class=\"token punctuation\">]</span>$ <span class=\"token function\">touch</span> xyz</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">[</span>atguigu@hadoop109 ~<span class=\"token punctuation\">]</span>$ ll</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>总用量 <span class=\"token number\">4</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>-rw-rw-r--  <span class=\"token number\">1</span> atguigu atguigu    <span class=\"token number\">0</span> <span class=\"token number\">7</span>月  <span class=\"token number\">17</span> <span class=\"token number\">19</span>:29 a</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>-rw-rw-r--  <span class=\"token number\">1</span> atguigu atguigu    <span class=\"token number\">0</span> <span class=\"token number\">7</span>月  <span class=\"token number\">17</span> <span class=\"token number\">19</span>:29 ab</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>-rw-rw-r--  <span class=\"token number\">1</span> atguigu atguigu    <span class=\"token number\">0</span> <span class=\"token number\">7</span>月  <span class=\"token number\">17</span> <span class=\"token number\">19</span>:29 abc</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>drwxrwxr-x. <span class=\"token number\">2</span> atguigu atguigu <span class=\"token number\">4096</span> <span class=\"token number\">7</span>月  <span class=\"token number\">15</span> <span class=\"token number\">16</span>:43 bin</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>-rw-rw-r--  <span class=\"token number\">1</span> atguigu atguigu    <span class=\"token number\">0</span> <span class=\"token number\">7</span>月  <span class=\"token number\">17</span> <span class=\"token number\">19</span>:29 xyz</pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">#1. 找出文件名以 a 开头的</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">[</span>atguigu@hadoop109 ~<span class=\"token punctuation\">]</span>$ <span class=\"token function\">ls</span> -l a*</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>-rw-rw-r-- <span class=\"token number\">1</span> atguigu atguigu <span class=\"token number\">0</span> <span class=\"token number\">7</span>月  <span class=\"token number\">17</span> <span class=\"token number\">19</span>:29 a</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>-rw-rw-r-- <span class=\"token number\">1</span> atguigu atguigu <span class=\"token number\">0</span> <span class=\"token number\">7</span>月  <span class=\"token number\">17</span> <span class=\"token number\">19</span>:29 ab</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>-rw-rw-r-- <span class=\"token number\">1</span> atguigu atguigu <span class=\"token number\">0</span> <span class=\"token number\">7</span>月  <span class=\"token number\">17</span> <span class=\"token number\">19</span>:29 abc</pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\"># * ：0 - 多个任意字符</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\">#2. 找出文件名以 a 开头的，文件名只有 2 个字符的</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">[</span>atguigu@hadoop109 ~<span class=\"token punctuation\">]</span>$ <span class=\"token function\">ls</span> -l ./a?</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>-rw-rw-r-- <span class=\"token number\">1</span> atguigu atguigu <span class=\"token number\">0</span> <span class=\"token number\">7</span>月  <span class=\"token number\">17</span> <span class=\"token number\">19</span>:29 ab</pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token comment\">#3. 找出文件名以 a 开头的，文件名只有 3 个字符的</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">[</span>atguigu@hadoop109 ~<span class=\"token punctuation\">]</span>$ <span class=\"token function\">ls</span> -l a??</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>-rw-rw-r-- <span class=\"token number\">1</span> atguigu atguigu <span class=\"token number\">0</span> <span class=\"token number\">7</span>月  <span class=\"token number\">17</span> <span class=\"token number\">19</span>:29 abc</pre></td></tr></table></figure><h3 id=\"匹配操作符\"><a class=\"anchor\" href=\"#匹配操作符\">#</a> 匹配操作符</h3>\n<p>![1594985763967](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saWFuLXpwLm9zcy1jbi1zaGVuemhlbi5hbGl5dW5jcy5jb20vcGlj\">https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic</span> GO/20200719233204.png)</p>\n<blockquote>\n<p>**<a href=\"\"> 字符匹配：**</a></p>\n<p>[1249a]：匹配到中括号内任意一个单个字符计算命中</p>\n<p>[^12] ：^ 表示取反，只要不包含 1 和 2，就可以匹配上</p>\n<p>[a-k] ：给定一个序列，满足序列内的单个字符即可匹配</p>\n<p>注意该匹配是单字符的匹配</p>\n<p><strong>位置匹配</strong>：</p>\n<p>行位置：</p>\n<p><code>^x</code> : 以 x 为首</p>\n<p><code>x$</code> : 以 x 结尾</p>\n<p>单词边界</p>\n<p><code>\\&lt;abc</code> ：以 abc 结尾</p>\n<p>\\：只为了转义</p>\n</blockquote>\n<h3 id=\"重复操作符\"><a class=\"anchor\" href=\"#重复操作符\">#</a> 重复操作符</h3>\n<p>作用：不会操作数据，只会让前面匹配重复</p>\n<p>![1594986519951](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saWFuLXpwLm9zcy1jbi1zaGVuemhlbi5hbGl5dW5jcy5jb20vcGlj\">https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic</span> GO/20200719233212.png)</p>\n<p>正则表达式</p>\n<p>分为基本正则表达式和扩展正则表达式</p>\n<pre><code>grep basic  \ngrep只能匹配基本正则表达式\n\n如果grep需要使用扩展正则表达式\n需要使用转义\\或者 是-e 表示匹配扩展正则表达式\n\n</code></pre>\n<pre><code>. : 匹配操作符，匹配任意单个字符\n* ：重复操作符，重复0-多次\n\n.* :表示匹配0-多次的任意个字符  ===通配符 *\n</code></pre>\n<p>​</p>\n",
            "tags": []
        },
        {
            "id": "https://github.com/Mayizono/miyazono.github.io/big-data/flink/4_Kibana/",
            "url": "https://github.com/Mayizono/miyazono.github.io/big-data/flink/4_Kibana/",
            "title": "",
            "date_published": "2021-08-31T10:42:03.139Z",
            "content_html": "",
            "tags": []
        },
        {
            "id": "https://github.com/Mayizono/miyazono.github.io/big-data/flink/3_ElasticSearch/",
            "url": "https://github.com/Mayizono/miyazono.github.io/big-data/flink/3_ElasticSearch/",
            "title": "",
            "date_published": "2021-08-31T10:42:03.137Z",
            "content_html": "",
            "tags": []
        },
        {
            "id": "https://github.com/Mayizono/miyazono.github.io/big-data/flink/2_Canal/",
            "url": "https://github.com/Mayizono/miyazono.github.io/big-data/flink/2_Canal/",
            "title": "",
            "date_published": "2021-08-31T10:42:03.134Z",
            "content_html": "",
            "tags": []
        },
        {
            "id": "https://github.com/Mayizono/miyazono.github.io/big-data/flink/1_Nginx/",
            "url": "https://github.com/Mayizono/miyazono.github.io/big-data/flink/1_Nginx/",
            "title": "",
            "date_published": "2021-08-31T10:42:03.131Z",
            "content_html": "<h2 id=\"负载均衡nginx的使用\"><a class=\"anchor\" href=\"#负载均衡nginx的使用\">#</a> 负载均衡 Nginx 的使用</h2>\n<hr />\n<blockquote>\n<p>该部分从属于数据采集部分，主要作用为实现三台数采服务器的负载均衡，因涉及新的技术 ---Nginx，所以单独成为一个 part</p>\n</blockquote>\n<p>![1594748402220](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saWFuLXpwLm9zcy1jbi1zaGVuemhlbi5hbGl5dW5jcy5jb20vcGlj\">https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic</span> GO/20200719233514.png)</p>\n<h3 id=\"11-nginx概述\"><a class=\"anchor\" href=\"#11-nginx概述\">#</a> 1.1 Nginx 概述</h3>\n<p>Nginx (读作 “engine x”), 是一个高性能的 HTTP 和反向代理服务器，特点是占有内存少，并发能力强</p>\n<ul>\n<li>与 tomcat 的关系</li>\n</ul>\n<p>除了 tomcat 以外， apache,nginx,jboss,jetty 等都是 http 服务器。</p>\n<p>nginx 和 apache 只支持静态页面和 CGI 协议的动态语言，比如 perl 、 php 等， 但是 nginx 不支持 java 。</p>\n<p>Java 程序只能通过与 tomcat 配合完成。   nginx 与 tomcat 配合，为 tomcat 集群提供反向代理服务、负载均衡等服务</p>\n<h4 id=\"111-nginx三大功能\"><a class=\"anchor\" href=\"#111-nginx三大功能\">#</a> 1.1.1 Nginx 三大功能</h4>\n<h5 id=\"反向代理\"><a class=\"anchor\" href=\"#反向代理\">#</a> 反向代理</h5>\n<ul>\n<li>正向代理</li>\n</ul>\n<p>![1594748623769](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saWFuLXpwLm9zcy1jbi1zaGVuemhlbi5hbGl5dW5jcy5jb20vcGlj\">https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic</span> GO/20200719233520.png)</p>\n<blockquote>\n<p>服务器代理用户的请求，从用户的角度看，没法直接获取请求，需要通过代理<br />\n特点：代理用户，用户清楚知道访问哪台服务器</p>\n</blockquote>\n<ul>\n<li>反向代理</li>\n</ul>\n<p>![1594748632948](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saWFuLXpwLm9zcy1jbi1zaGVuemhlbi5hbGl5dW5jcy5jb20vcGlj\">https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic</span> GO/20200719233526.png)</p>\n<blockquote>\n<p>反向代理：服务器代理真正服务器，用户不确定去哪台真实服务器，</p>\n</blockquote>\n<h5 id=\"负载均衡\"><a class=\"anchor\" href=\"#负载均衡\">#</a> 负载均衡</h5>\n<p>・轮询（默认） 每个请求按时间顺序逐一分配到不同的后端服务器，如果后端某台服务器宕机，则自动剔除故障机器，使用户访问不受影响</p>\n<p>・weight 指定轮询权重，weight 值越大，分配到的几率就越高，主要用于后端每台服务器性能不均衡的情况。</p>\n<p>・备机模式 平时不工作，只有其他 down 机的时候才会开始工作</p>\n<p>・公平模式 (第三方) 更智能的一个负载均衡算法，此算法可以根据页面大小和加载时间长短智能地进行负载均衡，也就是根据后端服务器的响应时间来分配请求，响应时间短的优先分配。如果想要使用此调度算法，需要 Nginx 的 upstream_fair 模块。</p>\n<h5 id=\"动静分离\"><a class=\"anchor\" href=\"#动静分离\">#</a> 动静分离</h5>\n<p>![1594748722077](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saWFuLXpwLm9zcy1jbi1zaGVuemhlbi5hbGl5dW5jcy5jb20vcGlj\">https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic</span> GO/20200719233531.png)</p>\n<h3 id=\"12-nginx安装\"><a class=\"anchor\" href=\"#12-nginx安装\">#</a> 1.2 Nginx 安装</h3>\n<ul>\n<li>yum 安装依赖包</li>\n</ul>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sudo</span> yum -y <span class=\"token function\">install</span>    openssl openssl-devel pcre pcre-devel    zlib zlib-devel gcc gcc-c++</pre></td></tr></table></figure><ul>\n<li>下载 Nginx</li>\n</ul>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>/opt/software » <span class=\"token function\">wget</span> http://nginx.org/download/nginx-1.12.2.tar.gz</pre></td></tr></table></figure><ul>\n<li>解压</li>\n</ul>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">tar</span> -zxvf nginx-1.12.2.tar.gz -C /opt/module</pre></td></tr></table></figure><ul>\n<li>编译和安装</li>\n</ul>\n<p>进入解压缩的目录</p>\n<p>为了防止出现权限问题，建议切换到 root 用户</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>./configure   --prefix<span class=\"token operator\">=</span>/usr/local/webserver/nginx</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">make</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">make</span> <span class=\"token function\">install</span></pre></td></tr></table></figure><ul>\n<li><strong>启停 Nginx</strong></li>\n</ul>\n<p>进入目录: /usr/local/webserver/nginx</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>启动 nginx: sbin/nginx</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>关闭 nginx: sbin/nginx -s stop</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>重新加载: sbin/nginx -s reload</pre></td></tr></table></figure><blockquote>\n<p>注意：</p>\n<ul>\n<li>Nginx 默认使用的是 80 端口，由于非 root 用户不能使用 1024 以内的端口，所以建议使用 root 用户启动 Nginx</li>\n<li>如果使用普通用户启动 Nginx, 需要先执行下面的命令来突破上面的限制:</li>\n</ul>\n<pre><code>sudo setcap cap_net_bind_service=+eip /usr/local/webserver/nginx\n</code></pre>\n</blockquote>\n<ul>\n<li>查看 Nginx 进程</li>\n</ul>\n<p>![1594748930149](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saWFuLXpwLm9zcy1jbi1zaGVuemhlbi5hbGl5dW5jcy5jb20vcGlj\">https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic</span> GO/20200719233543.png)</p>\n<p>通过网页访问: <span class=\"exturl\" data-url=\"aHR0cDovL2hhZG9vcDEwOQ==\">http://hadoop109</span></p>\n<p>![1594748945767](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saWFuLXpwLm9zcy1jbi1zaGVuemhlbi5hbGl5dW5jcy5jb20vcGlj\">https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic</span> GO/20200719233548.png)</p>\n<h3 id=\"13-配置负载均衡\"><a class=\"anchor\" href=\"#13-配置负载均衡\">#</a> 1.3 配置负载均衡</h3>\n<h4 id=\"131-nginx配置修改\"><a class=\"anchor\" href=\"#131-nginx配置修改\">#</a> 1.3.1 Nginx 配置修改</h4>\n<ul>\n<li>修改 /usr/local/webserver/nginx/conf/nginx.conf</li>\n</ul>\n<figure class=\"highlight properties\"><figcaption data-lang=\".properties\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token attr-name\">http</span> <span class=\"token attr-value\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    .....</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">    # 配置上游服务器：其实就被代理的服务器，springboot</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token attr-name\">    upstream</span> <span class=\"token attr-value\">logserver&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token attr-name\">        server</span> <span class=\"token attr-value\">hadoop109:8081 weight=1;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token attr-name\">        server</span> <span class=\"token attr-value\">hadoop110:8081 weight=1;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token attr-name\">        server</span> <span class=\"token attr-value\">hadoop111:8081 weight=1;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    &#125;</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token attr-name\">    server</span> <span class=\"token attr-value\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token attr-name\">        listen</span> <span class=\"token attr-value\">      80;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token attr-name\">        server_name</span> <span class=\"token attr-value\"> logserver;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token attr-name\">        location</span> <span class=\"token attr-value\">/ &#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token attr-name\">            root</span> <span class=\"token attr-value\">  html;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token attr-name\">            index</span> <span class=\"token attr-value\"> index.html index.htm;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">            # 配置代理</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token attr-name\">            proxy_pass</span> <span class=\"token attr-value\">http://logserver;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token attr-name\">            proxy_connect_timeout</span> <span class=\"token attr-value\">10;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        &#125;</pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        ...</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    &#125;</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>&#125;</pre></td></tr></table></figure><blockquote>\n<p><strong>Q：为什么不配置日志服务器端口为 8080</strong></p>\n<p>在 kafka 启动消费数据前要先打开 zookeeper 集群，在 zookeeper3.5.0 之后的版本中，集群打开后会默认占用 8080 端口</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>atguigu@hadoop109 module<span class=\"token punctuation\">]</span>$ jps</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">13317</span> Jps</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">13229</span> QuorumPeerMain</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">[</span>atguigu@hadoop109 module<span class=\"token punctuation\">]</span>$ <span class=\"token function\">netstat</span> -tunlp <span class=\"token operator\">|</span><span class=\"token function\">grep</span> <span class=\"token number\">8080</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">(</span>Not all processes could be identified, non-owned process info</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>will not be shown, you would have to be root to see it all.<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>tcp6       <span class=\"token number\">0</span>      <span class=\"token number\">0</span> :::8080                 :::*                    LISTEN      <span class=\"token number\">13229</span>/java</pre></td></tr></table></figure><p>通过观察日志可以发现确实启动了一个叫 adminServer 的服务</p>\n<p>![1594749317598](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saWFuLXpwLm9zcy1jbi1zaGVuemhlbi5hbGl5dW5jcy5jb20vcGlj\">https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic</span> GO/20200719233556.png)</p>\n<p>这是一个内嵌的 jetty 服务。如果想在 zookeeper 上解决这个问题，有以下三种方法</p>\n<pre><code>（1）.删除jetty。\n（2）修改端口。\n修改方法的方法有两种，一种是在启动脚本中增加 -Dzookeeper.admin.serverPort=你的端口号.一种是在zoo.cfg中增加admin.serverPort=没有被占用的端口号\n（3）停用这个服务，在启动脚本中增加”-Dzookeeper.admin.enableServer=false”\n</code></pre>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">netstat</span> -tunlp<span class=\"token operator\">|</span><span class=\"token function\">grep</span> 端口号 查看占用端口的进程</pre></td></tr></table></figure></blockquote>\n<h4 id=\"132-日志采集服务器群起脚本制作\"><a class=\"anchor\" href=\"#132-日志采集服务器群起脚本制作\">#</a> 1.3.2 日志采集服务器群起脚本制作</h4>\n<p>分别在 3 个节点启动 jar 比较麻烦，制作统一启动脚本.</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token shebang important\">#!/bin/bash</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">case</span> <span class=\"token variable\">$1</span> <span class=\"token keyword\">in</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token string\">\"start\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token for-or-select variable\">i</span> <span class=\"token keyword\">in</span> hadoop201 hadoop202 hadoop203</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">do</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"========启动日志服务: <span class=\"token variable\">$i</span>===============\"</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token function\">ssh</span> <span class=\"token variable\">$i</span>  <span class=\"token string\">\"source /etc/profile ; java -jar /opt/module/gmall/gmall-logger-1.0-SNAPSHOT.jar >/dev/null 2>&amp;1  &amp;\"</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">done</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>     <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token string\">\"stop\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token for-or-select variable\">i</span> <span class=\"token keyword\">in</span> hadoop201 hadoop202 hadoop203</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">do</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"========关闭日志服务: <span class=\"token variable\">$i</span>===============\"</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token function\">ssh</span> <span class=\"token variable\">$i</span> <span class=\"token string\">\"ps -ef|grep gmall-logger-1.0-SNAPSHOT.jar | grep -v grep|awk '&#123;print \\<span class=\"token variable\">$2</span>&#125;'|xargs kill\"</span> <span class=\"token operator\">></span>/dev/null <span class=\"token operator\"><span class=\"token file-descriptor important\">2</span>></span><span class=\"token file-descriptor important\">&amp;1</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">done</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    *<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token builtin class-name\">echo</span> 启动姿势不对, 请使用参数 start 启动日志服务, 使用参数 stop 停止服务</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">esac</span></pre></td></tr></table></figure><h4 id=\"133-其他操作\"><a class=\"anchor\" href=\"#133-其他操作\">#</a> 1.3.3 其他操作</h4>\n<ul>\n<li>分发启动采集服务器 jar 包到其余设备</li>\n<li>给编写好的脚本增加执行权限</li>\n<li>启动 Nginx</li>\n<li>启动脚本</li>\n</ul>\n<blockquote>\n<p>脚本编写的注意事项：</p>\n<p>如果在 windows 环境下编写脚本后复制到 linux 系统中出现如下报错：</p>\n<pre><code>bad interpreter:\n/bin/bash^M: no such file or directory\n</code></pre>\n<p>是因为在 window 下写的脚本回车的时候使用的是 \\r\\n, 而在 linux 使用 \\n 就可以了，所在每行的末尾多了一个 \\r.</p>\n<p>使用下面的命令去掉行尾的 \\r:</p>\n<pre><code>sed -i -e 's/\\r$//' gmall_cluster\n</code></pre>\n</blockquote>\n<ul>\n<li>测试日志生成能否在集群中生成落盘日志与控制台打印</li>\n</ul>\n",
            "tags": []
        },
        {
            "id": "https://github.com/Mayizono/miyazono.github.io/Day10-%E7%BB%A7%E6%89%BF/",
            "url": "https://github.com/Mayizono/miyazono.github.io/Day10-%E7%BB%A7%E6%89%BF/",
            "title": "Java基础--继承",
            "date_published": "2021-08-17T13:20:32.601Z",
            "content_html": "<h1 id=\"第一章-继承\"><a class=\"anchor\" href=\"#第一章-继承\">#</a> 第一章 继承</h1>\n<h2 id=\"11-继承的概述\"><a class=\"anchor\" href=\"#11-继承的概述\">#</a> 1.1 继承的概述</h2>\n<p><strong>继承:</strong> 就是子类继承父类的属性和行为，使得子类对象具有与父类相同的属性、相同的行为。</p>\n<h3 id=\"111继承的好处\"><a class=\"anchor\" href=\"#111继承的好处\">#</a> 1.1.1 继承的好处</h3>\n<p>提高代码的复用性。<br />\n提高代码的扩展性。<br />\n类与类之间产生了关系，是学习多态的前提。</p>\n<h2 id=\"12继承的格式\"><a class=\"anchor\" href=\"#12继承的格式\">#</a> 1.2 继承的格式</h2>\n<p>通过 extends 关键字，可以声明一个子类继承另外一个父类，定义格式如下：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> 父类类名 <span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> 子类类名 <span class=\"token keyword\">extends</span> 父类类名 <span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>继承演示:</strong></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * 定义动物类 Animal，做为父类</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Animal</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 定义 name 属性</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 定义 age 属性</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 定义动物的吃东西方法</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">eat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>age <span class=\"token operator\">+</span> <span class=\"token string\">\"岁的\"</span> <span class=\"token operator\">+</span> name <span class=\"token operator\">+</span> <span class=\"token string\">\"在吃东西\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"15\"></td><td><pre> * 定义猫类 Cat 继承 动物类 Animal</pre></td></tr><tr><td data-num=\"16\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Cat</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Animal</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token comment\">// 定义一个猫抓老鼠的方法 catchMouse</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">catchMouse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"抓老鼠\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"25\"></td><td><pre> * 定义测试类</pre></td></tr><tr><td data-num=\"26\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ExtendDemo01</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token comment\">// 创建一个猫类对象 </span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token class-name\">Cat</span> cat <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Cat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token comment\">// 为该猫类对象的 name 属性进行赋值</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        cat<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"Tom\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token comment\">// 为该猫类对象的 age 属性进行赋值 </span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        cat<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token comment\">// 调用该猫的 catchMouse () 方法 </span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        cat<span class=\"token punctuation\">.</span><span class=\"token function\">catchMouse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token comment\">// 调用该猫继承来的 eat () 方法 </span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        cat<span class=\"token punctuation\">.</span><span class=\"token function\">eat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>演示结果：<br />\n抓老鼠<br />\n 2 岁的 Tom 在吃东西</p>\n</blockquote>\n<h2 id=\"13-继承的特点一成员变量\"><a class=\"anchor\" href=\"#13-继承的特点一成员变量\">#</a> 1.3 继承的特点一：成员变量</h2>\n<h3 id=\"131私有化private\"><a class=\"anchor\" href=\"#131私有化private\">#</a> 1.3.1 私有化（private）</h3>\n<p>父类中的成员，无论是公有 (public) 还是私有 (private)，均会被子类继承。<br />\n子类虽会继承父类私有 (private) 的成员，但子类不能对继承的私有成员直接进行访问，可通过继承<br />\n的公有方法进行访问。如图所示：</p>\n<p><img data-src=\"https://miyazono-1255488789.cos.ap-shanghai.myqcloud.com/markdown/20210415104325.png\" alt=\"image\" /></p>\n<pre><code>   官方结论:\n       (1)子类可以继承父类所有的属性和行为\n       (2)子类可以继承同包下父类的私有成员\n       (3)子类不可以继承父类的私有成员\n \n   自己总结:\n       子类可以继承父类的私有属性和行为,因为是私有的,子类无法直接方法,但可以通过set和get进行方法\n</code></pre>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/** 定义动物类 Animal，做为父类 */</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Animal</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 定义 name 属性 </span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 定义 age 属性 </span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 定义动物的吃东西方法 </span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">eat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>age <span class=\"token operator\">+</span> <span class=\"token string\">\"岁的\"</span> <span class=\"token operator\">+</span> name <span class=\"token operator\">+</span> <span class=\"token string\">\"在吃东西\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">/** 定义猫类 Cat 继承 动物类 Animal */</span> </pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Cat</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Animal</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\">// 定义一个猫抓老鼠的方法</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    catchMouse <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">catchMouse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"抓老鼠\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">/** 定义测试类 */</span> </pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ExtendDemo01</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token comment\">// 创建一个猫类对象 </span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token class-name\">Cat</span> cat <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Cat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token comment\">// 为该猫类对象的 name 属性进行赋值 </span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token comment\">//t.name = \"Tom\";// 编译报错 </span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token comment\">// 为该猫类对象的 age 属性进行赋值 </span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        t<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token comment\">// 调用该猫的 catchMouse () 方法 </span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        t<span class=\"token punctuation\">.</span><span class=\"token function\">catchMouse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token comment\">// 调用该猫继承来的 eat () 方法 </span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        t<span class=\"token punctuation\">.</span><span class=\"token function\">eat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"132成员变量重名问题\"><a class=\"anchor\" href=\"#132成员变量重名问题\">#</a> 1.3.2 成员变量重名问题</h3>\n",
            "tags": []
        },
        {
            "id": "https://github.com/Mayizono/miyazono.github.io/big-data/kafka/Kafka%E6%80%BB%E7%BB%93/",
            "url": "https://github.com/Mayizono/miyazono.github.io/big-data/kafka/Kafka%E6%80%BB%E7%BB%93/",
            "title": "Kafka学习",
            "date_published": "2020-08-11T16:00:00.000Z",
            "content_html": "<h1 id=\"kafka总结\"><a class=\"anchor\" href=\"#kafka总结\">#</a> Kafka 总结</h1>\n<h2 id=\"一-kafka概述\"><a class=\"anchor\" href=\"#一-kafka概述\">#</a> 一、kafka 概述</h2>\n<h3 id=\"11-kafka定义\"><a class=\"anchor\" href=\"#11-kafka定义\">#</a> 1.1 kafka 定义</h3>\n<blockquote>\n<p>Kafka 是一个分布式的基于<strong>发布 / 订阅</strong>模式的<strong>消息队列，<strong>主要应用于大数据</strong>实时</strong>处理领域。</p>\n<p>订阅式模式：一对多的关系，一个生产者，数据存储在消息队列中，多个消费者均可从这个消息对列中获取数据，<strong>消费者消费数据之后不会清除消息。</strong></p>\n</blockquote>\n<h3 id=\"12-框架说明\"><a class=\"anchor\" href=\"#12-框架说明\">#</a> 1.2 框架说明</h3>\n<blockquote>\n<p>一般都是从命令行和 API 两个方面进行讲解。</p>\n<p>数据处理框架需要从数据的安全性以及效率两个方面深入了解。</p>\n</blockquote>\n<h3 id=\"13-kafka涉及的关键词\"><a class=\"anchor\" href=\"#13-kafka涉及的关键词\">#</a> 1.3 Kafka 涉及的关键词</h3>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1.</span> producer: 消息的生产者，即为向kafka broker发消息<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">2.</span> broker ： kafka集群的节点；</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">3.</span> topic : 队列（话题），生产者和消费者面向的都是一个topic；</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">4.</span> message：消息，队列中的一条消息；</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">5.</span> <span class=\"token keyword\">partition</span>: 分区，为方便扩展和提高吞吐量，将一个topic分为了多个<span class=\"token keyword\">partition</span>；</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token number\">6.</span> <span class=\"token keyword\">index</span> ： 消息数据在log文件中的索引；</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token number\">7.</span> log ：消息的具体数据；</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token number\">8.</span> timeindex： 时间索引，代表发送的数据时间索引；</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token number\">9.</span> <span class=\"token keyword\">offset</span> ： 消息的偏移量，每一条消息都对应一个<span class=\"token keyword\">offset</span>；</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token number\">10.</span> segment : 一个分片数据；</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token number\">11.</span> leader ：每个分区多个副本的“主”，生产者发送数据的对象，以及消费者消费数据的对象都是leader；</pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token number\">12.</span> follower : 每个分区多个副本中的“从”，实时从leader中同步数据，保持和leader数据的同步。leader发生故障时，某个follower会成为新的leader</pre></td></tr></table></figure><h2 id=\"二-kafka安装\"><a class=\"anchor\" href=\"#二-kafka安装\">#</a> 二、Kafka 安装</h2>\n<h3 id=\"21-集群部署\"><a class=\"anchor\" href=\"#21-集群部署\">#</a> 2.1 集群部署</h3>\n<h4 id=\"221-解压安装包\"><a class=\"anchor\" href=\"#221-解压安装包\">#</a> 2.2.1  解压安装包</h4>\n<p>在 /opt/software 目录下</p>\n<pre><code class=\"language-sq1\">tar -zxvf kafka_2.11-2.4.1.tgz -C /opt/module/\n</code></pre>\n<h4 id=\"222-修改解压后的文件名称\"><a class=\"anchor\" href=\"#222-修改解压后的文件名称\">#</a> 2.2.2  修改解压后的文件名称</h4>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>mv kafka_2<span class=\"token punctuation\">.</span><span class=\"token number\">11</span><span class=\"token operator\">-</span><span class=\"token number\">2.4</span><span class=\"token number\">.1</span><span class=\"token operator\">/</span> kafka</pre></td></tr></table></figure><h4 id=\"223-创建logs文件夹\"><a class=\"anchor\" href=\"#223-创建logs文件夹\">#</a> 2.2.3 创建 logs 文件夹</h4>\n<p>在 /opt/module/kafka 目录下</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>mkdir logs</pre></td></tr></table></figure><h4 id=\"224-修改配置文件\"><a class=\"anchor\" href=\"#224-修改配置文件\">#</a> 2.2.4 修改配置文件</h4>\n<p>/opt/module/kafk 路径下</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>vim config<span class=\"token operator\">/</span>server<span class=\"token punctuation\">.</span>properties</pre></td></tr></table></figure><p>修改如下三个参数，修改后的值如下：</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>broker<span class=\"token punctuation\">.</span>id<span class=\"token operator\">=</span><span class=\"token number\">2</span>；</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>log<span class=\"token punctuation\">.</span>dirs<span class=\"token operator\">=</span><span class=\"token operator\">/</span>opt<span class=\"token operator\">/</span>module<span class=\"token operator\">/</span>kafka<span class=\"token operator\">/</span>logs</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>zookeeper<span class=\"token punctuation\">.</span><span class=\"token keyword\">connect</span><span class=\"token operator\">=</span>hadoop102:<span class=\"token number\">2181</span><span class=\"token punctuation\">,</span>hadoop103:<span class=\"token number\">2181</span><span class=\"token punctuation\">,</span>hadoop104:<span class=\"token number\">2181</span><span class=\"token operator\">/</span>kafka</pre></td></tr></table></figure><h4 id=\"225-配置环境变量\"><a class=\"anchor\" href=\"#225-配置环境变量\">#</a> 2.2.5 配置环境变量</h4>\n<pre><code class=\"language-Sql\">sudo vim /etc/profile.d/my_env.sh\n</code></pre>\n<p>增加如下配置：</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#KAFKA_HOME</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>KAFKA_HOME<span class=\"token operator\">=</span><span class=\"token operator\">/</span>opt<span class=\"token operator\">/</span>module<span class=\"token operator\">/</span>kafka</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>PATH<span class=\"token operator\">=</span>$PATH:$KAFKA_HOME<span class=\"token operator\">/</span>bin</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>export KAFKA_HOME</pre></td></tr></table></figure><p>生效配置文件：</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>source <span class=\"token operator\">/</span>etc<span class=\"token operator\">/</span>profile</pre></td></tr></table></figure><h4 id=\"226-分发安装包\"><a class=\"anchor\" href=\"#226-分发安装包\">#</a> 2.2.6  分发安装包</h4>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>xsync kafka<span class=\"token operator\">/</span></pre></td></tr></table></figure><p>注意：分发之后记得配置其他机器的环境变量</p>\n<h4 id=\"227-修改其他机器的配置文件\"><a class=\"anchor\" href=\"#227-修改其他机器的配置文件\">#</a> 2.2.7 修改其他机器的配置文件</h4>\n<ul>\n<li>\n<p>/opt/module/kafka/config/server.properties 中的 broker.id=3、broker.id=4</p>\n<p>注：broker.id 不得重复</p>\n</li>\n</ul>\n<h4 id=\"228-启动集群\"><a class=\"anchor\" href=\"#228-启动集群\">#</a> 2.2.8  启动集群</h4>\n<ol>\n<li>\n<p>首先启动 zookeeper 集群和 hadoop 集群</p>\n</li>\n<li>\n<p>依次在 hadoop102、hadoop103、hadoop104 节点上启动 kafka</p>\n</li>\n</ol>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kafka<span class=\"token operator\">-</span>server<span class=\"token operator\">-</span><span class=\"token keyword\">start</span><span class=\"token punctuation\">.</span>sh <span class=\"token operator\">-</span>daemon $KAFKA_HOME<span class=\"token operator\">/</span>config<span class=\"token operator\">/</span>server<span class=\"token punctuation\">.</span>properties</pre></td></tr></table></figure><ul>\n<li>-daemon 属于后台启动，没有 - daemon 则为前台启动</li>\n</ul>\n<h4 id=\"229-关闭集群\"><a class=\"anchor\" href=\"#229-关闭集群\">#</a> 2.2.9 关闭集群</h4>\n<pre><code class=\"language-Sql、\">kafka-server-stop.sh\n</code></pre>\n<h4 id=\"2210-kafka群起群停脚本\"><a class=\"anchor\" href=\"#2210-kafka群起群停脚本\">#</a> 2.2.10 kafka 群起群停脚本</h4>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#！bin/bash</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> $<span class=\"token comment\"># -lt 1 ]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token keyword\">then</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   echo <span class=\"token string\">\"No Args Input Error\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token keyword\">exit</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>fi</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">case</span> $<span class=\"token number\">1</span> <span class=\"token operator\">in</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token string\">\"start\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">for</span> i <span class=\"token operator\">in</span> <span class=\"token punctuation\">`</span>cat <span class=\"token operator\">/</span>opt<span class=\"token operator\">/</span>module<span class=\"token operator\">/</span>hadoop<span class=\"token operator\">-</span><span class=\"token number\">3.1</span><span class=\"token number\">.3</span><span class=\"token operator\">/</span>etc<span class=\"token operator\">/</span>hadoop<span class=\"token operator\">/</span>workers<span class=\"token punctuation\">`</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">do</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>echo <span class=\"token string\">\"==========start $i kafka==========\"</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>ssh $i <span class=\"token string\">'$KAFKA_HOME/bin/kafka-server-start.sh -daemon /opt/module/kafka/config/server.properties'</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>done</pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token string\">\"stop\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">for</span> i <span class=\"token operator\">in</span> <span class=\"token punctuation\">`</span>cat <span class=\"token operator\">/</span>opt<span class=\"token operator\">/</span>module<span class=\"token operator\">/</span>hadoop<span class=\"token operator\">-</span><span class=\"token number\">3.1</span><span class=\"token number\">.3</span><span class=\"token operator\">/</span>etc<span class=\"token operator\">/</span>hadoop<span class=\"token operator\">/</span>workers<span class=\"token punctuation\">`</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">do</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>echo <span class=\"token string\">\"==========stop $i kafka==========\"</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>ssh $i <span class=\"token string\">'$KAFKA_HOME/bin/kafka-server-stop.sh'</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>done</pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  echo <span class=\"token string\">\"Input Args Error\"</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>esac</pre></td></tr></table></figure><h3 id=\"22-kafka命令操作\"><a class=\"anchor\" href=\"#22-kafka命令操作\">#</a> 2.2 Kafka 命令操作</h3>\n<h4 id=\"221-查看当前服务器中的所有topic\"><a class=\"anchor\" href=\"#221-查看当前服务器中的所有topic\">#</a> 2.2.1 查看当前服务器中的所有 topic</h4>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kafka<span class=\"token operator\">-</span>topics<span class=\"token punctuation\">.</span>sh  <span class=\"token comment\">--bootstrap-server hadoop102:9092 --list</span></pre></td></tr></table></figure><p>选项说明：</p>\n<ul>\n<li>--list ：查看 kafka 所有的 topic</li>\n<li>--bootstrap-server : 连接 kafka 集群</li>\n<li>--hadoop102:9092：hadoop102 是指连接 kafka 任意一台机器，9092：kafka 内部通信的端口</li>\n</ul>\n<h4 id=\"222-创建topic\"><a class=\"anchor\" href=\"#222-创建topic\">#</a> 2.2.2  创建 topic</h4>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kafka<span class=\"token operator\">-</span>topics<span class=\"token punctuation\">.</span>sh  <span class=\"token comment\">--bootstrap-server hadoop102:9092 --create --topic first --partitions 2 --replication-factor 2</span></pre></td></tr></table></figure><p>选项说明：</p>\n<ul>\n<li>--topic  : 定义 topic 名字</li>\n<li>--partitions  : 定义分区数</li>\n<li>--replication-factor : 定义副本数</li>\n</ul>\n<h4 id=\"223-查看某个topic的详情\"><a class=\"anchor\" href=\"#223-查看某个topic的详情\">#</a> 2.2.3 查看某个 Topic 的详情</h4>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kafka<span class=\"token operator\">-</span>topics<span class=\"token punctuation\">.</span>sh <span class=\"token comment\">--bootstrap-server hadoop102:9092 --describe --topic first</span></pre></td></tr></table></figure><p>选项说明：</p>\n<ul>\n<li>--topic first ： 查看指定的话题，如果不加此选项，则表示查看所有的话题</li>\n</ul>\n<h4 id=\"224-修改分区数\"><a class=\"anchor\" href=\"#224-修改分区数\">#</a> 2.2.4  修改分区数</h4>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kafka<span class=\"token operator\">-</span>topics<span class=\"token punctuation\">.</span>sh <span class=\"token comment\">--bootstrap-server hadoop102:9092 --alter --topic first --partitions 6</span></pre></td></tr></table></figure><p>说明：</p>\n<ul>\n<li>-- 分区数只能增加不能减少</li>\n<li>分区内部消息有序，分区之间消息无序</li>\n</ul>\n<h4 id=\"225-发送消息\"><a class=\"anchor\" href=\"#225-发送消息\">#</a> 2.2.5 发送消息</h4>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kafka<span class=\"token operator\">-</span>console<span class=\"token operator\">-</span>producer<span class=\"token punctuation\">.</span>sh <span class=\"token comment\">--broker-list  hadoop102:9092,hadoop103:9092,hadoop104:9092 --topic first</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">></span>hello world</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">></span>atguigu  atguigu</pre></td></tr></table></figure><p>选项说明：</p>\n<ul>\n<li>hadoop102:9092,hadoop103:9092,hadoop104:9092 : kafka 的集群中的 broker，其实写一个也是可以的，写 3 个的目的只是避免当连接的 kafka 集群 broker 故障时连不上 kafka 集群的情况。</li>\n</ul>\n<h4 id=\"226-消费消息\"><a class=\"anchor\" href=\"#226-消费消息\">#</a> 2.2.6  消费消息</h4>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kafka<span class=\"token operator\">-</span>console<span class=\"token operator\">-</span>consumer<span class=\"token punctuation\">.</span>sh <span class=\"token comment\">--bootstrap-server hadoop102:9092 --from-beginning --topic first</span></pre></td></tr></table></figure><p>选项说明：</p>\n<ul>\n<li>\n<p>--from-beginning ：</p>\n<p>加上：会把 topic 中以往所有的数据都读取出来</p>\n<p>不加：此时只会消费最新的数据，原来 topic 中的数据不会被消费</p>\n</li>\n</ul>\n<h4 id=\"227-删除topic\"><a class=\"anchor\" href=\"#227-删除topic\">#</a> 2.2.7  删除 topic</h4>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kafka<span class=\"token operator\">-</span>topics<span class=\"token punctuation\">.</span>sh <span class=\"token comment\">--bootstrap-server hadoop102:9820 --delete --topic first</span></pre></td></tr></table></figure><h2 id=\"三-kafka深入流程\"><a class=\"anchor\" href=\"#三-kafka深入流程\">#</a> 三、 Kafka 深入流程</h2>\n<p>说明：此框架步步引导，采取提出问题解决问题的方式阐述。</p>\n<h3 id=\"31-kafka工作流程及文件存储机制\"><a class=\"anchor\" href=\"#31-kafka工作流程及文件存储机制\">#</a> 3.1 Kafka 工作流程及文件存储机制</h3>\n<p><img data-src=\"https://miyazono-1255488789.cos.ap-shanghai.myqcloud.com/markdown/20210822155602.png\" alt=\"图2\" /></p>\n<ol>\n<li>kafka 以 topic（话题）为单位，每一个话题分为多个区（创建话题的时候指定分区的个数），每个分区中存储的数据是不一样的，同时每个分区的数据在其他分区也会创建副本。</li>\n<li>不同的分区分布在 kafka 集群不同的机器（broker，代理人）上面；</li>\n<li>消息的生产和消费均是分区为单位；</li>\n<li>分区内的数据是有序的，分区之间的顺序是无序的；</li>\n<li>offset 指消息的偏移量；</li>\n<li>每个分区都是一个文件夹，文件中包含 index（数据在 log 中的索引）、log（真实的数据）、timeindex (数据发送的时间索引) ，时间索引和 index 索引均是用来提高查询数据效率；</li>\n<li>当产生新的数据以后会向 log 文件中进行追加，同时 index 和 timeindex 也会增加；</li>\n<li>Kafka 采取了<strong>分片</strong>和<strong>索引</strong>机制。</li>\n<li>topic 是逻辑上的概念，而 partition 是物理上的概念，每个 partition 对应于一个 log 文件，该 log 文件中存储的就是 producer 生产的数据。Producer 生产的数据会被不断追加到该 log 文件末端，且每条数据都有自己的 offset。消费者组中的每个消费者，都会实时记录自己消费到了哪个 offset，以便出错恢复时，从上次的位置继续消费</li>\n</ol>\n<p><img data-src=\"https://miyazono-1255488789.cos.ap-shanghai.myqcloud.com/markdown/20210822155644.png\" alt=\"图1\" /></p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 灵魂拷问 1：</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>产生的数据一直向同一个log中进行追加，会有什么问题呢？</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">-- 答案：</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>log中的数据会越来越大，查询和读取效率会变慢。</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">-- 解决方式：</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>数据达到一定程度以后（默认值为<span class=\"token number\">1</span>G：log<span class=\"token punctuation\">.</span>segment<span class=\"token punctuation\">.</span>bytes <span class=\"token operator\">=</span> <span class=\"token number\">1</span>G），log会进行数据切分，生成多个segment切分文件。</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>切分后的文件依然包含<span class=\"token keyword\">index</span>、log、timeindex 。所以三个文件是作为一个整体的。 <span class=\"token comment\">-- 切分机制</span></pre></td></tr></table></figure><p><img data-src=\"https://miyazono-1255488789.cos.ap-shanghai.myqcloud.com/markdown/20210822155702.png\" alt=\"image-20200714205920775\" /></p>\n<p><img data-src=\"https://miyazono-1255488789.cos.ap-shanghai.myqcloud.com/markdown/20210822155724.png\" alt=\"image-20200714210619003\" /></p>\n<blockquote>\n<p>切分的文件位于同一个文件夹下，该文件夹的命名规则为：<mark>topic 名称 + 分区序号</mark>。</p>\n<p>例如，first 这个 topic 有三个分区，则其对应的文件夹为 first-0,first-1,first-2</p>\n</blockquote>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 灵魂拷问 2：</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>现在假如有两个切分的文件，当有一个消费者需要消费一条消息（假如是 <span class=\"token keyword\">offset</span> <span class=\"token operator\">=</span> <span class=\"token number\">3</span>），怎么知道这个消息在哪个切分文件中，以及真实数据如何查询？</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">-- 答案：</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">1</span>）log和<span class=\"token keyword\">index</span>文件名说明： <span class=\"token comment\">-- 牢记 log、index、timeindex 是一个整体</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">index</span>：<span class=\"token number\">00000000000000000000.</span><span class=\"token keyword\">index</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>log：<span class=\"token number\">00000000000000000000.</span>log</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>前面的数字<span class=\"token number\">00000000000000000000</span>：代表此log文件中第一条消息的<span class=\"token keyword\">offset</span>。</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token string\">'.index文件存储大量的索引信息，“.log”文件存储大量的数据，索引文件中的元数据指向对应数据文件中message的物理偏移地址'</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token number\">2</span>） 查询的方式：</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>根据消费消息的<span class=\"token keyword\">offset</span>值 <span class=\"token comment\">--> 找到指定的 index 文件 --> 匹配此条消息在 log 文件中数据的偏移量（即该数据在 log 文件中起始位置）--> 找到待消费的数据</span></pre></td></tr></table></figure><figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 灵魂拷问 3：</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>为什么kafka要采取向一个log文件中追加数据呢？</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">-- 答案：</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">1</span>）减少IO；</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token number\">2</span>）消费数据是连续进行消费，连续读取数据的效率高。</pre></td></tr></table></figure><h3 id=\"32-kafka之生产者producer\"><a class=\"anchor\" href=\"#32-kafka之生产者producer\">#</a> 3.2 Kafka 之生产者 producer</h3>\n<h4 id=\"321-分区策略\"><a class=\"anchor\" href=\"#321-分区策略\">#</a> 3.2.1 分区策略</h4>\n<ol>\n<li>首先 producer 发送的数据会被封装成 ProducerRecord 对象，根据对象的参数，分区情况如下：\n<ul>\n<li>\n<p>情况 1 ：指定了 partition；</p>\n</li>\n<li>\n<p>情况 2 ：未指定 partition，封装 key，则按照 key 的 hashcode % 分区数量 得出在哪个分区；</p>\n</li>\n<li>\n<p>情况 3：未指定 partition，也未封装 key 处理方式 :</p>\n<p>参数 1：producer 发送的数据量：batch.size，默认值为 16Kb；</p>\n<p>条件 2：<span class=\"exturl\" data-url=\"aHR0cDovL2xpbmdlci5tcw==\">linger.ms</span>：两条数据发送的间隔时间 t ，默认值为 0s；</p>\n<p>当发送的数据量 &lt; batch.size 并且 发送的数据时间间隔  &lt; t   时，所有的数据在一个分区；</p>\n<p>当发送的数据量 &gt; batch.size 或者 发送的数据时间间隔  &gt;  t 时，则数据会进入下一个分区；</p>\n<p>分区与分区之间采取轮询的方式。</p>\n<p><img data-src=\"https://miyazono-1255488789.cos.ap-shanghai.myqcloud.com/markdown/20210822155751.png\" alt=\"图4\" /></p>\n<p><img data-src=\"https://miyazono-1255488789.cos.ap-shanghai.myqcloud.com/markdown/20210822155800.png\" alt=\"图3\" /></p>\n</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"322-数据可靠性保证\"><a class=\"anchor\" href=\"#322-数据可靠性保证\">#</a> 3.2.2 数据可靠性保证</h4>\n<p>数据传输流程：</p>\n<p>producer -----&gt; server（kafka） ---------&gt; 消费者</p>\n<ul>\n<li>过程 1：producer -----&gt; server（kafka）</li>\n</ul>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 灵魂拷问 1： </span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>如何保证从producer发送数据server的过程中数据不丢失？</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">-- 答案：</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>server收到数据以后会回执，发送ack（acknowledgement确认收到）给producer，producer收到ack以后，则确定数据传送的过程中没有丢失。</pre></td></tr></table></figure><ul>\n<li>过程 2 ： server 的数据存储过程</li>\n</ul>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 灵魂拷问 2：</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>如何确保数据在server中能够被妥善保管呢？</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">-- 答案：</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>server向producer回执ack的时机：</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>模式<span class=\"token number\">1</span>：leader收到消息以后立即回复ack；</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>模式<span class=\"token number\">2</span>：leader收到消息并存储在本地以后，立即回复ack；</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>模式<span class=\"token number\">3</span>：leader收到消息后，所有follow从leader中拉取数据，当所有的follower完成存储以后，leader向producer回复ack。</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>说明：情况<span class=\"token number\">1</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token operator\">/</span><span class=\"token number\">3</span>是通过acks参数进行配置。</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>acks<span class=\"token operator\">=</span><span class=\"token number\">0</span> <span class=\"token comment\">-- leader 收到消息以后立即回复 ack</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>acks<span class=\"token operator\">=</span><span class=\"token number\">1</span> <span class=\"token comment\">-- leader 收到消息并存储在本地以后，立即回复 ack</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>acks<span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span>或<span class=\"token keyword\">all</span> <span class=\"token comment\">--leader 收到消息后，所有 follow 从 leader 中拉取数据，当所有的 follower 完成存储以后，leader 向 producer 回复 ack</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">-- 默认情况下是 acks=1；</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">-- 灵魂拷问 3：</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>leader与follower副本数据同步策略是什么呢？</pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\">-- 答案</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>两种副本同步策略。</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>第一种：半数以上完成同步，就发送ack</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>第二种：全部完成同步，才发送ack</pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token string\">'kafka选择全部完成同步，才发送ack'</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token comment\">-- 灵魂拷问 4：</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>kafka选择第二种副本同步策略会有哪些问题呢？</pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token comment\">-- 答案：</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>问题<span class=\"token number\">1</span>：follower同步leader的数据时，当某一个follower迟迟未向leader回复备份成功时，出现阻塞的状态；</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>问题<span class=\"token number\">2</span>：当leader回执给producer的ack丢失时，producer因为没有收到来自leader的ack，则默认数据没有发送成功，会重新向集群发送未收到ack的消息，导致数据的重复。 <span class=\"token comment\">-- 数据的重复指：同一条消息重复发送。</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token comment\">-- 那如何解决这两个问题呢？</span></pre></td></tr></table></figure><ul>\n<li>问题 1（数据阻塞）解决方案：</li>\n</ul>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>规则：leader完成消息的读取和写出操作，follower定时向leader拉取数据。</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">1.</span> leader维护了一个动态的<span class=\"token operator\">in</span><span class=\"token operator\">-</span>sync replicat <span class=\"token keyword\">set</span> <span class=\"token punctuation\">(</span>ISR<span class=\"token punctuation\">)</span> 同步副本的列表，说明：即使是follower也有可能不在isr列表中。</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">2.</span>。只要在isr列表中所有的follower均告知leader副本备份完成以后，则leader向producer回执ack，则不受限于出现故障的follower，因为出现故障，就被移除isr列表中。</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">-- 问题 1：</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>那么什么情况下follower不在isr列表呢？</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">-- 答案：</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>如果follower没有在规定的时间与leader保持同步，则leader会将该follower从isr中踢出，同步最大时间通过replica<span class=\"token punctuation\">.</span>lag<span class=\"token punctuation\">.</span><span class=\"token keyword\">time</span><span class=\"token punctuation\">.</span>max<span class=\"token punctuation\">.</span>ms参数设定。</pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">-- 问题 2：</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>那么从isr中踢出的follower怎么重新回到isr中呢？ <span class=\"token comment\">-- 故障处理机制</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">-- 答案：</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>每个消息在follower的log文件中有：</pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> 真实数据 :消息的真实数据</pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> LEO<span class=\"token punctuation\">(</span>log <span class=\"token keyword\">end</span> <span class=\"token keyword\">offset</span><span class=\"token punctuation\">)</span> : 消息的最后偏移量</pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> HW<span class=\"token punctuation\">(</span>High Watermark<span class=\"token punctuation\">)</span> ：ISR列表中follower最小的LEO（偏移量）</pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>说明：</pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token number\">1</span>）每个follower中的LEO可能是不一样的，因副本同步的快慢有差异；</pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token number\">2</span>）leader中log的LEO是最大的，因为数据源源不断的发送过来，它的落盘速度是最快的；</pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token number\">3</span>）HW之前的数据对consumer可见；</pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token number\">4</span>）HW是一个动态的数据，当leader回执ack一次HW就会更新一次。</pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>follower发生故障后会被临时踢出ISR，待该follower恢复后，follower会读取本地磁盘记录的上次的HW，并将log文件高于HW的部分截取掉，从HW开始向leader进行同步。等该follower的LEO大于等于该<span class=\"token keyword\">Partition</span>的HW，即follower追上leader之后，就可以重新加入ISR了。</pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token comment\">-- 问题 3：</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>当leader挂掉以后怎么办？</pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token comment\">-- 答案：</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token number\">1</span>） 重新选举leader；</pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token number\">2</span>） 从isr列表中的follower中选取；</pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token number\">3</span>） 随机选择。</pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token string\">'详细过程'</span>：leader发生故障之后，会从ISR中选出一个新的leader，之后，为保证多个副本之间的数据一致性，其余的follower会先将各自的log文件高于HW的部分截掉，然后从新的leader同步数据。</pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token string\">'注意'</span>：这只能保证副本之间的数据一致性，并不能保证数据不丢失或者不重复</pre></td></tr></table></figure><ul>\n<li>问题 2（数据重复）的解决方案</li>\n</ul>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 在 0.11 之前的 kafka 版本：</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>在消费者端进行去重，在producer传输数据时，对消息增加唯一的全局主键，然后在消费端根据该主键进行去重。 </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>该方式导致消费者组所有的消费者都需要进行去重操作，重复。</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">-- 在 0.11 版本之后引进了 Exactly Once （幂等性）来解决数据重复的问题</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> <span class=\"token number\">1</span>） Exactly Once （幂等性） ： 做n次和做一次的效果是一样的，就是指Producer不论向Server发送多少次重复数据（重复发送同一条数据），Server端都只会持久化一条，在server端完成去重操作。</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> <span class=\"token number\">2</span>） 幂等性实现过程</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   初始化数据时，给消息分配一个pid，发往同一个分区的消息会附带sequence Number<span class=\"token punctuation\">,</span>broker端会将<span class=\"token operator\">&lt;</span>pid<span class=\"token punctuation\">,</span><span class=\"token keyword\">partition</span><span class=\"token punctuation\">,</span>sequence Number<span class=\"token operator\">></span>和消息的真实数据一起存储到log文件中，当具有相同主键的消息提交时，Broker只会持久化一条。</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">-- 何为主键？</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>由<span class=\"token operator\">&lt;</span>pid<span class=\"token punctuation\">,</span><span class=\"token keyword\">partition</span><span class=\"token punctuation\">,</span>sequence Number<span class=\"token operator\">></span>三个参数构成的集合。重复发送的数据，这三个值不会变，数据是否重复与数据的内容无关，而是指为同一条数据多次发送。 <span class=\"token comment\">-- 总结：重发的消息的主键是不会改变的，新发的消息 seqnumber 就会变化。</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>例如：消息A与消息B的数据内容完全一致</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>producer向集群发送消息A，集群收到以后返回的ack丢失，则消息A会被再次发送一次，此时消息A的主键是和第一次发送时相同，则集群认为数据是重复，不会进行存储；</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>producer向集群发送消息B，虽然与消息A的数据相同，但是seqnumber是不同的，所以不是重复的数据，集群会进行数据存储。</pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>说明：</pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token number\">1</span>） sequence Number ：消息序列号，发往同一<span class=\"token keyword\">Partition</span>的消息会附带Sequence Number，表示该producer向该分区发送的第几次消息；</pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\tpid : 生产者的id； </pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>  <span class=\"token keyword\">partition</span> ： 分区号；</pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token number\">4</span>） PID重启就会变化，同时不同的<span class=\"token keyword\">Partition</span>也具有不同主键，所以幂等性无法保证跨分区跨会话的Exactly Once；</pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token number\">5</span>） 开启幂等性会降低kafka的性能；</pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token number\">6</span>） 幂等性的底层原理也还是通过给消息增加全局的唯一主键的方式；</pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token number\">7</span>） 开启幂等性参数：<span class=\"token keyword\">enable</span><span class=\"token punctuation\">.</span>idompotence设置为<span class=\"token boolean\">true</span>即可。</pre></td></tr></table></figure><h3 id=\"33-kafka之消费者-consumer\"><a class=\"anchor\" href=\"#33-kafka之消费者-consumer\">#</a> 3.3 Kafka 之消费者 consumer</h3>\n<h4 id=\"331-消费模式\"><a class=\"anchor\" href=\"#331-消费模式\">#</a> 3.3.1 消费模式</h4>\n<p>​\t消费者从 server 中读取数据的方式有两种：pull （拉）和 push（推）</p>\n<ol>\n<li>\n<p>pull  ： consumer 向 server 拉取数据 <strong>【主动】</strong></p>\n<ul>\n<li>优点：消费者按需索取</li>\n<li>缺点：不及时，有可能拉取到了空数据</li>\n</ul>\n</li>\n<li>\n<p>push ：server 向 consumer 推送数据 **【被动】**</p>\n<ul>\n<li>优点：及时</li>\n<li>缺点：推送的速率与消费者消费的数据不一致时，产生背压</li>\n</ul>\n</li>\n<li>\n<p>kafka 默认使用 pull，拉取数据的方式。因为 kafka 是一对多的关系，同一个消费者组内的不同消费者的消费速率不同，所以不好设定推送的速率。</p>\n</li>\n<li>\n<p>当出现拉取的数据为空时，consumer 会等待一段时间之后再拉取数据，这段时长即为 timeout</p>\n</li>\n</ol>\n<h4 id=\"332-分区分配策略\"><a class=\"anchor\" href=\"#332-分区分配策略\">#</a> 3.3.2 分区分配策略</h4>\n<p>​\t三种方式：roundrobin 、 range  、sticky</p>\n<ol>\n<li>\n<p>roundrobin ： 轮询的方式 ，理解为洗牌，一张一张的发，分区一个一个轮询的方式分配给消费者；</p>\n<p>缺点：当有新的消费者加进来时，所有的分区需要重新分配分区，基本上大多数的消费者的消费分区都会发生改变。</p>\n</li>\n<li>\n<p>range：理解斗地主把牌按数量平均分配；</p>\n<p>缺点：订阅的话题过多时，存在分区数量不均等的情况。</p>\n</li>\n<li>\n<p>sticky：是在第一种方式的基础上进行改进，解决新增消费者情况的缺点，此时不再是所有消费者的分区进行重新分配，而是新进的消费者取之前所有消费者最后一次分区的数据进行消费。</p>\n</li>\n</ol>\n<ul>\n<li>当消费者的个数 &gt; 分区的个数时，有些消费者没分配不到数据。</li>\n<li>消费者默认的分区分配策略是 range，但是消费者在消费数据时也可以自定指定策略。</li>\n<li>一个分区只能由一个消费者进行消费。</li>\n</ul>\n<h4 id=\"333-offset的维护\"><a class=\"anchor\" href=\"#333-offset的维护\">#</a> 3.3.3   offset 的维护</h4>\n<p>​       由于 consumer 在消费过程中可能会出现断电宕机等故障，consumer 恢复后，需要从故障前的位置的继续消费，所以 consumer 需要实时记录自己消费到了哪个 offset，以便故障恢复后继续消费。<br />\n​      Kafka 0.9 版本之前，consumer 默认将 offset 保存在 Zookeeper 中，从 0.9 版本开始，consumer 默认将 offset 保存在 Kafka 一个内置的 topic 中，该 topic 为__consumer_offsets。</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 问题：</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>为什么要将<span class=\"token keyword\">offset</span>从zookeeper中转移到kafka中？</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">-- 回答：</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>zookeeper中维护<span class=\"token keyword\">offset</span>的效率对于Kafka来说，不可控的，Kafka不能通过修改自己的代码来提升zookeeper维护<span class=\"token keyword\">offset</span>的效率，所以将<span class=\"token keyword\">offset</span>的维护迁移到kafka的会话中。</pre></td></tr></table></figure><h3 id=\"34-kafka高效读写数据\"><a class=\"anchor\" href=\"#34-kafka高效读写数据\">#</a> 3.4  Kafka 高效读写数据</h3>\n<h4 id=\"341-顺序写磁盘\"><a class=\"anchor\" href=\"#341-顺序写磁盘\">#</a> 3.4.1 顺序写磁盘</h4>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 问题 1：</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>kafka的producer生产的数据最终按照顺序存储到磁盘上，写入到磁盘中数据过程不是很慢吗？</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">-- 回答：</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">1</span>） 多分区存储模式：kafka是采用多分区的存储方式，提高了高并发；</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">2</span>） 顺序写模式：按照顺序写的速度能够减少大量磁头询地址的时间，使写数据速度和网络传输速度相当，所以基本上够用，但是还是比内存数据传输的速度要慢。</pre></td></tr></table></figure><h4 id=\"342-应用pagecache\"><a class=\"anchor\" href=\"#342-应用pagecache\">#</a> 3.4.2 应用 Pagecache</h4>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 1. 说明：</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Pagecache<span class=\"token punctuation\">(</span>网页缓存<span class=\"token punctuation\">)</span>：是操作系统实现的一个功能，因为linux系统兼容这个功能，所以kafka能够使用，解决大量随机读写的过程。</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">-- 2. 内存：</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>我们常说的内存可以分为两个模块，一是提供给系统的内核使用，此部分对于用户是不可见的，不能被用户使用，二是供用户使用的内存。</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">-- 3. 原理： </span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>pagecache是在内核内存中开辟的一个内存空间，producer生产的数据，先会存储在该内存中，待达到一定的数据量以后，再统一进行落盘，当消费者消费的速率和生产者生产的速率相同时，读写的效率是最高的，因为此时生产的数据不需要落盘处理，consumer直接从内存中读取数据。</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">-- 4. 交换区和 pagecache 的区别：</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>交换区：将磁盘当做内存使用；</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>pagecache：将内存当做磁盘使用；</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>恰好是两个相反的过程。</pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">-- 5. 假如 pagecache 挂掉了怎么办？内存中的数据不是丢失了吗？</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>首先当发生这个问题时，是不能够完全保证数据一定不丢失，但是由于kafka具有副本策略，所以有一定保证的。</pre></td></tr></table></figure><p>优点：</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1</span>） I<span class=\"token operator\">/</span>O Scheduler 会将连续的小块写组装成大块的物理写从而提高性能</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">2</span>） I<span class=\"token operator\">/</span>O Scheduler 会尝试将一些写操作重新按顺序排好，从而减少磁盘头的移动时间</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">3</span>） 充分利用所有空闲内存（非 JVM 内存）。如果使用应用层 Cache（即 JVM 堆内存），会增加 GC 负担</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">4</span>） 读操作可直接在 Page Cache 内进行。如果消费和生产速度相当，甚至不需要通过物理磁盘（直接通过 Page Cache）交换数据</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">5</span>） 如果进程重启，JVM 内的 Cache 会失效，但 Page Cache 仍然可用</pre></td></tr></table></figure><h4 id=\"343-零拷贝技术\"><a class=\"anchor\" href=\"#343-零拷贝技术\">#</a> 3.4.3 零拷贝技术</h4>\n<p><img data-src=\"https://miyazono-1255488789.cos.ap-shanghai.myqcloud.com/markdown/20210822155816.png\" alt=\"图5\" /></p>\n<p>说明：</p>\n<p>内存是分级别的，读写数据时数据先经过内核内存再经过用户内存。</p>\n<p>如果是数据的写出操作，则数据经过内核内存以后就直接往外写出，不需经过用户内存，用户内存只是负责调度的功能，减少了 数据的传输过程，这个过程称为零拷贝。</p>\n<h3 id=\"35-zookeeper在kafka中的作用\"><a class=\"anchor\" href=\"#35-zookeeper在kafka中的作用\">#</a> 3.5  zookeeper 在 kafka 中的作用</h3>\n<ul>\n<li>kafka 是一个去中心化的框架，没有主从之分，则需要一个中央控制中心进行调度，类似 ha 集群一样。</li>\n<li>kafka 是依赖于 zookeeper 集群的。</li>\n</ul>\n<p>流程：一个 kafka 集群，多个 broker，一个 zk 集群</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 步骤：</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">1</span>） 首先所有的broker会竞选一个controller（随机竞选，谁厉害谁上），负责管理集群broker的上下线，所有topic的分区副本分配和leader选举等工作；</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">2</span>） 所有的broker将自己的id信息注册到zk集群的节点上；</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">3</span>） controller监控zk的这个信息；</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">4</span>） controller负责broker的leader选举工作；</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token number\">5</span>） broker将状态信息注册到zk集群上；</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token number\">6</span>） 此时分区的leader故障以后，controller从zk集群中获取isr中的follower信息，负责从isr中follower选举出一个新的leader；</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token number\">7</span>） controller更新zk集群上broker的状态信息。</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">-- 假如故障的 leader 恰好也是 controller 怎么办？</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>先从现存的follower中重新选举controller，再执行<span class=\"token number\">1</span><span class=\"token operator\">-</span><span class=\"token number\">5</span>步。</pre></td></tr></table></figure><p><img data-src=\"https://miyazono-1255488789.cos.ap-shanghai.myqcloud.com/markdown/20210822155820.png\" alt=\"图6\" /></p>\n<h3 id=\"36-kafka事务\"><a class=\"anchor\" href=\"#36-kafka事务\">#</a> 3.6 Kafka 事务</h3>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 问题：</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>事务用来解决什么问题？</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">-- 回答：</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>kafka使用Exactly Once解决producer端生产数据重复的问题存在什么 问题？</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>问题<span class=\"token number\">1</span>：不能跨分区；</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>问题<span class=\"token number\">2</span>：producer重启时，pid会发生变化。</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>则事务就是来解决上面问题的，事务可以保证Kafka在Exactly Once语义的基础上，生产和消费可以跨分区和会话，要么全部成功，要么全部失败。</pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">-- 那具体是怎么做的呢？</span></pre></td></tr></table></figure><h4 id=\"361-producer事务\"><a class=\"anchor\" href=\"#361-producer事务\">#</a> 3.6.1 producer 事务</h4>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 解决 producer 重启问题：</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> 引进全局唯一的<span class=\"token keyword\">Transaction</span> ID，将producer的pid与<span class=\"token keyword\">Transaction</span> ID进行绑定。当重启producer时，可以通过正在进行的<span class=\"token keyword\">Transaction</span> ID获得原来的PID<span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> 为了管理<span class=\"token keyword\">Transaction</span>，Kafka引入了一个新的组件<span class=\"token keyword\">Transaction</span> Coordinator。Producer就是通过和<span class=\"token keyword\">Transaction</span> Coordinator交互获得<span class=\"token keyword\">Transaction</span> ID对应的任务状态。<span class=\"token keyword\">Transaction</span> Coordinator还负责将所有事务写入Kafka的一个内部Topic，这样即使整个服务重启，由于事务状态得到保存，进行中的事务状态可以得到恢复，从而继续进行。</pre></td></tr></table></figure><h4 id=\"362-consumer事务精准一次性消费\"><a class=\"anchor\" href=\"#362-consumer事务精准一次性消费\">#</a> 3.6.2  Consumer 事务（精准一次性消费）</h4>\n<pre><code>kafak对consumer事务的保证是非常弱的，尤其无法保证Commit的信息被精确消费。这是由于Consumer可以通过offset访问任意信息，而且不同的Segment File生命周期不同，同一事务的消息可能会出现重启后被删除的情况\n</code></pre>\n<h2 id=\"四-kafka-api\"><a class=\"anchor\" href=\"#四-kafka-api\">#</a> 四、 Kafka API</h2>\n<p>温馨提示</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>api的步骤：</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>第一步： new 对象<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>第二步： 具体的操作<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>第三步： 关闭资源。</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">-- 不知道要写哪些参数？不知道参数的意义？不知道参数取值？怎么办？</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>请认准kafka官网：https:<span class=\"token comment\">//kafka.apache.org/documentation/</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>producer API ： 找Producer Configs</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>consumer API：  找Consumer Configs</pre></td></tr></table></figure><h3 id=\"41-producer-api\"><a class=\"anchor\" href=\"#41-producer-api\">#</a> 4.1 Producer API</h3>\n<h4 id=\"411-消息发送流程\"><a class=\"anchor\" href=\"#411-消息发送流程\">#</a> 4.1.1 消息发送流程</h4>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 问题： </span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Kafka的Producer发送消息采用的是异步发送的方式，这种方式优点和缺点是什么呢？</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">-- 回答：</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>优点：高效率，生产者只要一直生产数据就可以，不需要等到ack回执后再进行生产数据；</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>缺点：不能实时知道数据是否发送成功，不过有ack机制、幂等性机制和producer事务（保证数据的准确性）。</pre></td></tr></table></figure><figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 发送数据的流程：</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token string\">'两线程一共享变量'</span>：</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">1.</span> main线程：将消息发送给RecordAccumulator</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">2.</span> Sender线程：Sender线程不断从RecordAccumulator中拉取消息发送到Kafka broker</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">3.</span> 线程共享变量——RecordAccumulator：数据临时存储器。</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token string\">'步骤'</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>第一步：生产者首先将数据包装成ProducerRecord</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>第二步：main线程中有一个send方法，producer将ProducerRecord发送给interceptors<span class=\"token string\">'拦截器'</span>处理；</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>第三步：interceptors处理好后将数据传递给<span class=\"token string\">'序列化器'</span>，将数据序列化； <span class=\"token comment\">-- 在 producer 端序列化</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>第四步：将序列化好的数据传递给<span class=\"token string\">'分区器'</span>，对数据进行分区； <span class=\"token comment\">-- 在 producer 端序列化</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>第五步：将数据传递到内存的数据缓存区，在这里面，话题有多少个分区，在缓存区里面就有多少个分区，一一对应，对应的分区数据就会去到对应的缓存区的分区中； <span class=\"token comment\">-- 此时的数据是已经分好区了，同时也是已经序列化，此时 producer 就不再管这里的数据了；</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>第六步：Sender线程就将数据发送给topic中的分区中。 </pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">-- 此时的数据，Sender 线程是怎么向 topic 中发的呢？</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>batch<span class=\"token punctuation\">.</span>size：只有数据积累到batch<span class=\"token punctuation\">.</span>size之后，sender才会发送数据。</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>linger<span class=\"token punctuation\">.</span>ms：如果数据迟迟未达到batch<span class=\"token punctuation\">.</span>size，sender等待linger<span class=\"token punctuation\">.</span><span class=\"token keyword\">time</span>之后就会发送数据。</pre></td></tr></table></figure><p><img data-src=\"https://miyazono-1255488789.cos.ap-shanghai.myqcloud.com/markdown/20210822155824.png\" alt=\"图7\" /></p>\n<h4 id=\"412-异步发送api\"><a class=\"anchor\" href=\"#412-异步发送api\">#</a> 4.1.2 异步发送 API</h4>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">kafkaproducer</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>kafka<span class=\"token punctuation\">.</span>clients<span class=\"token punctuation\">.</span>producer<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Callback</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>kafka<span class=\"token punctuation\">.</span>clients<span class=\"token punctuation\">.</span>producer<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">KafkaProducer</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>kafka<span class=\"token punctuation\">.</span>clients<span class=\"token punctuation\">.</span>producer<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ProducerRecord</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>kafka<span class=\"token punctuation\">.</span>clients<span class=\"token punctuation\">.</span>producer<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RecordMetadata</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Properties</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ExecutionException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Future</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"14\"></td><td><pre> * @author lianzhipeng</pre></td></tr><tr><td data-num=\"15\"></td><td><pre> * @Description</pre></td></tr><tr><td data-num=\"16\"></td><td><pre> * @create 2020-05-08 14:58</pre></td></tr><tr><td data-num=\"17\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Producer</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ExecutionException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token comment\">//1.new 对象</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token class-name\">Properties</span> properties <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Properties</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        properties<span class=\"token punctuation\">.</span><span class=\"token function\">setProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"key.serializer\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                <span class=\"token string\">\"org.apache.kafka.common.serialization.StringSerializer\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        properties<span class=\"token punctuation\">.</span><span class=\"token function\">setProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"value.serializer\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                <span class=\"token string\">\"org.apache.kafka.common.serialization.StringSerializer\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        properties<span class=\"token punctuation\">.</span><span class=\"token function\">setProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"acks\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"all\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        properties<span class=\"token punctuation\">.</span><span class=\"token function\">setProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bootstrap.servers\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"hadoop102:9092\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token class-name\">KafkaProducer</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> producer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">KafkaProducer</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>properties<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token comment\">//2. 具体的操作</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            <span class=\"token class-name\">Future</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">RecordMetadata</span><span class=\"token punctuation\">></span></span> result <span class=\"token operator\">=</span> producer<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ProducerRecord</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                    <span class=\"token string\">\"first\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>                    <span class=\"token string\">\"Message\"</span> <span class=\"token operator\">+</span> i<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>                    <span class=\"token string\">\"这是第\"</span> <span class=\"token operator\">+</span> i <span class=\"token operator\">+</span> <span class=\"token string\">\"条信息\"</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Callback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 回调函数，当 producer 发送的数据完成以后，返回告诉 producer 数据发送成功</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>                <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onCompletion</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RecordMetadata</span> metadata<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Exception</span> exception<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>                    <span class=\"token keyword\">int</span> partition <span class=\"token operator\">=</span> metadata<span class=\"token punctuation\">.</span><span class=\"token function\">partition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>                    <span class=\"token class-name\">String</span> topic <span class=\"token operator\">=</span> metadata<span class=\"token punctuation\">.</span><span class=\"token function\">topic</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>                    <span class=\"token keyword\">long</span> offset <span class=\"token operator\">=</span> metadata<span class=\"token punctuation\">.</span><span class=\"token function\">offset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>                    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>                            topic <span class=\"token operator\">+</span> <span class=\"token string\">\"话题\"</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>                                    <span class=\"token operator\">+</span> partition <span class=\"token operator\">+</span> <span class=\"token string\">\"分区\"</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>                                    <span class=\"token operator\">+</span> offset <span class=\"token operator\">+</span> <span class=\"token string\">\"消息发送成功\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>            <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>           </pre></td></tr><tr><td data-num=\"53\"></td><td><pre>            如下一行代码产生同步回调和异同回调两种方式：</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>            同步回调：加了此行代码，生产者收到 ack 以后再发第二条消息；类似打电话</pre></td></tr><tr><td data-num=\"55\"></td><td><pre>            异步回调：未加此行代码，生成者只要一直发送消息既可。类似发短信</pre></td></tr><tr><td data-num=\"56\"></td><td><pre>          </pre></td></tr><tr><td data-num=\"57\"></td><td><pre>            */</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>            <span class=\"token class-name\">RecordMetadata</span> recordMetadata <span class=\"token operator\">=</span> result<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"第\"</span> <span class=\"token operator\">+</span> i <span class=\"token operator\">+</span> <span class=\"token string\">\"条消息发送结束\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>        <span class=\"token comment\">//3. 关闭资源，资源关闭的时候会调用回调函数</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>        producer<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"42-consumer-api\"><a class=\"anchor\" href=\"#42-consumer-api\">#</a> 4.2  Consumer API</h3>\n<h4 id=\"421-数据漏消费和重复消费\"><a class=\"anchor\" href=\"#421-数据漏消费和重复消费\">#</a> 4.2.1 数据漏消费和重复消费</h4>\n<ol>\n<li>消费者不用担心数据的可靠性问题，因为消费者消费以后的数据是不会从 kafka 集群中删除的。但是消费者要关心两个问题：</li>\n</ol>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 问题 1 数据漏消费</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>什么时候会出现数据漏消费呢？</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>先提交<span class=\"token keyword\">offset</span>后消费。</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>例如：消费者从kafka集群中获取了数据，此数据在消费的过程中出现故障延迟最后宕机，在故障期间<span class=\"token keyword\">offset</span>已经提交至kafka集群，此时实际上数据并没有被使用，但是kafka集群上该消费者消费的数据偏移量已经更新了，重启消费者时，上一条数据不能被消费了，导致数据漏消费。</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">-- 问题 2 数据重复消费</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>什么时候会出现数据库重复消费呢？</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>当数据已经被消费以后，此时返回的<span class=\"token keyword\">offset</span>时消费者出现了故障，则kafka集群中的_consumer_offset会话保存的<span class=\"token keyword\">offset</span>则为上一次的数据，<span class=\"token keyword\">offset</span>没有被更新，当消费者重新启动时，上一条数据则会被重新再消费一次。</pre></td></tr></table></figure><ol start=\"2\">\n<li>谈谈消费者提交 offset 的模式</li>\n</ol>\n<p>消费者每次拉取数据的最大值为：1M，（ 1048576 字节）</p>\n<ul>\n<li>\n<p>模式一：自动提交，默认每 5s 提交一次；</p>\n</li>\n<li>\n<p>模式二：手动提交，两种方式：commitSync（同步提交）、commitAsync（异步提交）；</p>\n</li>\n</ul>\n<p>​        同步和异步的异同点：</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 相同点：</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>提交本次poll的一批数据最高的偏移量<span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">-- 不同点：</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>commitSync（同步提交）：提交<span class=\"token keyword\">offset</span>时，commitSync阻塞当前线程，一直到提交成功，并且会自动失败重试（由不可控因素导致，也会出现提交失败）；</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>commitAsync（异步提交）：则没有失败重试机制，故有可能提交失败。</pre></td></tr></table></figure><h4 id=\"422-几个重要的参数\"><a class=\"anchor\" href=\"#422-几个重要的参数\">#</a> 4.2.2 几个重要的参数</h4>\n<ol>\n<li>自动提交 offset 的时间：默认为 5s</li>\n</ol>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9rYWZrYS5hcGFjaGUub3JnL2RvY3VtZW50YXRpb24vI2F1dG8uY29tbWl0LmludGVydmFsLm1z\">auto.commit.interval.ms</span></p>\n<table>\n<thead>\n<tr>\n<th>Type:</th>\n<th>int</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Default:</td>\n<td>5000</td>\n</tr>\n<tr>\n<td>Valid Values:</td>\n<td>[0,...]</td>\n</tr>\n<tr>\n<td>Importance:</td>\n<td>low</td>\n</tr>\n</tbody>\n</table>\n<ol start=\"2\">\n<li>消费者消费数据的起始位置</li>\n</ol>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9rYWZrYS5hcGFjaGUub3JnL2RvY3VtZW50YXRpb24vI2F1dG8ub2Zmc2V0LnJlc2V0\">auto.offset.reset</span></p>\n<ul>\n<li>earliest: automatically reset the offset to the earliest offset --&gt; 表示消费 topic 所有的数据</li>\n<li>latest: automatically reset the offset to the latest offset  --&gt; 表示只消费最新的数据</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Type:</th>\n<th>string</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Default:</td>\n<td>latest</td>\n</tr>\n<tr>\n<td>Valid Values:</td>\n<td>[latest, earliest, none]</td>\n</tr>\n<tr>\n<td>Importance:</td>\n<td>medium</td>\n</tr>\n</tbody>\n</table>\n<ol start=\"3\">\n<li>一次从一个分区拉取的最大数据量</li>\n</ol>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9rYWZrYS5hcGFjaGUub3JnL2RvY3VtZW50YXRpb24vI21heC5wYXJ0aXRpb24uZmV0Y2guYnl0ZXM=\">max.partition.fetch.bytes</span></p>\n<table>\n<thead>\n<tr>\n<th>Type:</th>\n<th>int</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Default:</td>\n<td>1048576</td>\n</tr>\n<tr>\n<td>Valid Values:</td>\n<td>[0,...]</td>\n</tr>\n<tr>\n<td>Importance:</td>\n<td>high</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"423-代码\"><a class=\"anchor\" href=\"#423-代码\">#</a> 4.2.3 代码</h4>\n<ul>\n<li>\n<h3 id=\"consumer-api\"><a class=\"anchor\" href=\"#consumer-api\">#</a> Consumer API</h3>\n</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">kafkaconsumer</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>kafka<span class=\"token punctuation\">.</span>clients<span class=\"token punctuation\">.</span>consumer<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>kafka<span class=\"token punctuation\">.</span>common<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">TopicPartition</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Duration</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Collections</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Map</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Properties</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"12\"></td><td><pre> * @author lianzhipeng</pre></td></tr><tr><td data-num=\"13\"></td><td><pre> * @Description</pre></td></tr><tr><td data-num=\"14\"></td><td><pre> * @create 2020-05-08 21:04</pre></td></tr><tr><td data-num=\"15\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyConsumer</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token comment\">//1 new 对象</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token class-name\">Properties</span> properties <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Properties</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        properties<span class=\"token punctuation\">.</span><span class=\"token function\">setProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"key.deserializer\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                <span class=\"token string\">\"org.apache.kafka.common.serialization.StringDeserializer\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        properties<span class=\"token punctuation\">.</span><span class=\"token function\">setProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"value.deserializer\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                <span class=\"token string\">\"org.apache.kafka.common.serialization.StringDeserializer\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        properties<span class=\"token punctuation\">.</span><span class=\"token function\">setProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bootstrap.servers\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"hadoop102:9092\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        properties<span class=\"token punctuation\">.</span><span class=\"token function\">setProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"group.id\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"group9\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        properties<span class=\"token punctuation\">.</span><span class=\"token function\">setProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"auto.offset.reset\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"earliest\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token comment\">// 自动提交 offset</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        properties<span class=\"token punctuation\">.</span><span class=\"token function\">setProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"enable.auto.commit\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"false\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token class-name\">KafkaConsumer</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> consumer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">KafkaConsumer</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>properties<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token comment\">//2 操作</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token comment\">// 连接话题</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        consumer<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collections</span><span class=\"token punctuation\">.</span><span class=\"token function\">singleton</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"first\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token comment\">// 拉取数据</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token class-name\">Duration</span> duration <span class=\"token operator\">=</span> <span class=\"token class-name\">Duration</span><span class=\"token punctuation\">.</span><span class=\"token function\">ofMillis</span><span class=\"token punctuation\">(</span><span class=\"token number\">500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>            <span class=\"token class-name\">ConsumerRecords</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> records <span class=\"token operator\">=</span> consumer<span class=\"token punctuation\">.</span><span class=\"token function\">poll</span><span class=\"token punctuation\">(</span>duration<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ConsumerRecord</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">record</span> <span class=\"token operator\">:</span> records<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">record</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>            <span class=\"token comment\">// 手动同步提交</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token comment\">//            consumer.commitSync();</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>            <span class=\"token comment\">// 手动异步提交</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>            consumer<span class=\"token punctuation\">.</span><span class=\"token function\">commitAsync</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">OffsetCommitCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>                <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>                <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onComplete</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TopicPartition</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">OffsetAndMetadata</span><span class=\"token punctuation\">></span></span> offsets<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Exception</span> exception<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>                    offsets<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>                            <span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">,</span> o<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>                                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"分区：\"</span> <span class=\"token operator\">+</span> t <span class=\"token operator\">+</span> <span class=\"token string\">\"\\nOffset：\"</span> <span class=\"token operator\">+</span> o<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>                            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>                    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        <span class=\"token comment\">//3 关闭资源</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre><span class=\"token comment\">//        consumer.close();</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre></pre></td></tr><tr><td data-num=\"67\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>异步提交代码：</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 手动异步提交方式，形参里面为回调对象。</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>            consumer<span class=\"token punctuation\">.</span><span class=\"token function\">commitAsync</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">OffsetCommitCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>                <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>               回调方式，当消费成功以后调用此方法并进行打印</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onComplete</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TopicPartition</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">OffsetAndMetadata</span><span class=\"token punctuation\">></span></span> offsets<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Exception</span> exception<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                    offsets<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                            <span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">,</span> o<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"分区：\"</span> <span class=\"token operator\">+</span> t <span class=\"token operator\">+</span> <span class=\"token string\">\"\\nOffset：\"</span> <span class=\"token operator\">+</span> o<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"五-kafka监控kafka-eagle\"><a class=\"anchor\" href=\"#五-kafka监控kafka-eagle\">#</a> 五、Kafka 监控（Kafka Eagle）</h2>\n<ol>\n<li>修改 kafka 启动命令</li>\n</ol>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>修改kafka<span class=\"token operator\">-</span>server<span class=\"token operator\">-</span><span class=\"token keyword\">start</span><span class=\"token punctuation\">.</span>sh命令中</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">-- 原文：</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">\"x$KAFKA_HEAP_OPTS\"</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"x\"</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    export KAFKA_HEAP_OPTS<span class=\"token operator\">=</span><span class=\"token string\">\"-Xmx1G -Xms1G\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>fi</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">-- 改为：</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">\"x$KAFKA_HEAP_OPTS\"</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"x\"</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    export KAFKA_HEAP_OPTS<span class=\"token operator\">=</span><span class=\"token string\">\"-server -Xms2G -Xmx2G -XX:PermSize=128m -XX:+UseG1GC -XX:MaxGCPauseMillis=200 -XX:ParallelGCThreads=8 -XX:ConcGCThreads=5 -XX:InitiatingHeapOccupancyPercent=70\"</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    export JMX_PORT<span class=\"token operator\">=</span><span class=\"token string\">\"9999\"</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">#export KAFKA_HEAP_OPTS=\"-Xmx1G -Xms1G\"</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>fi</pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">-- 注意：修改之后在启动 Kafka 之前要分发之其他节点</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>上传压缩包 kafka-eagle-bin-1.3.7.tar.gz 到集群 /opt/software 目录</li>\n<li>解压到本地</li>\n</ol>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>atguigu<span class=\"token variable\">@hadoop102</span> software<span class=\"token punctuation\">]</span>$ tar <span class=\"token operator\">-</span>zxvf kafka<span class=\"token operator\">-</span>eagle<span class=\"token operator\">-</span>bin<span class=\"token operator\">-</span><span class=\"token number\">1.3</span><span class=\"token number\">.7</span><span class=\"token punctuation\">.</span>tar<span class=\"token punctuation\">.</span>gz</pre></td></tr></table></figure><ol start=\"4\">\n<li>进入刚才解压的目录，将 kafka-eagle-web-1.3.7-bin.tar.gz 解压至 opt/module</li>\n</ol>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>atguigu<span class=\"token variable\">@hadoop102</span> kafka<span class=\"token operator\">-</span>eagle<span class=\"token operator\">-</span>bin<span class=\"token operator\">-</span><span class=\"token number\">1.3</span><span class=\"token number\">.7</span><span class=\"token punctuation\">]</span> $ tar <span class=\"token operator\">-</span>zxvf kafka<span class=\"token operator\">-</span>eagle<span class=\"token operator\">-</span>web<span class=\"token operator\">-</span><span class=\"token number\">1.4</span><span class=\"token number\">.5</span><span class=\"token operator\">-</span>bin<span class=\"token punctuation\">.</span>tar<span class=\"token punctuation\">.</span>gz <span class=\"token operator\">-</span>C <span class=\"token operator\">/</span>opt<span class=\"token operator\">/</span>module<span class=\"token operator\">/</span></pre></td></tr></table></figure><ol start=\"5\">\n<li>修改名称</li>\n</ol>\n<pre><code>[atguigu@hadoop102 module]$ mv kafka-eagle-we-1.4.5/   eagle\n</code></pre>\n<ol start=\"6\">\n<li>给启动文件执行权限 /opt/module/eagle/bin</li>\n</ol>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>atguigu<span class=\"token variable\">@hadoop102</span> bin<span class=\"token punctuation\">]</span>$ chmod <span class=\"token number\">777</span> ke<span class=\"token punctuation\">.</span>sh</pre></td></tr></table></figure><ol start=\"7\">\n<li>修改配置文件 /opt/module/eagle/conf/system-config.properties</li>\n</ol>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">######################################</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># multi zookeeper&amp;kafka cluster list</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">######################################</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>kafka<span class=\"token punctuation\">.</span>eagle<span class=\"token punctuation\">.</span>zk<span class=\"token punctuation\">.</span>cluster<span class=\"token punctuation\">.</span>alias<span class=\"token operator\">=</span>cluster1</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>cluster1<span class=\"token punctuation\">.</span>zk<span class=\"token punctuation\">.</span>list<span class=\"token operator\">=</span>hadoop102:<span class=\"token number\">2181</span><span class=\"token punctuation\">,</span>hadoop103:<span class=\"token number\">2181</span><span class=\"token punctuation\">,</span>hadoop104:<span class=\"token number\">2181</span><span class=\"token operator\">/</span>kafka</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">######################################</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\"># kafka offset storage</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">######################################</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>cluster1<span class=\"token punctuation\">.</span>kafka<span class=\"token punctuation\">.</span>eagle<span class=\"token punctuation\">.</span><span class=\"token keyword\">offset</span><span class=\"token punctuation\">.</span>storage<span class=\"token operator\">=</span>kafka</pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">######################################</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\"># kafka metrics, 30 days by default</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">######################################</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>kafka<span class=\"token punctuation\">.</span>eagle<span class=\"token punctuation\">.</span>metrics<span class=\"token punctuation\">.</span>charts<span class=\"token operator\">=</span><span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>kafka<span class=\"token punctuation\">.</span>eagle<span class=\"token punctuation\">.</span>metrics<span class=\"token punctuation\">.</span>retain<span class=\"token operator\">=</span><span class=\"token number\">30</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\">######################################</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\"># kafka sqlite jdbc driver address</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token comment\">######################################</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>kafka<span class=\"token punctuation\">.</span>eagle<span class=\"token punctuation\">.</span>driver<span class=\"token operator\">=</span>com<span class=\"token punctuation\">.</span>mysql<span class=\"token punctuation\">.</span>jdbc<span class=\"token punctuation\">.</span>Driver</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>kafka<span class=\"token punctuation\">.</span>eagle<span class=\"token punctuation\">.</span>url<span class=\"token operator\">=</span>jdbc:mysql:<span class=\"token comment\">//hadoop102:3306/ke?useUnicode=true&amp;characterEncoding=UTF-8&amp;zeroDateTimeBehavior=convertToNull</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>kafka<span class=\"token punctuation\">.</span>eagle<span class=\"token punctuation\">.</span>username<span class=\"token operator\">=</span>root</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>kafka<span class=\"token punctuation\">.</span>eagle<span class=\"token punctuation\">.</span>password<span class=\"token operator\">=</span><span class=\"token number\">123456</span></pre></td></tr></table></figure><ol start=\"8\">\n<li>添加环境变量</li>\n</ol>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>export KE_HOME<span class=\"token operator\">=</span><span class=\"token operator\">/</span>opt<span class=\"token operator\">/</span>module<span class=\"token operator\">/</span>eagle</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>export PATH<span class=\"token operator\">=</span>$PATH:$KE_HOME<span class=\"token operator\">/</span>bin</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">-- 注意：source /etc/profile</span></pre></td></tr></table></figure><ol start=\"9\">\n<li>启动</li>\n</ol>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>atguigu<span class=\"token variable\">@hadoop102</span> eagle<span class=\"token punctuation\">]</span>$ bin<span class=\"token operator\">/</span>ke<span class=\"token punctuation\">.</span>sh <span class=\"token keyword\">start</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token operator\">*</span> Kafka Eagle Service has started success<span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token operator\">*</span> Welcome<span class=\"token punctuation\">,</span> Now you can visit <span class=\"token string\">'http://192.168.9.102:8048/ke'</span> <span class=\"token comment\">-- 这个网址就是登入的 eagle 的网址</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token operator\">*</span> Account:admin <span class=\"token punctuation\">,</span>Password:<span class=\"token number\">123456</span> <span class=\"token comment\">-- 这是登入的密码</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token operator\">*</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">Usage</span><span class=\"token operator\">></span> ke<span class=\"token punctuation\">.</span>sh <span class=\"token punctuation\">[</span><span class=\"token keyword\">start</span><span class=\"token operator\">|</span><span class=\"token keyword\">status</span><span class=\"token operator\">|</span>stop<span class=\"token operator\">|</span>restart<span class=\"token operator\">|</span>stats<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token keyword\">Usage</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token operator\">*</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">Usage</span><span class=\"token operator\">></span> https:<span class=\"token comment\">//www.kafka-eagle.org/ &lt;/Usage></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">-- 注意：启动之前需要先启动 ZK 以及 KAFKA</span></pre></td></tr></table></figure><ol start=\"10\">\n<li>登录页面查看监控数据</li>\n</ol>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>网址： http:<span class=\"token comment\">//192.168.9.102:8048/ke</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>账号： admin</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>密码： <span class=\"token number\">123456</span></pre></td></tr></table></figure><h2 id=\"六-面试题\"><a class=\"anchor\" href=\"#六-面试题\">#</a> 六、面试题</h2>\n<h3 id=\"61-kafka中的isr-ar代表什么\"><a class=\"anchor\" href=\"#61-kafka中的isr-ar代表什么\">#</a> 6.1  Kafka 中的 ISR、AR 代表什么</h3>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>ISR:分区leader维护的一个follower列表，在isr中的follower与leader同步。</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>AR:分区的所有副本。</pre></td></tr></table></figure><h3 id=\"62-kafka中的hw-leo等分别代表什么\"><a class=\"anchor\" href=\"#62-kafka中的hw-leo等分别代表什么\">#</a> 6.2 Kafka 中的 HW、LEO 等分别代表什么</h3>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>LEO: leader维护的isr中所有follower的最后偏移量。</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>HW：所有followerleo最小的值。</pre></td></tr></table></figure><h3 id=\"63-kafka中是怎么体现消息顺序性的\"><a class=\"anchor\" href=\"#63-kafka中是怎么体现消息顺序性的\">#</a> 6.3 Kafka 中是怎么体现消息顺序性的</h3>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>每次生产的数据是在一个上次生产数据的基础上追加，同时存储了消息的<span class=\"token keyword\">offset</span>和数据的<span class=\"token keyword\">index</span>索引，减少了数据存储时的磁头寻址的过程。</pre></td></tr></table></figure><h3 id=\"64-kafka中的分区器-序列化器-拦截器是否了解它们之间的处理顺序是什么\"><a class=\"anchor\" href=\"#64-kafka中的分区器-序列化器-拦截器是否了解它们之间的处理顺序是什么\">#</a> 6.4 Kafka 中的分区器、序列化器、拦截器是否了解？它们之间的处理顺序是什么？</h3>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>处理顺序： 拦截器 <span class=\"token comment\">--> 序列化器 --> 分区器</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>拦截器：对数据进行简单处理，加一些标识。</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>序列化：对数据进行序列化，保证数据可用于传输；</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>分区器：给数据加上分区标签，指定数据应该去到哪个kafka集群中的分区。</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>以上三步骤均在producer端就完成了。</pre></td></tr></table></figure><h3 id=\"65-kafka生产者客户端的整体结构是什么样子的使用了几个线程来处理分别是什么\"><a class=\"anchor\" href=\"#65-kafka生产者客户端的整体结构是什么样子的使用了几个线程来处理分别是什么\">#</a> 6.5  Kafka 生产者客户端的整体结构是什么样子的？使用了几个线程来处理？分别是什么？</h3>\n<pre><code>一共2个线程，一个数据缓存区。\n线程\nmain线程：负责对数据进行包装、序列化、分区。\nsender线程：负责将数据从数据缓冲区发送topic话题中。\n\n</code></pre>\n<h3 id=\"66-消费者组中的消费者个数如果超过topic的分区那么就会有消费者消费不到数据这句话是否正确\"><a class=\"anchor\" href=\"#66-消费者组中的消费者个数如果超过topic的分区那么就会有消费者消费不到数据这句话是否正确\">#</a> 6.6 消费者组中的消费者个数如果超过 topic 的分区，那么就会有消费者消费不到数据这句话是否正确</h3>\n<pre><code>是的，正确。\n了解一下分区分配的策略。\n三种方式：roundrobin 、 range  、sticky。\n</code></pre>\n<h3 id=\"67-消费者提交消费位移时提交的是当前消费到的最新消息的offset还是offset1\"><a class=\"anchor\" href=\"#67-消费者提交消费位移时提交的是当前消费到的最新消息的offset还是offset1\">#</a> 6.7 消费者提交消费位移时提交的是当前消费到的最新消息的 offset 还是 offset+1？</h3>\n<pre><code>offset + 1 。\n</code></pre>\n<h3 id=\"68-有哪些情形会造成重复消费\"><a class=\"anchor\" href=\"#68-有哪些情形会造成重复消费\">#</a> 6.8 有哪些情形会造成重复消费？</h3>\n<pre><code>先消费后提交offset。\n</code></pre>\n<h3 id=\"69-那些情景会造成消息漏消费\"><a class=\"anchor\" href=\"#69-那些情景会造成消息漏消费\">#</a> 6.9 那些情景会造成消息漏消费？</h3>\n<pre><code>先提交offset后消费。\n</code></pre>\n<h3 id=\"610-当你使用kafka-topicssh创建删除了一个topic之后kafka背后会执行什么逻辑\"><a class=\"anchor\" href=\"#610-当你使用kafka-topicssh创建删除了一个topic之后kafka背后会执行什么逻辑\">#</a> 6.10 当你使用 kafka-topics.sh 创建（删除）了一个 topic 之后，Kafka 背后会执行什么逻辑？</h3>\n<pre><code>了解producer发送数据的过程。\n</code></pre>\n<h3 id=\"611-topic的分区数可不可以增加如果可以怎么增加如果不可以那又是为什么\"><a class=\"anchor\" href=\"#611-topic的分区数可不可以增加如果可以怎么增加如果不可以那又是为什么\">#</a> 6.11 topic 的分区数可不可以增加？如果可以怎么增加？如果不可以，那又是为什么？</h3>\n<pre><code>可以增加。\n</code></pre>\n<h3 id=\"612-topic的分区数可不可以减少如果可以怎么减少如果不可以那又是为什么\"><a class=\"anchor\" href=\"#612-topic的分区数可不可以减少如果可以怎么减少如果不可以那又是为什么\">#</a> 6.12 topic 的分区数可不可以减少？如果可以怎么减少？如果不可以，那又是为什么？</h3>\n<pre><code>不能减少，因为原分区中的数据没有地方去。\n</code></pre>\n<h3 id=\"613-kafka有内部的topic吗如果有是什么有什么作用\"><a class=\"anchor\" href=\"#613-kafka有内部的topic吗如果有是什么有什么作用\">#</a> 6.13 Kafka 有内部的 topic 吗？如果有是什么？有什么作用？</h3>\n<pre><code>\n会话：_consumer_offset，保存consumer消费的偏移量。\n</code></pre>\n<h3 id=\"614-kafka分区分配的概念\"><a class=\"anchor\" href=\"#614-kafka分区分配的概念\">#</a> 6.14 Kafka 分区分配的概念？</h3>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>一共有三种分区分配的策略。</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>三种方式：</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">1</span>）roundrobin ： 轮询分配。</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">2</span>）range ： 平均分配。</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">3</span>）sticky ： 轮询分配 <span class=\"token operator\">+</span> 解决新增消费者的优化。</pre></td></tr></table></figure><h3 id=\"615-简述kafka的日志目录结构\"><a class=\"anchor\" href=\"#615-简述kafka的日志目录结构\">#</a> 6.15 简述 Kafka 的日志目录结构？</h3>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>一共有<span class=\"token number\">3</span>个文件</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">1</span>）log文件：记录真实数据，内部包含了真实数据 <span class=\"token operator\">+</span> hw <span class=\"token operator\">+</span> leo。</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">2</span>）<span class=\"token keyword\">index</span>文件 ： 存储消息的偏移量。</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> timeindex文件 ： 存储下消息的时间偏移量。</pre></td></tr></table></figure><h3 id=\"616-如果我指定了一个offsetkafka-controller怎么查找到对应的消息\"><a class=\"anchor\" href=\"#616-如果我指定了一个offsetkafka-controller怎么查找到对应的消息\">#</a> 6.16 如果我指定了一个 offset，Kafka Controller 怎么查找到对应的消息？</h3>\n<pre><code>通过offset，消息的偏移量，通过日志目录的文件顺序号，根据区间范围找到消息所在的inde和log目录。\n其次根据在index表中的消息偏移量找到真实数据在log文件中该消息的起始索引位置。\n</code></pre>\n<h3 id=\"617聊一聊kafka-controller的作用\"><a class=\"anchor\" href=\"#617聊一聊kafka-controller的作用\">#</a> 6.17 聊一聊 Kafka Controller 的作用？</h3>\n<pre><code>1、负责leader的选举；\n2、负责监控leader的状态；\n3.负责更新集群在zookeeper中的状态。\n</code></pre>\n<h3 id=\"618-kafka中有那些地方需要选举这些地方的选举策略又有哪些\"><a class=\"anchor\" href=\"#618-kafka中有那些地方需要选举这些地方的选举策略又有哪些\">#</a> 6.18  Kafka 中有那些地方需要选举？这些地方的选举策略又有哪些？</h3>\n<pre><code>1.每个分区的leader选举；(isr)；\n2.controller的选举（先到先得）。\n</code></pre>\n<h3 id=\"619-失效副本是指什么有那些应对措施\"><a class=\"anchor\" href=\"#619-失效副本是指什么有那些应对措施\">#</a> 6.19  失效副本是指什么？有那些应对措施？</h3>\n<pre><code>follower不能与leader进行同步数据，暂时被leader踢出isr列表中。通过followe故障恢复重新备份，当leo达到了isr中的hw时，又重新会回到isr的列表中。\n</code></pre>\n<h3 id=\"620-kafka的那些设计让它有如此高的性能\"><a class=\"anchor\" href=\"#620-kafka的那些设计让它有如此高的性能\">#</a> 6.20  Kafka 的那些设计让它有如此高的性能？</h3>\n<pre><code>1. pagecache；\n2.顺序读写机制；\n3.零拷贝技术；\n4.多分区策略。\n</code></pre>\n<h2 id=\"七-flume与kafka融合技术\"><a class=\"anchor\" href=\"#七-flume与kafka融合技术\">#</a> 七 、flume 与 kafka 融合技术</h2>\n<p>kafka：数据的中转站，主要功能由 topic 体现；</p>\n<p>flume：数据的采集，通过 source 和 sink 体现。</p>\n<h3 id=\"71-kafka-source\"><a class=\"anchor\" href=\"#71-kafka-source\">#</a> 7.1 kafka source</h3>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 问题 ：</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>fulme在kafka中的作用</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">-- 答案：</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>消费者</pre></td></tr></table></figure><figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sources<span class=\"token punctuation\">.</span>r1<span class=\"token punctuation\">.</span><span class=\"token keyword\">type</span> <span class=\"token operator\">=</span> org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>flume<span class=\"token punctuation\">.</span>source<span class=\"token punctuation\">.</span>kafka<span class=\"token punctuation\">.</span>KafkaSource <span class=\"token comment\">--source 类型</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sources<span class=\"token punctuation\">.</span>r1<span class=\"token punctuation\">.</span>kafka<span class=\"token punctuation\">.</span>bootstrap<span class=\"token punctuation\">.</span>servers <span class=\"token operator\">=</span> hadoop105:<span class=\"token number\">9092</span><span class=\"token punctuation\">,</span>hadoop106:<span class=\"token number\">9092</span> <span class=\"token comment\">-- kafka 的集群</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sources<span class=\"token punctuation\">.</span>r1<span class=\"token punctuation\">.</span>kafka<span class=\"token punctuation\">.</span>topics<span class=\"token operator\">=</span>topic_log <span class=\"token comment\">-- 订阅的话题</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sources<span class=\"token punctuation\">.</span>r1<span class=\"token punctuation\">.</span>batchSize<span class=\"token operator\">=</span><span class=\"token number\">6000</span> <span class=\"token comment\">--putlist 中数据达到了 6K 以后提交到 channel 中</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sources<span class=\"token punctuation\">.</span>r1<span class=\"token punctuation\">.</span>batchDurationMillis<span class=\"token operator\">=</span><span class=\"token number\">2000</span> <span class=\"token comment\">-- 拉取数据的时间达到 2s 以后，将获取的数据提交到 channel 中</span></pre></td></tr></table></figure><h3 id=\"72-kakfa-channel\"><a class=\"anchor\" href=\"#72-kakfa-channel\">#</a> 7.2 kakfa channel</h3>\n<ul>\n<li>kakfa channel 这种情况使用的最多，此时的 flume 可以是消费者、生产者、source 和 sink 之间的缓冲区（具有高吞吐量的优势），Channel 是位于 Source 和 Sink 之间的缓冲区。</li>\n<li>一共有三种情况，分别是:</li>\n</ul>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 情况一： 有 Flume source and sink -- 缓冲区</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>kakfa channel为事件提供了可靠且高可用的通道；</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">-- 情况二： 有 source and interceptor but no sink -- 生产者</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>it allows writing Flume events <span class=\"token keyword\">into</span> a Kafka topic<span class=\"token punctuation\">,</span> <span class=\"token keyword\">for</span> <span class=\"token keyword\">use</span> <span class=\"token keyword\">by</span> other app</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">-- 情况三： 有 sink, but no source -- 消费者</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>it <span class=\"token operator\">is</span> a low<span class=\"token operator\">-</span>latency<span class=\"token punctuation\">,</span> fault tolerant way <span class=\"token keyword\">to</span> send events <span class=\"token keyword\">from</span> Kafka <span class=\"token keyword\">to</span> Flume sinks such <span class=\"token keyword\">as</span> HDFS<span class=\"token punctuation\">,</span> HBase <span class=\"token operator\">or</span> Solr</pre></td></tr></table></figure><p>官方配置文件：</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a1<span class=\"token punctuation\">.</span>channels<span class=\"token punctuation\">.</span>c1<span class=\"token punctuation\">.</span><span class=\"token keyword\">type</span> <span class=\"token operator\">=</span> org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>flume<span class=\"token punctuation\">.</span>channel<span class=\"token punctuation\">.</span>kafka<span class=\"token punctuation\">.</span>KafkaChannel <span class=\"token comment\">----channel 类型</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>a1<span class=\"token punctuation\">.</span>channels<span class=\"token punctuation\">.</span>c1<span class=\"token punctuation\">.</span>kafka<span class=\"token punctuation\">.</span>bootstrap<span class=\"token punctuation\">.</span>servers <span class=\"token operator\">=</span> hadoop105:<span class=\"token number\">9092</span><span class=\"token punctuation\">,</span>hadoop106:<span class=\"token number\">9092</span><span class=\"token punctuation\">,</span>hadoop107:<span class=\"token number\">9092</span> <span class=\"token comment\">--kafka 集群</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>a1<span class=\"token punctuation\">.</span>channels<span class=\"token punctuation\">.</span>c1<span class=\"token punctuation\">.</span>kafka<span class=\"token punctuation\">.</span>topic <span class=\"token operator\">=</span>topic_log <span class=\"token comment\">-- 话题</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>a1<span class=\"token punctuation\">.</span>channels<span class=\"token punctuation\">.</span>c1<span class=\"token punctuation\">.</span>parseAsFlumeEvent<span class=\"token operator\">=</span><span class=\"token boolean\">false</span> <span class=\"token comment\">-- 不需要 event 的 header 数据</span></pre></td></tr></table></figure><h3 id=\"73-kafka-sink\"><a class=\"anchor\" href=\"#73-kafka-sink\">#</a> 7.3 kafka sink</h3>\n<p>作用：将数据拉去到 kafka 的 topic 中。</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sinks<span class=\"token punctuation\">.</span>k1<span class=\"token punctuation\">.</span><span class=\"token keyword\">type</span> <span class=\"token operator\">=</span> org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>flume<span class=\"token punctuation\">.</span>sink<span class=\"token punctuation\">.</span>kafka<span class=\"token punctuation\">.</span>KafkaSink <span class=\"token comment\">--sink 类型</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sinks<span class=\"token punctuation\">.</span>k1<span class=\"token punctuation\">.</span>kafka<span class=\"token punctuation\">.</span>topic <span class=\"token operator\">=</span>topic_log <span class=\"token comment\">-- 话题</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sinks<span class=\"token punctuation\">.</span>k1<span class=\"token punctuation\">.</span>kafka<span class=\"token punctuation\">.</span>bootstrap<span class=\"token punctuation\">.</span>servers <span class=\"token operator\">=</span> hadoop105:<span class=\"token number\">9092</span><span class=\"token punctuation\">,</span>hadoop106:<span class=\"token number\">9092</span><span class=\"token punctuation\">,</span>hadoop107:<span class=\"token number\">9092</span> <span class=\"token comment\">--kafka 集群</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sinks<span class=\"token punctuation\">.</span>k1<span class=\"token punctuation\">.</span>kafka<span class=\"token punctuation\">.</span>flumeBatchSize <span class=\"token operator\">=</span> <span class=\"token number\">20</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sinks<span class=\"token punctuation\">.</span>k1<span class=\"token punctuation\">.</span>kafka<span class=\"token punctuation\">.</span>producer<span class=\"token punctuation\">.</span>acks <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token comment\">-- 副本策略</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sinks<span class=\"token punctuation\">.</span>k1<span class=\"token punctuation\">.</span>kafka<span class=\"token punctuation\">.</span>producer<span class=\"token punctuation\">.</span>linger<span class=\"token punctuation\">.</span>ms <span class=\"token operator\">=</span> <span class=\"token number\">1</span> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sinks<span class=\"token punctuation\">.</span>k1<span class=\"token punctuation\">.</span>kafka<span class=\"token punctuation\">.</span>producer<span class=\"token punctuation\">.</span>compression<span class=\"token punctuation\">.</span><span class=\"token keyword\">type</span> <span class=\"token operator\">=</span> snappy  <span class=\"token comment\">-- 压缩格式</span></pre></td></tr></table></figure>",
            "tags": [
                "大数据",
                "Kafka"
            ]
        }
    ]
}