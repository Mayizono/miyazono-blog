{
    "version": "https://jsonfeed.org/version/1",
    "title": "冬樱茶",
    "subtitle": "",
    "icon": "https://github.com/Mayizono/miyazono.github.io/images/favicon.ico",
    "description": "",
    "home_page_url": "https://github.com/Mayizono/miyazono.github.io",
    "items": [
        {
            "id": "https://github.com/Mayizono/miyazono.github.io/big-data/hive/HQL%E4%B8%8A%E7%BA%BF%E4%BA%BA%E6%95%B0/",
            "url": "https://github.com/Mayizono/miyazono.github.io/big-data/hive/HQL%E4%B8%8A%E7%BA%BF%E4%BA%BA%E6%95%B0/",
            "title": "HQL之同时在线人数",
            "date_published": "2020-11-10T16:00:00.000Z",
            "content_html": "<h2 id=\"1-计算平台同时在线的主播人数最大值为多少以及出现高峰期的时间段\"><a class=\"anchor\" href=\"#1-计算平台同时在线的主播人数最大值为多少以及出现高峰期的时间段\">#</a> 1. 计算平台同时在线的主播人数最大值为多少，以及出现高峰期的时间段</h2>\n<h3 id=\"主播表\"><a class=\"anchor\" href=\"#主播表\">#</a> 主播表</h3>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">create</span> <span class=\"token keyword\">table</span> zhubo</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    id  <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    stt string<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    edt string</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">row</span> format delimited <span class=\"token keyword\">fields</span> <span class=\"token keyword\">terminated</span> <span class=\"token keyword\">by</span> <span class=\"token string\">'\\t'</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"数据\"><a class=\"anchor\" href=\"#数据\">#</a> 数据</h3>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">insert</span> overwrite <span class=\"token keyword\">table</span> zhubo <span class=\"token keyword\">VALUES</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token number\">1001</span><span class=\"token punctuation\">,</span><span class=\"token string\">'2021-09-04 12:12:12'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'2021-09-04 20:12:12'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token number\">1002</span><span class=\"token punctuation\">,</span><span class=\"token string\">'2021-09-04 12:13:12'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'2021-09-04 19:12:12'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token number\">1003</span><span class=\"token punctuation\">,</span><span class=\"token string\">'2021-09-04 13:12:12'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'2021-09-04 19:50:12'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token number\">1004</span><span class=\"token punctuation\">,</span><span class=\"token string\">'2021-09-04 13:15:12'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'2021-09-04 18:12:12'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token number\">1005</span><span class=\"token punctuation\">,</span><span class=\"token string\">'2021-09-04 14:12:12'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'2021-09-04 19:12:15'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token number\">1006</span><span class=\"token punctuation\">,</span><span class=\"token string\">'2021-09-04 14:16:12'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'2021-09-04 20:12:23'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token number\">1003</span><span class=\"token punctuation\">,</span><span class=\"token string\">'2021-09-04 20:12:12'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'2021-09-04 23:12:12'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token number\">1001</span><span class=\"token punctuation\">,</span><span class=\"token string\">'2021-09-04 21:12:12'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'2021-09-04 22:12:12'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol>\n<li>把时间段转成时间点，模拟流式数据，标记位上线 + 1，下线 - 1</li>\n</ol>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">select</span> id<span class=\"token punctuation\">,</span> stt dt<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span> flag</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> zhubo</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">union</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">select</span> id<span class=\"token punctuation\">,</span> edt dt<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> flag</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">from</span> zhubo<span class=\"token punctuation\">;</span> t1</pre></td></tr></table></figure><ol start=\"2\">\n<li>统计每个时间点的在线人数</li>\n</ol>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">select</span> id<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>       dt<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>       <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span> <span class=\"token keyword\">over</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">order</span> <span class=\"token keyword\">by</span> dt<span class=\"token punctuation\">)</span> people</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">from</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">select</span> id<span class=\"token punctuation\">,</span> stt dt<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span> flag</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token keyword\">from</span> zhubo</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token keyword\">union</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token keyword\">select</span> id<span class=\"token punctuation\">,</span> edt dt<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> flag</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token keyword\">from</span> zhubo<span class=\"token punctuation\">)</span> t1<span class=\"token punctuation\">;</span> t2</pre></td></tr></table></figure><ol start=\"3\">\n<li>按照 时间流将下一个时间点移至当前行</li>\n</ol>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">select</span> dt<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>       people<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>       lead<span class=\"token punctuation\">(</span>dt<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">over</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">order</span> <span class=\"token keyword\">by</span> dt<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">from</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">select</span> id<span class=\"token punctuation\">,</span> dt<span class=\"token punctuation\">,</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span> <span class=\"token keyword\">over</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">order</span> <span class=\"token keyword\">by</span> dt<span class=\"token punctuation\">)</span> people</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token keyword\">from</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">select</span> id<span class=\"token punctuation\">,</span> stt dt<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span> flag</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token keyword\">from</span> zhubo</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token keyword\">union</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token keyword\">select</span> id<span class=\"token punctuation\">,</span> edt dt<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> flag</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token keyword\">from</span> zhubo<span class=\"token punctuation\">)</span> t1<span class=\"token punctuation\">)</span> t2<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"4\">\n<li>求最大在线人数</li>\n</ol>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">select</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>people<span class=\"token punctuation\">)</span> max_p</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">select</span> id<span class=\"token punctuation\">,</span> dt<span class=\"token punctuation\">,</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span> <span class=\"token keyword\">over</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">order</span> <span class=\"token keyword\">by</span> dt<span class=\"token punctuation\">)</span> people</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      <span class=\"token keyword\">from</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">select</span> id<span class=\"token punctuation\">,</span> stt dt<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span> flag</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token keyword\">from</span> zhubo</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token keyword\">union</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token keyword\">select</span> id<span class=\"token punctuation\">,</span> edt dt<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> flag</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token keyword\">from</span> zhubo<span class=\"token punctuation\">)</span> t1<span class=\"token punctuation\">)</span> t2<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"5\">\n<li>最后将 3、4 做 join</li>\n</ol>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>同时在线人数的表多次被使用</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">with</span> t <span class=\"token keyword\">as</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">select</span> id<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>           dt<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>           <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span> <span class=\"token keyword\">over</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">order</span> <span class=\"token keyword\">by</span> dt<span class=\"token punctuation\">)</span> people</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">from</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">select</span> id<span class=\"token punctuation\">,</span> stt dt<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span> flag</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>          <span class=\"token keyword\">from</span> zhubo</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>          <span class=\"token keyword\">union</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>          <span class=\"token keyword\">select</span> id<span class=\"token punctuation\">,</span> edt dt<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> flag</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>          <span class=\"token keyword\">from</span> zhubo<span class=\"token punctuation\">)</span> t1</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">select</span> dt<span class=\"token punctuation\">,</span> people<span class=\"token punctuation\">,</span> dtt</pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">from</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>         <span class=\"token keyword\">select</span> dt<span class=\"token punctuation\">,</span> people<span class=\"token punctuation\">,</span> lead<span class=\"token punctuation\">(</span>dt<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">over</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">order</span> <span class=\"token keyword\">by</span> dt<span class=\"token punctuation\">)</span> dtt</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>         <span class=\"token keyword\">from</span> t</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>     <span class=\"token punctuation\">)</span> t1</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>         <span class=\"token keyword\">join</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">select</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>people<span class=\"token punctuation\">)</span> max_p</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">from</span> t</pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">)</span> t2 <span class=\"token keyword\">on</span> t1<span class=\"token punctuation\">.</span>people <span class=\"token operator\">=</span> t2<span class=\"token punctuation\">.</span>max_p</pre></td></tr></table></figure>",
            "tags": [
                "大数据",
                "Hive"
            ]
        },
        {
            "id": "https://github.com/Mayizono/miyazono.github.io/big-data/hive/HQL%E7%BB%83%E4%B9%A0%E9%A2%98/",
            "url": "https://github.com/Mayizono/miyazono.github.io/big-data/hive/HQL%E7%BB%83%E4%B9%A0%E9%A2%98/",
            "title": "HQL练习题",
            "date_published": "2020-10-09T16:00:00.000Z",
            "content_html": "<p>本文通过简单易懂的业务场景，旨在提高大家的 SQL 水平。把文中所有的 SQL 全理解了，工作中遇到的各种 SQL 场景和面试中遇到的各种 SQL 问题都能灵活应对。文中所有的 SQL 都支持 Hive 语法，学会了 Hive 的 SQL，那么 MySQL 的 SQL 题也都可以 cover 住，下面的题目难度从简单到困难的都有。笔者在之前练习 SQL 过程中，发现了网上一些比较好的 SQL 题目，但是苦于好多博客提供的 SQL 可读性、规范性、执行效率并不高，因此才有了今天这篇博文，后续如果发现有可优化的的 SQL，笔者会持续更新本博文。</p>\n<h2 id=\"数据表介绍\"><a class=\"anchor\" href=\"#数据表介绍\">#</a> 数据表介绍</h2>\n<h3 id=\"学生表\"><a class=\"anchor\" href=\"#学生表\">#</a> 学生表</h3>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">create</span> <span class=\"token keyword\">table</span> study<span class=\"token punctuation\">.</span>student</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    student_id string <span class=\"token punctuation\">,</span><span class=\"token comment\">-- 学生编号</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    name       string <span class=\"token punctuation\">,</span><span class=\"token comment\">-- 学生姓名</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    birthday   string <span class=\"token punctuation\">,</span><span class=\"token comment\">-- 学生生日</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    sex        string <span class=\"token comment\">-- 学生性别</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">row</span> format delimited <span class=\"token keyword\">fields</span> <span class=\"token keyword\">terminated</span> <span class=\"token keyword\">by</span> <span class=\"token string\">'\\t'</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"教师表\"><a class=\"anchor\" href=\"#教师表\">#</a> 教师表</h3>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">create</span> <span class=\"token keyword\">table</span> <span class=\"token keyword\">if</span> <span class=\"token operator\">not</span> <span class=\"token keyword\">exists</span> study<span class=\"token punctuation\">.</span>teacher</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    teacher_id string <span class=\"token punctuation\">,</span><span class=\"token comment\">-- 教师编号</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    name       string <span class=\"token comment\">-- 教师姓名</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">row</span> format delimited <span class=\"token keyword\">fields</span> <span class=\"token keyword\">terminated</span> <span class=\"token keyword\">by</span> <span class=\"token string\">'\\t'</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"课程表\"><a class=\"anchor\" href=\"#课程表\">#</a> 课程表</h3>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">create</span> <span class=\"token keyword\">table</span> <span class=\"token keyword\">if</span> <span class=\"token operator\">not</span> <span class=\"token keyword\">exists</span> study<span class=\"token punctuation\">.</span>course</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    course_id  string <span class=\"token punctuation\">,</span><span class=\"token comment\">-- 课程编号</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    name       string <span class=\"token punctuation\">,</span><span class=\"token comment\">-- 课程名</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    teacher_id string <span class=\"token comment\">-- 课程对应的教师编号</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">row</span> format delimited <span class=\"token keyword\">fields</span> <span class=\"token keyword\">terminated</span> <span class=\"token keyword\">by</span> <span class=\"token string\">'\\t'</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"成绩表\"><a class=\"anchor\" href=\"#成绩表\">#</a> 成绩表</h3>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">create</span> <span class=\"token keyword\">table</span> study<span class=\"token punctuation\">.</span>score</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    student_id string <span class=\"token punctuation\">,</span><span class=\"token comment\">-- 学生编号</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    course_id  string <span class=\"token punctuation\">,</span><span class=\"token comment\">-- 课程编号</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    score      <span class=\"token keyword\">int</span>    <span class=\"token comment\">-- 对应的成绩</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">row</span> format delimited <span class=\"token keyword\">fields</span> <span class=\"token keyword\">terminated</span> <span class=\"token keyword\">by</span> <span class=\"token string\">'\\t'</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"答题时请注意\"><a class=\"anchor\" href=\"#答题时请注意\">#</a> 答题时请注意：</h3>\n<ul>\n<li>这里认为课程可能是选修课，学生不一定学了所有课程</li>\n<li>成绩表里的课程都应该在课程表里存在，而且每门课程都应该有对应的教师，且在教师表里可以找到</li>\n<li>成绩表里的学生也应该在学生表里存在</li>\n<li>下面的导入数据也是随机写的，读者也可以自己随机制造生成数据导入</li>\n</ul>\n<h3 id=\"导入数据\"><a class=\"anchor\" href=\"#导入数据\">#</a> 导入数据</h3>\n<h3 id=\"学生表-2\"><a class=\"anchor\" href=\"#学生表-2\">#</a> 学生表</h3>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">insert</span> overwrite <span class=\"token keyword\">table</span> study<span class=\"token punctuation\">.</span>student <span class=\"token keyword\">VALUES</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token string\">'01'</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'赵雷'</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'1990-01-01'</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'男'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token string\">'02'</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'钱电'</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'1990-12-21'</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'男'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token string\">'03'</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'孙风'</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'1990-12-20'</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'男'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token string\">'04'</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'李云'</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'1990-12-06'</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'男'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token string\">'05'</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'周梅'</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'1991-12-01'</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'女'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token string\">'06'</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'吴兰'</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'1992-01-01'</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'女'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token string\">'07'</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'郑竹'</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'1989-01-01'</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'女'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token string\">'09'</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'张三'</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'2017-12-20'</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'女'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token string\">'10'</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'李四'</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'2017-12-25'</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'女'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token string\">'11'</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'李四'</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'2012-06-06'</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'女'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token string\">'12'</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'赵六'</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'2013-06-13'</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'女'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token string\">'13'</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'孙七'</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'2014-06-01'</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'女'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"教师表-2\"><a class=\"anchor\" href=\"#教师表-2\">#</a> 教师表</h3>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">insert</span> overwrite <span class=\"token keyword\">table</span> study<span class=\"token punctuation\">.</span>teacher <span class=\"token keyword\">VALUES</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token string\">'01'</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'张三'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token string\">'02'</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'李四'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token string\">'03'</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'王五'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"课程表-2\"><a class=\"anchor\" href=\"#课程表-2\">#</a> 课程表</h3>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">insert</span> overwrite <span class=\"token keyword\">table</span> study<span class=\"token punctuation\">.</span>course <span class=\"token keyword\">VALUES</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token string\">'01'</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'语文'</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'02'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token string\">'02'</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'数学'</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'01'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token string\">'03'</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'英语'</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'03'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"成绩表-2\"><a class=\"anchor\" href=\"#成绩表-2\">#</a> 成绩表</h3>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">insert</span> overwrite <span class=\"token keyword\">table</span> study<span class=\"token punctuation\">.</span>score <span class=\"token keyword\">VALUES</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token string\">'01'</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'01'</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">80</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token string\">'01'</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'02'</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">90</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token string\">'01'</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'03'</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">99</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token string\">'02'</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'01'</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">70</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token string\">'02'</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'02'</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">60</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token string\">'02'</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'03'</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">80</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token string\">'03'</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'01'</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">80</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token string\">'03'</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'02'</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">80</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token string\">'03'</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'03'</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">80</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token string\">'04'</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'01'</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token string\">'04'</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'02'</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token string\">'04'</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'03'</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token string\">'05'</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'01'</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">76</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token string\">'05'</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'02'</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">87</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token string\">'06'</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'01'</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">31</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token string\">'06'</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'03'</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">34</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token string\">'07'</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'02'</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">89</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token string\">'07'</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'03'</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">98</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"练习题\"><a class=\"anchor\" href=\"#练习题\">#</a> 练习题</h2>\n<ol>\n<li>查询所有教师的全部信息（教师编号和姓名）</li>\n<li>输出所有学生中男生的全部信息</li>\n<li>查询所有学生中男生的全部信息，按照生日排降序</li>\n<li>查询所有学生的全部信息，先按照性别排序，再按照生日排降序</li>\n<li>求出学生总数</li>\n<li>查询学生中男生、女生人数</li>\n<li>参加考试的学生中，查出每个学生的学生编号、选了几门课</li>\n<li>检索至少选修三门课程的学生学号</li>\n<li>查询存在不及格的课程编号</li>\n<li>输出所有课程的课程编号、课程名、对应的教师姓名</li>\n<li>求每门课程的学生人数及平均分，输出课程编号、对应学生人数、平均分</li>\n<li>求每门课程的学生人数及平均分，输出课程名称、对应学生人数、平均分</li>\n<li>查询同时学习 &quot;01&quot; 课程和 &quot;02&quot; 课程的学生编号及 01 和 02 课程分数</li>\n<li>查询 &quot;01&quot; 课程比 &quot;02&quot; 课程成绩高的学生编号及 01 和 02 课程分数</li>\n<li>查询 &quot;01&quot; 课程比 &quot;02&quot; 课程成绩高的学生姓名及 01 和 02 课程分数</li>\n<li>查询选择了 &quot;01&quot; 课程但没选择 &quot;02&quot; 课程的学生姓名</li>\n<li>查询学过 ' 张三 ' 老师课程的所有同学姓名、生日、性别</li>\n<li>查询同时学习 &quot;01&quot;、&quot;02&quot; 课程学生的学生编号以及 &quot;01&quot; 和 &quot;02&quot; 课程成绩</li>\n<li>查询学习 &quot;01&quot; 课程但没有学习 &quot;02&quot; 课程学生的学生编号以及 &quot;01&quot; 课程成绩</li>\n<li>查询学习 &quot;02&quot; 课程但没有学习 &quot;01&quot; 课程学生的学生编号以及 &quot;02&quot; 课程成绩</li>\n<li>查询选课的同学的学生姓名、选课总数、所有课程的成绩总和、课程平均分</li>\n<li>查询考试平均分大于 60 分同学的学生姓名、选课总数、所有课程的成绩总和、课程平均分，按照科目数排降序、科目数相同按照分数排降序</li>\n<li>检索 &quot;01&quot; 课程分数小于 60 分的学生信息及 &quot;01&quot; 课程分数，按照分数排降序</li>\n<li>查询两门及其以上不及格课程的同学的姓名及其平均成绩</li>\n<li>查询没有学全所有课程的同学的编号 （包含无选课的同学）</li>\n<li>查询 1990 年出生的学生名单</li>\n<li>查询名字中含有「风」字的学生信息</li>\n<li>查询「李」姓老师的数量</li>\n<li>查询至少有两门课与学号为 &quot;01&quot; 的学生所学相同的学生 id</li>\n<li>查询选修了全部课程的学生 id 的姓名和姓名</li>\n<li>查询和 &quot;01&quot; 号的同学学习的课程完全相同的其他同学的学生 id</li>\n<li>统计各科成绩各分数段人数：课程编号，课程名称，[100-85]，[85-70]，[70-60]，[60-0] 及所占百分比</li>\n<li>查询学生的总成绩，并进行排名</li>\n<li>查询各科成绩前三名的记录</li>\n<li>查询出只选修两门课程的学生学号和姓名</li>\n<li>查询每门课程的平均成绩，结果按平均成绩降序排列，平均成绩相同时，按课程编号升序排列</li>\n<li>查询平均成绩大于等于 85 的所有学生的学号、姓名和平均成绩</li>\n<li>查询课程名称为「数学」，且分数低于 60 的学生姓名和分数</li>\n<li>查询课程编号为 01 且课程成绩在 80 分及以上的学生的学号和姓名</li>\n<li>查询选修「张三」老师所授课程的学生中，成绩最高的学生编号、课程编号及其成绩</li>\n<li>统计每门课程的学生选修人数（超过 5 人的课程才统计）。</li>\n<li>查询该学生有不同课程但成绩相同的学生编号、课程编号、学生成绩</li>\n</ol>\n<h2 id=\"答案请先独立思考后再参考答案\"><a class=\"anchor\" href=\"#答案请先独立思考后再参考答案\">#</a> 答案（请先独立思考后，再参考答案）</h2>\n<ol>\n<li>查询所有教师的全部信息（教师编号和姓名）</li>\n</ol>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">select</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> teacher<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>输出所有学生中男生的全部信息</li>\n</ol>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">select</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> student</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">where</span> sex <span class=\"token operator\">=</span> <span class=\"token string\">'男'</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"3\">\n<li>查询所有学生中男生的全部信息，按照生日排降序</li>\n</ol>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">select</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> student</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">where</span> sex<span class=\"token operator\">=</span><span class=\"token string\">'男'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">order</span> <span class=\"token keyword\">by</span> birthday <span class=\"token keyword\">desc</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"4\">\n<li>查询所有学生的全部信息，先按照性别排序，再按照生日排降序</li>\n</ol>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">select</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> student</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">order</span> <span class=\"token keyword\">by</span> sex<span class=\"token punctuation\">,</span>birthday <span class=\"token keyword\">desc</span> <span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"5\">\n<li>求出学生总数</li>\n</ol>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">select</span> <span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> student<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"6\">\n<li>查询学生中男生、女生人数</li>\n</ol>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">select</span> sex<span class=\"token punctuation\">,</span> <span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> student</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">group</span> <span class=\"token keyword\">by</span> sex<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"7\">\n<li>参加考试的学生中，查出每个学生的学生编号、选了几门课</li>\n</ol>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">select</span> student_id<span class=\"token punctuation\">,</span> <span class=\"token function\">count</span><span class=\"token punctuation\">(</span>course_id<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> score</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">group</span> <span class=\"token keyword\">by</span> student_id<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"8\">\n<li>检索至少选修三门课程的学生学号</li>\n</ol>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">select</span> student_id<span class=\"token punctuation\">,</span> <span class=\"token function\">count</span><span class=\"token punctuation\">(</span>course_id<span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> course_ct</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> score</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">group</span> <span class=\"token keyword\">by</span> student_id</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">having</span> course_ct <span class=\"token operator\">>=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"9\">\n<li>查询存在不及格的课程编号</li>\n</ol>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1.</span> 写法一</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">select</span> <span class=\"token keyword\">distinct</span> course_id<span class=\"token punctuation\">,</span> score</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">from</span> score</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">where</span> score <span class=\"token operator\">&lt;</span> <span class=\"token number\">60</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">2.</span> 写法二</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">select</span> course_id</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">from</span> score</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">where</span> score<span class=\"token operator\">&lt;</span><span class=\"token number\">60</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">group</span> <span class=\"token keyword\">by</span> course_id<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"10\">\n<li>输出所有课程的课程编号、课程名、对应的教师姓名</li>\n</ol>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1.</span> 写法一</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">select</span> c<span class=\"token punctuation\">.</span>course_id<span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span>t<span class=\"token punctuation\">.</span>name</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">from</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>course c <span class=\"token keyword\">join</span> teacher t <span class=\"token keyword\">on</span> c<span class=\"token punctuation\">.</span>teacher_id <span class=\"token operator\">=</span> t<span class=\"token punctuation\">.</span>teacher_id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">2.</span> 写法二</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">select</span> course_id<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">.</span>name <span class=\"token keyword\">as</span> course_name<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">.</span>name <span class=\"token keyword\">as</span> teacher_name</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">from</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">select</span> course_id<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> teacher_id <span class=\"token keyword\">from</span> study<span class=\"token punctuation\">.</span>course<span class=\"token punctuation\">)</span> a <span class=\"token keyword\">join</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">select</span> teacher_id<span class=\"token punctuation\">,</span> name</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">from</span> study<span class=\"token punctuation\">.</span>teacher <span class=\"token punctuation\">)</span> b</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">on</span> a<span class=\"token punctuation\">.</span>teacher_id <span class=\"token operator\">=</span> b<span class=\"token punctuation\">.</span>teacher_id<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"11\">\n<li>求每门课程的学生人数及平均分，输出课程编号、对应学生人数、平均分</li>\n</ol>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">select</span> course_id<span class=\"token punctuation\">,</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span>student_id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">avg</span><span class=\"token punctuation\">(</span>score<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> score</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">group</span> <span class=\"token keyword\">by</span> course_id<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"12\">\n<li>求每门课程的学生人数及平均分，输出课程名称、对应学生人数、平均分</li>\n</ol>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">select</span> c<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> <span class=\"token function\">count</span><span class=\"token punctuation\">(</span>student_id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">avg</span><span class=\"token punctuation\">(</span>score<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> course c <span class=\"token keyword\">left</span> <span class=\"token keyword\">join</span> score s <span class=\"token keyword\">on</span> s<span class=\"token punctuation\">.</span>course_id <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span>course_id</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">group</span> <span class=\"token keyword\">by</span> c<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"13\">\n<li>查询同时学习 &quot;01&quot; 课程和 &quot;02&quot; 课程的学生编号及 01 和 02 课程分数</li>\n</ol>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1.</span> 写法一</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">select</span> s1<span class=\"token punctuation\">.</span>student_id<span class=\"token punctuation\">,</span>s1<span class=\"token punctuation\">.</span>score<span class=\"token punctuation\">,</span>s2<span class=\"token punctuation\">.</span>score</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">from</span> score s1</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>         <span class=\"token keyword\">left</span> <span class=\"token keyword\">join</span> score s2 <span class=\"token keyword\">on</span> s1<span class=\"token punctuation\">.</span>student_id <span class=\"token operator\">=</span> s2<span class=\"token punctuation\">.</span>student_id</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">where</span> s1<span class=\"token punctuation\">.</span>course_id <span class=\"token operator\">=</span> <span class=\"token string\">'01'</span> <span class=\"token operator\">and</span> s2<span class=\"token punctuation\">.</span>course_id<span class=\"token operator\">=</span> <span class=\"token string\">'02'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token number\">2.</span> 写法二</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">select</span> a<span class=\"token punctuation\">.</span>student_id<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">.</span>score <span class=\"token keyword\">as</span> score_01<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">.</span>score <span class=\"token keyword\">as</span> score_02</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">from</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> score <span class=\"token keyword\">where</span> course_id <span class=\"token operator\">=</span> <span class=\"token string\">'01'</span><span class=\"token punctuation\">)</span> a</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>         <span class=\"token keyword\">join</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">select</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">from</span> score</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">where</span> course_id <span class=\"token operator\">=</span> <span class=\"token string\">'02'</span><span class=\"token punctuation\">)</span> b</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>              <span class=\"token keyword\">on</span> a<span class=\"token punctuation\">.</span>student_id <span class=\"token operator\">=</span> b<span class=\"token punctuation\">.</span>student_id<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"14\">\n<li>查询 &quot;01&quot; 课程比 &quot;02&quot; 课程成绩高的学生编号及 01 和 02 课程分数</li>\n</ol>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1.</span> 写法一</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">select</span> s1<span class=\"token punctuation\">.</span>student_id<span class=\"token punctuation\">,</span> s1<span class=\"token punctuation\">.</span>score<span class=\"token punctuation\">,</span> s2<span class=\"token punctuation\">.</span>score</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">from</span> score s1</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>         <span class=\"token keyword\">left</span> <span class=\"token keyword\">join</span> score s2 <span class=\"token keyword\">on</span> s1<span class=\"token punctuation\">.</span>student_id <span class=\"token operator\">=</span> s2<span class=\"token punctuation\">.</span>student_id</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">where</span> s1<span class=\"token punctuation\">.</span>course_id <span class=\"token operator\">=</span> <span class=\"token string\">'01'</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token operator\">and</span> s2<span class=\"token punctuation\">.</span>course_id <span class=\"token operator\">=</span> <span class=\"token string\">'02'</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token operator\">and</span> s1<span class=\"token punctuation\">.</span>score <span class=\"token operator\">></span> s2<span class=\"token punctuation\">.</span>score<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token number\">2.</span> 写法二</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">select</span> a<span class=\"token punctuation\">.</span>student_id<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">.</span>score <span class=\"token keyword\">as</span> score_01<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">.</span>score <span class=\"token keyword\">as</span> score_02</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">from</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> score <span class=\"token keyword\">where</span> course_id <span class=\"token operator\">=</span> <span class=\"token string\">'01'</span><span class=\"token punctuation\">)</span> a</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>         <span class=\"token keyword\">join</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">select</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">from</span> score</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">where</span> course_id <span class=\"token operator\">=</span> <span class=\"token string\">'02'</span><span class=\"token punctuation\">)</span> b</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>              <span class=\"token keyword\">on</span> a<span class=\"token punctuation\">.</span>student_id <span class=\"token operator\">=</span> b<span class=\"token punctuation\">.</span>student_id</pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">where</span> a<span class=\"token punctuation\">.</span>score <span class=\"token operator\">></span> b<span class=\"token punctuation\">.</span>score<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"15\">\n<li>查询 &quot;01&quot; 课程比 &quot;02&quot; 课程成绩高的学生姓名及 01 和 02 课程分数</li>\n</ol>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">select</span> s<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">.</span>score <span class=\"token keyword\">as</span> score_01<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">.</span>score <span class=\"token keyword\">as</span> score_02</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> score <span class=\"token keyword\">where</span> course_id <span class=\"token operator\">=</span> <span class=\"token string\">'01'</span><span class=\"token punctuation\">)</span> a</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>         <span class=\"token keyword\">join</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">select</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">from</span> score</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">where</span> course_id <span class=\"token operator\">=</span> <span class=\"token string\">'02'</span><span class=\"token punctuation\">)</span> b</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>         <span class=\"token keyword\">join</span> student s</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>              <span class=\"token keyword\">on</span> a<span class=\"token punctuation\">.</span>student_id <span class=\"token operator\">=</span> b<span class=\"token punctuation\">.</span>student_id <span class=\"token operator\">and</span> a<span class=\"token punctuation\">.</span>student_id <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span>student_id</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">where</span> a<span class=\"token punctuation\">.</span>score <span class=\"token operator\">></span> b<span class=\"token punctuation\">.</span>score<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"16\">\n<li>连续三道题都是有关联的，前两道题给这道题做铺垫，所以当我们拿到一个向这种比较复杂的需求时，可以进行拆分需求，先拆分成 1、在做 2，最后达到完整的需求 ------ 查询选择了 &quot;01&quot; 课程但没选择 &quot;02&quot; 课程的学生姓名</li>\n</ol>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1.</span> 找出选择了 <span class=\"token string\">\"01\"</span>课程但没选择 <span class=\"token string\">\"02\"</span>课程的学生编号</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">select</span> a<span class=\"token punctuation\">.</span>student_id</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">from</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> score <span class=\"token keyword\">where</span> course_id <span class=\"token operator\">=</span> <span class=\"token string\">'01'</span><span class=\"token punctuation\">)</span> a</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>         <span class=\"token keyword\">left</span> <span class=\"token keyword\">outer</span> <span class=\"token keyword\">join</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> score <span class=\"token keyword\">where</span> course_id <span class=\"token operator\">=</span> <span class=\"token string\">'02'</span><span class=\"token punctuation\">)</span> b</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                         <span class=\"token keyword\">on</span> a<span class=\"token punctuation\">.</span>student_id <span class=\"token operator\">=</span> b<span class=\"token punctuation\">.</span>student_id</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">where</span> b<span class=\"token punctuation\">.</span>student_id <span class=\"token operator\">is</span> <span class=\"token boolean\">null</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token number\">2.</span> 拿着学生编号关联学生表找到姓名</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">select</span> name</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">from</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">select</span> a<span class=\"token punctuation\">.</span>student_id <span class=\"token keyword\">as</span> student_id</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token keyword\">from</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> score <span class=\"token keyword\">where</span> course_id <span class=\"token operator\">=</span> <span class=\"token string\">'01'</span><span class=\"token punctuation\">)</span> a</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>               <span class=\"token keyword\">left</span> <span class=\"token keyword\">join</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> score <span class=\"token keyword\">where</span> course_id <span class=\"token operator\">=</span> <span class=\"token string\">'02'</span><span class=\"token punctuation\">)</span> b <span class=\"token keyword\">on</span> a<span class=\"token punctuation\">.</span>student_id <span class=\"token operator\">=</span> b<span class=\"token punctuation\">.</span>student_id</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      <span class=\"token keyword\">where</span> b<span class=\"token punctuation\">.</span>student_id <span class=\"token operator\">is</span> <span class=\"token boolean\">null</span><span class=\"token punctuation\">)</span> a</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>         <span class=\"token keyword\">join</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">select</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">from</span> student<span class=\"token punctuation\">)</span> b</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>              <span class=\"token keyword\">on</span> a<span class=\"token punctuation\">.</span>student_id <span class=\"token operator\">=</span> b<span class=\"token punctuation\">.</span>student_id</pre></td></tr></table></figure><ol start=\"17\">\n<li>\n<ul>\n<li>查询学过 ' 张三 ' 老师课程的所有同学姓名、生日、性别</li>\n<li>找出 ' 张三 ' 老师的教师编号</li>\n<li>找出 ' 张三 ' 老师所有教授的课程编号</li>\n<li>找出这些课程对应的学生编号</li>\n<li>根据学生编号找到对应的学生信息</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">select</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> student s</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>         <span class=\"token keyword\">join</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">select</span> student_id</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">from</span> score s</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>             <span class=\"token keyword\">join</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">select</span> c<span class=\"token punctuation\">.</span>course_id</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">from</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                 <span class=\"token keyword\">select</span> teacher_id<span class=\"token punctuation\">,</span> name</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                 <span class=\"token keyword\">from</span> teacher</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                 <span class=\"token keyword\">where</span> name <span class=\"token operator\">=</span> <span class=\"token string\">'张三'</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>             <span class=\"token punctuation\">)</span> t1</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                 <span class=\"token keyword\">left</span> <span class=\"token keyword\">join</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token keyword\">select</span> teacher_id<span class=\"token punctuation\">,</span> course_id</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token keyword\">from</span> course</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token punctuation\">)</span> c <span class=\"token keyword\">on</span> t1<span class=\"token punctuation\">.</span>teacher_id <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span>teacher_id</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">)</span> t2 <span class=\"token keyword\">on</span> s<span class=\"token punctuation\">.</span>course_id <span class=\"token operator\">=</span> t2<span class=\"token punctuation\">.</span>course_id</pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">)</span> t3 <span class=\"token keyword\">on</span> s<span class=\"token punctuation\">.</span>student_id <span class=\"token operator\">=</span> t3<span class=\"token punctuation\">.</span>student_id<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"18\">\n<li>查询同时学习 &quot;01&quot;、&quot;02&quot; 课程学生的学生编号以及 &quot;01&quot; 和 &quot;02&quot; 课程成绩</li>\n</ol>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">select</span> a<span class=\"token punctuation\">.</span>student_id <span class=\"token keyword\">as</span> student_id<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">.</span>score <span class=\"token keyword\">as</span> score_01<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">.</span>score <span class=\"token keyword\">as</span> score_02</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> score <span class=\"token keyword\">where</span> course_id <span class=\"token operator\">=</span> <span class=\"token string\">'01'</span><span class=\"token punctuation\">)</span> a</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>         <span class=\"token keyword\">join</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">select</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">from</span> score</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">where</span> course_id <span class=\"token operator\">=</span> <span class=\"token string\">'02'</span><span class=\"token punctuation\">)</span> b</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>              <span class=\"token keyword\">on</span> a<span class=\"token punctuation\">.</span>student_id <span class=\"token operator\">=</span> b<span class=\"token punctuation\">.</span>student_id<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"19\">\n<li>查询学习 &quot;01&quot; 课程但没有学习 &quot;02&quot; 课程学生的学生编号以及 &quot;01&quot; 课程成绩</li>\n</ol>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">select</span> a<span class=\"token punctuation\">.</span>student_id <span class=\"token keyword\">as</span> student_id<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">.</span>score <span class=\"token keyword\">as</span> score_01</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> score <span class=\"token keyword\">where</span> course_id <span class=\"token operator\">=</span> <span class=\"token string\">'01'</span><span class=\"token punctuation\">)</span> a</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>         <span class=\"token keyword\">left</span> <span class=\"token keyword\">join</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> score <span class=\"token keyword\">where</span> course_id <span class=\"token operator\">=</span> <span class=\"token string\">'02'</span><span class=\"token punctuation\">)</span> b</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>                   <span class=\"token keyword\">on</span> a<span class=\"token punctuation\">.</span>student_id <span class=\"token operator\">=</span> b<span class=\"token punctuation\">.</span>student_id</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">where</span> b<span class=\"token punctuation\">.</span>student_id <span class=\"token operator\">is</span> <span class=\"token boolean\">null</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"20\">\n<li>查询学习 &quot;02&quot; 课程但没有学习 &quot;01&quot; 课程学生的学生编号以及 &quot;02&quot; 课程成绩</li>\n</ol>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">select</span> b<span class=\"token punctuation\">.</span>student_id <span class=\"token keyword\">as</span> student_id<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">.</span>score <span class=\"token keyword\">as</span> score_02</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> score <span class=\"token keyword\">where</span> course_id <span class=\"token operator\">=</span> <span class=\"token string\">'01'</span><span class=\"token punctuation\">)</span> a</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>         <span class=\"token keyword\">right</span> <span class=\"token keyword\">join</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> score <span class=\"token keyword\">where</span> course_id <span class=\"token operator\">=</span> <span class=\"token string\">'02'</span><span class=\"token punctuation\">)</span> b</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>                    <span class=\"token keyword\">on</span> a<span class=\"token punctuation\">.</span>student_id <span class=\"token operator\">=</span> b<span class=\"token punctuation\">.</span>student_id</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">where</span> a<span class=\"token punctuation\">.</span>student_id <span class=\"token operator\">is</span> <span class=\"token boolean\">null</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"21\">\n<li>查询选课的同学的学生姓名、选课总数、所有课程的成绩总和、课程平均分</li>\n</ol>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">select</span> a<span class=\"token punctuation\">.</span>name <span class=\"token keyword\">as</span> name      <span class=\"token punctuation\">,</span>course_num      <span class=\"token punctuation\">,</span>score_sum      <span class=\"token punctuation\">,</span>score_avg  <span class=\"token keyword\">from</span>    <span class=\"token punctuation\">(</span>        <span class=\"token keyword\">select</span> student_id              <span class=\"token punctuation\">,</span>name          <span class=\"token keyword\">from</span> student    <span class=\"token punctuation\">)</span> ajoin    <span class=\"token punctuation\">(</span>        <span class=\"token keyword\">select</span> student_id              <span class=\"token punctuation\">,</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span>course_id<span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> course_num              <span class=\"token punctuation\">,</span><span class=\"token function\">sum</span><span class=\"token punctuation\">(</span>score<span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> score_sum              <span class=\"token punctuation\">,</span><span class=\"token function\">avg</span><span class=\"token punctuation\">(</span>score<span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> score_avg           <span class=\"token keyword\">from</span> score           <span class=\"token keyword\">group</span> <span class=\"token keyword\">by</span> student_id    <span class=\"token punctuation\">)</span> b  <span class=\"token keyword\">on</span> a<span class=\"token punctuation\">.</span>student_id<span class=\"token operator\">=</span>b<span class=\"token punctuation\">.</span>student_idorder <span class=\"token keyword\">by</span> course_num <span class=\"token keyword\">desc</span>         <span class=\"token punctuation\">,</span>score_sum <span class=\"token keyword\">desc</span></pre></td></tr></table></figure><ol start=\"26\">\n<li>查询考试平均分大于 60 分同学的学生姓名、选课总数、所有课程的成绩总和、课程平均分，按照科目数排降序、科目数相同按照分数排降序</li>\n</ol>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">select</span> a<span class=\"token punctuation\">.</span>name <span class=\"token keyword\">as</span> name      <span class=\"token punctuation\">,</span>course_num      <span class=\"token punctuation\">,</span>score_sum      <span class=\"token punctuation\">,</span>score_avg  <span class=\"token keyword\">from</span>    <span class=\"token punctuation\">(</span>        <span class=\"token keyword\">select</span> student_id              <span class=\"token punctuation\">,</span>name          <span class=\"token keyword\">from</span> student    <span class=\"token punctuation\">)</span> ajoin    <span class=\"token punctuation\">(</span>        <span class=\"token keyword\">select</span> student_id              <span class=\"token punctuation\">,</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span>course_id<span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> course_num              <span class=\"token punctuation\">,</span><span class=\"token function\">sum</span><span class=\"token punctuation\">(</span>score<span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> score_sum              <span class=\"token punctuation\">,</span><span class=\"token function\">avg</span><span class=\"token punctuation\">(</span>score<span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> score_avg           <span class=\"token keyword\">from</span> score        <span class=\"token keyword\">group</span> <span class=\"token keyword\">by</span> student_id    <span class=\"token punctuation\">)</span> b  <span class=\"token keyword\">on</span> a<span class=\"token punctuation\">.</span>student_id<span class=\"token operator\">=</span>b<span class=\"token punctuation\">.</span>student_idwhere score_avg <span class=\"token operator\">></span> <span class=\"token number\">60</span>order <span class=\"token keyword\">by</span> course_num <span class=\"token keyword\">desc</span>         <span class=\"token punctuation\">,</span>score_sum <span class=\"token keyword\">desc</span></pre></td></tr></table></figure><ol start=\"27\">\n<li>检索 &quot;01&quot; 课程分数小于 60 分的学生信息及 &quot;01&quot; 课程分数，按照分数排降序</li>\n</ol>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">select</span> a<span class=\"token punctuation\">.</span>student_id <span class=\"token keyword\">as</span> student_id      <span class=\"token punctuation\">,</span>name      <span class=\"token punctuation\">,</span>birthday      <span class=\"token punctuation\">,</span>sex      <span class=\"token punctuation\">,</span>score  <span class=\"token keyword\">from</span>     <span class=\"token punctuation\">(</span>        <span class=\"token keyword\">select</span> <span class=\"token operator\">*</span>          <span class=\"token keyword\">from</span> student    <span class=\"token punctuation\">)</span> ajoin     <span class=\"token punctuation\">(</span>        <span class=\"token keyword\">select</span> student_id              <span class=\"token punctuation\">,</span>score          <span class=\"token keyword\">from</span> score        <span class=\"token keyword\">where</span> course_id<span class=\"token operator\">=</span><span class=\"token string\">'01'</span>            <span class=\"token operator\">and</span> score <span class=\"token operator\">&lt;</span> <span class=\"token number\">60</span>    <span class=\"token punctuation\">)</span> b  <span class=\"token keyword\">on</span> a<span class=\"token punctuation\">.</span>student_id <span class=\"token operator\">=</span> b<span class=\"token punctuation\">.</span>student_idorder <span class=\"token keyword\">by</span> score <span class=\"token keyword\">desc</span></pre></td></tr></table></figure><ol start=\"28\">\n<li>查询两门及其以上不及格课程的同学的姓名及其平均成绩</li>\n</ol>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">select</span> name      <span class=\"token punctuation\">,</span>score_avg  <span class=\"token keyword\">from</span>     <span class=\"token punctuation\">(</span>        <span class=\"token keyword\">select</span> <span class=\"token operator\">*</span>          <span class=\"token keyword\">from</span> student    <span class=\"token punctuation\">)</span> ajoin    <span class=\"token punctuation\">(</span>        <span class=\"token keyword\">select</span> student_id              <span class=\"token punctuation\">,</span>score_avg          <span class=\"token keyword\">from</span>             <span class=\"token punctuation\">(</span>                <span class=\"token keyword\">select</span> student_id                      <span class=\"token punctuation\">,</span><span class=\"token function\">avg</span><span class=\"token punctuation\">(</span>score<span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> score_avg                      <span class=\"token punctuation\">,</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">case</span> <span class=\"token keyword\">when</span> score <span class=\"token operator\">&lt;</span> <span class=\"token number\">60</span> <span class=\"token keyword\">then</span> <span class=\"token number\">1</span> <span class=\"token keyword\">end</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> fail_count                  <span class=\"token keyword\">from</span> score                <span class=\"token keyword\">group</span> <span class=\"token keyword\">by</span> student_id            <span class=\"token punctuation\">)</span> a        <span class=\"token keyword\">where</span> fail_count <span class=\"token operator\">></span> <span class=\"token number\">1</span>     <span class=\"token punctuation\">)</span> b  <span class=\"token keyword\">on</span> a<span class=\"token punctuation\">.</span>student_id <span class=\"token operator\">=</span> b<span class=\"token punctuation\">.</span>student_id<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"29\">\n<li>\n<p>查询没有学全所有课程的同学的编号 （包含无选课的同学）</p>\n<p>- 在成绩表中找出不满足课程总数的学生 id - 找出学生表中无成绩的学生 id - 二者之和</p>\n</li>\n</ol>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">select</span> b<span class=\"token punctuation\">.</span>student_id    <span class=\"token punctuation\">(</span>        <span class=\"token keyword\">select</span> <span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> course_num          <span class=\"token keyword\">from</span> score    <span class=\"token punctuation\">)</span> ajoin    <span class=\"token punctuation\">(</span>        <span class=\"token keyword\">select</span> student_id              <span class=\"token punctuation\">,</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> course_num          <span class=\"token keyword\">from</span> score    <span class=\"token punctuation\">)</span> b  <span class=\"token keyword\">on</span> a<span class=\"token punctuation\">.</span>course_num <span class=\"token operator\">=</span> b<span class=\"token punctuation\">.</span>course_numunion     <span class=\"token punctuation\">(</span>        <span class=\"token keyword\">select</span> a<span class=\"token punctuation\">.</span>student_id          <span class=\"token keyword\">from</span>            <span class=\"token punctuation\">(</span>                <span class=\"token keyword\">select</span> <span class=\"token operator\">*</span>                  <span class=\"token keyword\">from</span> student            <span class=\"token punctuation\">)</span> a        <span class=\"token keyword\">left</span> <span class=\"token keyword\">join</span>            <span class=\"token punctuation\">(</span>                <span class=\"token keyword\">select</span> <span class=\"token operator\">*</span>                  <span class=\"token keyword\">from</span> score            <span class=\"token punctuation\">)</span> b          <span class=\"token keyword\">on</span> a<span class=\"token punctuation\">.</span>student_id <span class=\"token operator\">=</span> b<span class=\"token punctuation\">.</span>student_id        <span class=\"token keyword\">where</span> course_id <span class=\"token operator\">is</span> <span class=\"token boolean\">null</span>    <span class=\"token punctuation\">)</span> b</pre></td></tr></table></figure><ol start=\"30\">\n<li>查询 1990 年出生的学生名单</li>\n</ol>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">select</span> <span class=\"token operator\">*</span>  <span class=\"token keyword\">from</span> studentwhere substr<span class=\"token punctuation\">(</span>birthday<span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token string\">'1990'</span></pre></td></tr></table></figure><ol start=\"31\">\n<li>查询名字中含有「风」字的学生信息</li>\n</ol>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">select</span> <span class=\"token operator\">*</span>  <span class=\"token keyword\">from</span> studentwhere name <span class=\"token operator\">like</span> <span class=\"token string\">'%风%'</span></pre></td></tr></table></figure><ol start=\"32\">\n<li>查询「李」姓老师的数量</li>\n</ol>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">select</span> <span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>  <span class=\"token keyword\">from</span> teacherwhere name <span class=\"token operator\">like</span> <span class=\"token string\">'李%'</span></pre></td></tr></table></figure><ol start=\"33\">\n<li>查询至少有两门课与学号为 &quot;01&quot; 的学生所学相同的学生 id</li>\n</ol>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">select</span> a<span class=\"token punctuation\">.</span>student_id</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">select</span> b<span class=\"token punctuation\">.</span>student_id <span class=\"token keyword\">as</span> student_id<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">.</span>course_id <span class=\"token keyword\">as</span> course_id</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      <span class=\"token keyword\">from</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">select</span> course_id <span class=\"token keyword\">from</span> score <span class=\"token keyword\">where</span> student_id <span class=\"token operator\">=</span> <span class=\"token string\">'01'</span><span class=\"token punctuation\">)</span> a</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>               <span class=\"token keyword\">join</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">select</span> student_id<span class=\"token punctuation\">,</span> course_id <span class=\"token keyword\">from</span> score <span class=\"token keyword\">where</span> student_id <span class=\"token operator\">&lt;></span> <span class=\"token string\">'01'</span><span class=\"token punctuation\">)</span> b</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                    <span class=\"token keyword\">on</span> a<span class=\"token punctuation\">.</span>course_id <span class=\"token operator\">=</span> b<span class=\"token punctuation\">.</span>course_id<span class=\"token punctuation\">)</span> a</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">group</span> <span class=\"token keyword\">by</span> a<span class=\"token punctuation\">.</span>student_id</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">having</span> <span class=\"token function\">count</span><span class=\"token punctuation\">(</span>course_id<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"34\">\n<li>查询选修了全部课程的学生 id 的姓名和姓名</li>\n</ol>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">select</span> b<span class=\"token punctuation\">.</span>student_id <span class=\"token keyword\">as</span> student_id    <span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">.</span>name <span class=\"token keyword\">as</span> name    <span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">.</span>course_num <span class=\"token keyword\">as</span> course_numfrom  <span class=\"token punctuation\">(</span>      <span class=\"token keyword\">select</span> student_id            <span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">.</span>course_num <span class=\"token keyword\">as</span> course_num        <span class=\"token keyword\">from</span>          <span class=\"token punctuation\">(</span>              <span class=\"token keyword\">select</span> student_id                    <span class=\"token punctuation\">,</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span>course_id<span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> course_num                <span class=\"token keyword\">from</span> course          <span class=\"token punctuation\">)</span> a      <span class=\"token keyword\">join</span>          <span class=\"token punctuation\">(</span>              <span class=\"token keyword\">select</span> student_id                    <span class=\"token punctuation\">,</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> course_num                <span class=\"token keyword\">from</span> score              <span class=\"token keyword\">group</span> <span class=\"token keyword\">by</span> student_id          <span class=\"token punctuation\">)</span> b        <span class=\"token keyword\">on</span> a<span class=\"token punctuation\">.</span>course_num <span class=\"token operator\">=</span> b<span class=\"token punctuation\">.</span>course_num  <span class=\"token punctuation\">)</span> ajoin  <span class=\"token punctuation\">(</span>      <span class=\"token keyword\">select</span> <span class=\"token operator\">*</span>        <span class=\"token keyword\">from</span> student  <span class=\"token punctuation\">)</span> bon  a<span class=\"token punctuation\">.</span>student_id <span class=\"token operator\">=</span> b<span class=\"token punctuation\">.</span>student_id</pre></td></tr></table></figure><ol start=\"35\">\n<li>查询和 &quot;01&quot; 号的同学学习的课程完全相同的其他同学的学生 id</li>\n</ol>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">select</span> student_id</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>         <span class=\"token keyword\">select</span> student_id<span class=\"token punctuation\">,</span> ct<span class=\"token punctuation\">,</span> ct1</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>         <span class=\"token keyword\">from</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                  <span class=\"token keyword\">select</span> student_id<span class=\"token punctuation\">,</span> <span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> ct</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                  <span class=\"token keyword\">from</span> score <span class=\"token keyword\">as</span> a</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                           <span class=\"token keyword\">left</span> <span class=\"token keyword\">join</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                       <span class=\"token punctuation\">(</span><span class=\"token keyword\">select</span> course_id</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                        <span class=\"token keyword\">from</span> score</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                        <span class=\"token keyword\">where</span> student_id <span class=\"token operator\">=</span> <span class=\"token string\">'01'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> b</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                       <span class=\"token keyword\">on</span> a<span class=\"token punctuation\">.</span>course_id <span class=\"token operator\">=</span> b<span class=\"token punctuation\">.</span>course_id</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                  <span class=\"token keyword\">group</span> <span class=\"token keyword\">by</span> student_id</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>              <span class=\"token punctuation\">)</span> t1</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                  <span class=\"token keyword\">join</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>             <span class=\"token keyword\">select</span> <span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> ct1</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>             <span class=\"token keyword\">from</span> score</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>             <span class=\"token keyword\">where</span> student_id <span class=\"token operator\">=</span> <span class=\"token string\">'01'</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>         <span class=\"token punctuation\">)</span> t2</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>     <span class=\"token punctuation\">)</span> t3</pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">where</span> ct <span class=\"token operator\">=</span> ct1</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token operator\">and</span> student_id <span class=\"token operator\">!=</span> <span class=\"token string\">'01'</span></pre></td></tr></table></figure><ol start=\"36\">\n<li>\n<ul>\n<li>先选出‘01’同学所学的课程 id</li>\n<li>然后选出学过这些课程 id 的学生 id 及其选过这些课程数的课程总数</li>\n<li>匹配 “01” 同学学的课程总数（存在某同学学的课程超过 “01” 同学学的课程）</li>\n<li>匹配成绩表中学生的课程总数</li>\n</ul>\n</li>\n<li>\n<p>统计各科成绩各分数段人数：课程编号，课程名称，[100-85]，[85-70]，[70-60]，[60-0] 及所占百分比</p>\n<p>- 根据课程号在成绩表中查询分数段的个数除以该学习该课程的总数</p>\n</li>\n</ol>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">select</span> a<span class=\"token punctuation\">.</span>course_id <span class=\"token keyword\">as</span> course_id        <span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">.</span>name <span class=\"token keyword\">as</span> name        <span class=\"token punctuation\">,</span><span class=\"token function\">round</span><span class=\"token punctuation\">(</span><span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">case</span> <span class=\"token keyword\">when</span> score <span class=\"token operator\">></span> <span class=\"token number\">85</span> <span class=\"token keyword\">then</span> <span class=\"token number\">1</span> <span class=\"token keyword\">else</span> <span class=\"token number\">0</span> <span class=\"token keyword\">end</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> <span class=\"token string\">'100-85'</span>        <span class=\"token punctuation\">,</span><span class=\"token function\">round</span><span class=\"token punctuation\">(</span><span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">case</span> <span class=\"token keyword\">when</span> score <span class=\"token operator\">between</span> <span class=\"token number\">70</span> <span class=\"token operator\">and</span> <span class=\"token number\">84</span> <span class=\"token keyword\">then</span> <span class=\"token number\">1</span> <span class=\"token keyword\">else</span> <span class=\"token number\">0</span> <span class=\"token keyword\">end</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> <span class=\"token string\">'85-70'</span>        <span class=\"token punctuation\">,</span><span class=\"token function\">round</span><span class=\"token punctuation\">(</span><span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">case</span> <span class=\"token keyword\">when</span> score <span class=\"token operator\">between</span> <span class=\"token number\">60</span> <span class=\"token operator\">and</span>  <span class=\"token number\">69</span> <span class=\"token keyword\">then</span> <span class=\"token number\">1</span> <span class=\"token keyword\">else</span> <span class=\"token number\">0</span> <span class=\"token keyword\">end</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> <span class=\"token string\">'70-60'</span>        <span class=\"token punctuation\">,</span><span class=\"token function\">round</span><span class=\"token punctuation\">(</span><span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">case</span> <span class=\"token keyword\">when</span> score <span class=\"token operator\">&lt;</span> <span class=\"token number\">60</span> <span class=\"token keyword\">then</span> <span class=\"token number\">1</span> <span class=\"token keyword\">else</span> <span class=\"token number\">0</span> <span class=\"token keyword\">end</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> <span class=\"token string\">'60-0'</span>    <span class=\"token keyword\">from</span>      <span class=\"token punctuation\">(</span>          <span class=\"token keyword\">select</span> course_id                <span class=\"token punctuation\">,</span>score            <span class=\"token keyword\">from</span> score      <span class=\"token punctuation\">)</span> a  <span class=\"token keyword\">join</span>      <span class=\"token punctuation\">(</span>          <span class=\"token keyword\">select</span> course_id                <span class=\"token punctuation\">,</span>name            <span class=\"token keyword\">from</span> course      <span class=\"token punctuation\">)</span> b    <span class=\"token keyword\">on</span> a<span class=\"token punctuation\">.</span>course_id <span class=\"token operator\">=</span> b<span class=\"token punctuation\">.</span>course_id  <span class=\"token keyword\">group</span> <span class=\"token keyword\">by</span> a<span class=\"token punctuation\">.</span>course_id          <span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">.</span>name</pre></td></tr></table></figure><ol start=\"38\">\n<li>查询学生的总成绩，并进行排名</li>\n</ol>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">select</span> student_id      <span class=\"token punctuation\">,</span><span class=\"token function\">sum</span><span class=\"token punctuation\">(</span>score<span class=\"token punctuation\">)</span> score_sum      <span class=\"token punctuation\">,</span>row_number<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">over</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">order</span> <span class=\"token keyword\">by</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span>score<span class=\"token punctuation\">)</span> <span class=\"token keyword\">desc</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> rank  <span class=\"token keyword\">from</span> scoregroup <span class=\"token keyword\">by</span> student_id</pre></td></tr></table></figure><ol start=\"39\">\n<li>查询各科成绩前三名的记录</li>\n</ol>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">select</span> course_id<span class=\"token punctuation\">,</span>student_id<span class=\"token punctuation\">,</span>rk</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">select</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>               rank<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">over</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">partition</span> <span class=\"token keyword\">by</span> course_id <span class=\"token keyword\">order</span> <span class=\"token keyword\">by</span> score<span class=\"token punctuation\">)</span> rk</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">from</span> score</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token punctuation\">)</span>t1</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">where</span> rk<span class=\"token operator\">&lt;=</span><span class=\"token number\">3</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"40\">\n<li>查询出只选修两门课程的学生学号和姓名</li>\n</ol>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">select</span> a<span class=\"token punctuation\">.</span>student_id <span class=\"token keyword\">as</span> student_id      <span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">.</span>name <span class=\"token keyword\">as</span> name  <span class=\"token keyword\">from</span>    <span class=\"token punctuation\">(</span>        <span class=\"token keyword\">select</span> student_id              <span class=\"token punctuation\">,</span>name           <span class=\"token keyword\">from</span> student    <span class=\"token punctuation\">)</span> ajoin     <span class=\"token punctuation\">(</span>        <span class=\"token keyword\">select</span> student_id          <span class=\"token keyword\">from</span> score        <span class=\"token keyword\">group</span> <span class=\"token keyword\">by</span> student_id        <span class=\"token keyword\">having</span> <span class=\"token function\">count</span><span class=\"token punctuation\">(</span>course_id<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">2</span>    <span class=\"token punctuation\">)</span> b    <span class=\"token keyword\">on</span> a<span class=\"token punctuation\">.</span>student_id <span class=\"token operator\">=</span> b<span class=\"token punctuation\">.</span>student_id<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"41\">\n<li>查询每门课程的平均成绩，结果按平均成绩降序排列，平均成绩相同时，按课程编号升序排列</li>\n</ol>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">select</span> course_id      <span class=\"token punctuation\">,</span><span class=\"token function\">avg</span><span class=\"token punctuation\">(</span>score<span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> score_avg  <span class=\"token keyword\">from</span> scoreorder <span class=\"token keyword\">by</span> score_avg <span class=\"token keyword\">desc</span>        <span class=\"token punctuation\">,</span>course_id <span class=\"token keyword\">asc</span></pre></td></tr></table></figure><ol start=\"42\">\n<li>查询平均成绩大于等于 85 的所有学生的学号、姓名和平均成绩</li>\n</ol>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">select</span> a<span class=\"token punctuation\">.</span>student_id <span class=\"token keyword\">as</span> student_id      <span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">.</span>name <span class=\"token keyword\">as</span> name      <span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">.</span>score_avg  <span class=\"token keyword\">from</span>    <span class=\"token punctuation\">(</span>        <span class=\"token keyword\">select</span> student_id              <span class=\"token punctuation\">,</span>name          <span class=\"token keyword\">from</span> student    <span class=\"token punctuation\">)</span> ajoin    <span class=\"token punctuation\">(</span>        <span class=\"token keyword\">select</span> student_id              <span class=\"token punctuation\">,</span><span class=\"token function\">avg</span><span class=\"token punctuation\">(</span>score<span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> score_avg          <span class=\"token keyword\">from</span> score        <span class=\"token keyword\">group</span> <span class=\"token keyword\">by</span> student_id        <span class=\"token keyword\">having</span> <span class=\"token function\">avg</span><span class=\"token punctuation\">(</span>score<span class=\"token punctuation\">)</span> <span class=\"token operator\">>=</span> <span class=\"token number\">85</span>    <span class=\"token punctuation\">)</span> b  <span class=\"token keyword\">on</span> a<span class=\"token punctuation\">.</span>student_id <span class=\"token operator\">=</span> b<span class=\"token punctuation\">.</span>student_id</pre></td></tr></table></figure><ol start=\"43\">\n<li>查询课程名称为「数学」，且分数低于 60 的学生姓名和分数</li>\n</ol>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">select</span> name       <span class=\"token punctuation\">,</span>score  <span class=\"token keyword\">from</span>    <span class=\"token punctuation\">(</span>        <span class=\"token keyword\">select</span> student_id              <span class=\"token punctuation\">,</span>score          <span class=\"token keyword\">from</span>             <span class=\"token punctuation\">(</span>                <span class=\"token keyword\">select</span> course_id                  <span class=\"token keyword\">from</span> course                <span class=\"token keyword\">where</span> name <span class=\"token operator\">=</span> <span class=\"token string\">'数学'</span>            <span class=\"token punctuation\">)</span> a        <span class=\"token keyword\">join</span>             <span class=\"token punctuation\">(</span>                <span class=\"token keyword\">select</span> student_id                      <span class=\"token punctuation\">,</span>course_id                      <span class=\"token punctuation\">,</span>score                  <span class=\"token keyword\">from</span> score                <span class=\"token keyword\">where</span> score <span class=\"token operator\">&lt;</span> <span class=\"token number\">60</span>            <span class=\"token punctuation\">)</span> b          <span class=\"token keyword\">on</span> a<span class=\"token punctuation\">.</span>course_id <span class=\"token operator\">=</span> b<span class=\"token punctuation\">.</span>course_id    <span class=\"token punctuation\">)</span> ajoin    <span class=\"token punctuation\">(</span>        <span class=\"token keyword\">select</span> student_id              <span class=\"token punctuation\">,</span>name          <span class=\"token keyword\">from</span> student    <span class=\"token punctuation\">)</span> b  <span class=\"token keyword\">on</span> a<span class=\"token punctuation\">.</span>student_id <span class=\"token operator\">=</span> b<span class=\"token punctuation\">.</span>student_id</pre></td></tr></table></figure><ol start=\"44\">\n<li>查询课程编号为 01 且课程成绩在 80 分及以上的学生的学号和姓名</li>\n</ol>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">select</span> a<span class=\"token punctuation\">.</span>student_id <span class=\"token keyword\">as</span> student_id    <span class=\"token punctuation\">,</span>name   <span class=\"token keyword\">from</span>    <span class=\"token punctuation\">(</span>        <span class=\"token keyword\">select</span> student_id          <span class=\"token keyword\">from</span> score        <span class=\"token keyword\">where</span> course_id <span class=\"token operator\">=</span> <span class=\"token string\">'01'</span>          <span class=\"token operator\">and</span> score <span class=\"token operator\">>=</span> <span class=\"token number\">80</span>              <span class=\"token punctuation\">)</span> ajoin    <span class=\"token punctuation\">(</span>        <span class=\"token keyword\">select</span> student_id              <span class=\"token punctuation\">,</span>name          <span class=\"token keyword\">from</span> student    <span class=\"token punctuation\">)</span> b  <span class=\"token keyword\">on</span> a<span class=\"token punctuation\">.</span>student_id <span class=\"token operator\">=</span> b<span class=\"token punctuation\">.</span>student_id</pre></td></tr></table></figure><ol start=\"45\">\n<li>查询选修「张三」老师所授课程的学生中，成绩最高的学生编号、课程编号及其成绩</li>\n</ol>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">select</span> student_id      <span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">.</span>course_id <span class=\"token keyword\">as</span> course_id      <span class=\"token punctuation\">,</span>score  <span class=\"token keyword\">from</span>    <span class=\"token punctuation\">(</span>        <span class=\"token keyword\">select</span> course_id          <span class=\"token keyword\">from</span>             <span class=\"token punctuation\">(</span>                <span class=\"token keyword\">select</span> course_id                      <span class=\"token punctuation\">,</span>teacher_id                  <span class=\"token keyword\">from</span> course              <span class=\"token punctuation\">)</span> a        <span class=\"token keyword\">join</span>            <span class=\"token punctuation\">(</span>                <span class=\"token keyword\">select</span> teacher_id                  <span class=\"token keyword\">from</span> teacher                <span class=\"token keyword\">where</span> name <span class=\"token operator\">=</span> <span class=\"token string\">'张三'</span>            <span class=\"token punctuation\">)</span> b          <span class=\"token keyword\">on</span> a<span class=\"token punctuation\">.</span>teacher_id <span class=\"token operator\">=</span> b<span class=\"token punctuation\">.</span>teacher_id    <span class=\"token punctuation\">)</span> ajoin     <span class=\"token punctuation\">(</span>        <span class=\"token keyword\">select</span> student_id              <span class=\"token punctuation\">,</span>course_id              <span class=\"token punctuation\">,</span>score          <span class=\"token keyword\">from</span> score    <span class=\"token punctuation\">)</span> b  <span class=\"token keyword\">on</span> a<span class=\"token punctuation\">.</span>course_id <span class=\"token operator\">=</span> b<span class=\"token punctuation\">.</span>course_idorder <span class=\"token keyword\">by</span> score desclimit <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"46\">\n<li>统计每门课程的学生选修人数（超过 5 人的课程才统计）。</li>\n</ol>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">select</span> a<span class=\"token punctuation\">.</span>course_id <span class=\"token keyword\">as</span> course_id      <span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">.</span>name      <span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">.</span>num <span class=\"token keyword\">as</span> num  <span class=\"token keyword\">from</span>    <span class=\"token punctuation\">(</span>        <span class=\"token keyword\">select</span> course_id              <span class=\"token punctuation\">,</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> num          <span class=\"token keyword\">from</span> score        <span class=\"token keyword\">group</span> <span class=\"token keyword\">by</span> course_id        <span class=\"token keyword\">having</span> <span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">>=</span> <span class=\"token number\">5</span>    <span class=\"token punctuation\">)</span> ajoin    <span class=\"token punctuation\">(</span>        <span class=\"token keyword\">select</span> course_id              <span class=\"token punctuation\">,</span>name          <span class=\"token keyword\">from</span> course    <span class=\"token punctuation\">)</span> b  <span class=\"token keyword\">on</span> a<span class=\"token punctuation\">.</span>course_id <span class=\"token operator\">=</span>b<span class=\"token punctuation\">.</span>course_id</pre></td></tr></table></figure><ol start=\"42\">\n<li>查询该学生有不同课程但成绩相同的学生编号、课程编号、学生成绩</li>\n</ol>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1.</span> 写法一</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">select</span> a<span class=\"token punctuation\">.</span>student_id<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">.</span>course_id<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">.</span>score</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">from</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>         <span class=\"token keyword\">select</span> student_id</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>              <span class=\"token punctuation\">,</span> course_id</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>              <span class=\"token punctuation\">,</span> score</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>         <span class=\"token keyword\">from</span> score</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>     <span class=\"token punctuation\">)</span> a</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>         <span class=\"token keyword\">join</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>     <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>         <span class=\"token keyword\">select</span> student_id</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>              <span class=\"token punctuation\">,</span> course_id</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>              <span class=\"token punctuation\">,</span> score</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>         <span class=\"token keyword\">from</span> score</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>     <span class=\"token punctuation\">)</span> b</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>     <span class=\"token keyword\">on</span> a<span class=\"token punctuation\">.</span>student_id <span class=\"token operator\">=</span> b<span class=\"token punctuation\">.</span>student_id</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>         <span class=\"token operator\">and</span> a<span class=\"token punctuation\">.</span>score <span class=\"token operator\">=</span> b<span class=\"token punctuation\">.</span>score</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>         <span class=\"token operator\">and</span> a<span class=\"token punctuation\">.</span>course_id <span class=\"token operator\">&lt;></span> b<span class=\"token punctuation\">.</span>course_id</pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">group</span> <span class=\"token keyword\">by</span> a<span class=\"token punctuation\">.</span>student_id<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">.</span>course_id<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">.</span>score</pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token number\">2.</span> 写法二</pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">select</span> <span class=\"token keyword\">DISTINCT</span> b<span class=\"token punctuation\">.</span>student_id<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">.</span>course_id<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">.</span>score</pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">from</span> score a<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>     score b</pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">where</span> a<span class=\"token punctuation\">.</span>course_id <span class=\"token operator\">!=</span> b<span class=\"token punctuation\">.</span>course_id</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  <span class=\"token operator\">and</span> a<span class=\"token punctuation\">.</span>score <span class=\"token operator\">=</span> b<span class=\"token punctuation\">.</span>score</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  <span class=\"token operator\">and</span> a<span class=\"token punctuation\">.</span>student_id <span class=\"token operator\">=</span> b<span class=\"token punctuation\">.</span>student_id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token number\">3.</span> 写法三</pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token keyword\">select</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token keyword\">from</span> score <span class=\"token keyword\">as</span> t</pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token keyword\">where</span> <span class=\"token operator\">not</span> <span class=\"token keyword\">exists</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">select</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                  <span class=\"token keyword\">from</span> score</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                  <span class=\"token keyword\">where</span> student_id <span class=\"token operator\">=</span> t<span class=\"token punctuation\">.</span>student_id</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                    <span class=\"token operator\">and</span> course_id <span class=\"token operator\">&lt;></span> t<span class=\"token punctuation\">.</span>course_id</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                    <span class=\"token operator\">and</span> score <span class=\"token operator\">&lt;></span> t<span class=\"token punctuation\">.</span>score<span class=\"token punctuation\">)</span></pre></td></tr></table></figure>",
            "tags": [
                "大数据",
                "Hive"
            ]
        },
        {
            "id": "https://github.com/Mayizono/miyazono.github.io/big-data/flink/1_Nginx/",
            "url": "https://github.com/Mayizono/miyazono.github.io/big-data/flink/1_Nginx/",
            "title": "负载均衡Nginx的使用",
            "date_published": "2020-09-20T16:00:00.000Z",
            "content_html": "<h2 id=\"负载均衡nginx的使用\"><a class=\"anchor\" href=\"#负载均衡nginx的使用\">#</a> 负载均衡 Nginx 的使用</h2>\n<hr />\n<blockquote>\n<p>该部分从属于数据采集部分，主要作用为实现三台数采服务器的负载均衡，因涉及新的技术 ---Nginx，所以单独成为一个 part</p>\n</blockquote>\n<p><img data-src=\"https://miyazono-1255488789.cos.ap-shanghai.myqcloud.com/markdown/20200719233514.png\" alt=\"1594748402220\" /></p>\n<h3 id=\"11-nginx概述\"><a class=\"anchor\" href=\"#11-nginx概述\">#</a> 1.1 Nginx 概述</h3>\n<p>Nginx (读作 “engine x”), 是一个高性能的 HTTP 和反向代理服务器，特点是占有内存少，并发能力强</p>\n<ul>\n<li>与 tomcat 的关系</li>\n</ul>\n<p>除了 tomcat 以外， apache,nginx,jboss,jetty 等都是 http 服务器。</p>\n<p>nginx 和 apache 只支持静态页面和 CGI 协议的动态语言，比如 perl 、 php 等， 但是 nginx 不支持 java 。</p>\n<p>Java 程序只能通过与 tomcat 配合完成。   nginx 与 tomcat 配合，为 tomcat 集群提供反向代理服务、负载均衡等服务</p>\n<h4 id=\"111-nginx三大功能\"><a class=\"anchor\" href=\"#111-nginx三大功能\">#</a> 1.1.1 Nginx 三大功能</h4>\n<h5 id=\"反向代理\"><a class=\"anchor\" href=\"#反向代理\">#</a> 反向代理</h5>\n<ul>\n<li>正向代理</li>\n</ul>\n<p><img data-src=\"https://miyazono-1255488789.cos.ap-shanghai.myqcloud.com/markdown/20200719233520.png\" alt=\"1594748623769\" /></p>\n<blockquote>\n<p>服务器代理用户的请求，从用户的角度看，没法直接获取请求，需要通过代理<br />\n特点：代理用户，用户清楚知道访问哪台服务器</p>\n</blockquote>\n<ul>\n<li>反向代理</li>\n</ul>\n<p><img data-src=\"https://miyazono-1255488789.cos.ap-shanghai.myqcloud.com/markdown/20200719233526.png\" alt=\"1594748632948\" /></p>\n<blockquote>\n<p>反向代理：服务器代理真正服务器，用户不确定去哪台真实服务器，</p>\n</blockquote>\n<h5 id=\"负载均衡\"><a class=\"anchor\" href=\"#负载均衡\">#</a> 负载均衡</h5>\n<p>・轮询（默认） 每个请求按时间顺序逐一分配到不同的后端服务器，如果后端某台服务器宕机，则自动剔除故障机器，使用户访问不受影响</p>\n<p>・weight 指定轮询权重，weight 值越大，分配到的几率就越高，主要用于后端每台服务器性能不均衡的情况。</p>\n<p>・备机模式 平时不工作，只有其他 down 机的时候才会开始工作</p>\n<p>・公平模式 (第三方) 更智能的一个负载均衡算法，此算法可以根据页面大小和加载时间长短智能地进行负载均衡，也就是根据后端服务器的响应时间来分配请求，响应时间短的优先分配。如果想要使用此调度算法，需要 Nginx 的 upstream_fair 模块。</p>\n<h5 id=\"动静分离\"><a class=\"anchor\" href=\"#动静分离\">#</a> 动静分离</h5>\n<p><img data-src=\"https://miyazono-1255488789.cos.ap-shanghai.myqcloud.com/markdown/20200719233531.png\" alt=\"1594748722077\" /></p>\n<h3 id=\"12-nginx安装\"><a class=\"anchor\" href=\"#12-nginx安装\">#</a> 1.2 Nginx 安装</h3>\n<ul>\n<li>yum 安装依赖包</li>\n</ul>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sudo</span> yum -y <span class=\"token function\">install</span>    openssl openssl-devel pcre pcre-devel    zlib zlib-devel gcc gcc-c++</pre></td></tr></table></figure><ul>\n<li>下载 Nginx</li>\n</ul>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>/opt/software » <span class=\"token function\">wget</span> http://nginx.org/download/nginx-1.12.2.tar.gz</pre></td></tr></table></figure><ul>\n<li>解压</li>\n</ul>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">tar</span> -zxvf nginx-1.12.2.tar.gz -C /opt/module</pre></td></tr></table></figure><ul>\n<li>编译和安装</li>\n</ul>\n<p>进入解压缩的目录</p>\n<p>为了防止出现权限问题，建议切换到 root 用户</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>./configure   --prefix<span class=\"token operator\">=</span>/usr/local/webserver/nginx</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">make</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">make</span> <span class=\"token function\">install</span></pre></td></tr></table></figure><ul>\n<li><strong>启停 Nginx</strong></li>\n</ul>\n<p>进入目录: /usr/local/webserver/nginx</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>启动 nginx: sbin/nginx</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>关闭 nginx: sbin/nginx -s stop</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>重新加载: sbin/nginx -s reload</pre></td></tr></table></figure><blockquote>\n<p>注意：</p>\n<ul>\n<li>Nginx 默认使用的是 80 端口，由于非 root 用户不能使用 1024 以内的端口，所以建议使用 root 用户启动 Nginx</li>\n<li>如果使用普通用户启动 Nginx, 需要先执行下面的命令来突破上面的限制:</li>\n</ul>\n<pre><code>sudo setcap cap_net_bind_service=+eip /usr/local/webserver/nginx\n</code></pre>\n</blockquote>\n<ul>\n<li>查看 Nginx 进程</li>\n</ul>\n<p>![1594748930149](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saWFuLXpwLm9zcy1jbi1zaGVuemhlbi5hbGl5dW5jcy5jb20vcGlj\">https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic</span> GO/20200719233543.png)</p>\n<p>通过网页访问: <span class=\"exturl\" data-url=\"aHR0cDovL2hhZG9vcDEwOQ==\">http://hadoop109</span></p>\n<p><img data-src=\"https://miyazono-1255488789.cos.ap-shanghai.myqcloud.com/markdown/20200719233548.png\" alt=\"1594748945767\" /></p>\n<h3 id=\"13-配置负载均衡\"><a class=\"anchor\" href=\"#13-配置负载均衡\">#</a> 1.3 配置负载均衡</h3>\n<h4 id=\"131-nginx配置修改\"><a class=\"anchor\" href=\"#131-nginx配置修改\">#</a> 1.3.1 Nginx 配置修改</h4>\n<ul>\n<li>修改 /usr/local/webserver/nginx/conf/nginx.conf</li>\n</ul>\n<figure class=\"highlight properties\"><figcaption data-lang=\".properties\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token attr-name\">http</span> <span class=\"token attr-value\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    .....</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">    # 配置上游服务器：其实就被代理的服务器，springboot</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token attr-name\">    upstream</span> <span class=\"token attr-value\">logserver&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token attr-name\">        server</span> <span class=\"token attr-value\">hadoop109:8081 weight=1;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token attr-name\">        server</span> <span class=\"token attr-value\">hadoop110:8081 weight=1;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token attr-name\">        server</span> <span class=\"token attr-value\">hadoop111:8081 weight=1;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    &#125;</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token attr-name\">    server</span> <span class=\"token attr-value\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token attr-name\">        listen</span> <span class=\"token attr-value\">      80;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token attr-name\">        server_name</span> <span class=\"token attr-value\"> logserver;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token attr-name\">        location</span> <span class=\"token attr-value\">/ &#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token attr-name\">            root</span> <span class=\"token attr-value\">  html;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token attr-name\">            index</span> <span class=\"token attr-value\"> index.html index.htm;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">            # 配置代理</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token attr-name\">            proxy_pass</span> <span class=\"token attr-value\">http://logserver;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token attr-name\">            proxy_connect_timeout</span> <span class=\"token attr-value\">10;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        &#125;</pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        ...</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    &#125;</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>&#125;</pre></td></tr></table></figure><blockquote>\n<p><strong>Q：为什么不配置日志服务器端口为 8080</strong></p>\n<p>在 kafka 启动消费数据前要先打开 zookeeper 集群，在 zookeeper3.5.0 之后的版本中，集群打开后会默认占用 8080 端口</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>atguigu@hadoop109 module<span class=\"token punctuation\">]</span>$ jps</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">13317</span> Jps</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">13229</span> QuorumPeerMain</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">[</span>atguigu@hadoop109 module<span class=\"token punctuation\">]</span>$ <span class=\"token function\">netstat</span> -tunlp <span class=\"token operator\">|</span><span class=\"token function\">grep</span> <span class=\"token number\">8080</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">(</span>Not all processes could be identified, non-owned process info</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>will not be shown, you would have to be root to see it all.<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>tcp6       <span class=\"token number\">0</span>      <span class=\"token number\">0</span> :::8080                 :::*                    LISTEN      <span class=\"token number\">13229</span>/java</pre></td></tr></table></figure><p>通过观察日志可以发现确实启动了一个叫 adminServer 的服务</p>\n<p><img data-src=\"https://miyazono-1255488789.cos.ap-shanghai.myqcloud.com/markdown/20200719233556.png\" alt=\"1594749317598\" /></p>\n<p>这是一个内嵌的 jetty 服务。如果想在 zookeeper 上解决这个问题，有以下三种方法</p>\n<pre><code>（1）.删除jetty。（2）修改端口。修改方法的方法有两种，一种是在启动脚本中增加 -Dzookeeper.admin.serverPort=你的端口号.一种是在zoo.cfg中增加admin.serverPort=没有被占用的端口号（3）停用这个服务，在启动脚本中增加”-Dzookeeper.admin.enableServer=false”\n</code></pre>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">netstat</span> -tunlp<span class=\"token operator\">|</span><span class=\"token function\">grep</span> 端口号 查看占用端口的进程</pre></td></tr></table></figure></blockquote>\n<h4 id=\"132-日志采集服务器群起脚本制作\"><a class=\"anchor\" href=\"#132-日志采集服务器群起脚本制作\">#</a> 1.3.2 日志采集服务器群起脚本制作</h4>\n<p>分别在 3 个节点启动 jar 比较麻烦，制作统一启动脚本.</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token shebang important\">#!/bin/bashcase $1 in    \"start\")    &#123;        for i in hadoop201 hadoop202 hadoop203        do            echo \"========启动日志服务: $i===============\"            ssh $i  \"source /etc/profile ; java -jar /opt/module/gmall/gmall-logger-1.0-SNAPSHOT.jar >/dev/null 2>&amp;1  &amp;\"        done     &#125;;;    \"stop\")    &#123;        for i in hadoop201 hadoop202 hadoop203        do            echo \"========关闭日志服务: $i===============\"            ssh $i \"ps -ef|grep gmall-logger-1.0-SNAPSHOT.jar | grep -v grep|awk '&#123;print \\$2&#125;'|xargs kill\" >/dev/null 2>&amp;1        done    &#125;;;        *)    &#123;        echo 启动姿势不对, 请使用参数 start 启动日志服务, 使用参数 stop 停止服务    &#125;;;esac</span></pre></td></tr></table></figure><h4 id=\"133-其他操作\"><a class=\"anchor\" href=\"#133-其他操作\">#</a> 1.3.3 其他操作</h4>\n<ul>\n<li>分发启动采集服务器 jar 包到其余设备</li>\n<li>给编写好的脚本增加执行权限</li>\n<li>启动 Nginx</li>\n<li>启动脚本</li>\n</ul>\n<blockquote>\n<p>脚本编写的注意事项：</p>\n<p>如果在 windows 环境下编写脚本后复制到 linux 系统中出现如下报错：</p>\n<pre><code>bad interpreter:/bin/bash^M: no such file or directory\n</code></pre>\n<p>是因为在 window 下写的脚本回车的时候使用的是 \\r\\n, 而在 linux 使用 \\n 就可以了，所在每行的末尾多了一个 \\r.</p>\n<p>使用下面的命令去掉行尾的 \\r:</p>\n<pre><code>sed -i -e 's/\\r$//' gmall_cluster\n</code></pre>\n</blockquote>\n<ul>\n<li>测试日志生成能否在集群中生成落盘日志与控制台打印</li>\n</ul>\n",
            "tags": [
                "大数据",
                "Flink"
            ]
        },
        {
            "id": "https://github.com/Mayizono/miyazono.github.io/big-data/hive/Hive%20%E5%AD%A6%E4%B9%A0/",
            "url": "https://github.com/Mayizono/miyazono.github.io/big-data/hive/Hive%20%E5%AD%A6%E4%B9%A0/",
            "title": "Hive学习",
            "date_published": "2019-10-10T16:00:00.000Z",
            "content_html": "<h1 id=\"hive-学习\"><a class=\"anchor\" href=\"#hive-学习\">#</a> Hive 学习</h1>\n<hr />\n<h3 id=\"01-什么是hive\"><a class=\"anchor\" href=\"#01-什么是hive\">#</a> 0.1 什么是 hive</h3>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1.</span> Hive：由Facebook开源用于解决<span class=\"token string\">'海量结构化日志'</span>的数据统计<span class=\"token string\">'工具'</span>。</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">2.</span> Hive是基于Hadoop的一个<span class=\"token string\">'数据仓库工具'</span>，可以将结构化的数据文件<span class=\"token string\">'映射'</span>为一张表，并提供类<span class=\"token keyword\">SQL</span>查询功能。</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">3.</span> <span class=\"token string\">'本质'</span>：将HQL转化成MapReduce程序</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">4.</span> <span class=\"token string\">'原理介绍'</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   \t（<span class=\"token number\">1</span>）Hive处理的数据存储在HDFS</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    （<span class=\"token number\">2</span>）Hive分析数据底层的实现是MapReduce</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    （<span class=\"token number\">3</span>）执行程序运行在Yarn上</pre></td></tr></table></figure><h3 id=\"02-优缺点\"><a class=\"anchor\" href=\"#02-优缺点\">#</a> 0.2 优缺点</h3>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 1. 优点：</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token number\">1.</span> 操作接口采用类<span class=\"token keyword\">SQL</span>语法，提供快速开发的能力（简单、容易上手）。</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token number\">2.</span> 避免了去写MapReduce，减少开发人员的学习成本。</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token number\">3.</span> Hive的执行延迟比较高，因此Hive常用于数据分析，对实时性要求不高的场合。</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token number\">4.</span> Hive优势在于处理大数据，对于处理小数据没有优势，因为Hive的执行延迟比较高。</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token number\">5.</span> Hive支持用户自定义函数，用户可以根据自己的需求来实现自己的函数。</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">-- 2. 缺点</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   <span class=\"token number\">1.</span> Hive的HQL表达能力有限</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   <span class=\"token number\">2.</span> 迭代式算法无法表达</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   <span class=\"token number\">3.</span> 数据挖掘方面不擅长，由于MapReduce数据处理流程的限制，效率更高的算法却无法实现。</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   <span class=\"token number\">4.</span> Hive的效率比较低</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    （<span class=\"token number\">1</span>）Hive自动生成的MapReduce作业，通常情况下不够智能化</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    （<span class=\"token number\">2</span>）Hive调优比较困难，粒度较粗</pre></td></tr></table></figure><h3 id=\"03-hive架构原理\"><a class=\"anchor\" href=\"#03-hive架构原理\">#</a> 0.3 Hive 架构原理</h3>\n<p><img data-src=\"https://miyazono-1255488789.cos.ap-shanghai.myqcloud.com/markdown/20200720000427.png\" alt=\"image\" /></p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 1. 用户接口：Client</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tCLI（command<span class=\"token operator\">-</span>line interface）、JDBC<span class=\"token operator\">/</span>ODBC<span class=\"token punctuation\">(</span>jdbc访问hive<span class=\"token punctuation\">)</span>、WEBUI（浏览器访问hive）</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">-- 2. 元数据：Metastore</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t元数据包括：</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t   a、表名</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t   b、表所属的数据库（默认是<span class=\"token keyword\">default</span>）</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t   c、表的拥有者</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t   d、列<span class=\"token operator\">/</span>分区字段</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t   e、表的类型（是否是外部表）、</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t   f、表的数据所在目录等；</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token string\">'默认存储在自带的derby数据库中，推荐使用MySQL存储Metastore'</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">-- 3. Hadoop</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t使用HDFS进行存储，使用MapReduce进行计算。</pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">-- 4. 驱动器：Driver</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token number\">1.</span> <span class=\"token string\">'解析器'</span>（<span class=\"token keyword\">SQL</span> Parser）：将<span class=\"token keyword\">SQL</span>字符串转换成抽象语法树AST，这一步一般都用第三方工具库完成，</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t   比如antlr；对AST进行语法分析，比如表是否存在、字段是否存在、<span class=\"token keyword\">SQL</span>语义是否有误。</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token number\">2.</span> <span class=\"token string\">'编译器'</span>（Physical <span class=\"token keyword\">Plan</span>）：将AST编译生成逻辑执行计划。</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token number\">3.</span> <span class=\"token string\">'优化器'</span>（Query Optimizer）：对逻辑执行计划进行优化。</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token number\">4.</span> <span class=\"token string\">'执行器'</span>（Execution）：把逻辑执行计划转换成可以运行的物理计划。对于Hive来说，就是MR<span class=\"token operator\">/</span>Spark。</pre></td></tr></table></figure><h3 id=\"04-hive与数据库的比较\"><a class=\"anchor\" href=\"#04-hive与数据库的比较\">#</a> 0.4 hive 与数据库的比较</h3>\n<blockquote>\n<p>由于 Hive 采用了类似 SQL 的查询语言 HQL (Hive Query Language)，因此很容易将 Hive 理解为数据库。其实从结构上来看，Hive 和数据库除了拥有类似的查询语言，再无类似之处</p>\n</blockquote>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 1. 查询语言</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    hive有类似<span class=\"token keyword\">sql</span>的hql查询语言</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">-- 2. 数据更新</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token number\">1.</span> hive针对数据仓库而设计，适合读多写少的场景</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token number\">2.</span> mysql的数据需要经常进行修改。</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">-- 3.  执行延迟</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token number\">1.</span> hive没有索引 <span class=\"token operator\">+</span> 基于mr计算，延迟性高；</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token number\">2.</span> 这个低是有条件的，即数据规模较小，当数据规模大到超过数据库的处理能力的时候，Hive的并行计算显然能体现出优势</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">-- 4. 数据规模</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token number\">1.</span> 支持大数据规模的数据</pre></td></tr></table></figure><h3 id=\"05-tez引擎\"><a class=\"anchor\" href=\"#05-tez引擎\">#</a> 0.5 tez 引擎</h3>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1.</span> <span class=\"token string\">'mr引擎'</span>：每个任务及任务之间都需要落盘</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">2.</span> <span class=\"token string\">'Tez引擎'</span>：可以将多个有依赖的作业转换为一个作业，这样只需写一次HDFS，且中间节点较少，从而大大提升作业的计算性能。</pre></td></tr></table></figure><p><img data-src=\"https://miyazono-1255488789.cos.ap-shanghai.myqcloud.com/markdown/20200720001522.png\" alt=\"image\" /></p>\n<h2 id=\"一-hivejdbc客户端基本操作\"><a class=\"anchor\" href=\"#一-hivejdbc客户端基本操作\">#</a> 一、HiveJDBC 客户端基本操作</h2>\n<h3 id=\"11-hviejdbc的登入与退出\"><a class=\"anchor\" href=\"#11-hviejdbc的登入与退出\">#</a> 1.1 HvieJDBC 的登入与退出</h3>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 方式一：使用 beeline 方式</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>访问方式：beeline <span class=\"token operator\">-</span>u jdbc:hive2:<span class=\"token comment\">//hadoop102:10000 -n lianzp</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>退出方式：！quit  、<span class=\"token operator\">!</span><span class=\"token keyword\">exit</span> 、 ctrl <span class=\"token operator\">+</span> c</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>前提：mysql服务和hiveservice2服务一定要启动</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">-- 方式二： 使用 hive 的方式</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>访问方式：hive</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>退出方式：quit； <span class=\"token keyword\">exit</span>；</pre></td></tr></table></figure><h3 id=\"12-hive常用的交互命令\"><a class=\"anchor\" href=\"#12-hive常用的交互命令\">#</a> 1.2 Hive 常用的交互命令</h3>\n<blockquote>\n<ul>\n<li>\n<p>“-e” 不进入 hive 的交互窗口执行 sql 语句 **</p>\n</li>\n<li>\n<p>“-f” 执行脚本中 sql 语句 **</p>\n</li>\n</ul>\n</blockquote>\n<h3 id=\"13-hive数据类型\"><a class=\"anchor\" href=\"#13-hive数据类型\">#</a> 1.3 Hive 数据类型</h3>\n<ul>\n<li>基本数据类型</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Hive 数据类型</th>\n<th>Java 数据类型</th>\n<th>长度</th>\n<th>例子</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>TINYINT</td>\n<td>byte</td>\n<td>1byte 有符号整数</td>\n<td>20</td>\n</tr>\n<tr>\n<td>SMALINT</td>\n<td>short</td>\n<td>2byte 有符号整数</td>\n<td>20</td>\n</tr>\n<tr>\n<td>INT</td>\n<td>int</td>\n<td>4byte 有符号整数</td>\n<td>20</td>\n</tr>\n<tr>\n<td>BIGINT</td>\n<td>long</td>\n<td>8byte 有符号整数</td>\n<td>20</td>\n</tr>\n<tr>\n<td>BOOLEAN</td>\n<td>boolean</td>\n<td>布尔类型，true 或者 false</td>\n<td>TRUE  FALSE</td>\n</tr>\n<tr>\n<td>FLOAT</td>\n<td>float</td>\n<td>单精度浮点数</td>\n<td>3.14159</td>\n</tr>\n<tr>\n<td>DOUBLE</td>\n<td>double</td>\n<td>双精度浮点数</td>\n<td>3.14159</td>\n</tr>\n<tr>\n<td>STRING</td>\n<td>string</td>\n<td>字符系列。可以指定字符集。可以使用单引号或者双引号。</td>\n<td>‘now is the time’ “for all good men”</td>\n</tr>\n<tr>\n<td>TIMESTAMP</td>\n<td></td>\n<td>时间类型</td>\n<td></td>\n</tr>\n<tr>\n<td>BINARY</td>\n<td></td>\n<td>字节数组</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<ul>\n<li>\n<p>重点关注：int，string，double,bigint ；</p>\n</li>\n<li>\n<p>使用注意事项：在 sql 中需要指定字段的长度，而在 hive 中不需要，可以理解为可变参数 ；</p>\n</li>\n<li>\n<p>数据类型的字节数：</p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">byte</th>\n<th style=\"text-align:center\">short</th>\n<th style=\"text-align:center\">int</th>\n<th style=\"text-align:center\">long</th>\n<th>float</th>\n<th style=\"text-align:center\">double</th>\n<th style=\"text-align:center\">char</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\">4</td>\n<td style=\"text-align:center\">8</td>\n<td>4</td>\n<td style=\"text-align:center\">8</td>\n<td style=\"text-align:center\">2</td>\n</tr>\n</tbody>\n</table>\n<p>其中 float 的取值范围比 long 还要大。</p>\n</blockquote>\n<ul>\n<li>\n<p>集合数据类型</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">数据类型</th>\n<th style=\"text-align:left\">描述</th>\n<th>语法示例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">STRUCT</td>\n<td style=\"text-align:left\">和 c 语言中的 struct 类似，都可以通过 “点” 符号访问元素内容。例如，如果某个列的数据类型是 STRUCT {first STRING, last STRING}, 那么第 1 个元素可以通过字段.first 来引用。</td>\n<td>struct () 例如 struct&lt;street:string, city:string&gt;</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">MAP</td>\n<td style=\"text-align:left\">MAP 是一组键 - 值对元组集合，使用数组表示法可以访问数据。例如，如果某个列的数据类型是 MAP，其中键值对是’first’-&gt;’John’和’last’-&gt;’Doe’，那么可以通过字段名 [‘last’] 获取最后一个元素</td>\n<td>map () 例如 map&lt;string, int&gt;</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ARRAY</td>\n<td style=\"text-align:left\">数组是一组具有相同类型和名称的变量的集合。这些变量称为数组的元素，每个数组元素都有一个编号，编号从零开始。例如，数组值为 [‘John’, ‘Doe’]，那么第 2 个元素可以通过数组名 [1] 进行引用。</td>\n<td>Array () 例如 array&lt;string&gt;</td>\n</tr>\n</tbody>\n</table>\n</li>\n</ul>\n<p>创建表的实例:</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">create</span> <span class=\"token keyword\">table</span> <span class=\"token keyword\">if</span> <span class=\"token operator\">not</span> <span class=\"token keyword\">exists</span> test<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>name string<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>friends array<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span><span class=\"token punctuation\">,</span>  <span class=\"token comment\">/*-- 数组的格式 --*/</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>children map<span class=\"token operator\">&lt;</span>string<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> <span class=\"token comment\">/*-- 集合的格式 --*/</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>address struct<span class=\"token operator\">&lt;</span>street:string<span class=\"token punctuation\">,</span> city:string<span class=\"token operator\">></span><span class=\"token comment\">/* --Struct 格式 -- */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">row</span> format delimited <span class=\"token keyword\">fields</span> <span class=\"token keyword\">terminated</span> <span class=\"token keyword\">by</span> <span class=\"token string\">','</span> </pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">/*  行 格式      划分属性    以‘，’分割  ，统称为列分割符 */</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>collection items <span class=\"token keyword\">terminated</span> <span class=\"token keyword\">by</span> <span class=\"token string\">'_'</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">/* 集合（数组，集合，Struct） 多个元素之间以‘_’ 分割，则要求所有的数据的格式均是一样的 */</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>map <span class=\"token keyword\">keys</span> <span class=\"token keyword\">terminated</span> <span class=\"token keyword\">by</span> <span class=\"token string\">':'</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">/* 指明集合中 key 和 value 以‘：’ 进行分割 */</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">lines</span> <span class=\"token keyword\">terminated</span> <span class=\"token keyword\">by</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">/* 行数据，以换行符进行分割 */</span></pre></td></tr></table></figure><p>获取集合中属性的方式：</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">*</span> \t数组：使用索引的方式：字段名<span class=\"token punctuation\">[</span><span class=\"token keyword\">index</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">*</span>\t集合：使用<span class=\"token keyword\">key</span>的值获取：字段名<span class=\"token punctuation\">[</span><span class=\"token keyword\">key</span>的值<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">*</span>\tStruct：使用：字段<span class=\"token punctuation\">.</span>属性值</pre></td></tr></table></figure><h3 id=\"14-类型转化\"><a class=\"anchor\" href=\"#14-类型转化\">#</a> 1.4 类型转化</h3>\n<ol>\n<li>\n<p>隐式类型转换规则</p>\n<ul>\n<li>\n<p>任何整数类型都可以隐式地转换为一个范围更广的类型，如 TINYINT 可以转换成 INT，INT 可以转换成 BIGINT；</p>\n</li>\n<li>\n<p>所有整数类型、FLOAT 和<strong> STRING</strong> 类型都可以隐式地转换成 DOUBLE；</p>\n</li>\n<li>\n<p>TINYINT、SMALLINT、INT 都可以转换为 FLOAT；</p>\n</li>\n<li>\n<p>BOOLEAN 类型不可以转换为任何其它的类型。</p>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>CAST 操作显示进行数据类型转换</strong></p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 示例：</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">select</span> cast <span class=\"token punctuation\">(</span><span class=\"token string\">'1'</span> <span class=\"token keyword\">as</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">3</span>  <span class=\"token punctuation\">;</span>  <span class=\"token comment\">/* 4 */</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">select</span> <span class=\"token string\">'1'</span> <span class=\"token operator\">+</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 4.0 */</span></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"二-ddl数据定义\"><a class=\"anchor\" href=\"#二-ddl数据定义\">#</a> 二、DDL 数据定义</h2>\n<h3 id=\"21-数据库操作\"><a class=\"anchor\" href=\"#21-数据库操作\">#</a> 2.1 数据库操作</h3>\n<h4 id=\"211显示和查询数据库与表信息\"><a class=\"anchor\" href=\"#211显示和查询数据库与表信息\">#</a> 2.1.1 显示和查询数据库与表信息</h4>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1.</span>显示数据库</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">show</span> <span class=\"token keyword\">databases</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">2.</span>切换数据库</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">use</span> 数据库名；</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">3.</span>查询数据库详细信息</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">desc</span> <span class=\"token keyword\">database</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">extended</span><span class=\"token punctuation\">]</span> 数据库名</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token number\">4.</span>查询表的详细信息</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">desc</span> <span class=\"token punctuation\">[</span>formatted<span class=\"token punctuation\">]</span> 表名</pre></td></tr></table></figure><h4 id=\"212-创建数据库\"><a class=\"anchor\" href=\"#212-创建数据库\">#</a> 2.1.2 创建数据库</h4>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">DATABASE</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">IF</span> <span class=\"token operator\">NOT</span> <span class=\"token keyword\">EXISTS</span><span class=\"token punctuation\">]</span> database_name</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token keyword\">COMMENT</span> database_comment<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">[</span>LOCATION hdfs_path<span class=\"token punctuation\">]</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token keyword\">WITH</span> DBPROPERTIES <span class=\"token punctuation\">(</span>property_name<span class=\"token operator\">=</span>property_value<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>实例：</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1.</span><span class=\"token keyword\">create</span> <span class=\"token keyword\">database</span> db_hive<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">2.</span><span class=\"token keyword\">create</span> <span class=\"token keyword\">database</span> <span class=\"token keyword\">if</span> <span class=\"token operator\">not</span> <span class=\"token keyword\">exists</span> db_hive<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">/* 加上 if not exists 后，当该数据库已存在时，不抛异常，也不做创建数据库的操作 */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token number\">3.</span><span class=\"token keyword\">create</span> <span class=\"token keyword\">database</span> db_hive2 location <span class=\"token string\">'/db_hive2.db'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">/* 指定数据创建时，在 hdfs 上的路径，如果没有此操作，则默认的路径为：/user/hive/warehouse/ 数据库名 */</span></pre></td></tr></table></figure><h4 id=\"213-删除数据库\"><a class=\"anchor\" href=\"#213-删除数据库\">#</a> 2.1.3 删除数据库</h4>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1.</span>删除空的数据库（何为空的数据库？指该数据中没有表）</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">drop</span> <span class=\"token keyword\">database</span> db_hive2 <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">2.</span>当数据库不存在时，避免抛异常</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">drop</span> <span class=\"token keyword\">database</span> <span class=\"token keyword\">if</span> <span class=\"token operator\">not</span> <span class=\"token keyword\">exists</span> db_hive2 <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">3.</span>当数据库不为空时，加上<span class=\"token keyword\">cascade</span>进行删除</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">drop</span> <span class=\"token keyword\">database</span> <span class=\"token keyword\">if</span> <span class=\"token operator\">not</span> <span class=\"token keyword\">exists</span> db_hive2  <span class=\"token keyword\">cascade</span> <span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"22-表的操作\"><a class=\"anchor\" href=\"#22-表的操作\">#</a> 2.2 表的操作</h3>\n<h4 id=\"221-建表语法\"><a class=\"anchor\" href=\"#221-建表语法\">#</a> 2.2.1 建表语法</h4>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">CREATE</span> <span class=\"token punctuation\">[</span>EXTERNAL<span class=\"token punctuation\">]</span> <span class=\"token keyword\">TABLE</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">IF</span> <span class=\"token operator\">NOT</span> <span class=\"token keyword\">EXISTS</span><span class=\"token punctuation\">]</span> table_name </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>col_name data_type <span class=\"token punctuation\">[</span><span class=\"token keyword\">COMMENT</span> col_comment<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token keyword\">COMMENT</span> table_comment<span class=\"token punctuation\">]</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">[</span>PARTITIONED <span class=\"token keyword\">BY</span> <span class=\"token punctuation\">(</span>col_name data_type <span class=\"token punctuation\">[</span><span class=\"token keyword\">COMMENT</span> col_comment<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token keyword\">CLUSTERED</span> <span class=\"token keyword\">BY</span> <span class=\"token punctuation\">(</span>col_name<span class=\"token punctuation\">,</span> col_name<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">[</span>SORTED <span class=\"token keyword\">BY</span> <span class=\"token punctuation\">(</span>col_name <span class=\"token punctuation\">[</span><span class=\"token keyword\">ASC</span><span class=\"token operator\">|</span><span class=\"token keyword\">DESC</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">INTO</span> num_buckets BUCKETS<span class=\"token punctuation\">]</span> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token keyword\">ROW</span> FORMAT row_format<span class=\"token punctuation\">]</span> </pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">[</span>STORED <span class=\"token keyword\">AS</span> file_format<span class=\"token punctuation\">]</span> </pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">[</span>LOCATION hdfs_path<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">[</span>TBLPROPERTIES <span class=\"token punctuation\">(</span>property_name<span class=\"token operator\">=</span>property_value<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token keyword\">AS</span> select_statement<span class=\"token punctuation\">]</span></pre></td></tr></table></figure><p>各个参数说明：</p>\n<ol>\n<li>\n<p>EXTERNAL ：表示外部表，在删除表时，只会删除 mysql 中的元数据，在 hdfs 的真实数据不会被删除，如果没 EXTERNAL ，则删除表的时候，元数据和真实数据均为被删除。</p>\n</li>\n<li>\n<p>IF NOT EXISTS ：当表存在时，添加此操作，则不会抛异常，同时也不会执行建表操作。</p>\n</li>\n<li>\n<p>COMMENT  ：字段或表的注释；</p>\n</li>\n<li>\n<p>PARTITIONED BY ： 分区 ** <code>（后面详细讲）</code> **；</p>\n</li>\n<li>\n<p>CLUSTERED BY ： 分桶 **（后面详细讲）**；</p>\n</li>\n<li>\n<p>SORTED BY ：文件在 hdfs 的存储格式 ，存储的方式有：SEQUENCEFILE（二进制序列文件）、TEXTFILE（文本）、RCFILE（列式存储格式文件）</p>\n<p>如果文件数据是纯文本，可以使用 STORED AS TEXTFILE。如果数据需要压缩，使用 STORED AS SEQUENCEFILE；</p>\n</li>\n<li>\n<p>ROW FORMAT row_format ：列分割符；</p>\n</li>\n<li>\n<p>LOCATION hdfs_path：指定表在 HDFS 上的存储位置；默认为当前库下。</p>\n</li>\n<li>\n<p>AS select_statement ：建表时进行加载数据，通过 as 后面的查询语句。</p>\n</li>\n</ol>\n<h4 id=\"222-管理表与外部表\"><a class=\"anchor\" href=\"#222-管理表与外部表\">#</a> 2.2.2 管理表与外部表</h4>\n<p>区别：</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1.</span>管理表：也称内部表，当删除管理表时，hdfs中的数据和mysql中的元数据均会被删除 <span class=\"token comment\">-- 控制表的生命周期</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">2.</span>外部表：当删除管理表时，hdfs中的数据不会被删除，mysql中的元数据会被删除  <span class=\"token comment\">-- 不能控制表的生命周期</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>在实战过程中，我们一般都是使用外部表。</pre></td></tr></table></figure><p>内外部表的定义、查看和转换</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1.</span>定义：</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>创建表单时，加上 external 关键字则表示为外部表。</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">2.</span>查看：</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>通过 <span class=\"token keyword\">desc</span> formatted 表名 。</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token number\">3.</span>转换：</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">alter</span> <span class=\"token keyword\">table</span> 表名 <span class=\"token keyword\">set</span> tblproperties<span class=\"token punctuation\">(</span><span class=\"token string\">'EXTERNAL'</span><span class=\"token operator\">=</span><span class=\"token string\">'TRUE'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>注意事项：</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>a、<span class=\"token boolean\">TRUE</span> :   转换为外部表；</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>b、<span class=\"token boolean\">FALSE</span> ： 转换为内部表<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>c、<span class=\"token punctuation\">(</span><span class=\"token string\">'EXTERNAL'</span><span class=\"token operator\">=</span><span class=\"token string\">'TRUE'</span><span class=\"token punctuation\">)</span>和<span class=\"token punctuation\">(</span><span class=\"token string\">'EXTERNAL'</span><span class=\"token operator\">=</span><span class=\"token string\">'FALSE'</span><span class=\"token punctuation\">)</span>为固定写法，均需要大写！</pre></td></tr></table></figure><h4 id=\"223-修改表\"><a class=\"anchor\" href=\"#223-修改表\">#</a> 2.2.3 修改表</h4>\n<ol>\n<li>重命名表</li>\n</ol>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 语法：</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">alter</span> <span class=\"token keyword\">table</span> 旧表名 <span class=\"token keyword\">rename</span> <span class=\"token keyword\">to</span> 新表名 ；</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">-- 示例：</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">alter</span> <span class=\"token keyword\">table</span> dept_partition2 <span class=\"token keyword\">rename</span> <span class=\"token keyword\">to</span> dept_partition3<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>更新列</li>\n</ol>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 语法：</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">alter</span> <span class=\"token keyword\">table</span> 表名 change 旧列名 新列名 数据类型  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">-- 示例：</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">alter</span> <span class=\"token keyword\">table</span> emp change ename naem string <span class=\"token keyword\">first</span> deptno<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"3\">\n<li>增加列</li>\n</ol>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 语法：</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">alter</span> <span class=\"token keyword\">table</span> 表名 <span class=\"token keyword\">add</span> 列名 数据类型 <span class=\"token punctuation\">[</span>字段注释<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">first</span> <span class=\"token operator\">/</span> <span class=\"token keyword\">after</span>  列名<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">-- 示例：</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">alter</span> <span class=\"token keyword\">table</span> emp <span class=\"token keyword\">add</span> loc string <span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"4\">\n<li>删除表</li>\n</ol>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 语法：</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">drop</span> <span class=\"token keyword\">table</span> 表名</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">-- 示例：</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">drop</span> <span class=\"token keyword\">table</span> emp <span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"三-dml-操作\"><a class=\"anchor\" href=\"#三-dml-操作\">#</a> 三、DML 操作</h2>\n<p><strong>注意事项：</strong></p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>当导入数据时，如果加载本地的文件，并是将数据加载到有分区和分桶表的hive表中时，因为此导入数据的过程会跑mr程序，该本地文件需要在所有节点都需要，不然会报文件不存在异常。</pre></td></tr></table></figure><h3 id=\"31-数据的导入\"><a class=\"anchor\" href=\"#31-数据的导入\">#</a> 3.1 数据的导入</h3>\n<h4 id=\"311-方式一\"><a class=\"anchor\" href=\"#311-方式一\">#</a> 3.1.1 方式一</h4>\n<ul>\n<li>使用 load</li>\n</ul>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 语法：</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">load</span> <span class=\"token keyword\">data</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">local</span><span class=\"token punctuation\">]</span> inpath <span class=\"token string\">'数据的路径'</span>  <span class=\"token punctuation\">[</span>overwrite<span class=\"token punctuation\">]</span> <span class=\"token keyword\">into</span> <span class=\"token keyword\">table</span> 表名 <span class=\"token punctuation\">[</span><span class=\"token keyword\">partition</span> <span class=\"token punctuation\">(</span>分区字段 <span class=\"token operator\">=</span> value1<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>分区字段 <span class=\"token operator\">=</span> value2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">-- 说明：</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">local</span> : 如果使用了，则<span class=\"token string\">'数据的路径'</span>写linux本地的路径；</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t    如果未使用，则<span class=\"token string\">'数据的路径'</span>写hdfs上的路径； </pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">partition</span> <span class=\"token punctuation\">(</span>分区字段 <span class=\"token operator\">=</span> value1<span class=\"token punctuation\">)</span>   ：表示数据上传到哪一个分区，后面详细介绍。  </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>overwrite : 表示覆盖写。</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">-- 示例：</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>本地 ： <span class=\"token keyword\">load</span> <span class=\"token keyword\">data</span> <span class=\"token keyword\">local</span> inpath <span class=\"token string\">'/opt/module/hive/datas/emp'</span> <span class=\"token keyword\">into</span> <span class=\"token keyword\">table</span> emp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>hdfs :  <span class=\"token keyword\">load</span> <span class=\"token keyword\">data</span> inpath <span class=\"token string\">'/user/hive/warehouse/emp'</span> <span class=\"token keyword\">into</span> <span class=\"token keyword\">table</span> emp<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"312-方式二\"><a class=\"anchor\" href=\"#312-方式二\">#</a> 3.1.2  方式二</h4>\n<ul>\n<li>通过查询语句向表中进行添加</li>\n</ul>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 语法：</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> <span class=\"token keyword\">table</span> 表名 <span class=\"token keyword\">select</span> 字段 <span class=\"token keyword\">from</span> 表名； <span class=\"token comment\">-- 追加的方式，原数据不会丢失</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">insert</span> overwrite <span class=\"token keyword\">table</span> 表名 <span class=\"token keyword\">select</span> 字段 <span class=\"token keyword\">from</span> 表名； <span class=\"token comment\">-- 覆盖原数据的方式，原数据被覆盖</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> <span class=\"token keyword\">table</span> 表名 <span class=\"token keyword\">select</span> 字段 <span class=\"token keyword\">from</span> 表名 <span class=\"token keyword\">partition</span> <span class=\"token punctuation\">(</span>分区字段 <span class=\"token operator\">=</span> <span class=\"token keyword\">Value</span><span class=\"token punctuation\">)</span>； 多分区的插入模式</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">-- 示例：</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> <span class=\"token keyword\">table</span> emp <span class=\"token keyword\">select</span> id <span class=\"token punctuation\">,</span>name <span class=\"token keyword\">from</span> emp1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">insert</span> overwrite <span class=\"token keyword\">table</span> emp  <span class=\"token keyword\">select</span> id <span class=\"token punctuation\">,</span>name <span class=\"token keyword\">from</span> emp1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> <span class=\"token keyword\">table</span> emp <span class=\"token keyword\">select</span> id <span class=\"token punctuation\">,</span>name <span class=\"token keyword\">from</span> emp1 <span class=\"token keyword\">partition</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">month</span> <span class=\"token operator\">=</span> <span class=\"token string\">'2020-02-04'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"313-方式三\"><a class=\"anchor\" href=\"#313-方式三\">#</a> 3.1.3 方式三</h4>\n<ul>\n<li>创建表并使用查询语句加载数据（As Select）</li>\n</ul>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 语法：</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>建表语句 <span class=\"token operator\">+</span> <span class=\"token keyword\">as</span>  <span class=\"token operator\">+</span> 查询语句</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">-- 示例：</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">create</span>  <span class=\"token punctuation\">[</span>external<span class=\"token punctuation\">]</span> <span class=\"token keyword\">table</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">if</span> <span class=\"token operator\">not</span> <span class=\"token keyword\">exists</span><span class=\"token punctuation\">]</span> emp <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>id <span class=\"token keyword\">int</span> <span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>name string</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">row</span> format delimited <span class=\"token keyword\">fields</span> <span class=\"token keyword\">terminated</span> <span class=\"token keyword\">by</span> <span class=\"token string\">'\\t'</span>  </pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">as</span> <span class=\"token keyword\">select</span> id <span class=\"token punctuation\">,</span> name <span class=\"token keyword\">from</span> emp1<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"314-方式四\"><a class=\"anchor\" href=\"#314-方式四\">#</a> 3.1.4 方式四</h4>\n<ul>\n<li>创建表时使用 location 的方式</li>\n</ul>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 语法：</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>建表语句 <span class=\"token operator\">+</span> location <span class=\"token operator\">+</span> <span class=\"token string\">'hdfs数据路径'</span>  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">-- 说明：</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>数据路径：只能是hdfs上的路径，当该路径是一个目录时，则表示加载该文件夹下的所有文件</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">-- 示例：</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">create</span>  <span class=\"token punctuation\">[</span>external<span class=\"token punctuation\">]</span> <span class=\"token keyword\">table</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">if</span> <span class=\"token operator\">not</span> <span class=\"token keyword\">exists</span><span class=\"token punctuation\">]</span> emp <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>id <span class=\"token keyword\">int</span> <span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>name string</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">row</span> format delimited <span class=\"token keyword\">fields</span> <span class=\"token keyword\">terminated</span> <span class=\"token keyword\">by</span> <span class=\"token string\">'\\t'</span>  </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>location <span class=\"token string\">'/user/hive/warehouse/emp'</span> <span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"315-方式五\"><a class=\"anchor\" href=\"#315-方式五\">#</a> 3.1.5 方式五</h4>\n<ul>\n<li>使用 import 方式</li>\n</ul>\n<p>注意：必须使用 export 的方式导出以后（导出了元数据和真实数据），再使用 import 进行导入。</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 示例：</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token keyword\">table</span> student2  <span class=\"token keyword\">from</span> <span class=\"token string\">'/user/hive/warehouse/export/student'</span></pre></td></tr></table></figure><h3 id=\"32-数据的导出\"><a class=\"anchor\" href=\"#32-数据的导出\">#</a> 3.2 数据的导出</h3>\n<ul>\n<li>说明：数据的导出的方式，使用的情况很少。</li>\n</ul>\n<h4 id=\"321-方式一\"><a class=\"anchor\" href=\"#321-方式一\">#</a> 3.2.1 方式一</h4>\n<ul>\n<li>insert 方式</li>\n</ul>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 语法：</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">insert</span>  overwrite    <span class=\"token punctuation\">[</span><span class=\"token keyword\">local</span><span class=\"token punctuation\">]</span> directory <span class=\"token string\">'输出文件路径'</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">row</span> format delimited <span class=\"token keyword\">fields</span> <span class=\"token keyword\">terminated</span> <span class=\"token keyword\">by</span> <span class=\"token string\">'分割符'</span><span class=\"token punctuation\">]</span> 查询语句</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">-- 说明：</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>overwrite ：overwrite 是覆盖原文件的数据写入</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token keyword\">local</span><span class=\"token punctuation\">]</span> ：加它，表示导出到本地，不加，则表示导出到hdfs上</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token string\">'输出文件路径'</span> ： 配合<span class=\"token keyword\">local</span>来的，加了<span class=\"token keyword\">local</span>，则写本地linux路径，不加，则写hdfs路径</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token keyword\">row</span> format delimited <span class=\"token keyword\">fields</span> <span class=\"token keyword\">terminated</span> <span class=\"token keyword\">by</span> <span class=\"token string\">'分割符'</span><span class=\"token punctuation\">]</span> ：表示文件输出的格式</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">-- 示例：</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">-- 导入到本地</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token number\">1</span>）<span class=\"token keyword\">insert</span> overwrite <span class=\"token keyword\">local</span> directory <span class=\"token string\">'/opt/module/hive/datas/export/student'</span>  <span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> student<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">-- 导出到本地，并指定导出的行数据的分割符</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token number\">2</span>）<span class=\"token keyword\">insert</span> overwrite <span class=\"token keyword\">local</span> directory <span class=\"token string\">'/opt/module/hive/datas/export/student1'</span> <span class=\"token keyword\">ROW</span> FORMAT DELIMITED <span class=\"token keyword\">FIELDS</span> <span class=\"token keyword\">TERMINATED</span> <span class=\"token keyword\">BY</span> <span class=\"token string\">'\\t'</span>  <span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> student<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">-- 导出到 hdfs 上，并指定导出的行数据的分割符</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token number\">3</span>）<span class=\"token keyword\">insert</span> overwrite directory <span class=\"token string\">'/user/lianzp/student2'</span><span class=\"token keyword\">ROW</span> FORMAT DELIMITED <span class=\"token keyword\">FIELDS</span> <span class=\"token keyword\">TERMINATED</span> <span class=\"token keyword\">BY</span> <span class=\"token string\">'\\t'</span> <span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> student<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"322-方式二\"><a class=\"anchor\" href=\"#322-方式二\">#</a> 3.2.2 方式二</h4>\n<ul>\n<li>hadoop 的 shell 命令</li>\n</ul>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 语法：</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>hdfs dfs <span class=\"token operator\">-</span>get hdfs数据的输出路径 linux输入路径</pre></td></tr></table></figure><h4 id=\"323-方式三\"><a class=\"anchor\" href=\"#323-方式三\">#</a> 3.2.3 方式三</h4>\n<ul>\n<li>hive 的 shell 命令</li>\n</ul>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 语法：</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>hive <span class=\"token operator\">-</span>e 查询语句 <span class=\"token operator\">></span> linux输入路径</pre></td></tr></table></figure><h4 id=\"324-方式四\"><a class=\"anchor\" href=\"#324-方式四\">#</a> 3.2.4 方式四</h4>\n<ul>\n<li>export 的方式</li>\n</ul>\n<p>说明：export 和 import 主要用于两个 hadoop 平台集群之间的 hive 表迁移。</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 语法：</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>export <span class=\"token keyword\">table</span> 表名 <span class=\"token keyword\">to</span>  <span class=\"token string\">'文件输出路径'</span>  <span class=\"token comment\">-- 此路径为 hdfs 路径</span></pre></td></tr></table></figure><h4 id=\"325-方式五\"><a class=\"anchor\" href=\"#325-方式五\">#</a> 3.2.5 方式五</h4>\n<ul>\n<li>Sqoop 导出   -- &gt;  后续有课程单独讲解</li>\n</ul>\n<h3 id=\"33-清除表中数据\"><a class=\"anchor\" href=\"#33-清除表中数据\">#</a> 3.3 清除表中数据</h3>\n<ul>\n<li>使用 truncate</li>\n</ul>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 语法：</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">truncate</span> <span class=\"token keyword\">table</span> 表名 ；</pre></td></tr></table></figure><h2 id=\"四-查询\"><a class=\"anchor\" href=\"#四-查询\">#</a> 四、查询</h2>\n<h3 id=\"41-关键词的总结\"><a class=\"anchor\" href=\"#41-关键词的总结\">#</a> 4.1 关键词的总结</h3>\n<pre><code class=\"language-mysql\">-- 建表：\n1) partitioned by :分区表\n2）clustered by  : 分桶表\n\n-- 查询：\n1） order by : 全排序\n2） distribute by : 查询中做分区\n3） sort by : 查询中每个MapReduce内部排序\n4） cluster by : 查询中做分区排序\n\n-- 窗口函数：\n1) partition by :窗口函数中做分区\n2) order by ：窗口函数中做排序\n</code></pre>\n<h3 id=\"42-sql执行的顺序\"><a class=\"anchor\" href=\"#42-sql执行的顺序\">#</a> 4.2 sql 执行的顺序</h3>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1.</span> <span class=\"token keyword\">from</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">2.</span> <span class=\"token keyword\">on</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">3.</span> <span class=\"token keyword\">join</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">4.</span> <span class=\"token keyword\">where</span> <span class=\"token punctuation\">;</span> <span class=\"token comment\">-- 不能使用列的别名</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">5.</span> <span class=\"token keyword\">group</span> <span class=\"token keyword\">by</span> <span class=\"token punctuation\">;</span> <span class=\"token comment\">-- 不能使用列的别名</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token number\">6.</span> <span class=\"token keyword\">having</span> <span class=\"token punctuation\">;</span> <span class=\"token comment\">-- 可以使用列的别名</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token number\">7.</span> <span class=\"token keyword\">select</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token number\">8.</span> <span class=\"token keyword\">distinct</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token number\">9.</span> <span class=\"token keyword\">order</span> <span class=\"token keyword\">by</span> <span class=\"token punctuation\">;</span> <span class=\"token comment\">-- 可以使用列的别名</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token number\">10.</span> <span class=\"token keyword\">limit</span> <span class=\"token punctuation\">;</span> <span class=\"token comment\">-- 可以使用列的别名</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>注意事项： 表名一旦使用了别名，所有的位置均需使用表的别名。</pre></td></tr></table></figure><h3 id=\"43-查询语法\"><a class=\"anchor\" href=\"#43-查询语法\">#</a> 4.3 查询语法</h3>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 语法：</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">SELECT</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">ALL</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">DISTINCT</span><span class=\"token punctuation\">]</span> select_expr<span class=\"token punctuation\">,</span> select_expr<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">FROM</span> table_reference</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token punctuation\">[</span><span class=\"token keyword\">WHERE</span> where_condition<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token punctuation\">[</span><span class=\"token keyword\">GROUP</span> <span class=\"token keyword\">BY</span> col_list<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token punctuation\">[</span><span class=\"token keyword\">ORDER</span> <span class=\"token keyword\">BY</span> col_list<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token punctuation\">[</span>CLUST <span class=\"token keyword\">BY</span> col_list</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token operator\">|</span> <span class=\"token punctuation\">[</span>DISTRIBUTE <span class=\"token keyword\">BY</span> col_list<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>SORT <span class=\"token keyword\">BY</span> col_list<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre> <span class=\"token punctuation\">[</span><span class=\"token keyword\">LIMIT</span> number<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre> </pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">-- 说明：</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre> <span class=\"token keyword\">DISTINCT</span> ：去重；</pre></td></tr><tr><td data-num=\"14\"></td><td><pre> CLUST <span class=\"token keyword\">BY</span> col_list</pre></td></tr></table></figure><h3 id=\"44-基本查询\"><a class=\"anchor\" href=\"#44-基本查询\">#</a> 4.4  基本查询</h3>\n<h4 id=\"441-全表和特定列查询\"><a class=\"anchor\" href=\"#441-全表和特定列查询\">#</a> 4.4.1 全表和特定列查询</h4>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 语法：</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> 表名 ；  <span class=\"token comment\">-- 全表查询</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">select</span> 列名<span class=\"token number\">1</span>、列名<span class=\"token number\">2</span> <span class=\"token keyword\">from</span> 表名 ； <span class=\"token comment\">-- 特定列查询</span></pre></td></tr></table></figure><h4 id=\"442-别名\"><a class=\"anchor\" href=\"#442-别名\">#</a> 4.4.2  别名</h4>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>定义： 在查询中紧跟列名，也可以在列名与别名之间加<span class=\"token keyword\">as</span>；</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>注意事项：</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">1</span>）在hive中，中文的别名使用 一对 <span class=\"token punctuation\">`</span><span class=\"token punctuation\">`</span> 来注释；</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">2</span>）<span class=\"token keyword\">as</span> 一般可以省略 ；</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">3</span>） <span class=\"token keyword\">where</span> 、 <span class=\"token keyword\">group</span> <span class=\"token keyword\">by</span> 后面不能使用列的别名；</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token number\">4</span>）<span class=\"token keyword\">having</span> 、<span class=\"token keyword\">order</span> <span class=\"token keyword\">by</span> 、<span class=\"token keyword\">limit</span> 可以使用列的别名 ；</pre></td></tr></table></figure><h4 id=\"443-算术运算符\"><a class=\"anchor\" href=\"#443-算术运算符\">#</a> 4.4.3 算术运算符</h4>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">运算符</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">A+B</td>\n<td style=\"text-align:center\">A 和 B 相加</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">A-B</td>\n<td style=\"text-align:center\">A 减去 B</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">A*B</td>\n<td style=\"text-align:center\">A 和 B 相乘</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">A/B</td>\n<td style=\"text-align:center\">A 除以 B</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">A%B</td>\n<td style=\"text-align:center\">A 对 B 取余</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">A&amp;B</td>\n<td style=\"text-align:center\">A 和 B 按位取与</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">A|B</td>\n<td style=\"text-align:center\">A 和 B 按位取或</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">A^B</td>\n<td style=\"text-align:center\">A 和 B 按位取异或</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">~A</td>\n<td style=\"text-align:center\">A 按位取反</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"444-常用函数\"><a class=\"anchor\" href=\"#444-常用函数\">#</a> 4.4.4 常用函数</h4>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>  c求和 ： sum（）；</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">2</span>） 求平均数 ： <span class=\"token function\">avg</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>  求最大值 ： max（）；</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">4</span>） 求最小值 ： min（）；</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">5</span>） 求个数 ： count（）；</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">-- 说明：</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token number\">1</span>） count（）：不计算<span class=\"token boolean\">null</span>值；</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token number\">2</span>） <span class=\"token function\">avg</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> : 计算平均数时，分母也是不计算<span class=\"token boolean\">null</span>个数的；</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token number\">3</span>） 所以： <span class=\"token function\">avg</span> <span class=\"token punctuation\">(</span>字段<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token function\">sum</span> <span class=\"token punctuation\">(</span>字段<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token function\">count</span><span class=\"token punctuation\">(</span>字段<span class=\"token punctuation\">)</span>，因此我们在计算一些列的平均值时，一般使用count（<span class=\"token operator\">*</span>）或者是count（<span class=\"token number\">1</span>）；</pre></td></tr></table></figure><h4 id=\"445-where-语句\"><a class=\"anchor\" href=\"#445-where-语句\">#</a> 4.4.5 Where 语句</h4>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1</span>） 条件的筛选；</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">2</span>） 紧跟<span class=\"token keyword\">from</span>后面。</pre></td></tr></table></figure><h4 id=\"446-比较运算符\"><a class=\"anchor\" href=\"#446-比较运算符\">#</a> 4.4.6 比较运算符</h4>\n<table>\n<thead>\n<tr>\n<th>操作符</th>\n<th style=\"text-align:center\">支持的数据类型</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>A=B</td>\n<td style=\"text-align:center\">基本数据类型</td>\n<td style=\"text-align:left\">如果 A 等于 B 则返回 TRUE，反之返回 FALSE</td>\n</tr>\n<tr>\n<td>A&lt;=&gt;B</td>\n<td style=\"text-align:center\">基本数据类型</td>\n<td style=\"text-align:left\">如果 A 和 B 都为 NULL，则返回 TRUE，如果一边为 NULL，返回 False</td>\n</tr>\n<tr>\n<td>A&lt;&gt;B, A!=B</td>\n<td style=\"text-align:center\">基本数据类型</td>\n<td style=\"text-align:left\">A 或者 B 为 NULL 则返回 NULL；如果 A 不等于 B，则返回 TRUE，反之返回 FALSE</td>\n</tr>\n<tr>\n<td>A&lt;B</td>\n<td style=\"text-align:center\">基本数据类型</td>\n<td style=\"text-align:left\">A 或者 B 为 NULL，则返回 NULL；如果 A 小于 B，则返回 TRUE，反之返回 FALSE</td>\n</tr>\n<tr>\n<td>A&lt;=B</td>\n<td style=\"text-align:center\">基本数据类型</td>\n<td style=\"text-align:left\">A 或者 B 为 NULL，则返回 NULL；如果 A 小于等于 B，则返回 TRUE，反之返回 FALSE</td>\n</tr>\n<tr>\n<td>A&gt;B</td>\n<td style=\"text-align:center\">基本数据类型</td>\n<td style=\"text-align:left\">A 或者 B 为 NULL，则返回 NULL；如果 A 大于 B，则返回 TRUE，反之返回 FALSE</td>\n</tr>\n<tr>\n<td>A&gt;=B</td>\n<td style=\"text-align:center\">基本数据类型</td>\n<td style=\"text-align:left\">A 或者 B 为 NULL，则返回 NULL；如果 A 大于等于 B，则返回 TRUE，反之返回 FALSE</td>\n</tr>\n<tr>\n<td>A [NOT] BETWEEN B AND C</td>\n<td style=\"text-align:center\">基本数据类型</td>\n<td style=\"text-align:left\">如果 A，B 或者 C 任一为 NULL，则结果为 NULL。如果 A 的值大于等于 B 而且小于或等于 C，则结果为 TRUE，反之为 FALSE。如果使用 NOT 关键字则可达到相反的效果。</td>\n</tr>\n<tr>\n<td>A IS NULL</td>\n<td style=\"text-align:center\">所有数据类型</td>\n<td style=\"text-align:left\">如果 A 等于 NULL，则返回 TRUE，反之返回 FALSE</td>\n</tr>\n<tr>\n<td>A IS NOT NULL</td>\n<td style=\"text-align:center\">所有数据类型</td>\n<td style=\"text-align:left\">如果 A 不等于 NULL，则返回 TRUE，反之返回 FALSE</td>\n</tr>\n<tr>\n<td>IN (数值 1, 数值 2)</td>\n<td style=\"text-align:center\">所有数据类型</td>\n<td style=\"text-align:left\">使用 IN 运算显示列表中的值</td>\n</tr>\n<tr>\n<td>A [NOT] LIKE B</td>\n<td style=\"text-align:center\">STRING 类型</td>\n<td style=\"text-align:left\">B 是一个 SQL 下的简单正则表达式，也叫通配符模式，如果 A 与其匹配的话，则返回 TRUE；反之返回 FALSE。B 的表达式说明如下：‘x%’表示 A 必须以字母‘x’开头，‘% x’表示 A 必须以字母’x’结尾，而‘% x%’表示 A 包含有字母’x’, 可以位于开头，结尾或者字符串中间。如果使用 NOT 关键字则可达到相反的效果。</td>\n</tr>\n<tr>\n<td>A RLIKE B, A REGEXP B</td>\n<td style=\"text-align:center\">STRING 类型</td>\n<td style=\"text-align:left\">B 是基于 java 的正则表达式，如果 A 与其匹配，则返回 TRUE；反之返回 FALSE。匹配使用的是 JDK 中的正则表达式接口实现的，因为正则也依据其中的规则。例如，正则表达式必须和整个字符串 A 相匹配，而不是只需与其字符串匹配。</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"447-like-和-rlike\"><a class=\"anchor\" href=\"#447-like-和-rlike\">#</a> 4.4.7 like 和 rlike</h4>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1</span>） <span class=\"token operator\">like</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">%</span> : 代表零个或者是多个字符（即时任意字符）\t</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>_ : 代表一个字符；</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\\ :  转义字符；</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token number\">2</span>） <span class=\"token operator\">Rlike</span> ：后面紧跟随正则表达式</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> \\ : 转义字符，即屏蔽特殊字符的含义：\\$<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre> <span class=\"token operator\">^</span> : 从头开始匹配，如：name  <span class=\"token operator\">rlike</span> <span class=\"token operator\">^</span>a  : 表示以a开头的name</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> $ : 匹配结尾 ，如  name <span class=\"token operator\">Rlike</span> t$ ：匹配以t结尾的name</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> <span class=\"token operator\">*</span> ： <span class=\"token number\">0</span><span class=\"token operator\">-</span>n 个 ，如 name <span class=\"token operator\">rlike</span> a<span class=\"token operator\">*</span> : 匹配 <span class=\"token number\">0</span><span class=\"token operator\">-</span>n a的name</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> : 表示范围，如 <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token operator\">-</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span>a<span class=\"token operator\">-</span>z<span class=\"token punctuation\">]</span>:匹配<span class=\"token number\">0</span><span class=\"token operator\">-</span><span class=\"token number\">9</span>或者是a<span class=\"token operator\">-</span>z都可以。</pre></td></tr></table></figure><h4 id=\"448-逻辑运算符\"><a class=\"anchor\" href=\"#448-逻辑运算符\">#</a> 4.4.8  逻辑运算符</h4>\n<table>\n<thead>\n<tr>\n<th>操作符</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>AND</td>\n<td>逻辑并</td>\n</tr>\n<tr>\n<td>OR</td>\n<td>逻辑或</td>\n</tr>\n<tr>\n<td>NOT</td>\n<td>逻辑否</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"45-分组\"><a class=\"anchor\" href=\"#45-分组\">#</a> 4.5 分组</h3>\n<h4 id=\"451-group-by\"><a class=\"anchor\" href=\"#451-group-by\">#</a> 4.5.1 group by</h4>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">-</span> 常和聚合函数在一起<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">-</span> 出现在 <span class=\"token keyword\">group</span> <span class=\"token keyword\">by</span> 中的字段可以出现在 <span class=\"token keyword\">select</span>中，也可以不出现，</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  但是出现在 <span class=\"token keyword\">select</span>中字段（除函数和常量外）必须在<span class=\"token keyword\">group</span> <span class=\"token keyword\">by</span> 出现过的字段。</pre></td></tr></table></figure><h4 id=\"451-having\"><a class=\"anchor\" href=\"#451-having\">#</a> 4.5.1 Having</h4>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">having</span>  与 <span class=\"token keyword\">where</span> 的不同</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">1</span>） <span class=\"token keyword\">where</span> 后面不能写分组函数，但是 <span class=\"token keyword\">having</span> 可以 ；</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">2</span>） <span class=\"token keyword\">having</span> 只用于 <span class=\"token keyword\">Group</span> <span class=\"token keyword\">by</span> 分组统计语句；</pre></td></tr></table></figure><h3 id=\"46-join\"><a class=\"anchor\" href=\"#46-join\">#</a> 4.6  join</h3>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 说明：</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">1</span>） 常见的<span class=\"token number\">7</span>种 <span class=\"token keyword\">join</span> 要会写；</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">2</span>） 不支持非等值连接；</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">3</span>） 支持满外连接 ： <span class=\"token keyword\">full</span> <span class=\"token keyword\">join</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">4</span><span class=\"token punctuation\">)</span>  关于主表和从表： <span class=\"token comment\">-- 左右外连接，主表数据全要，从表数据只要交集的部分。</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> \t左外连接 ： 左边为主表，右边为从表 ；</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t右外连接 ： 右边为主表，左边为从表。</pre></td></tr></table></figure><h3 id=\"47-排序\"><a class=\"anchor\" href=\"#47-排序\">#</a> 4.7 排序</h3>\n<h4 id=\"471-全局排序-order-by\"><a class=\"anchor\" href=\"#471-全局排序-order-by\">#</a> 4.7.1 全局排序 ： Order By</h4>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>  全局排序，只能有一个Reducer ；</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">2</span>） <span class=\"token keyword\">DESC</span> : 降序 ；</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>  <span class=\"token keyword\">ASC</span> : 升序（<span class=\"token string\">'默认值'</span>）；</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">4</span>） <span class=\"token keyword\">Order</span> <span class=\"token keyword\">by</span> 子句必须在<span class=\"token keyword\">SELECT</span>语句的结尾 ；</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>  排序的字段可以是多个；</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>示例：</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">select</span> id <span class=\"token punctuation\">,</span> name <span class=\"token punctuation\">,</span>sal <span class=\"token keyword\">from</span> emp <span class=\"token keyword\">order</span> <span class=\"token keyword\">by</span> sal <span class=\"token keyword\">desc</span> <span class=\"token punctuation\">,</span>name <span class=\"token keyword\">asc</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">-- 先按照薪水降序，薪水相同的，则按照名字进行升序排序；</span></pre></td></tr></table></figure><h4 id=\"472-mapreduce内部排序-sort-by\"><a class=\"anchor\" href=\"#472-mapreduce内部排序-sort-by\">#</a> 4.7.2 mapreduce 内部排序 ：sort  by</h4>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>  理解：</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>理解为在 reduce 中进行排序。所以一般是需要有多个 reduce 才有作用，是在每个reduce中进行排序，属于局部排序，而不是全局排序。</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">2</span>） 使用场景：</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>当数据量很大时，不要进行全局排序，只需要进行局部排序。</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">3</span>） 一般不单独使用，因为无法控制什么样的数据进入同一个 reduce 中；</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">-- 一般配合 distribute by 使用，分区排序就是指定什么样的数据会进入同一个 reduce 中。</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token number\">4</span>） 单独使用时，进入同一个 reduce 任务中的数据是随机的。 <span class=\"token comment\">-- 伪随机，就是每次计算的结果是一样的，但是进入每一个 reduce 中的数据是随机的。</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">-- 示例：</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token number\">1</span>） 设置reducer的个数：</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">set</span> mapreduce<span class=\"token punctuation\">.</span>job<span class=\"token punctuation\">.</span>reduces<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">-- 设置 reduce 个数为 3</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token number\">2</span>） 根据部门编号降序查看员工信息 ： </pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> emp sort <span class=\"token keyword\">by</span> deptno <span class=\"token keyword\">desc</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">-- 此时生成 3 个结果文件，并且每个结果文件中均是按照 deptno 进行降序排序。</span></pre></td></tr></table></figure><h4 id=\"473-分区排序-distribute-by\"><a class=\"anchor\" href=\"#473-分区排序-distribute-by\">#</a> 4.7.3 分区排序 ： distribute by</h4>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1.</span> 理解 ： 类似在 MapReduce 中的自定义分区（<span class=\"token keyword\">partition</span> ）<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">2.</span> 一般就是配合 sort <span class=\"token keyword\">by</span> 使用；</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">3.</span> 同样，在使用的时候，不能是一个reduce，需要多个reduce；</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">4.</span> 什么样的数据会进行同一个reduce 呢 ？</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token number\">1</span>）首先，这个分区不是很智能，使用的方式是：分区的字段的 （ hashcode  <span class=\"token operator\">%</span> reduce的个数 ），计算值相等的，则进入同一个reduce；</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token number\">2</span>）不会使用toString方式进行分区。</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token number\">5.</span> distribute <span class=\"token keyword\">by</span> 必须写在sort <span class=\"token keyword\">by</span> 的前面；</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token number\">6.</span> tez 引擎会进行reduce的优化，即假设设置为<span class=\"token number\">3</span>个reduce，但是运行时有可能是<span class=\"token number\">2</span>个reduce，所以验证时<span class=\"token number\">032</span>，需使用mr引擎。<span class=\"token comment\">-- set hive.execution.engine=mr;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">-- 示例：</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">insert</span> overwrite <span class=\"token keyword\">local</span> directory <span class=\"token string\">'/opt/module/hive/datas/distribute-result'</span> <span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> emp distribute <span class=\"token keyword\">by</span> deptno sort <span class=\"token keyword\">by</span> empno <span class=\"token keyword\">desc</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">-- 假设 reduce = 3 ；</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">-- 先按照 deptno 进行分区 (m = hashcode (deptno) % 3 , m 值相等的数据进入同一个分区），然后在分区内进行局部排序，最后将查询的结果导出到本地指定的一个文件中。</span></pre></td></tr></table></figure><h4 id=\"474-cluster-by\"><a class=\"anchor\" href=\"#474-cluster-by\">#</a> 4.7.4  Cluster By</h4>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1.</span> 理解 ：当distribute <span class=\"token keyword\">by</span> 和 sort <span class=\"token keyword\">by</span> 的字段相同时，可以使用Cluster <span class=\"token keyword\">by</span> 进行替代；</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">2.</span> 不能指定排序的顺序，只能是升序。</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">-- 示例：</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>方式一 ：<span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> emp  cluster <span class=\"token keyword\">by</span> deptno <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>方式二 ：<span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> emp distribute <span class=\"token keyword\">by</span> deptno sort <span class=\"token keyword\">by</span> deptno <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">-- 方式一和方式二是等价的。</span></pre></td></tr></table></figure><h2 id=\"五-分区表和分桶表\"><a class=\"anchor\" href=\"#五-分区表和分桶表\">#</a> 五、 分区表和分桶表</h2>\n<h3 id=\"51-分区表\"><a class=\"anchor\" href=\"#51-分区表\">#</a> 5.1 分区表</h3>\n<p>分区表的解析：</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 理解：</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">1</span>） Hive 中的分区就是分目录 ；</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">2</span>） 分区表对应一个hdfs文件系统的独立的文件；</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">3</span>） 实际上是把一个大的数据集根据业务的需求分割成多个小的数集；</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">4</span>） 在查询时，通过<span class=\"token keyword\">where</span>语句进行条件筛选，指定数据在哪个分区内，提高查询的效率；</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>  同时用于解决数据倾斜的问题。</pre></td></tr></table></figure><h4 id=\"511-分区表的基本操作\"><a class=\"anchor\" href=\"#511-分区表的基本操作\">#</a> 5.1.1 分区表的基本操作</h4>\n<ol>\n<li>创建分区表</li>\n</ol>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 语法：</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">create</span> <span class=\"token keyword\">table</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">if</span> <span class=\"token operator\">not</span> <span class=\"token keyword\">exists</span><span class=\"token punctuation\">]</span> 表名 <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>字段<span class=\"token number\">1</span> 数据类型<span class=\"token number\">1</span>，</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>字段<span class=\"token number\">2</span> 数据类型<span class=\"token number\">2</span>，</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>字段<span class=\"token number\">3</span> 数据类型<span class=\"token number\">3</span>，</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">partition</span> <span class=\"token keyword\">by</span> <span class=\"token punctuation\">(</span>字段<span class=\"token number\">1</span> 数据类型<span class=\"token number\">1</span> ， 字段<span class=\"token number\">2</span> 数据类型<span class=\"token number\">2</span> ，<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">-- 分区，字段不能与表中属性字段相同</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">clustered</span> <span class=\"token keyword\">by</span> <span class=\"token punctuation\">(</span>字段<span class=\"token number\">1</span> ， 字段<span class=\"token number\">2</span> ， <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">-- 分桶，字段来自于表中的字段，所以是没有数据类型的。</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">row</span> format delimited <span class=\"token keyword\">fields</span> <span class=\"token keyword\">terminated</span> <span class=\"token keyword\">by</span> <span class=\"token string\">'\\t'</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">-- 分区的字段也是可以作为表的字段使用。</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">-- 示例：</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">create</span> <span class=\"token keyword\">table</span> dept_partition<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>deptno <span class=\"token keyword\">int</span> <span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>dname string <span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>loc string</pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">partition</span> <span class=\"token keyword\">by</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">month</span> string <span class=\"token punctuation\">,</span> <span class=\"token keyword\">day</span> string<span class=\"token punctuation\">)</span> <span class=\"token comment\">-- 二级分区，先按照月进行分区，在月中再根据 day 进行分区</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">row</span> format delimited <span class=\"token keyword\">fields</span> <span class=\"token keyword\">terminated</span> <span class=\"token keyword\">by</span> <span class=\"token string\">'\\t'</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>加载数据</li>\n</ol>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>方式一 ： 常规加载数据 <span class=\"token keyword\">load</span>方式</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">-- 语法：</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">load</span> <span class=\"token keyword\">data</span> <span class=\"token keyword\">local</span> inpath <span class=\"token string\">'本地数据路径'</span> <span class=\"token keyword\">into</span> <span class=\"token keyword\">table</span> 表名 <span class=\"token keyword\">partition</span> <span class=\"token keyword\">by</span> <span class=\"token punctuation\">(</span>字段<span class=\"token number\">1</span><span class=\"token string\">'***'</span><span class=\"token punctuation\">,</span>字段<span class=\"token number\">2</span>  <span class=\"token string\">'***'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">-- 示例：</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">load</span> <span class=\"token keyword\">data</span> <span class=\"token keyword\">local</span> inpath <span class=\"token string\">'/opt/module/hive/datas/2020-04-04.log'</span> <span class=\"token keyword\">into</span> <span class=\"token keyword\">table</span> dept_partition <span class=\"token keyword\">partition</span> <span class=\"token keyword\">by</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">month</span><span class=\"token operator\">=</span><span class=\"token string\">'2020-04'</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">day</span><span class=\"token operator\">=</span><span class=\"token string\">'04'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>方式二：上传数据后修复 <span class=\"token comment\">-- 因为单独上传数据到指定的目录下，hive 是不能自动读取，需要进行数据的修复</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>第一步： 根据分区字段的信息，创建文件夹，此文件夹与表的路径相同</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>第二步： 本地的数据上传到指定的目录下，使用 【 hdfs dfs <span class=\"token operator\">-</span>put 本地数据路径 hdfs文件路径 】</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>第三步： 进行数据的修复 ，使用语句 【msck repair <span class=\"token keyword\">table</span> 表名】</pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>方式三： 上传数据后添加分区的方式 <span class=\"token comment\">-- 该方式使用的情况最多</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>第一步和第二步与方式二完全相同；</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>第三步： 执行添加分区的方式</pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">alter</span> <span class=\"token keyword\">table</span> 表名 <span class=\"token keyword\">add</span> <span class=\"token keyword\">partition</span> <span class=\"token punctuation\">(</span>字段<span class=\"token number\">1</span><span class=\"token operator\">=</span><span class=\"token string\">'***'</span><span class=\"token punctuation\">,</span>字段<span class=\"token number\">2</span><span class=\"token operator\">=</span><span class=\"token string\">'***'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">-- 实例：</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>第一步：hdfs dfs <span class=\"token operator\">-</span>mkdir <span class=\"token operator\">-</span>p  <span class=\"token operator\">/</span><span class=\"token keyword\">user</span><span class=\"token operator\">/</span>hive<span class=\"token operator\">/</span>warehouse<span class=\"token operator\">/</span>dept_partition<span class=\"token operator\">/</span><span class=\"token keyword\">month</span><span class=\"token operator\">=</span><span class=\"token number\">2020</span><span class=\"token operator\">-</span><span class=\"token number\">04</span><span class=\"token operator\">/</span><span class=\"token keyword\">day</span><span class=\"token operator\">=</span><span class=\"token number\">04</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>第二步：hdfs dfs <span class=\"token operator\">-</span>put <span class=\"token operator\">/</span>opt<span class=\"token operator\">/</span>module<span class=\"token operator\">/</span>hive<span class=\"token operator\">/</span>datas<span class=\"token operator\">/</span><span class=\"token number\">2020</span><span class=\"token operator\">-</span><span class=\"token number\">04</span><span class=\"token operator\">-</span><span class=\"token number\">04.</span>logs <span class=\"token operator\">/</span><span class=\"token keyword\">user</span><span class=\"token operator\">/</span>hive<span class=\"token operator\">/</span>warehouse<span class=\"token operator\">/</span>dept_partition<span class=\"token operator\">/</span><span class=\"token keyword\">month</span><span class=\"token operator\">=</span><span class=\"token number\">2020</span><span class=\"token operator\">-</span><span class=\"token number\">04</span><span class=\"token operator\">/</span><span class=\"token keyword\">day</span><span class=\"token operator\">=</span><span class=\"token number\">04</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>第三步：</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>方式二： msck repair <span class=\"token keyword\">table</span> dept_partition<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>方式二： <span class=\"token keyword\">alter</span> <span class=\"token keyword\">table</span> dept_partition <span class=\"token keyword\">add</span> <span class=\"token keyword\">partition</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">month</span><span class=\"token operator\">=</span><span class=\"token string\">'2020-04'</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">day</span><span class=\"token operator\">=</span><span class=\"token string\">'04'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"3\">\n<li>根据分区进行查询</li>\n</ol>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 语法：</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>查询语句 <span class=\"token operator\">+</span> <span class=\"token keyword\">where</span> 分区字段<span class=\"token operator\">=</span><span class=\"token string\">'***'</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">-- 示例：</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">select</span>  <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> dept_partition <span class=\"token keyword\">where</span> <span class=\"token keyword\">day</span><span class=\"token operator\">=</span><span class=\"token string\">'04'</span> <span class=\"token operator\">or</span> <span class=\"token keyword\">day</span><span class=\"token operator\">=</span><span class=\"token string\">'05'</span> ；</pre></td></tr></table></figure><ol start=\"4\">\n<li>增加分区</li>\n</ol>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 语法：</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">alter</span> <span class=\"token keyword\">table</span> 表名 <span class=\"token keyword\">add</span> <span class=\"token keyword\">partition</span> <span class=\"token punctuation\">(</span>字段<span class=\"token number\">1</span><span class=\"token operator\">=</span><span class=\"token string\">\"***\"</span><span class=\"token punctuation\">,</span>字段<span class=\"token number\">2</span><span class=\"token operator\">=</span><span class=\"token string\">'***'</span><span class=\"token punctuation\">)</span>  <span class=\"token keyword\">partition</span>  <span class=\"token punctuation\">(</span>字段<span class=\"token number\">1</span><span class=\"token operator\">=</span><span class=\"token string\">\"***\"</span><span class=\"token punctuation\">,</span>字段<span class=\"token number\">2</span><span class=\"token operator\">=</span><span class=\"token string\">'***'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">-- 说明：</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>增加多个分区时，分区与分区之间使用空格隔开。</pre></td></tr></table></figure><ol start=\"5\">\n<li>删除分区</li>\n</ol>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 语法：</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">alter</span> <span class=\"token keyword\">table</span> 表名 <span class=\"token keyword\">drop</span> <span class=\"token keyword\">partition</span> <span class=\"token punctuation\">(</span>字段<span class=\"token number\">1</span><span class=\"token operator\">=</span><span class=\"token string\">\"***\"</span><span class=\"token punctuation\">,</span>字段<span class=\"token number\">2</span><span class=\"token operator\">=</span><span class=\"token string\">'***'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">,</span> <span class=\"token keyword\">partition</span>  <span class=\"token punctuation\">(</span>字段<span class=\"token number\">1</span><span class=\"token operator\">=</span><span class=\"token string\">\"***\"</span><span class=\"token punctuation\">,</span>字段<span class=\"token number\">2</span><span class=\"token operator\">=</span><span class=\"token string\">'***'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">-- 说明：</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>删除的多个分区之间使用<span class=\"token string\">','</span>进行分隔。</pre></td></tr></table></figure><ol start=\"6\">\n<li>查看多个分区</li>\n</ol>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 语法：</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">show</span> partitions 表名；</pre></td></tr></table></figure><h4 id=\"512-动态分区调整\"><a class=\"anchor\" href=\"#512-动态分区调整\">#</a> 5.1.2 动态分区调整</h4>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 理解：为什么要使用动态分区呢？</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>在实际的情况中，我们的数据通过前端收集过来以后，一般都是存储在hdfs上面，我们只需要通过 <span class=\"token keyword\">insert</span> <span class=\"token operator\">+</span> 查询语句的方式将数据导入到指定的数据表，在此时需要指定按照什么字段进行分区。</pre></td></tr></table></figure><ol>\n<li>前期的准备工作 --<strong> 开启动态分区参数设置</strong></li>\n</ol>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>（<span class=\"token number\">1</span>）开启动态分区功能（默认<span class=\"token boolean\">true</span>，开启）</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>hive<span class=\"token punctuation\">.</span><span class=\"token keyword\">exec</span><span class=\"token punctuation\">.</span>dynamic<span class=\"token punctuation\">.</span><span class=\"token keyword\">partition</span><span class=\"token operator\">=</span><span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>（<span class=\"token number\">2</span>）设置为非严格模式（动态分区的模式，默认strict，表示必须指定至少一个分区为静态分区，nonstrict模式表示允许所有的分区字段都可以使用动态分区。）</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>hive<span class=\"token punctuation\">.</span><span class=\"token keyword\">exec</span><span class=\"token punctuation\">.</span>dynamic<span class=\"token punctuation\">.</span><span class=\"token keyword\">partition</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">mode</span><span class=\"token operator\">=</span>nonstrict</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>（<span class=\"token number\">3</span>）在所有执行MR的节点上，最大一共可以创建多少个动态分区。默认<span class=\"token number\">1000</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>hive<span class=\"token punctuation\">.</span><span class=\"token keyword\">exec</span><span class=\"token punctuation\">.</span>max<span class=\"token punctuation\">.</span>dynamic<span class=\"token punctuation\">.</span>partitions<span class=\"token operator\">=</span><span class=\"token number\">1000</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>（<span class=\"token number\">4</span>）在每个执行MR的节点上，最大可以创建多少个动态分区。该参数需要根据实际的数据来设定。比如：源数据中包含了一年的数据，即<span class=\"token keyword\">day</span>字段有<span class=\"token number\">365</span>个值，那么该参数就需要设置成大于<span class=\"token number\">365</span>，如果使用默认值<span class=\"token number\">100</span>，则会报错。</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>hive<span class=\"token punctuation\">.</span><span class=\"token keyword\">exec</span><span class=\"token punctuation\">.</span>max<span class=\"token punctuation\">.</span>dynamic<span class=\"token punctuation\">.</span>partitions<span class=\"token punctuation\">.</span>pernode<span class=\"token operator\">=</span><span class=\"token number\">100</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>（<span class=\"token number\">5</span>）整个MR Job中，最大可以创建多少个HDFS文件。默认<span class=\"token number\">100000</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>hive<span class=\"token punctuation\">.</span><span class=\"token keyword\">exec</span><span class=\"token punctuation\">.</span>max<span class=\"token punctuation\">.</span>created<span class=\"token punctuation\">.</span>files<span class=\"token operator\">=</span><span class=\"token number\">100000</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>（<span class=\"token number\">6</span>）当有空分区生成时，是否抛出异常。一般不需要设置。默认<span class=\"token boolean\">false</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>hive<span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">.</span><span class=\"token keyword\">on</span><span class=\"token punctuation\">.</span>empty<span class=\"token punctuation\">.</span><span class=\"token keyword\">partition</span><span class=\"token operator\">=</span><span class=\"token boolean\">false</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>实操</li>\n</ol>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 需求：将 dept 表中的数据按照地区（loc 字段），插入到目标表 dept——partition 的分区中：</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">1</span>）创建目标dept_partition表</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">create</span> <span class=\"token keyword\">table</span> dept_partition <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>id <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>name string</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>partitioned <span class=\"token keyword\">by</span> <span class=\"token punctuation\">(</span>loc string<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">row</span> format delimited <span class=\"token keyword\">fields</span> <span class=\"token keyword\">terminated</span> <span class=\"token keyword\">by</span> <span class=\"token string\">'\\t'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> 插入数据</pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> <span class=\"token keyword\">table</span> dept_partition <span class=\"token keyword\">partition</span> <span class=\"token punctuation\">(</span>loc<span class=\"token punctuation\">)</span> <span class=\"token keyword\">select</span> deptno <span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> loc <span class=\"token keyword\">from</span> dept<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"52-分桶表\"><a class=\"anchor\" href=\"#52-分桶表\">#</a> 5.2 分桶表</h3>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 理解：为什么会有分桶表？或者说分桶表是用来解决什么问题呢？</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">1</span>）提供一个数据隔离和优化查询的便利方式，如当某一个表或者是某一个分区的数据量特别大时，通过分桶的方式，可以将数据再进行分解成多个模块，这样在进行查询时，提供了查询的效率。 <span class=\"token comment\">-- 说明查询的分区操作时自动的。</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">2</span>）什么样的数据会进入同一个桶中呢？</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>通过 （分桶字段的）hashcode <span class=\"token operator\">%</span> 桶的个数 ，取模数相等的进入同一个桶内。（不适用于TEZ引擎）</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">3</span>）分桶表针对的是数据文件；而分区是针对数据路径。</pre></td></tr></table></figure><p>创建分桶表</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>在创建表单时，增加如下语法子句：</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">clustered</span> <span class=\"token keyword\">by</span> <span class=\"token punctuation\">(</span>字段<span class=\"token number\">1</span>，字段<span class=\"token number\">2</span>，<span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">into</span> num buckets<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">-- 说明：</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token number\">1</span>） 字段<span class=\"token number\">1</span><span class=\"token operator\">-</span>n : 均来自于表中的字段；</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token number\">2</span>） num : 表示分桶的个数。</pre></td></tr></table></figure><h3 id=\"53-抽样查询\"><a class=\"anchor\" href=\"#53-抽样查询\">#</a> 5.3  抽样查询</h3>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 理解：</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>当数据特别大的时候，我们不要通过查询所有的数据来获取数据的情况。</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>例如：工厂生产的产品，OQC 是按比例抽样来判定产品的良率。</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">-- 示例：</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">select</span> <span class=\"token operator\">*</span>  <span class=\"token keyword\">from</span> dept tablesample <span class=\"token punctuation\">(</span>bucket <span class=\"token number\">1</span> <span class=\"token keyword\">out</span> <span class=\"token keyword\">of</span> <span class=\"token number\">4</span> <span class=\"token keyword\">on</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">-- 说明：</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">on</span> :表示依据哪个字段进行抽样；</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token number\">4</span> ： 表示按照<span class=\"token keyword\">on</span>后面的字段将数据分成几份。</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token number\">1</span> ： 则表示第一份，<span class=\"token number\">2</span> 表示第二份。</pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>如上只是抽样方法中非常简单的一种，还有很多种方式。</pre></td></tr></table></figure><h2 id=\"六-函数-重点\"><a class=\"anchor\" href=\"#六-函数-重点\">#</a> 六 、函数 （重点）</h2>\n<h3 id=\"61-常用函数\"><a class=\"anchor\" href=\"#61-常用函数\">#</a> 6.1 常用函数</h3>\n<p>日期函数：</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1</span>） unix_timestamp : 返回当前或指定的时间戳；</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">SELECT</span>  unix_timestamp<span class=\"token punctuation\">(</span><span class=\"token string\">\"2020-05-02 11:22:00\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">></span><span class=\"token number\">1588418520</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">2</span>） from_unixtime : 将时间戳转化为日期格式</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">SELECT</span> FROM_unixtime<span class=\"token punctuation\">(</span><span class=\"token number\">1588418520</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token number\">2020</span><span class=\"token operator\">-</span><span class=\"token number\">05</span><span class=\"token operator\">-</span><span class=\"token number\">02</span> <span class=\"token number\">11</span>:<span class=\"token number\">22</span>:<span class=\"token number\">00</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">current_date</span> : 当前日期</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token number\">4</span>）<span class=\"token keyword\">current_timestamp</span>: 当前日期 <span class=\"token operator\">+</span> 时间；</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token number\">5</span>）to_date : 获取日期部分</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token number\">6</span>）<span class=\"token keyword\">year</span><span class=\"token operator\">/</span><span class=\"token keyword\">month</span><span class=\"token operator\">/</span><span class=\"token keyword\">day</span><span class=\"token operator\">/</span><span class=\"token keyword\">hour</span><span class=\"token operator\">/</span><span class=\"token keyword\">minute</span><span class=\"token operator\">/</span><span class=\"token keyword\">second</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> : 获取年、月、日、小时、分、秒</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token number\">7</span>）weekofyear<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>: 当前时间是一年中的第几周</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token number\">8</span>）dayofmonth<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>: 当前时间是一个月中的第几天</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token number\">9</span>）months_between<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> : 两个日期间的月份</pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> datediff<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> : 两个日期相差的天数</pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token number\">11</span><span class=\"token punctuation\">)</span> add_months：日期加减月</pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token number\">12</span><span class=\"token punctuation\">)</span> date_add：日期加天数</pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token number\">13</span><span class=\"token punctuation\">)</span> date_sub：日期减天数</pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token number\">14</span><span class=\"token punctuation\">)</span> last_day: 日期的当月的最后一天</pre></td></tr></table></figure><p>取整函数</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> round： 四舍五入</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> ceil：  向上取整</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> floor： 向下取整</pre></td></tr></table></figure><p>字符串函数</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1</span>）upper： 转大写</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">2</span>）lower： 转小写</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">3</span>）length： 长度</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">4</span>）trim：  前后去空格</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">5</span>）lpad： 向左补齐，到指定长度</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token number\">6</span>）rpad：  向右补齐，到指定长度</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token number\">7</span>）regexp_replace： <span class=\"token keyword\">SELECT</span> regexp_replace<span class=\"token punctuation\">(</span><span class=\"token string\">'100-200'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'(\\\\d+)'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'num'</span><span class=\"token punctuation\">)</span> ；</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t使用正则表达式匹配目标字符串，匹配成功后替换！</pre></td></tr></table></figure><p>集合操作</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1</span>） size： 集合中元素的个数</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">2</span>） map_keys： 返回map中的<span class=\"token keyword\">key</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">3</span>） map_values: 返回map中的<span class=\"token keyword\">value</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">4</span>） array_contains: 判断array中是否包含某个元素</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">5</span>） sort_array： 将array中的元素排序</pre></td></tr></table></figure><h3 id=\"62-系统内置函数\"><a class=\"anchor\" href=\"#62-系统内置函数\">#</a> 6.2 系统内置函数</h3>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1</span>） 查看系统自带的函数</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">show</span> functions<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> 查询函数的用法</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">desc</span> <span class=\"token keyword\">function</span> <span class=\"token keyword\">extended</span> 函数名</pre></td></tr></table></figure><h3 id=\"63-常用的内置函数\"><a class=\"anchor\" href=\"#63-常用的内置函数\">#</a> 6.3 常用的内置函数</h3>\n<h4 id=\"631-空字段赋值-nvl\"><a class=\"anchor\" href=\"#631-空字段赋值-nvl\">#</a> 6.3.1 空字段赋值 NVL</h4>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 语法：</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>nvl<span class=\"token punctuation\">(</span><span class=\"token keyword\">value</span><span class=\"token punctuation\">,</span>default_value<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">-- 说明：</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">1</span>）如果<span class=\"token keyword\">value</span> 为<span class=\"token boolean\">null</span>，则返回default_value ，否则返回vaule；</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token number\">2</span>）如果两个值（<span class=\"token keyword\">value</span> <span class=\"token punctuation\">,</span> default_value）均为<span class=\"token boolean\">null</span>，则返回<span class=\"token boolean\">null</span>；</pre></td></tr></table></figure><h4 id=\"632-case-when\"><a class=\"anchor\" href=\"#632-case-when\">#</a> 6.3.2 CASE WHEN</h4>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 示例：</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">select</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  dept_id<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">case</span> sex <span class=\"token keyword\">when</span> <span class=\"token string\">'男'</span> <span class=\"token keyword\">then</span> <span class=\"token number\">1</span> <span class=\"token keyword\">else</span> <span class=\"token number\">0</span> <span class=\"token keyword\">end</span><span class=\"token punctuation\">)</span> male_count<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">case</span> sex <span class=\"token keyword\">when</span> <span class=\"token string\">'女'</span> <span class=\"token keyword\">then</span> <span class=\"token number\">1</span> <span class=\"token keyword\">else</span> <span class=\"token number\">0</span> <span class=\"token keyword\">end</span><span class=\"token punctuation\">)</span> female_count</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">from</span> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  emp_sex</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">group</span> <span class=\"token keyword\">by</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  dept_id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token comment\">/*  解读：</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  1. 按照 dept_id 进行分组，同一组的数据先进行计算；</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  2. 假设 dept_id=10 的数据有 10 条，则 10 数据分别在 sum 函数中进行计算，计算完成以后得出一个结果；</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  3. 一组数据最后得到一条数据结果。</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  */</span></pre></td></tr></table></figure><h4 id=\"633-行转列\"><a class=\"anchor\" href=\"#633-行转列\">#</a> 6.3.3 行转列</h4>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 相关函数</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">1</span>） concat<span class=\"token punctuation\">(</span><span class=\"token string\">'str1'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'str2'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'str3'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span> : 表示将str1<span class=\"token operator\">/</span>str2<span class=\"token operator\">/</span>str3<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> 依次进行连接，str1<span class=\"token operator\">/</span>str2<span class=\"token operator\">/</span>str3<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> 可以说任何数据类型；</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">-- 示例：SELECT  concat ('132','-','456'); ==> 132-456</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> concat_ws<span class=\"token punctuation\">(</span><span class=\"token string\">'连接符'</span>，<span class=\"token string\">'str1'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'str2'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span> : 表示使用<span class=\"token string\">'连接符'</span>将str1<span class=\"token operator\">/</span>str2<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>依次进行连接，str1<span class=\"token operator\">/</span>str2<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>只能是字符串或者是字符串数组。</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">-- 示例：</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">SELECT</span>  concat_ws<span class=\"token punctuation\">(</span><span class=\"token string\">'-'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'java'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'maven'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">></span> java<span class=\"token operator\">-</span>maven<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">SELECT</span>  concat_ws<span class=\"token punctuation\">(</span><span class=\"token boolean\">null</span><span class=\"token punctuation\">,</span><span class=\"token string\">'java'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'maven'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token boolean\">null</span> <span class=\"token comment\">-- 当连接符为 null 时，结果返回 null</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">SELECT</span>  concat_ws<span class=\"token punctuation\">(</span><span class=\"token string\">'.'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'www'</span><span class=\"token punctuation\">,</span> array<span class=\"token punctuation\">(</span><span class=\"token string\">'facebook'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'com'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> ；<span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">></span> www<span class=\"token punctuation\">.</span>facebook<span class=\"token punctuation\">.</span>com</pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token number\">3</span>） collect_set<span class=\"token punctuation\">(</span>col<span class=\"token punctuation\">)</span> : 函数只接受基本数据类型，它的主要作用是将某字段的值进行去重汇总，产生array类型字段</pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">-- 示例：</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">SELECT</span> COLLECT_set<span class=\"token punctuation\">(</span>deptno<span class=\"token punctuation\">)</span> <span class=\"token keyword\">from</span> emp<span class=\"token punctuation\">;</span> <span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">></span><span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span><span class=\"token number\">30</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><h4 id=\"634-列转行\"><a class=\"anchor\" href=\"#634-列转行\">#</a> 6.3.4 列转行</h4>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 语法：</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>lateral <span class=\"token keyword\">view</span> explode <span class=\"token punctuation\">(</span>split<span class=\"token punctuation\">(</span>字段，分割符<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> 表名 <span class=\"token keyword\">as</span> 列名</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">-- 说明：</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>lateral <span class=\"token keyword\">view</span> : 侧写；</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>explode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>: 将指定的集合拆解分成多行 <span class=\"token comment\">-- 炸裂</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>split<span class=\"token punctuation\">(</span>字段，分割符<span class=\"token punctuation\">)</span> : 将指定的字符串按照分割符封装成一个集合。</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">-- 示例：</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">SELECT</span> movie<span class=\"token punctuation\">,</span>category_name </pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">FROM</span> movie_info </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>lateral <span class=\"token keyword\">VIEW</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>explode<span class=\"token punctuation\">(</span>split<span class=\"token punctuation\">(</span>category<span class=\"token punctuation\">,</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> movie_info_tmp  <span class=\"token keyword\">AS</span> category_name <span class=\"token punctuation\">;</span> <span class=\"token comment\">-- categor_name 为炸裂的列名，move_info_tmp 为侧写的表名</span></pre></td></tr></table></figure><p><img data-src=\"https://miyazono-1255488789.cos.ap-shanghai.myqcloud.com/markdown/20200630212310.png\" alt=\"image-20200630212310025\" /></p>\n<p><img data-src=\"https://miyazono-1255488789.cos.ap-shanghai.myqcloud.com/markdown/20200630212551.png\" alt=\"image-20200630212550900\" /></p>\n<h3 id=\"64-开窗函数\"><a class=\"anchor\" href=\"#64-开窗函数\">#</a> 6.4 开窗函数</h3>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>相关函数说明：开窗函数是为每一条数据进行开窗</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">1</span>） <span class=\"token keyword\">over</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> : 单独使用此函数，默认的窗口大小为结果集的大小。</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">2</span>） <span class=\"token keyword\">partition</span> <span class=\"token keyword\">by</span> : 在窗口函数中进行分区</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> \t<span class=\"token keyword\">over</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">partition</span> <span class=\"token keyword\">by</span> 字段<span class=\"token punctuation\">)</span> ：对结果集内进行分区，每条数据的开窗大小为该结果集中分区集的大小。</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">over</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">order</span> <span class=\"token keyword\">by</span> 字段<span class=\"token punctuation\">)</span> ： 在窗口函数中只用到了<span class=\"token keyword\">order</span> <span class=\"token keyword\">by</span> 排序时，也会对每条数据进行开一个窗口，默认的开窗大小为：从结果集的开始位置到当前处理数据的位置。</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">-- 实例：</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">-- 1. 查询在 2017 年 4 月份购买过的顾客及总人数</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">-- 解析，顾客全部要，多个顾客，多行，人数为一个值，一行，则是需要进行开窗，因为不是一一匹配的。</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">SELECT</span>  name <span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token function\">COUNT</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>   <span class=\"token keyword\">OVER</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">`</span>人数<span class=\"token punctuation\">`</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">from</span> business </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">WHERE</span>  SUBSTRING<span class=\"token punctuation\">(</span>orderdate<span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token string\">'2017-04'</span> </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">group</span> <span class=\"token keyword\">by</span> name <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">-- 2. 查询顾客的购买明细及月购买总额</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">SELECT</span> name <span class=\"token punctuation\">,</span>orderdate <span class=\"token punctuation\">,</span>cost <span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token function\">sum</span> <span class=\"token punctuation\">(</span>cost<span class=\"token punctuation\">)</span> <span class=\"token keyword\">over</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">partition</span> <span class=\"token keyword\">by</span> <span class=\"token keyword\">MONTH</span> <span class=\"token punctuation\">(</span>orderdate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">from</span> business<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\">-- 3. 上述的场景，将每个顾客的 cost 按照日期进行累加</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">SELECT</span> name <span class=\"token punctuation\">,</span>orderdate <span class=\"token punctuation\">,</span>cost <span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token function\">sum</span> <span class=\"token punctuation\">(</span>cost<span class=\"token punctuation\">)</span> <span class=\"token keyword\">over</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">partition</span> <span class=\"token keyword\">by</span> name <span class=\"token keyword\">order</span> <span class=\"token keyword\">by</span> orderdate<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">from</span> business<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token number\">4</span>） <span class=\"token keyword\">CURRENT</span> <span class=\"token keyword\">ROW</span>：当前行</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\tn <span class=\"token keyword\">PRECEDING</span>：往前n行数据</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\tn <span class=\"token keyword\">FOLLOWING</span>：往后n行数据</pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token number\">5</span>）<span class=\"token keyword\">UNBOUNDED</span>：起点，</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token keyword\">UNBOUNDED</span> <span class=\"token keyword\">PRECEDING</span> 表示从前面的起点 </pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">UNBOUNDED</span> <span class=\"token keyword\">FOLLOWING</span> 表示到后面的终点</pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token number\">6</span>）LAG<span class=\"token punctuation\">(</span>col<span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">,</span>default_val<span class=\"token punctuation\">)</span>：往前第n行数据</pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token number\">7</span>）LEAD<span class=\"token punctuation\">(</span>col<span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">,</span> default_val<span class=\"token punctuation\">)</span>：往后第n行数据</pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token number\">8</span>）NTILE<span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span>：把有序窗口的行分发到指定数据的组中，各个组有编号，编号从<span class=\"token number\">1</span>开始，对于每一行，NTILE返回此行所属的组的编号。注意：n必须为<span class=\"token keyword\">int</span>类型。</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>示例：</pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token comment\">-- 需求：查询前 20% 时间的订单信息</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token keyword\">select</span> name<span class=\"token punctuation\">,</span>orderdate<span class=\"token punctuation\">,</span>cost<span class=\"token punctuation\">,</span> ntile<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">over</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">order</span> <span class=\"token keyword\">by</span> orderdate<span class=\"token punctuation\">)</span> sorted</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token keyword\">from</span> business</pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token punctuation\">)</span> t</pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token keyword\">where</span> sorted <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"65-rank\"><a class=\"anchor\" href=\"#65-rank\">#</a> 6.5 Rank</h3>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 函数说明</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> RANK<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> 排序相同时会重复，总数不会变<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token comment\">-- 1 2 2 4 5 5 7</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> DENSE_RANK<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> 排序相同时会重复，总数会减少<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token comment\">-- 1 2 2 3 3 4 4 5</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> ROW_NUMBER<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> 会根据顺序计算。</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token comment\">-- 1 2 3 4 5 6</span></pre></td></tr></table></figure><h3 id=\"66-自定义函数\"><a class=\"anchor\" href=\"#66-自定义函数\">#</a> 6.6 自定义函数</h3>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>自定函数的分类：</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">1</span>） UDF（<span class=\"token keyword\">User</span><span class=\"token operator\">-</span>Defined<span class=\"token operator\">-</span><span class=\"token keyword\">Function</span>） <span class=\"token comment\">-- 一进一出</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">2</span>） UDAF（<span class=\"token keyword\">User</span><span class=\"token operator\">-</span>Defined Aggregation <span class=\"token keyword\">Function</span>） <span class=\"token comment\">-- 聚集函数，多进一出</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t类似于：count<span class=\"token operator\">/</span>max<span class=\"token operator\">/</span>min</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token number\">3</span>） UDTF（<span class=\"token keyword\">User</span><span class=\"token operator\">-</span>Defined <span class=\"token keyword\">Table</span><span class=\"token operator\">-</span>Generating Functions） <span class=\"token comment\">-- 一进多出</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t如lateral <span class=\"token keyword\">view</span> explode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h4 id=\"661-自定义udf函数\"><a class=\"anchor\" href=\"#661-自定义udf函数\">#</a> 6.6.1 自定义 UDF 函数</h4>\n<ol>\n<li>需求：UDF 实现计算给定字符串的长度</li>\n</ol>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>示例：</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">select</span> my_len<span class=\"token punctuation\">(</span><span class=\"token string\">\"abcd\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token number\">4</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>创建一个 Maven 工程</li>\n<li>导入依赖</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>dependencies<span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t\t<span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>dependency<span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t\t<span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>groupId<span class=\"token punctuation\">></span></span>org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>hive<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>groupId<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t\t<span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>artifactId<span class=\"token punctuation\">></span></span>hive<span class=\"token operator\">-</span>exec<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>artifactId<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t\t<span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>version<span class=\"token punctuation\">></span></span><span class=\"token number\">3.1</span><span class=\"token number\">.2</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>version<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>dependency<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>dependencies<span class=\"token operator\">></span></pre></td></tr></table></figure><ol start=\"4\">\n<li>创建一个类继承于 GenericUDF</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>lianzp<span class=\"token punctuation\">.</span>hive</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>hadoop<span class=\"token punctuation\">.</span>hive<span class=\"token punctuation\">.</span>ql<span class=\"token punctuation\">.</span>exec<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">UDFArgumentException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>hadoop<span class=\"token punctuation\">.</span>hive<span class=\"token punctuation\">.</span>ql<span class=\"token punctuation\">.</span>exec<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">UDFArgumentLengthException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>hadoop<span class=\"token punctuation\">.</span>hive<span class=\"token punctuation\">.</span>ql<span class=\"token punctuation\">.</span>exec<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">UDFArgumentTypeException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>hadoop<span class=\"token punctuation\">.</span>hive<span class=\"token punctuation\">.</span>ql<span class=\"token punctuation\">.</span>metadata<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HiveException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>hadoop<span class=\"token punctuation\">.</span>hive<span class=\"token punctuation\">.</span>ql<span class=\"token punctuation\">.</span>udf<span class=\"token punctuation\">.</span>generic<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">GenericUDF</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>hadoop<span class=\"token punctuation\">.</span>hive<span class=\"token punctuation\">.</span>serde2<span class=\"token punctuation\">.</span>objectinspector<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ObjectInspector</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>hadoop<span class=\"token punctuation\">.</span>hive<span class=\"token punctuation\">.</span>serde2<span class=\"token punctuation\">.</span>objectinspector<span class=\"token punctuation\">.</span>primitive<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">PrimitiveObjectInspectorFactory</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"12\"></td><td><pre> * 自定义 UDF 函数，需要继承 GenericUDF 类</pre></td></tr><tr><td data-num=\"13\"></td><td><pre> * 需求：计算指定字符串的长度</pre></td></tr><tr><td data-num=\"14\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyStringLength</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">GenericUDF</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>     * @param arguments 输入参数类型的鉴别器对象</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>     * @return 返回值类型的鉴别器对象</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>     * @throws UDFArgumentException</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ObjectInspector</span> <span class=\"token function\">initialize</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ObjectInspector</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arguments<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">UDFArgumentException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token comment\">// 判断输入参数的个数</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>arguments<span class=\"token punctuation\">.</span>length <span class=\"token operator\">!=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UDFArgumentLengthException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Input Args Length Error!!!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token comment\">// 判断输入参数的类型</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>arguments<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">getCategory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ObjectInspector<span class=\"token punctuation\">.</span>Category</span><span class=\"token punctuation\">.</span>PRIMITIVE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UDFArgumentTypeException</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Input Args Type Error!!!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token comment\">// 函数本身返回值为 int，需要返回 int 类型的鉴别器对象</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token class-name\">PrimitiveObjectInspectorFactory</span><span class=\"token punctuation\">.</span>javaIntObjectInspector<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>     * 函数的逻辑处理</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>     * @param arguments 输入的参数</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>     * @return 返回值</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>     * @throws HiveException</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">evaluate</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DeferredObject</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arguments<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">HiveException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>       <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>arguments<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>           <span class=\"token keyword\">return</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>       <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>       <span class=\"token keyword\">return</span> arguments<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getDisplayString</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> children<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"5\">\n<li>打成 jar 包上传到服务器 /opt/module/hive/datas/myudf.jar</li>\n<li>将 jar 包添加到 hive 的 classpath</li>\n</ol>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">add</span> jar <span class=\"token operator\">/</span>opt<span class=\"token operator\">/</span>module<span class=\"token operator\">/</span>hive<span class=\"token operator\">/</span>datas<span class=\"token operator\">/</span>myudf<span class=\"token punctuation\">.</span>jar<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"7\">\n<li>创建临时函数与开发好的 java class 关联</li>\n</ol>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">create</span> <span class=\"token keyword\">temporary</span> <span class=\"token keyword\">function</span> my_len <span class=\"token keyword\">as</span> <span class=\"token string\">\"com.lianzp.hive. MyStringLength\"</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"8\">\n<li>即可在 hql 中使用自定义的函数 my_len</li>\n</ol>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">select</span> ename<span class=\"token punctuation\">,</span>my_len<span class=\"token punctuation\">(</span>ename<span class=\"token punctuation\">)</span> ename_len <span class=\"token keyword\">from</span> emp<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"662-自定义udtf函数\"><a class=\"anchor\" href=\"#662-自定义udtf函数\">#</a> 6.6.2 自定义 UDTF 函数</h4>\n<p>和 udf 的最大区别就是自定义函数不同。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>lianzp<span class=\"token punctuation\">.</span>udtf</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>hadoop<span class=\"token punctuation\">.</span>hive<span class=\"token punctuation\">.</span>ql<span class=\"token punctuation\">.</span>exec<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">UDFArgumentException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>hadoop<span class=\"token punctuation\">.</span>hive<span class=\"token punctuation\">.</span>ql<span class=\"token punctuation\">.</span>metadata<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HiveException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>hadoop<span class=\"token punctuation\">.</span>hive<span class=\"token punctuation\">.</span>ql<span class=\"token punctuation\">.</span>udf<span class=\"token punctuation\">.</span>generic<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">GenericUDTF</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>hadoop<span class=\"token punctuation\">.</span>hive<span class=\"token punctuation\">.</span>serde2<span class=\"token punctuation\">.</span>objectinspector<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ObjectInspector</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>hadoop<span class=\"token punctuation\">.</span>hive<span class=\"token punctuation\">.</span>serde2<span class=\"token punctuation\">.</span>objectinspector<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ObjectInspectorFactory</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>hadoop<span class=\"token punctuation\">.</span>hive<span class=\"token punctuation\">.</span>serde2<span class=\"token punctuation\">.</span>objectinspector<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">StructObjectInspector</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>hadoop<span class=\"token punctuation\">.</span>hive<span class=\"token punctuation\">.</span>serde2<span class=\"token punctuation\">.</span>objectinspector<span class=\"token punctuation\">.</span>primitive<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">PrimitiveObjectInspectorFactory</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ArrayList</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">List</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyUDTF</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">GenericUDTF</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> outList <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">StructObjectInspector</span> <span class=\"token function\">initialize</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">StructObjectInspector</span> argOIs<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">UDFArgumentException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token comment\">//1. 定义输出数据的列名和类型</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> fieldNames <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ObjectInspector</span><span class=\"token punctuation\">></span></span> fieldOIs <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token comment\">//2. 添加输出数据的列名和类型</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        fieldNames<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"lineToWord\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        fieldOIs<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">PrimitiveObjectInspectorFactory</span><span class=\"token punctuation\">.</span>javaStringObjectInspector<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token class-name\">ObjectInspectorFactory</span><span class=\"token punctuation\">.</span><span class=\"token function\">getStandardStructObjectInspector</span><span class=\"token punctuation\">(</span>fieldNames<span class=\"token punctuation\">,</span> fieldOIs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">process</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">HiveException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token comment\">//1. 获取原始数据</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token class-name\">String</span> arg <span class=\"token operator\">=</span> args<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token comment\">//2. 获取数据传入的第二个参数，此处为分隔符</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token class-name\">String</span> splitKey <span class=\"token operator\">=</span> args<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token comment\">//3. 将原始数据按照传入的分隔符进行切分</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> fields <span class=\"token operator\">=</span> arg<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span>splitKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token comment\">//4. 遍历切分后的结果，并写出</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> field <span class=\"token operator\">:</span> fields<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>            <span class=\"token comment\">// 集合为复用的，首先清空集合</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>            outList<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>            <span class=\"token comment\">// 将每一个单词添加至集合</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>            outList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>field<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>            <span class=\"token comment\">// 将集合内容写出</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>            <span class=\"token function\">forward</span><span class=\"token punctuation\">(</span>outList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">HiveException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"七-压缩与存储\"><a class=\"anchor\" href=\"#七-压缩与存储\">#</a> 七 、 压缩与存储</h2>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>总结几点：</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">1</span>）不同存储格式的存储文件的大小对比总结：</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>ORC <span class=\"token operator\">></span>  Parquet <span class=\"token operator\">></span>  textFile</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">2</span>）存储文件的查询速度测试：基本相差不大。</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">-- 在实际的项目开发当中，hive 表的数据存储格式一般选择：orc 或 parquet；压缩方式一般选择 snappy，lzo。</span></pre></td></tr></table></figure><p>压缩方式：</p>\n<table>\n<thead>\n<tr>\n<th>压缩格式</th>\n<th>工具</th>\n<th>算法</th>\n<th>文件扩展名</th>\n<th>是否可切分</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>DEFLATE</td>\n<td>无</td>\n<td>DEFLATE</td>\n<td>.deflate</td>\n<td>否</td>\n</tr>\n<tr>\n<td>Gzip</td>\n<td>gzip</td>\n<td>DEFLATE</td>\n<td>.gz</td>\n<td>否</td>\n</tr>\n<tr>\n<td>bzip2</td>\n<td>bzip2</td>\n<td>bzip2</td>\n<td>.bz2</td>\n<td>是</td>\n</tr>\n<tr>\n<td>LZO</td>\n<td>lzop</td>\n<td>LZO</td>\n<td>.lzo</td>\n<td>是</td>\n</tr>\n<tr>\n<td>Snappy</td>\n<td>无</td>\n<td>Snappy</td>\n<td>.snappy</td>\n<td>否</td>\n</tr>\n</tbody>\n</table>\n<p>编码 / 解码器：</p>\n<table>\n<thead>\n<tr>\n<th>压缩格式</th>\n<th>对应的编码 / 解码器</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>DEFLATE</td>\n<td>org.apache.hadoop.io.compress.DefaultCodec</td>\n</tr>\n<tr>\n<td>gzip</td>\n<td>org.apache.hadoop.io.compress.GzipCodec</td>\n</tr>\n<tr>\n<td>bzip2</td>\n<td>org.apache.hadoop.io.compress.BZip2Codec</td>\n</tr>\n<tr>\n<td>LZO</td>\n<td>com.hadoop.compression.lzo.LzopCodec</td>\n</tr>\n<tr>\n<td>Snappy</td>\n<td>org.apache.hadoop.io.compress.SnappyCodec</td>\n</tr>\n</tbody>\n</table>\n<p>压缩性能的比较：</p>\n<table>\n<thead>\n<tr>\n<th>压缩算法</th>\n<th>原始文件大小</th>\n<th>压缩文件大小</th>\n<th>压缩速度</th>\n<th>解压速度</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>gzip</td>\n<td>8.3GB</td>\n<td>1.8GB</td>\n<td>17.5MB/s</td>\n<td>58MB/s</td>\n</tr>\n<tr>\n<td>bzip2</td>\n<td>8.3GB</td>\n<td>1.1GB</td>\n<td>2.4MB/s</td>\n<td>9.5MB/s</td>\n</tr>\n<tr>\n<td>LZO</td>\n<td>8.3GB</td>\n<td>2.9GB</td>\n<td>49.3MB/s</td>\n<td>74.6MB/s</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">create</span> <span class=\"token keyword\">table</span> log_parquet_snappy<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>track_time string<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>url string<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>session_id string<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>referer string<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>ip string<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>end_user_id string<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>city_id string</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">row</span> format delimited <span class=\"token keyword\">fields</span> <span class=\"token keyword\">terminated</span> <span class=\"token keyword\">by</span> <span class=\"token string\">'\\t'</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>stored <span class=\"token keyword\">as</span> parquet  <span class=\"token comment\">-- 指明文件的存储格式</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>tblproperties<span class=\"token punctuation\">(</span><span class=\"token string\">\"parquet.compression\"</span><span class=\"token operator\">=</span><span class=\"token string\">\"SNAPPY\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">-- 指明文件的压缩方式</span></pre></td></tr></table></figure>",
            "tags": [
                "大数据",
                "Hive"
            ]
        },
        {
            "id": "https://github.com/Mayizono/miyazono.github.io/big-data/hadoop/hadoop/",
            "url": "https://github.com/Mayizono/miyazono.github.io/big-data/hadoop/hadoop/",
            "title": "Hadoop学习",
            "date_published": "2019-09-10T16:00:00.000Z",
            "content_html": "<h1 id=\"hadoop\"><a class=\"anchor\" href=\"#hadoop\">#</a> hadoop</h1>\n<h2 id=\"入门\"><a class=\"anchor\" href=\"#入门\">#</a> 入门</h2>\n<h3 id=\"概论\"><a class=\"anchor\" href=\"#概论\">#</a> 概论</h3>\n<ul>\n<li>\n<p>概念</p>\n<ul>\n<li>处理海量数据的存储和分析计算问题</li>\n</ul>\n</li>\n<li>\n<p>特点</p>\n<ul>\n<li>大量、高速、多样、低密度价值</li>\n</ul>\n</li>\n<li>\n<p>组织架构</p>\n<ul>\n<li>数据仓库组（ETL 和数据分析）</li>\n<li>实时组（实时指标分析、性能调优）</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"hadoop框架\"><a class=\"anchor\" href=\"#hadoop框架\">#</a> hadoop 框架</h3>\n<ul>\n<li>\n<p>hadoop 是什么</p>\n<ul>\n<li>\n<p>Apache 开发的分布式系统基础架构</p>\n</li>\n<li>\n<p>一个生态圈</p>\n<ul>\n<li>mahout</li>\n<li>zookeeper</li>\n<li>pig</li>\n<li>hbase</li>\n<li>....</li>\n</ul>\n</li>\n<li>\n<p>解决海量数据的存储和分析计算</p>\n</li>\n</ul>\n</li>\n<li>\n<p>三大发行版</p>\n<ul>\n<li>Apache、Cloudera、Hortonworks</li>\n</ul>\n</li>\n<li>\n<p>优势</p>\n<ul>\n<li>高可靠：维护了多个副本</li>\n<li>高拓展性：可根据需求进行增减服务器</li>\n<li>高效性：task 并行执行</li>\n<li>高容错性：失败的任务会进行重新分配</li>\n</ul>\n</li>\n<li>\n<p>组成</p>\n<ul>\n<li>\n<p>hadoop1.x</p>\n<ul>\n<li>common ：辅助工具</li>\n<li>hdfs ：数据的存储</li>\n<li>MapReduce ：计算 + 资源调度</li>\n</ul>\n</li>\n<li>\n<p>hadoop2.x</p>\n<ul>\n<li>common ：辅助工具</li>\n<li>hdfs ： 数据的存储</li>\n<li>map ：计算</li>\n<li>reduce ： 资源调度</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>架构概述</p>\n<ul>\n<li>\n<p>HDFS</p>\n<ul>\n<li>namenode : 存储文件的元数据</li>\n<li>datanode ：存储文件的真实数据 + 块数据的校验和</li>\n<li>secondarynamenode ：对 namenode 的元数据进行备份</li>\n</ul>\n</li>\n<li>\n<p>YARN</p>\n<ul>\n<li>\n<p>resourcemanager</p>\n<ul>\n<li>处理客户端的请求</li>\n<li>监控 nodemanager</li>\n<li>启动 applicationmaster</li>\n<li>资源分配与调度</li>\n</ul>\n</li>\n<li>\n<p>nodemanager</p>\n<ul>\n<li>管理单个节点上的资源</li>\n<li>处理来自 resourcemanager 的命令</li>\n<li>处理 applicationmaster 的命令</li>\n</ul>\n</li>\n<li>\n<p>container</p>\n<ul>\n<li>封装单个节点上多维资源：如 cpu、网络等</li>\n</ul>\n</li>\n<li>\n<p>applicationmaster</p>\n<ul>\n<li>负责数据的切分</li>\n<li>为应用程序申请资源并分配给内部的任务</li>\n<li>任务的监控和容错</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>MapReduce</p>\n<ul>\n<li>map 阶段并行处理输入的数据</li>\n<li>对 map 结果进行汇总</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"hadoop运行模式\"><a class=\"anchor\" href=\"#hadoop运行模式\">#</a> hadoop 运行模式</h3>\n<ul>\n<li>\n<p>本地运行</p>\n</li>\n<li>\n<p>伪分布式模式</p>\n</li>\n<li>\n<p>完全分布式模式</p>\n<ul>\n<li>\n<p>常用端口</p>\n<ul>\n<li>\n<p>namenode</p>\n<ul>\n<li>web: 9870</li>\n<li>内部通信：8020</li>\n</ul>\n</li>\n<li>\n<p>2NN</p>\n<ul>\n<li>web: 9868</li>\n</ul>\n</li>\n<li>\n<p>yarn</p>\n<ul>\n<li>web: 8088</li>\n</ul>\n</li>\n<li>\n<p>historyserver</p>\n<ul>\n<li>19888</li>\n</ul>\n</li>\n<li>\n<p>datanode</p>\n<ul>\n<li>web: 9864</li>\n<li>内部通信：9866</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>出现错误看日志，看日志，看日志</p>\n</li>\n<li>\n<p>格式化问题</p>\n<ul>\n<li>当出现宕机或删除以往数据时才需要进行格式</li>\n<li>需删除所有节点的 data 和 log 数据</li>\n</ul>\n</li>\n<li>\n<p>启动集群</p>\n<ul>\n<li>start/stop-yarn.sh</li>\n<li>yarn --daemon start/stop rm/nm</li>\n<li>start/stop-dfs.sh</li>\n<li>dfs --daemon start/stop nn/2nn/dn</li>\n</ul>\n</li>\n<li>\n<pre><code>                            执行wordcount程序\n</code></pre>\n</li>\n</ul>\n<p>hadoop jar jar 位置 wordcount 输入路径 输出路径（一定不能存在）</p>\n<ul>\n<li>\n<p>配置文件说明</p>\n<ul>\n<li>core-default.xm</li>\n<li>hdfs-default.xml</li>\n<li>yarn-default.xml</li>\n<li>mapred-default.xml</li>\n</ul>\n</li>\n<li>\n<p>拷贝文件</p>\n<ul>\n<li>\n<p>scp</p>\n<p>1）基本语法</p>\n<p>scp    -r          <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi><mi>d</mi><mi>i</mi><mi>r</mi><mi mathvariant=\"normal\">/</mi></mrow><annotation encoding=\"application/x-tex\">pdir/</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord\">/</span></span></span></span>fname              <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>u</mi><mi>s</mi><mi>e</mi><mi>r</mi><mi mathvariant=\"normal\">@</mi><mi>h</mi><mi>a</mi><mi>d</mi><mi>o</mi><mi>o</mi><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">user@hadoop</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord\">@</span><span class=\"mord mathnormal\">h</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">p</span></span></span></span>host:<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi><mi>d</mi><mi>i</mi><mi>r</mi><mi mathvariant=\"normal\">/</mi></mrow><annotation encoding=\"application/x-tex\">pdir/</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord\">/</span></span></span></span>fname</p>\n<p>命令   递归       要拷贝的文件路径 / 名称    目的用户 @主机：目的路径 / 名称</p>\n<ol start=\"2\">\n<li>\n<p>案例实操</p>\n<p>前提：在 Hadoop102  hadoop103  hadoop104 都已经创建好的 /opt/module</p>\n<pre><code>  /opt/software 两个目录， 并且已经把这两个目录修改为miyazono:miyazono\n</code></pre>\n</li>\n</ol>\n<ul>\n<li>全部复制</li>\n</ul>\n</li>\n<li>\n<p>rsync</p>\n<p>rsync    -av       <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi><mi>d</mi><mi>i</mi><mi>r</mi><mi mathvariant=\"normal\">/</mi></mrow><annotation encoding=\"application/x-tex\">pdir/</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord\">/</span></span></span></span>fname              <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>u</mi><mi>s</mi><mi>e</mi><mi>r</mi><mi mathvariant=\"normal\">@</mi><mi>h</mi><mi>a</mi><mi>d</mi><mi>o</mi><mi>o</mi><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">user@hadoop</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord\">@</span><span class=\"mord mathnormal\">h</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">p</span></span></span></span>host:<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi><mi>d</mi><mi>i</mi><mi>r</mi><mi mathvariant=\"normal\">/</mi></mrow><annotation encoding=\"application/x-tex\">pdir/</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord\">/</span></span></span></span>fname</p>\n<p>命令   选项参数   要拷贝的文件路径 / 名称    目的用户 @主机：目的路径 / 名称</p>\n<ul>\n<li>只复制差异部分</li>\n</ul>\n</li>\n<li>\n<p>使用脚本进行分发</p>\n<ul>\n<li>创建在 path 环境变量下</li>\n<li>需要执行权限</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>无密码登录</p>\n<ul>\n<li>ssh 另外一台电脑的 ip 地址</li>\n<li>ssh-keygen -t rea 生成公钥和私钥</li>\n<li>ssh-copy-id 另外一台电脑 ip 地址：将公钥提供给另外一台机器</li>\n<li>ssh 本机 ip 也需要密码，所以也需要进行公钥的分发</li>\n<li>无密码登入是关联到具体的用户，如 miyazono 进行公钥和私钥的分发，root 连接其他电脑时，依然需要输入密码</li>\n<li>无密码登录是单向的，如需要相互连接，则需要相互分发自己的公钥</li>\n</ul>\n</li>\n<li>\n<p>配置文件 workers (datanode 的节点) 中，该文件中的内部结尾部分不能有空格，文中不能有空行</p>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"hadoop3x与2x的区别\"><a class=\"anchor\" href=\"#hadoop3x与2x的区别\">#</a> hadoop3.x 与 2.x 的区别</h3>\n<ul>\n<li>java 从 7 升级到了 8</li>\n<li>引入了纠删码</li>\n<li>重写了 shell 脚本</li>\n<li>支持超过两个 NN</li>\n<li>许多服务的默认端口改变了</li>\n<li>处理海量数据的存储和分析计算问题</li>\n</ul>\n<h2 id=\"hdfs\"><a class=\"anchor\" href=\"#hdfs\">#</a> HDFS</h2>\n<h3 id=\"概论-2\"><a class=\"anchor\" href=\"#概论-2\">#</a> 概论</h3>\n<ul>\n<li>\n<p>hdfs 概念</p>\n<ul>\n<li>是一种分布式文件管理系统</li>\n<li>通过目录树定位文件</li>\n<li>适合一次写入，多次读出的场景</li>\n<li>仅支持数据的追加，不支持文件的随机修改</li>\n<li>不适合处理小文件</li>\n<li>适合适当延时的处理</li>\n</ul>\n</li>\n<li>\n<p>框架</p>\n<ul>\n<li>\n<p>namenode</p>\n<ul>\n<li>管理 hdfs 的名称空间</li>\n<li>配置副本策略</li>\n<li>管理数据块的映射信息</li>\n<li>处理客户端的读写请求</li>\n</ul>\n</li>\n<li>\n<p>datanode</p>\n<ul>\n<li>存储实际的数据块</li>\n<li>执行数据块的读写操作</li>\n</ul>\n</li>\n<li>\n<p>client</p>\n<ul>\n<li>文件的切分，文件上传时，client 根据块的大小将文件进行切分</li>\n<li>与 namenode 交互，获取文件的位置信息</li>\n<li>与 datanode 交互，读取或写入数据</li>\n<li>client 提供了一些命令来管理 hdfs，比如格式化 namenode</li>\n<li>client 可以通过一些命令访问 hdfs，如对 hdfs 进行增删改查</li>\n</ul>\n</li>\n<li>\n<p>secondarynamenode</p>\n<ul>\n<li>不是 nn 的热备，当 nn 挂掉时，它不能替代 nn 并提供服务</li>\n<li>辅助 nn，分担其工作量，比如定期合并镜像文件和编辑日志，并推送给 nn</li>\n<li>可恢复 nn 的数据（可能会丢失少部分）</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>文件块大小</p>\n<ul>\n<li>与文件的传输速度相关</li>\n<li>文件大小 = 文件查询时间 * 100 * 文件传输速度<br />\n（取整，128，256）</li>\n<li>文件块过小，增加了寻址时间，文件块过大，增加了数据传输时间</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"hdfs之shell操作\"><a class=\"anchor\" href=\"#hdfs之shell操作\">#</a> HDFS 之 shell 操作</h3>\n<ul>\n<li>\n<p>格式</p>\n<ul>\n<li>hdfs dfs + 命令</li>\n<li>hadoop fs + 命令</li>\n</ul>\n</li>\n<li>\n<p>具体命令</p>\n<ul>\n<li>-help 输出这个命令的参数</li>\n<li>-ls ：显示目录信息</li>\n<li>\n<ul>\n<li>mkdir 在 hdfs 上创建文件夹</li>\n</ul>\n</li>\n<li>-moveFromLocal ：从本地剪切到 hdfs 上</li>\n<li>\n<pre><code>                  -put ： 从本地复制到hdfs上\n</code></pre>\n</li>\n</ul>\n</li>\n<li>\n<p>copyFromLocal ：从本地复制到 hdfs 上</p>\n<ul>\n<li>\n<pre><code>            -get：从hdfs拷贝到本地\n</code></pre>\n</li>\n</ul>\n<p>-copyTolocal ：从 hdfs 拷贝到本地</p>\n<ul>\n<li>-appendToFile ：追加一个本地文件到 hdfs 已经存在的文件末尾</li>\n<li>-cat ：显示文件内容</li>\n<li>\n<ul>\n<li>chgrp 、 -chmod 、 -chown ：修改文件的权限</li>\n</ul>\n</li>\n<li>-cp  ：从 hdfs 的一个路径拷贝到 hdfs 另外一个路径</li>\n<li>-mv ：从 hdfs 目录中移动文件</li>\n<li>-tail ：显示一个文件的末尾</li>\n<li>-rm  -r：递归删除文件或文件夹</li>\n<li>\n<ul>\n<li>rmdir ：删除空目录</li>\n</ul>\n</li>\n<li>-du ：统计文件夹的大小信息</li>\n<li>-setrep : 设置 hdfs 中文件的副本数量</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"hdfs客户端操作\"><a class=\"anchor\" href=\"#hdfs客户端操作\">#</a> hdfs 客户端操作</h3>\n<ul>\n<li>\n<p>获取文件系统的对象</p>\n<ul>\n<li>获取 uri，uri = new URI (&quot;hdfs://hadoop102:9820&quot;)</li>\n<li>获取配置文件对象 conf ，conf=new Configuration ();</li>\n<li>获取登入的用户 user ，user= &quot;miyazono&quot;</li>\n<li>获取文件系统对象，FileSystem.get (uri, conf, user)</li>\n</ul>\n</li>\n<li>\n<p>具体操作</p>\n<ul>\n<li>所有的输入和输出路径： new path (&quot;路径&quot;)</li>\n<li>下载：copyFromLocalFile ()</li>\n<li>上传 ： copyToLocalFile ()</li>\n<li>liststatus (): 获取指定路径下文件或文件夹</li>\n<li>listFiles () : 递归获取指定路径下所有的文件</li>\n<li>delete () : 删除文件或文件夹</li>\n</ul>\n</li>\n<li>\n<p>关闭连接</p>\n<ul>\n<li>fs.close();</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"hdfs的数据流\"><a class=\"anchor\" href=\"#hdfs的数据流\">#</a> HDFS 的数据流</h3>\n<ul>\n<li>\n<p>文件的写入</p>\n<ul>\n<li>\n<p>客户端通过 hdfs 的对象向 namenode 请求上传文件</p>\n</li>\n<li>\n<p>namenode 确定目标文件和父目录是否存在，返回可以上传文件</p>\n</li>\n<li>\n<p>客户端请求上传第一个块，请求 namenode 返回 datanode</p>\n</li>\n<li>\n<p>namenode 返回 3 个 datanode 节点，分别是 dn1，dn2，dn3</p>\n<ul>\n<li>\n<p>关于副本的选择<br />\n（即 dn1、dn2、dn3）</p>\n<ul>\n<li>第一个副本：在 client 所处的节点上，如果客户端在集群外，随机选一个</li>\n<li>第二个副本：在另一个机架的随机一个节点</li>\n<li>第三个副本：在第二个副本所在的机架的随机节点</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>客户端通过 hdfs 的输出流请求某一个 dn 上传数据<br />\n (假设是 dn1，实则是根据网路拓扑节点距离计算得来)</p>\n<ul>\n<li>节点距离：两个节点到大最近的共同祖先的距离总和</li>\n</ul>\n</li>\n<li>\n<p>此 dn 会调用 dn2，dn2 调用 dn3，将这个通信通道建立完成</p>\n</li>\n<li>\n<p>三个节点逐级应答客户端</p>\n</li>\n<li>\n<p>客户端向 dn1 上传第一个块，以 packet 为单位，dn1 收到 packet 后，首先进行落盘处理，同时将收到的 packet 传递给到 dn2，dn2 做和 dn1 同样的动作将 packet 传递给到 dn3，dn3 直接落盘处理。</p>\n<ul>\n<li>传输的过程中，dn1 会将 packet 放进一个应答队列，待所有的节点均相应后，则表示此 packet 上传完成，否则默认未完成上传</li>\n</ul>\n</li>\n<li>\n<p>当一个块传输完成之后，客户端再次请求 namenode 上传第二个块，此时重复 4-8 步骤</p>\n</li>\n<li>\n<p>待所有的数据块传输完成以后，则客户端关闭输出流。</p>\n</li>\n</ul>\n</li>\n<li>\n<p>文件的写出</p>\n<ul>\n<li>\n<p>客户端获取 hdfs 的对象，向 namenode 请求下载某某文件</p>\n</li>\n<li>\n<p>namenode 返回该文件的元数据信息，所有块所在的节点</p>\n</li>\n<li>\n<p>客户端获取文件系统的输入流，随机挑选一个 dn，请求读取数据</p>\n<ul>\n<li>就近 + 随机原则</li>\n</ul>\n</li>\n<li>\n<p>databnode 以 packet 为单位开始传输数据给客户端</p>\n</li>\n<li>\n<p>客户端以 packet 为单位接收，先在本地缓存，然后写入目标文件</p>\n</li>\n<li>\n<p>客户端根据元数据信息，请求 dn 读取下一个块信息，重复 3-6 步骤，直到所有的数据库读取完成</p>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"nn和2nn\"><a class=\"anchor\" href=\"#nn和2nn\">#</a> NN 和 2NN</h3>\n<ul>\n<li>\n<p>机制</p>\n<ul>\n<li>第一次启动 namenode 后，首先会将磁盘中的镜像文件（fsimage）和编辑日志（edits）加载到内存中，如果是格式后的第一次启动，则是创建镜像文件和编辑日志</li>\n<li>客户端对 hdfs 进行增删改操作</li>\n<li>namenode 先将操作记录到编辑日志中</li>\n<li>namenode 在内存中对元数据执行增删改操作</li>\n<li>2NN 询问 nn 是否执行 checkpoint 操作，并带回 nn 的指令</li>\n<li>当触发 cheekpoint 时，nn 中生成一个滚动日志文件（用于在记录后续的客户端请求），一个磁盘中编辑日志的复制文件</li>\n<li>将磁盘中的镜像文件和复制好的编辑日志文件复制到 2NN 中</li>\n<li>2NN 加载到内存并进行合并生成一个合并文件，将它拷贝到 nn 中</li>\n<li>nn 将此文件覆盖磁盘中的原有文件（重命名的方式）</li>\n</ul>\n</li>\n<li>\n<p>fsimage</p>\n<ul>\n<li>hdfs 文件系统元数据的一个永久性检查点</li>\n<li>hdfs oiv -p 文件类型 -i 镜像文件 -o 转换后文件输出路径</li>\n</ul>\n</li>\n<li>\n<p>edits</p>\n<ul>\n<li>存放 hdfs 文件系统所有的更新操作</li>\n<li>hdfs oev -p 文件类型 -i 编辑日志 -o 转换后文件输出路径</li>\n</ul>\n</li>\n<li>\n<p>CheckPoint</p>\n<ul>\n<li>\n<p>触发点</p>\n<ul>\n<li>1h</li>\n<li>edits 数据满了，默认是执行了 1 百万次操作</li>\n</ul>\n</li>\n<li>\n<p>2nn 在 1min 内会到 nn 中确认 3 次操作次数</p>\n</li>\n</ul>\n</li>\n<li>\n<p>NN 故障处理</p>\n<ul>\n<li>当 nn 故障时，可以将 2nn 中的数据拷贝到 nn 中，可恢复数据，存在丢失部分数据的情况，即时编辑日志信息不在 nn 中</li>\n</ul>\n</li>\n<li>\n<p>集群安全模式</p>\n<ul>\n<li>\n<p>当启动 nn 中，nn 会加载镜像文件和编辑日志，同时等待所有的 dn 向 nn 进行注册块信息，此时 hdfs 处于安全模式</p>\n</li>\n<li>\n<p>操作</p>\n<ul>\n<li>bin/hdfs dfsadmin -safemode get</li>\n<li>bin/hdfs dfsadmin -safemode enter</li>\n<li>bin/hdfs dfsadmin -safemode leave</li>\n<li>bin/hdfs dfsadmin -safemode wait</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>NN 多目录</p>\n<ul>\n<li>nn 可在本地目录中配置多个，每个目录存储的数据相同</li>\n</ul>\n</li>\n<li>\n<p>dn 多目录</p>\n<ul>\n<li>dn 可在本地目录中配置多个，每个目录存储的数据不相同</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"datanode\"><a class=\"anchor\" href=\"#datanode\">#</a> datanode</h3>\n<ul>\n<li>\n<p>机制</p>\n<ul>\n<li>\n<p>一个数据块在 Dn 中存储的数据</p>\n<ul>\n<li>数据本身</li>\n<li>数据长度</li>\n<li>检验和</li>\n<li>时间戳</li>\n</ul>\n</li>\n<li>\n<p>dn 启动以后会向 nn 进行注册</p>\n</li>\n<li>\n<p>后续每间隔 1h 向 nn 报告包含的所有数据块信息</p>\n</li>\n<li>\n<p>同时每 3s 与 nn 进行一次心跳，同时带回 nn 的指令</p>\n</li>\n<li>\n<p>如果超过 10min + 30 s 未进行心跳时，nn 认为该节点不可用</p>\n</li>\n</ul>\n</li>\n<li>\n<p>数据的完整性</p>\n<ul>\n<li>通过检验和来确保</li>\n</ul>\n</li>\n<li>\n<p>掉线时限参数设置</p>\n<ul>\n<li>TimeOut  = 2 * dfs.namenode.heartbeat.recheck-interval + 10 * dfs.heartbeat.interval。</li>\n</ul>\n</li>\n<li>\n<p>服役新数据节点</p>\n</li>\n<li>\n<p>退役旧数据节点</p>\n<ul>\n<li>白名单：确定允许访问 NameNode 的 DataNode 节点</li>\n<li>黑名单：指定集群运行过程中退役 DataNode 节点</li>\n<li>建议使用黑名单进行退役，黑明单退役相当于辞职，会将本节点的数据在 hdfs 进行转移，白名单相当于辞退，不会进行数据的转移</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"mapreduce\"><a class=\"anchor\" href=\"#mapreduce\">#</a> MapReduce</h2>\n<h3 id=\"概论-3\"><a class=\"anchor\" href=\"#概论-3\">#</a> 概论</h3>\n<ul>\n<li>\n<p>MapReduce 定义</p>\n<ul>\n<li>是一个分布式运算程序的编程框架</li>\n<li>核心功能：将用户编写的业务逻辑代码和自带默认组件整合成一个完整的分布式运算程序，并发运行在一个 hadoop 集群上</li>\n</ul>\n</li>\n<li>\n<p>MapReduce 编程思想</p>\n<ul>\n<li>一个运算程序一般是一个 map 阶段和一个 reduce 阶段</li>\n<li>MapTask 是并发执行，互不相干</li>\n<li>ReduceTask  也是并发执行，互不相干，但是依赖于 MapTask 的输出结果</li>\n</ul>\n</li>\n<li>\n<p>MapReduce 进程</p>\n<ul>\n<li>mrAppmaster ： 负责整个程序过程调度和状态协调</li>\n<li>MapTask ：负责 Map 阶段的整个数据处理</li>\n<li>ReduceTask  ：负责 Reduce 阶段的整个数据处理</li>\n</ul>\n</li>\n<li>\n<p>常用数据序列化类型</p>\n<ul>\n<li>String --&gt; Text</li>\n<li>Map --&gt; MapWritable</li>\n<li>Array --&gt; ArrayWritable</li>\n</ul>\n</li>\n<li>\n<p>MapReduce 编程规范</p>\n<ul>\n<li>\n<p>Mapper 阶段</p>\n<ul>\n<li>用户自定义的 mapper 类要继承与 mapper () 类</li>\n<li>指明 Mapper 的输入数据的 KV 对的数据类型</li>\n<li>指明输出数据的 KV 对的数据类型</li>\n<li>重写 map 方法</li>\n<li>map () 方法，每一个 &lt; k,v&gt; 都会调用一次</li>\n</ul>\n</li>\n<li>\n<p>Reducer 阶段</p>\n<ul>\n<li>用户自定义的 Reducer 类要继承 Reducer 类</li>\n<li>指明 Mapper 的输入数据的 KV 对的数据类型 ，与 mapper 输出的数据类型一致</li>\n<li>指明输出数据的 KV 对的数据类型</li>\n<li>重写 reduce () 方法</li>\n<li>每一组数据相同的 k 的 &lt;k,v&gt; 会调用一些 reduce () 方法</li>\n</ul>\n</li>\n<li>\n<p>Driver 阶段</p>\n<ul>\n<li>提交整个 MR 程序到 YARN 集群上，提交的是封装好的 MapReduce 程序相关运行参数的 job 对象</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n",
            "tags": [
                "大数据",
                "Hadoop"
            ]
        },
        {
            "id": "https://github.com/Mayizono/miyazono.github.io/big-data/kafka/Kafka%E6%80%BB%E7%BB%93/",
            "url": "https://github.com/Mayizono/miyazono.github.io/big-data/kafka/Kafka%E6%80%BB%E7%BB%93/",
            "title": "Kafka学习",
            "date_published": "2019-01-11T16:00:00.000Z",
            "content_html": "<h1 id=\"kafka总结\"><a class=\"anchor\" href=\"#kafka总结\">#</a> Kafka 总结</h1>\n<h2 id=\"一-kafka概述\"><a class=\"anchor\" href=\"#一-kafka概述\">#</a> 一、kafka 概述</h2>\n<h3 id=\"11-kafka定义\"><a class=\"anchor\" href=\"#11-kafka定义\">#</a> 1.1 kafka 定义</h3>\n<blockquote>\n<p>Kafka 是一个分布式的基于<strong>发布 / 订阅</strong>模式的<strong>消息队列，<strong>主要应用于大数据</strong>实时</strong>处理领域。</p>\n<p>订阅式模式：一对多的关系，一个生产者，数据存储在消息队列中，多个消费者均可从这个消息对列中获取数据，<strong>消费者消费数据之后不会清除消息。</strong></p>\n</blockquote>\n<h3 id=\"12-框架说明\"><a class=\"anchor\" href=\"#12-框架说明\">#</a> 1.2 框架说明</h3>\n<blockquote>\n<p>一般都是从命令行和 API 两个方面进行讲解。</p>\n<p>数据处理框架需要从数据的安全性以及效率两个方面深入了解。</p>\n</blockquote>\n<h3 id=\"13-kafka涉及的关键词\"><a class=\"anchor\" href=\"#13-kafka涉及的关键词\">#</a> 1.3 Kafka 涉及的关键词</h3>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1.</span> producer: 消息的生产者，即为向kafka broker发消息<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">2.</span> broker ： kafka集群的节点；</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">3.</span> topic : 队列（话题），生产者和消费者面向的都是一个topic；</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">4.</span> message：消息，队列中的一条消息；</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">5.</span> <span class=\"token keyword\">partition</span>: 分区，为方便扩展和提高吞吐量，将一个topic分为了多个<span class=\"token keyword\">partition</span>；</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token number\">6.</span> <span class=\"token keyword\">index</span> ： 消息数据在log文件中的索引；</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token number\">7.</span> log ：消息的具体数据；</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token number\">8.</span> timeindex： 时间索引，代表发送的数据时间索引；</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token number\">9.</span> <span class=\"token keyword\">offset</span> ： 消息的偏移量，每一条消息都对应一个<span class=\"token keyword\">offset</span>；</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token number\">10.</span> segment : 一个分片数据；</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token number\">11.</span> leader ：每个分区多个副本的“主”，生产者发送数据的对象，以及消费者消费数据的对象都是leader；</pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token number\">12.</span> follower : 每个分区多个副本中的“从”，实时从leader中同步数据，保持和leader数据的同步。leader发生故障时，某个follower会成为新的leader</pre></td></tr></table></figure><h2 id=\"二-kafka安装\"><a class=\"anchor\" href=\"#二-kafka安装\">#</a> 二、Kafka 安装</h2>\n<h3 id=\"21-集群部署\"><a class=\"anchor\" href=\"#21-集群部署\">#</a> 2.1 集群部署</h3>\n<h4 id=\"221-解压安装包\"><a class=\"anchor\" href=\"#221-解压安装包\">#</a> 2.2.1  解压安装包</h4>\n<p>在 /opt/software 目录下</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>tar <span class=\"token operator\">-</span>zxvf kafka_2<span class=\"token punctuation\">.</span><span class=\"token number\">11</span><span class=\"token operator\">-</span><span class=\"token number\">2.4</span><span class=\"token number\">.1</span><span class=\"token punctuation\">.</span>tgz <span class=\"token operator\">-</span>C <span class=\"token operator\">/</span>opt<span class=\"token operator\">/</span>module<span class=\"token operator\">/</span></pre></td></tr></table></figure><h4 id=\"222-修改解压后的文件名称\"><a class=\"anchor\" href=\"#222-修改解压后的文件名称\">#</a> 2.2.2  修改解压后的文件名称</h4>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>mv kafka_2<span class=\"token punctuation\">.</span><span class=\"token number\">11</span><span class=\"token operator\">-</span><span class=\"token number\">2.4</span><span class=\"token number\">.1</span><span class=\"token operator\">/</span> kafka</pre></td></tr></table></figure><h4 id=\"223-创建logs文件夹\"><a class=\"anchor\" href=\"#223-创建logs文件夹\">#</a> 2.2.3 创建 logs 文件夹</h4>\n<p>在 /opt/module/kafka 目录下</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>mkdir logs</pre></td></tr></table></figure><h4 id=\"224-修改配置文件\"><a class=\"anchor\" href=\"#224-修改配置文件\">#</a> 2.2.4 修改配置文件</h4>\n<p>/opt/module/kafk 路径下</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>vim config<span class=\"token operator\">/</span>server<span class=\"token punctuation\">.</span>properties</pre></td></tr></table></figure><p>修改如下三个参数，修改后的值如下：</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>broker<span class=\"token punctuation\">.</span>id<span class=\"token operator\">=</span><span class=\"token number\">2</span>；</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>log<span class=\"token punctuation\">.</span>dirs<span class=\"token operator\">=</span><span class=\"token operator\">/</span>opt<span class=\"token operator\">/</span>module<span class=\"token operator\">/</span>kafka<span class=\"token operator\">/</span>logs</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>zookeeper<span class=\"token punctuation\">.</span><span class=\"token keyword\">connect</span><span class=\"token operator\">=</span>hadoop102:<span class=\"token number\">2181</span><span class=\"token punctuation\">,</span>hadoop103:<span class=\"token number\">2181</span><span class=\"token punctuation\">,</span>hadoop104:<span class=\"token number\">2181</span><span class=\"token operator\">/</span>kafka</pre></td></tr></table></figure><h4 id=\"225-配置环境变量\"><a class=\"anchor\" href=\"#225-配置环境变量\">#</a> 2.2.5 配置环境变量</h4>\n<pre><code class=\"language-Sql\">sudo vim /etc/profile.d/my_env.sh\n</code></pre>\n<p>增加如下配置：</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#KAFKA_HOME</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>KAFKA_HOME<span class=\"token operator\">=</span><span class=\"token operator\">/</span>opt<span class=\"token operator\">/</span>module<span class=\"token operator\">/</span>kafka</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>PATH<span class=\"token operator\">=</span>$PATH:$KAFKA_HOME<span class=\"token operator\">/</span>bin</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>export KAFKA_HOME</pre></td></tr></table></figure><p>生效配置文件：</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>source <span class=\"token operator\">/</span>etc<span class=\"token operator\">/</span>profile</pre></td></tr></table></figure><h4 id=\"226-分发安装包\"><a class=\"anchor\" href=\"#226-分发安装包\">#</a> 2.2.6  分发安装包</h4>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>xsync kafka<span class=\"token operator\">/</span></pre></td></tr></table></figure><p>注意：分发之后记得配置其他机器的环境变量</p>\n<h4 id=\"227-修改其他机器的配置文件\"><a class=\"anchor\" href=\"#227-修改其他机器的配置文件\">#</a> 2.2.7 修改其他机器的配置文件</h4>\n<ul>\n<li>\n<p>/opt/module/kafka/config/server.properties 中的 broker.id=3、broker.id=4</p>\n<p>注：broker.id 不得重复</p>\n</li>\n</ul>\n<h4 id=\"228-启动集群\"><a class=\"anchor\" href=\"#228-启动集群\">#</a> 2.2.8  启动集群</h4>\n<ol>\n<li>\n<p>首先启动 zookeeper 集群和 hadoop 集群</p>\n</li>\n<li>\n<p>依次在 hadoop102、hadoop103、hadoop104 节点上启动 kafka</p>\n</li>\n</ol>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kafka<span class=\"token operator\">-</span>server<span class=\"token operator\">-</span><span class=\"token keyword\">start</span><span class=\"token punctuation\">.</span>sh <span class=\"token operator\">-</span>daemon $KAFKA_HOME<span class=\"token operator\">/</span>config<span class=\"token operator\">/</span>server<span class=\"token punctuation\">.</span>properties</pre></td></tr></table></figure><ul>\n<li>-daemon 属于后台启动，没有 - daemon 则为前台启动</li>\n</ul>\n<h4 id=\"229-关闭集群\"><a class=\"anchor\" href=\"#229-关闭集群\">#</a> 2.2.9 关闭集群</h4>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kafka<span class=\"token operator\">-</span>server<span class=\"token operator\">-</span>stop<span class=\"token punctuation\">.</span>sh</pre></td></tr></table></figure><h4 id=\"2210-kafka群起群停脚本\"><a class=\"anchor\" href=\"#2210-kafka群起群停脚本\">#</a> 2.2.10 kafka 群起群停脚本</h4>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#！bin/bash</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> $<span class=\"token comment\"># -lt 1 ]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token keyword\">then</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   echo <span class=\"token string\">\"No Args Input Error\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token keyword\">exit</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>fi</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">case</span> $<span class=\"token number\">1</span> <span class=\"token operator\">in</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token string\">\"start\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">for</span> i <span class=\"token operator\">in</span> <span class=\"token punctuation\">`</span>cat <span class=\"token operator\">/</span>opt<span class=\"token operator\">/</span>module<span class=\"token operator\">/</span>hadoop<span class=\"token operator\">-</span><span class=\"token number\">3.1</span><span class=\"token number\">.3</span><span class=\"token operator\">/</span>etc<span class=\"token operator\">/</span>hadoop<span class=\"token operator\">/</span>workers<span class=\"token punctuation\">`</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">do</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>echo <span class=\"token string\">\"==========start $i kafka==========\"</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>ssh $i <span class=\"token string\">'$KAFKA_HOME/bin/kafka-server-start.sh -daemon /opt/module/kafka/config/server.properties'</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>done</pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token string\">\"stop\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">for</span> i <span class=\"token operator\">in</span> <span class=\"token punctuation\">`</span>cat <span class=\"token operator\">/</span>opt<span class=\"token operator\">/</span>module<span class=\"token operator\">/</span>hadoop<span class=\"token operator\">-</span><span class=\"token number\">3.1</span><span class=\"token number\">.3</span><span class=\"token operator\">/</span>etc<span class=\"token operator\">/</span>hadoop<span class=\"token operator\">/</span>workers<span class=\"token punctuation\">`</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">do</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>echo <span class=\"token string\">\"==========stop $i kafka==========\"</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>ssh $i <span class=\"token string\">'$KAFKA_HOME/bin/kafka-server-stop.sh'</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>done</pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  echo <span class=\"token string\">\"Input Args Error\"</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>esac</pre></td></tr></table></figure><h3 id=\"22-kafka命令操作\"><a class=\"anchor\" href=\"#22-kafka命令操作\">#</a> 2.2 Kafka 命令操作</h3>\n<h4 id=\"221-查看当前服务器中的所有topic\"><a class=\"anchor\" href=\"#221-查看当前服务器中的所有topic\">#</a> 2.2.1 查看当前服务器中的所有 topic</h4>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kafka<span class=\"token operator\">-</span>topics<span class=\"token punctuation\">.</span>sh  <span class=\"token comment\">--bootstrap-server hadoop102:9092 --list</span></pre></td></tr></table></figure><p>选项说明：</p>\n<ul>\n<li>--list ：查看 kafka 所有的 topic</li>\n<li>--bootstrap-server : 连接 kafka 集群</li>\n<li>--hadoop102:9092：hadoop102 是指连接 kafka 任意一台机器，9092：kafka 内部通信的端口</li>\n</ul>\n<h4 id=\"222-创建topic\"><a class=\"anchor\" href=\"#222-创建topic\">#</a> 2.2.2  创建 topic</h4>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kafka<span class=\"token operator\">-</span>topics<span class=\"token punctuation\">.</span>sh  <span class=\"token comment\">--bootstrap-server hadoop102:9092 --create --topic first --partitions 2 --replication-factor 2</span></pre></td></tr></table></figure><p>选项说明：</p>\n<ul>\n<li>--topic  : 定义 topic 名字</li>\n<li>--partitions  : 定义分区数</li>\n<li>--replication-factor : 定义副本数</li>\n</ul>\n<h4 id=\"223-查看某个topic的详情\"><a class=\"anchor\" href=\"#223-查看某个topic的详情\">#</a> 2.2.3 查看某个 Topic 的详情</h4>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kafka<span class=\"token operator\">-</span>topics<span class=\"token punctuation\">.</span>sh <span class=\"token comment\">--bootstrap-server hadoop102:9092 --describe --topic first</span></pre></td></tr></table></figure><p>选项说明：</p>\n<ul>\n<li>--topic first ： 查看指定的话题，如果不加此选项，则表示查看所有的话题</li>\n</ul>\n<h4 id=\"224-修改分区数\"><a class=\"anchor\" href=\"#224-修改分区数\">#</a> 2.2.4  修改分区数</h4>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kafka<span class=\"token operator\">-</span>topics<span class=\"token punctuation\">.</span>sh <span class=\"token comment\">--bootstrap-server hadoop102:9092 --alter --topic first --partitions 6</span></pre></td></tr></table></figure><p>说明：</p>\n<ul>\n<li>-- 分区数只能增加不能减少</li>\n<li>分区内部消息有序，分区之间消息无序</li>\n</ul>\n<h4 id=\"225-发送消息\"><a class=\"anchor\" href=\"#225-发送消息\">#</a> 2.2.5 发送消息</h4>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kafka<span class=\"token operator\">-</span>console<span class=\"token operator\">-</span>producer<span class=\"token punctuation\">.</span>sh <span class=\"token comment\">--broker-list  hadoop102:9092,hadoop103:9092,hadoop104:9092 --topic first</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">></span>hello world</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">></span>miyazono  miyazono</pre></td></tr></table></figure><p>选项说明：</p>\n<ul>\n<li>hadoop102:9092,hadoop103:9092,hadoop104:9092 : kafka 的集群中的 broker，其实写一个也是可以的，写 3 个的目的只是避免当连接的 kafka 集群 broker 故障时连不上 kafka 集群的情况。</li>\n</ul>\n<h4 id=\"226-消费消息\"><a class=\"anchor\" href=\"#226-消费消息\">#</a> 2.2.6  消费消息</h4>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kafka<span class=\"token operator\">-</span>console<span class=\"token operator\">-</span>consumer<span class=\"token punctuation\">.</span>sh <span class=\"token comment\">--bootstrap-server hadoop102:9092 --from-beginning --topic first</span></pre></td></tr></table></figure><p>选项说明：</p>\n<ul>\n<li>\n<p>--from-beginning ：</p>\n<p>加上：会把 topic 中以往所有的数据都读取出来</p>\n<p>不加：此时只会消费最新的数据，原来 topic 中的数据不会被消费</p>\n</li>\n</ul>\n<h4 id=\"227-删除topic\"><a class=\"anchor\" href=\"#227-删除topic\">#</a> 2.2.7  删除 topic</h4>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kafka<span class=\"token operator\">-</span>topics<span class=\"token punctuation\">.</span>sh <span class=\"token comment\">--bootstrap-server hadoop102:9820 --delete --topic first</span></pre></td></tr></table></figure><h2 id=\"三-kafka深入流程\"><a class=\"anchor\" href=\"#三-kafka深入流程\">#</a> 三、 Kafka 深入流程</h2>\n<p>说明：此框架步步引导，采取提出问题解决问题的方式阐述。</p>\n<h3 id=\"31-kafka工作流程及文件存储机制\"><a class=\"anchor\" href=\"#31-kafka工作流程及文件存储机制\">#</a> 3.1 Kafka 工作流程及文件存储机制</h3>\n<p><img data-src=\"https://miyazono-1255488789.cos.ap-shanghai.myqcloud.com/markdown/20210822155602.png\" alt=\"图2\" /></p>\n<ol>\n<li>kafka 以 topic（话题）为单位，每一个话题分为多个区（创建话题的时候指定分区的个数），每个分区中存储的数据是不一样的，同时每个分区的数据在其他分区也会创建副本。</li>\n<li>不同的分区分布在 kafka 集群不同的机器（broker，代理人）上面；</li>\n<li>消息的生产和消费均是分区为单位；</li>\n<li>分区内的数据是有序的，分区之间的顺序是无序的；</li>\n<li>offset 指消息的偏移量；</li>\n<li>每个分区都是一个文件夹，文件中包含 index（数据在 log 中的索引）、log（真实的数据）、timeindex (数据发送的时间索引) ，时间索引和 index 索引均是用来提高查询数据效率；</li>\n<li>当产生新的数据以后会向 log 文件中进行追加，同时 index 和 timeindex 也会增加；</li>\n<li>Kafka 采取了<strong>分片</strong>和<strong>索引</strong>机制。</li>\n<li>topic 是逻辑上的概念，而 partition 是物理上的概念，每个 partition 对应于一个 log 文件，该 log 文件中存储的就是 producer 生产的数据。Producer 生产的数据会被不断追加到该 log 文件末端，且每条数据都有自己的 offset。消费者组中的每个消费者，都会实时记录自己消费到了哪个 offset，以便出错恢复时，从上次的位置继续消费</li>\n</ol>\n<p><img data-src=\"https://miyazono-1255488789.cos.ap-shanghai.myqcloud.com/markdown/20210822155644.png\" alt=\"图1\" /></p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 灵魂拷问 1：</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>产生的数据一直向同一个log中进行追加，会有什么问题呢？</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">-- 答案：</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>log中的数据会越来越大，查询和读取效率会变慢。</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">-- 解决方式：</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>数据达到一定程度以后（默认值为<span class=\"token number\">1</span>G：log<span class=\"token punctuation\">.</span>segment<span class=\"token punctuation\">.</span>bytes <span class=\"token operator\">=</span> <span class=\"token number\">1</span>G），log会进行数据切分，生成多个segment切分文件。</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>切分后的文件依然包含<span class=\"token keyword\">index</span>、log、timeindex 。所以三个文件是作为一个整体的。 <span class=\"token comment\">-- 切分机制</span></pre></td></tr></table></figure><p><img data-src=\"https://miyazono-1255488789.cos.ap-shanghai.myqcloud.com/markdown/20210822155702.png\" alt=\"image-20200714205920775\" /></p>\n<p><img data-src=\"https://miyazono-1255488789.cos.ap-shanghai.myqcloud.com/markdown/20210822155724.png\" alt=\"image-20200714210619003\" /></p>\n<blockquote>\n<p>切分的文件位于同一个文件夹下，该文件夹的命名规则为：<mark>topic 名称 + 分区序号</mark>。</p>\n<p>例如，first 这个 topic 有三个分区，则其对应的文件夹为 first-0,first-1,first-2</p>\n</blockquote>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 灵魂拷问 2：</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>现在假如有两个切分的文件，当有一个消费者需要消费一条消息（假如是 <span class=\"token keyword\">offset</span> <span class=\"token operator\">=</span> <span class=\"token number\">3</span>），怎么知道这个消息在哪个切分文件中，以及真实数据如何查询？</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">-- 答案：</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">1</span>）log和<span class=\"token keyword\">index</span>文件名说明： <span class=\"token comment\">-- 牢记 log、index、timeindex 是一个整体</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">index</span>：<span class=\"token number\">00000000000000000000.</span><span class=\"token keyword\">index</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>log：<span class=\"token number\">00000000000000000000.</span>log</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>前面的数字<span class=\"token number\">00000000000000000000</span>：代表此log文件中第一条消息的<span class=\"token keyword\">offset</span>。</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token string\">'.index文件存储大量的索引信息，“.log”文件存储大量的数据，索引文件中的元数据指向对应数据文件中message的物理偏移地址'</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token number\">2</span>） 查询的方式：</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>根据消费消息的<span class=\"token keyword\">offset</span>值 <span class=\"token comment\">--> 找到指定的 index 文件 --> 匹配此条消息在 log 文件中数据的偏移量（即该数据在 log 文件中起始位置）--> 找到待消费的数据</span></pre></td></tr></table></figure><figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 灵魂拷问 3：</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>为什么kafka要采取向一个log文件中追加数据呢？</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">-- 答案：</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">1</span>）减少IO；</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token number\">2</span>）消费数据是连续进行消费，连续读取数据的效率高。</pre></td></tr></table></figure><h3 id=\"32-kafka之生产者producer\"><a class=\"anchor\" href=\"#32-kafka之生产者producer\">#</a> 3.2 Kafka 之生产者 producer</h3>\n<h4 id=\"321-分区策略\"><a class=\"anchor\" href=\"#321-分区策略\">#</a> 3.2.1 分区策略</h4>\n<ol>\n<li>首先 producer 发送的数据会被封装成 ProducerRecord 对象，根据对象的参数，分区情况如下：\n<ul>\n<li>\n<p>情况 1 ：指定了 partition；</p>\n</li>\n<li>\n<p>情况 2 ：未指定 partition，封装 key，则按照 key 的 hashcode % 分区数量 得出在哪个分区；</p>\n</li>\n<li>\n<p>情况 3：未指定 partition，也未封装 key 处理方式 :</p>\n<p>参数 1：producer 发送的数据量：batch.size，默认值为 16Kb；</p>\n<p>条件 2：<span class=\"exturl\" data-url=\"aHR0cDovL2xpbmdlci5tcw==\">linger.ms</span>：两条数据发送的间隔时间 t ，默认值为 0s；</p>\n<p>当发送的数据量 &lt; batch.size 并且 发送的数据时间间隔  &lt; t   时，所有的数据在一个分区；</p>\n<p>当发送的数据量 &gt; batch.size 或者 发送的数据时间间隔  &gt;  t 时，则数据会进入下一个分区；</p>\n<p>分区与分区之间采取轮询的方式。</p>\n<p><img data-src=\"https://miyazono-1255488789.cos.ap-shanghai.myqcloud.com/markdown/20210822155751.png\" alt=\"图4\" /></p>\n<p><img data-src=\"https://miyazono-1255488789.cos.ap-shanghai.myqcloud.com/markdown/20210822155800.png\" alt=\"图3\" /></p>\n</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"322-数据可靠性保证\"><a class=\"anchor\" href=\"#322-数据可靠性保证\">#</a> 3.2.2 数据可靠性保证</h4>\n<p>数据传输流程：</p>\n<p>producer -----&gt; server（kafka） ---------&gt; 消费者</p>\n<ul>\n<li>过程 1：producer -----&gt; server（kafka）</li>\n</ul>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 灵魂拷问 1： </span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>如何保证从producer发送数据server的过程中数据不丢失？</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">-- 答案：</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>server收到数据以后会回执，发送ack（acknowledgement确认收到）给producer，producer收到ack以后，则确定数据传送的过程中没有丢失。</pre></td></tr></table></figure><ul>\n<li>过程 2 ： server 的数据存储过程</li>\n</ul>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 灵魂拷问 2：</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>如何确保数据在server中能够被妥善保管呢？</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">-- 答案：</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>server向producer回执ack的时机：</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>模式<span class=\"token number\">1</span>：leader收到消息以后立即回复ack；</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>模式<span class=\"token number\">2</span>：leader收到消息并存储在本地以后，立即回复ack；</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>模式<span class=\"token number\">3</span>：leader收到消息后，所有follow从leader中拉取数据，当所有的follower完成存储以后，leader向producer回复ack。</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>说明：情况<span class=\"token number\">1</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token operator\">/</span><span class=\"token number\">3</span>是通过acks参数进行配置。</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>acks<span class=\"token operator\">=</span><span class=\"token number\">0</span> <span class=\"token comment\">-- leader 收到消息以后立即回复 ack</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>acks<span class=\"token operator\">=</span><span class=\"token number\">1</span> <span class=\"token comment\">-- leader 收到消息并存储在本地以后，立即回复 ack</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>acks<span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span>或<span class=\"token keyword\">all</span> <span class=\"token comment\">--leader 收到消息后，所有 follow 从 leader 中拉取数据，当所有的 follower 完成存储以后，leader 向 producer 回复 ack</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">-- 默认情况下是 acks=1；</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">-- 灵魂拷问 3：</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>leader与follower副本数据同步策略是什么呢？</pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\">-- 答案</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>两种副本同步策略。</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>第一种：半数以上完成同步，就发送ack</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>第二种：全部完成同步，才发送ack</pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token string\">'kafka选择全部完成同步，才发送ack'</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token comment\">-- 灵魂拷问 4：</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>kafka选择第二种副本同步策略会有哪些问题呢？</pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token comment\">-- 答案：</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>问题<span class=\"token number\">1</span>：follower同步leader的数据时，当某一个follower迟迟未向leader回复备份成功时，出现阻塞的状态；</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>问题<span class=\"token number\">2</span>：当leader回执给producer的ack丢失时，producer因为没有收到来自leader的ack，则默认数据没有发送成功，会重新向集群发送未收到ack的消息，导致数据的重复。 <span class=\"token comment\">-- 数据的重复指：同一条消息重复发送。</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token comment\">-- 那如何解决这两个问题呢？</span></pre></td></tr></table></figure><ul>\n<li>问题 1（数据阻塞）解决方案：</li>\n</ul>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>规则：leader完成消息的读取和写出操作，follower定时向leader拉取数据。</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">1.</span> leader维护了一个动态的<span class=\"token operator\">in</span><span class=\"token operator\">-</span>sync replicat <span class=\"token keyword\">set</span> <span class=\"token punctuation\">(</span>ISR<span class=\"token punctuation\">)</span> 同步副本的列表，说明：即使是follower也有可能不在isr列表中。</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">2.</span>。只要在isr列表中所有的follower均告知leader副本备份完成以后，则leader向producer回执ack，则不受限于出现故障的follower，因为出现故障，就被移除isr列表中。</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">-- 问题 1：</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>那么什么情况下follower不在isr列表呢？</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">-- 答案：</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>如果follower没有在规定的时间与leader保持同步，则leader会将该follower从isr中踢出，同步最大时间通过replica<span class=\"token punctuation\">.</span>lag<span class=\"token punctuation\">.</span><span class=\"token keyword\">time</span><span class=\"token punctuation\">.</span>max<span class=\"token punctuation\">.</span>ms参数设定。</pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">-- 问题 2：</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>那么从isr中踢出的follower怎么重新回到isr中呢？ <span class=\"token comment\">-- 故障处理机制</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">-- 答案：</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>每个消息在follower的log文件中有：</pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> 真实数据 :消息的真实数据</pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> LEO<span class=\"token punctuation\">(</span>log <span class=\"token keyword\">end</span> <span class=\"token keyword\">offset</span><span class=\"token punctuation\">)</span> : 消息的最后偏移量</pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> HW<span class=\"token punctuation\">(</span>High Watermark<span class=\"token punctuation\">)</span> ：ISR列表中follower最小的LEO（偏移量）</pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>说明：</pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token number\">1</span>）每个follower中的LEO可能是不一样的，因副本同步的快慢有差异；</pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token number\">2</span>）leader中log的LEO是最大的，因为数据源源不断的发送过来，它的落盘速度是最快的；</pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token number\">3</span>）HW之前的数据对consumer可见；</pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token number\">4</span>）HW是一个动态的数据，当leader回执ack一次HW就会更新一次。</pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>follower发生故障后会被临时踢出ISR，待该follower恢复后，follower会读取本地磁盘记录的上次的HW，并将log文件高于HW的部分截取掉，从HW开始向leader进行同步。等该follower的LEO大于等于该<span class=\"token keyword\">Partition</span>的HW，即follower追上leader之后，就可以重新加入ISR了。</pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token comment\">-- 问题 3：</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>当leader挂掉以后怎么办？</pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token comment\">-- 答案：</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token number\">1</span>） 重新选举leader；</pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token number\">2</span>） 从isr列表中的follower中选取；</pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token number\">3</span>） 随机选择。</pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token string\">'详细过程'</span>：leader发生故障之后，会从ISR中选出一个新的leader，之后，为保证多个副本之间的数据一致性，其余的follower会先将各自的log文件高于HW的部分截掉，然后从新的leader同步数据。</pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token string\">'注意'</span>：这只能保证副本之间的数据一致性，并不能保证数据不丢失或者不重复</pre></td></tr></table></figure><ul>\n<li>问题 2（数据重复）的解决方案</li>\n</ul>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 在 0.11 之前的 kafka 版本：</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>在消费者端进行去重，在producer传输数据时，对消息增加唯一的全局主键，然后在消费端根据该主键进行去重。 </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>该方式导致消费者组所有的消费者都需要进行去重操作，重复。</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">-- 在 0.11 版本之后引进了 Exactly Once （幂等性）来解决数据重复的问题</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> <span class=\"token number\">1</span>） Exactly Once （幂等性） ： 做n次和做一次的效果是一样的，就是指Producer不论向Server发送多少次重复数据（重复发送同一条数据），Server端都只会持久化一条，在server端完成去重操作。</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> <span class=\"token number\">2</span>） 幂等性实现过程</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   初始化数据时，给消息分配一个pid，发往同一个分区的消息会附带sequence Number<span class=\"token punctuation\">,</span>broker端会将<span class=\"token operator\">&lt;</span>pid<span class=\"token punctuation\">,</span><span class=\"token keyword\">partition</span><span class=\"token punctuation\">,</span>sequence Number<span class=\"token operator\">></span>和消息的真实数据一起存储到log文件中，当具有相同主键的消息提交时，Broker只会持久化一条。</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">-- 何为主键？</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>由<span class=\"token operator\">&lt;</span>pid<span class=\"token punctuation\">,</span><span class=\"token keyword\">partition</span><span class=\"token punctuation\">,</span>sequence Number<span class=\"token operator\">></span>三个参数构成的集合。重复发送的数据，这三个值不会变，数据是否重复与数据的内容无关，而是指为同一条数据多次发送。 <span class=\"token comment\">-- 总结：重发的消息的主键是不会改变的，新发的消息 seqnumber 就会变化。</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>例如：消息A与消息B的数据内容完全一致</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>producer向集群发送消息A，集群收到以后返回的ack丢失，则消息A会被再次发送一次，此时消息A的主键是和第一次发送时相同，则集群认为数据是重复，不会进行存储；</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>producer向集群发送消息B，虽然与消息A的数据相同，但是seqnumber是不同的，所以不是重复的数据，集群会进行数据存储。</pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>说明：</pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token number\">1</span>） sequence Number ：消息序列号，发往同一<span class=\"token keyword\">Partition</span>的消息会附带Sequence Number，表示该producer向该分区发送的第几次消息；</pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\tpid : 生产者的id； </pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>  <span class=\"token keyword\">partition</span> ： 分区号；</pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token number\">4</span>） PID重启就会变化，同时不同的<span class=\"token keyword\">Partition</span>也具有不同主键，所以幂等性无法保证跨分区跨会话的Exactly Once；</pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token number\">5</span>） 开启幂等性会降低kafka的性能；</pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token number\">6</span>） 幂等性的底层原理也还是通过给消息增加全局的唯一主键的方式；</pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token number\">7</span>） 开启幂等性参数：<span class=\"token keyword\">enable</span><span class=\"token punctuation\">.</span>idompotence设置为<span class=\"token boolean\">true</span>即可。</pre></td></tr></table></figure><h3 id=\"33-kafka之消费者-consumer\"><a class=\"anchor\" href=\"#33-kafka之消费者-consumer\">#</a> 3.3 Kafka 之消费者 consumer</h3>\n<h4 id=\"331-消费模式\"><a class=\"anchor\" href=\"#331-消费模式\">#</a> 3.3.1 消费模式</h4>\n<p>​\t消费者从 server 中读取数据的方式有两种：pull （拉）和 push（推）</p>\n<ol>\n<li>\n<p>pull  ： consumer 向 server 拉取数据 <strong>【主动】</strong></p>\n<ul>\n<li>优点：消费者按需索取</li>\n<li>缺点：不及时，有可能拉取到了空数据</li>\n</ul>\n</li>\n<li>\n<p>push ：server 向 consumer 推送数据 **【被动】**</p>\n<ul>\n<li>优点：及时</li>\n<li>缺点：推送的速率与消费者消费的数据不一致时，产生背压</li>\n</ul>\n</li>\n<li>\n<p>kafka 默认使用 pull，拉取数据的方式。因为 kafka 是一对多的关系，同一个消费者组内的不同消费者的消费速率不同，所以不好设定推送的速率。</p>\n</li>\n<li>\n<p>当出现拉取的数据为空时，consumer 会等待一段时间之后再拉取数据，这段时长即为 timeout</p>\n</li>\n</ol>\n<h4 id=\"332-分区分配策略\"><a class=\"anchor\" href=\"#332-分区分配策略\">#</a> 3.3.2 分区分配策略</h4>\n<p>​\t三种方式：roundrobin 、 range  、sticky</p>\n<ol>\n<li>\n<p>roundrobin ： 轮询的方式 ，理解为洗牌，一张一张的发，分区一个一个轮询的方式分配给消费者；</p>\n<p>缺点：当有新的消费者加进来时，所有的分区需要重新分配分区，基本上大多数的消费者的消费分区都会发生改变。</p>\n</li>\n<li>\n<p>range：理解斗地主把牌按数量平均分配；</p>\n<p>缺点：订阅的话题过多时，存在分区数量不均等的情况。</p>\n</li>\n<li>\n<p>sticky：是在第一种方式的基础上进行改进，解决新增消费者情况的缺点，此时不再是所有消费者的分区进行重新分配，而是新进的消费者取之前所有消费者最后一次分区的数据进行消费。</p>\n</li>\n</ol>\n<ul>\n<li>当消费者的个数 &gt; 分区的个数时，有些消费者没分配不到数据。</li>\n<li>消费者默认的分区分配策略是 range，但是消费者在消费数据时也可以自定指定策略。</li>\n<li>一个分区只能由一个消费者进行消费。</li>\n</ul>\n<h4 id=\"333-offset的维护\"><a class=\"anchor\" href=\"#333-offset的维护\">#</a> 3.3.3   offset 的维护</h4>\n<p>​       由于 consumer 在消费过程中可能会出现断电宕机等故障，consumer 恢复后，需要从故障前的位置的继续消费，所以 consumer 需要实时记录自己消费到了哪个 offset，以便故障恢复后继续消费。<br />\n​      Kafka 0.9 版本之前，consumer 默认将 offset 保存在 Zookeeper 中，从 0.9 版本开始，consumer 默认将 offset 保存在 Kafka 一个内置的 topic 中，该 topic 为__consumer_offsets。</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 问题：</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>为什么要将<span class=\"token keyword\">offset</span>从zookeeper中转移到kafka中？</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">-- 回答：</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>zookeeper中维护<span class=\"token keyword\">offset</span>的效率对于Kafka来说，不可控的，Kafka不能通过修改自己的代码来提升zookeeper维护<span class=\"token keyword\">offset</span>的效率，所以将<span class=\"token keyword\">offset</span>的维护迁移到kafka的会话中。</pre></td></tr></table></figure><h3 id=\"34-kafka高效读写数据\"><a class=\"anchor\" href=\"#34-kafka高效读写数据\">#</a> 3.4  Kafka 高效读写数据</h3>\n<h4 id=\"341-顺序写磁盘\"><a class=\"anchor\" href=\"#341-顺序写磁盘\">#</a> 3.4.1 顺序写磁盘</h4>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 问题 1：</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>kafka的producer生产的数据最终按照顺序存储到磁盘上，写入到磁盘中数据过程不是很慢吗？</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">-- 回答：</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">1</span>） 多分区存储模式：kafka是采用多分区的存储方式，提高了高并发；</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">2</span>） 顺序写模式：按照顺序写的速度能够减少大量磁头询地址的时间，使写数据速度和网络传输速度相当，所以基本上够用，但是还是比内存数据传输的速度要慢。</pre></td></tr></table></figure><h4 id=\"342-应用pagecache\"><a class=\"anchor\" href=\"#342-应用pagecache\">#</a> 3.4.2 应用 Pagecache</h4>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 1. 说明：</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Pagecache<span class=\"token punctuation\">(</span>网页缓存<span class=\"token punctuation\">)</span>：是操作系统实现的一个功能，因为linux系统兼容这个功能，所以kafka能够使用，解决大量随机读写的过程。</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">-- 2. 内存：</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>我们常说的内存可以分为两个模块，一是提供给系统的内核使用，此部分对于用户是不可见的，不能被用户使用，二是供用户使用的内存。</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">-- 3. 原理： </span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>pagecache是在内核内存中开辟的一个内存空间，producer生产的数据，先会存储在该内存中，待达到一定的数据量以后，再统一进行落盘，当消费者消费的速率和生产者生产的速率相同时，读写的效率是最高的，因为此时生产的数据不需要落盘处理，consumer直接从内存中读取数据。</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">-- 4. 交换区和 pagecache 的区别：</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>交换区：将磁盘当做内存使用；</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>pagecache：将内存当做磁盘使用；</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>恰好是两个相反的过程。</pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">-- 5. 假如 pagecache 挂掉了怎么办？内存中的数据不是丢失了吗？</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>首先当发生这个问题时，是不能够完全保证数据一定不丢失，但是由于kafka具有副本策略，所以有一定保证的。</pre></td></tr></table></figure><p>优点：</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1</span>） I<span class=\"token operator\">/</span>O Scheduler 会将连续的小块写组装成大块的物理写从而提高性能</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">2</span>） I<span class=\"token operator\">/</span>O Scheduler 会尝试将一些写操作重新按顺序排好，从而减少磁盘头的移动时间</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">3</span>） 充分利用所有空闲内存（非 JVM 内存）。如果使用应用层 Cache（即 JVM 堆内存），会增加 GC 负担</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">4</span>） 读操作可直接在 Page Cache 内进行。如果消费和生产速度相当，甚至不需要通过物理磁盘（直接通过 Page Cache）交换数据</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">5</span>） 如果进程重启，JVM 内的 Cache 会失效，但 Page Cache 仍然可用</pre></td></tr></table></figure><h4 id=\"343-零拷贝技术\"><a class=\"anchor\" href=\"#343-零拷贝技术\">#</a> 3.4.3 零拷贝技术</h4>\n<p><img data-src=\"https://miyazono-1255488789.cos.ap-shanghai.myqcloud.com/markdown/20210822155816.png\" alt=\"图5\" /></p>\n<p>说明：</p>\n<p>内存是分级别的，读写数据时数据先经过内核内存再经过用户内存。</p>\n<p>如果是数据的写出操作，则数据经过内核内存以后就直接往外写出，不需经过用户内存，用户内存只是负责调度的功能，减少了 数据的传输过程，这个过程称为零拷贝。</p>\n<h3 id=\"35-zookeeper在kafka中的作用\"><a class=\"anchor\" href=\"#35-zookeeper在kafka中的作用\">#</a> 3.5  zookeeper 在 kafka 中的作用</h3>\n<ul>\n<li>kafka 是一个去中心化的框架，没有主从之分，则需要一个中央控制中心进行调度，类似 ha 集群一样。</li>\n<li>kafka 是依赖于 zookeeper 集群的。</li>\n</ul>\n<p>流程：一个 kafka 集群，多个 broker，一个 zk 集群</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 步骤：</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">1</span>） 首先所有的broker会竞选一个controller（随机竞选，谁厉害谁上），负责管理集群broker的上下线，所有topic的分区副本分配和leader选举等工作；</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">2</span>） 所有的broker将自己的id信息注册到zk集群的节点上；</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">3</span>） controller监控zk的这个信息；</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">4</span>） controller负责broker的leader选举工作；</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token number\">5</span>） broker将状态信息注册到zk集群上；</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token number\">6</span>） 此时分区的leader故障以后，controller从zk集群中获取isr中的follower信息，负责从isr中follower选举出一个新的leader；</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token number\">7</span>） controller更新zk集群上broker的状态信息。</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">-- 假如故障的 leader 恰好也是 controller 怎么办？</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>先从现存的follower中重新选举controller，再执行<span class=\"token number\">1</span><span class=\"token operator\">-</span><span class=\"token number\">5</span>步。</pre></td></tr></table></figure><p><img data-src=\"https://miyazono-1255488789.cos.ap-shanghai.myqcloud.com/markdown/20210822155820.png\" alt=\"图6\" /></p>\n<h3 id=\"36-kafka事务\"><a class=\"anchor\" href=\"#36-kafka事务\">#</a> 3.6 Kafka 事务</h3>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 问题：</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>事务用来解决什么问题？</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">-- 回答：</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>kafka使用Exactly Once解决producer端生产数据重复的问题存在什么 问题？</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>问题<span class=\"token number\">1</span>：不能跨分区；</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>问题<span class=\"token number\">2</span>：producer重启时，pid会发生变化。</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>则事务就是来解决上面问题的，事务可以保证Kafka在Exactly Once语义的基础上，生产和消费可以跨分区和会话，要么全部成功，要么全部失败。</pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">-- 那具体是怎么做的呢？</span></pre></td></tr></table></figure><h4 id=\"361-producer事务\"><a class=\"anchor\" href=\"#361-producer事务\">#</a> 3.6.1 producer 事务</h4>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 解决 producer 重启问题：</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> 引进全局唯一的<span class=\"token keyword\">Transaction</span> ID，将producer的pid与<span class=\"token keyword\">Transaction</span> ID进行绑定。当重启producer时，可以通过正在进行的<span class=\"token keyword\">Transaction</span> ID获得原来的PID<span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> 为了管理<span class=\"token keyword\">Transaction</span>，Kafka引入了一个新的组件<span class=\"token keyword\">Transaction</span> Coordinator。Producer就是通过和<span class=\"token keyword\">Transaction</span> Coordinator交互获得<span class=\"token keyword\">Transaction</span> ID对应的任务状态。<span class=\"token keyword\">Transaction</span> Coordinator还负责将所有事务写入Kafka的一个内部Topic，这样即使整个服务重启，由于事务状态得到保存，进行中的事务状态可以得到恢复，从而继续进行。</pre></td></tr></table></figure><h4 id=\"362-consumer事务精准一次性消费\"><a class=\"anchor\" href=\"#362-consumer事务精准一次性消费\">#</a> 3.6.2  Consumer 事务（精准一次性消费）</h4>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kafak对consumer事务的保证是非常弱的，尤其无法保证<span class=\"token keyword\">Commit</span>的信息被精确消费。这是由于Consumer可以通过<span class=\"token keyword\">offset</span>访问任意信息，而且不同的Segment <span class=\"token keyword\">File</span>生命周期不同，同一事务的消息可能会出现重启后被删除的情况</pre></td></tr></table></figure><h2 id=\"四-kafka-api\"><a class=\"anchor\" href=\"#四-kafka-api\">#</a> 四、 Kafka API</h2>\n<p>温馨提示</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>api的步骤：</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>第一步： new 对象<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>第二步： 具体的操作<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>第三步： 关闭资源。</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">-- 不知道要写哪些参数？不知道参数的意义？不知道参数取值？怎么办？</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>请认准kafka官网：https:<span class=\"token comment\">//kafka.apache.org/documentation/</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>producer API ： 找Producer Configs</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>consumer API：  找Consumer Configs</pre></td></tr></table></figure><h3 id=\"41-producer-api\"><a class=\"anchor\" href=\"#41-producer-api\">#</a> 4.1 Producer API</h3>\n<h4 id=\"411-消息发送流程\"><a class=\"anchor\" href=\"#411-消息发送流程\">#</a> 4.1.1 消息发送流程</h4>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 问题： </span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Kafka的Producer发送消息采用的是异步发送的方式，这种方式优点和缺点是什么呢？</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">-- 回答：</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>优点：高效率，生产者只要一直生产数据就可以，不需要等到ack回执后再进行生产数据；</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>缺点：不能实时知道数据是否发送成功，不过有ack机制、幂等性机制和producer事务（保证数据的准确性）。</pre></td></tr></table></figure><figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 发送数据的流程：</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token string\">'两线程一共享变量'</span>：</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">1.</span> main线程：将消息发送给RecordAccumulator</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">2.</span> Sender线程：Sender线程不断从RecordAccumulator中拉取消息发送到Kafka broker</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">3.</span> 线程共享变量——RecordAccumulator：数据临时存储器。</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token string\">'步骤'</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>第一步：生产者首先将数据包装成ProducerRecord</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>第二步：main线程中有一个send方法，producer将ProducerRecord发送给interceptors<span class=\"token string\">'拦截器'</span>处理；</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>第三步：interceptors处理好后将数据传递给<span class=\"token string\">'序列化器'</span>，将数据序列化； <span class=\"token comment\">-- 在 producer 端序列化</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>第四步：将序列化好的数据传递给<span class=\"token string\">'分区器'</span>，对数据进行分区； <span class=\"token comment\">-- 在 producer 端序列化</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>第五步：将数据传递到内存的数据缓存区，在这里面，话题有多少个分区，在缓存区里面就有多少个分区，一一对应，对应的分区数据就会去到对应的缓存区的分区中； <span class=\"token comment\">-- 此时的数据是已经分好区了，同时也是已经序列化，此时 producer 就不再管这里的数据了；</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>第六步：Sender线程就将数据发送给topic中的分区中。 </pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">-- 此时的数据，Sender 线程是怎么向 topic 中发的呢？</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>batch<span class=\"token punctuation\">.</span>size：只有数据积累到batch<span class=\"token punctuation\">.</span>size之后，sender才会发送数据。</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>linger<span class=\"token punctuation\">.</span>ms：如果数据迟迟未达到batch<span class=\"token punctuation\">.</span>size，sender等待linger<span class=\"token punctuation\">.</span><span class=\"token keyword\">time</span>之后就会发送数据。</pre></td></tr></table></figure><p><img data-src=\"https://miyazono-1255488789.cos.ap-shanghai.myqcloud.com/markdown/20210822155824.png\" alt=\"图7\" /></p>\n<h4 id=\"412-异步发送api\"><a class=\"anchor\" href=\"#412-异步发送api\">#</a> 4.1.2 异步发送 API</h4>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">kafkaproducer</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>kafka<span class=\"token punctuation\">.</span>clients<span class=\"token punctuation\">.</span>producer<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Callback</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>kafka<span class=\"token punctuation\">.</span>clients<span class=\"token punctuation\">.</span>producer<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">KafkaProducer</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>kafka<span class=\"token punctuation\">.</span>clients<span class=\"token punctuation\">.</span>producer<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ProducerRecord</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>kafka<span class=\"token punctuation\">.</span>clients<span class=\"token punctuation\">.</span>producer<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RecordMetadata</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Properties</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ExecutionException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Future</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"14\"></td><td><pre> * @author lianzhipeng</pre></td></tr><tr><td data-num=\"15\"></td><td><pre> * @Description</pre></td></tr><tr><td data-num=\"16\"></td><td><pre> * @create 2020-05-08 14:58</pre></td></tr><tr><td data-num=\"17\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Producer</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ExecutionException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token comment\">//1.new 对象</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token class-name\">Properties</span> properties <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Properties</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        properties<span class=\"token punctuation\">.</span><span class=\"token function\">setProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"key.serializer\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                <span class=\"token string\">\"org.apache.kafka.common.serialization.StringSerializer\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        properties<span class=\"token punctuation\">.</span><span class=\"token function\">setProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"value.serializer\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                <span class=\"token string\">\"org.apache.kafka.common.serialization.StringSerializer\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        properties<span class=\"token punctuation\">.</span><span class=\"token function\">setProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"acks\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"all\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        properties<span class=\"token punctuation\">.</span><span class=\"token function\">setProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bootstrap.servers\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"hadoop102:9092\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token class-name\">KafkaProducer</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> producer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">KafkaProducer</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>properties<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token comment\">//2. 具体的操作</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            <span class=\"token class-name\">Future</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">RecordMetadata</span><span class=\"token punctuation\">></span></span> result <span class=\"token operator\">=</span> producer<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ProducerRecord</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                    <span class=\"token string\">\"first\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>                    <span class=\"token string\">\"Message\"</span> <span class=\"token operator\">+</span> i<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>                    <span class=\"token string\">\"这是第\"</span> <span class=\"token operator\">+</span> i <span class=\"token operator\">+</span> <span class=\"token string\">\"条信息\"</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Callback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 回调函数，当 producer 发送的数据完成以后，返回告诉 producer 数据发送成功</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>                <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onCompletion</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RecordMetadata</span> metadata<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Exception</span> exception<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>                    <span class=\"token keyword\">int</span> partition <span class=\"token operator\">=</span> metadata<span class=\"token punctuation\">.</span><span class=\"token function\">partition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>                    <span class=\"token class-name\">String</span> topic <span class=\"token operator\">=</span> metadata<span class=\"token punctuation\">.</span><span class=\"token function\">topic</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>                    <span class=\"token keyword\">long</span> offset <span class=\"token operator\">=</span> metadata<span class=\"token punctuation\">.</span><span class=\"token function\">offset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>                    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>                            topic <span class=\"token operator\">+</span> <span class=\"token string\">\"话题\"</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>                                    <span class=\"token operator\">+</span> partition <span class=\"token operator\">+</span> <span class=\"token string\">\"分区\"</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>                                    <span class=\"token operator\">+</span> offset <span class=\"token operator\">+</span> <span class=\"token string\">\"消息发送成功\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>            <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>           </pre></td></tr><tr><td data-num=\"53\"></td><td><pre>            如下一行代码产生同步回调和异同回调两种方式：</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>            同步回调：加了此行代码，生产者收到 ack 以后再发第二条消息；类似打电话</pre></td></tr><tr><td data-num=\"55\"></td><td><pre>            异步回调：未加此行代码，生成者只要一直发送消息既可。类似发短信</pre></td></tr><tr><td data-num=\"56\"></td><td><pre>          </pre></td></tr><tr><td data-num=\"57\"></td><td><pre>            */</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>            <span class=\"token class-name\">RecordMetadata</span> recordMetadata <span class=\"token operator\">=</span> result<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"第\"</span> <span class=\"token operator\">+</span> i <span class=\"token operator\">+</span> <span class=\"token string\">\"条消息发送结束\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>        <span class=\"token comment\">//3. 关闭资源，资源关闭的时候会调用回调函数</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>        producer<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"42-consumer-api\"><a class=\"anchor\" href=\"#42-consumer-api\">#</a> 4.2  Consumer API</h3>\n<h4 id=\"421-数据漏消费和重复消费\"><a class=\"anchor\" href=\"#421-数据漏消费和重复消费\">#</a> 4.2.1 数据漏消费和重复消费</h4>\n<ol>\n<li>消费者不用担心数据的可靠性问题，因为消费者消费以后的数据是不会从 kafka 集群中删除的。但是消费者要关心两个问题：</li>\n</ol>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 问题 1 数据漏消费</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>什么时候会出现数据漏消费呢？</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>先提交<span class=\"token keyword\">offset</span>后消费。</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>例如：消费者从kafka集群中获取了数据，此数据在消费的过程中出现故障延迟最后宕机，在故障期间<span class=\"token keyword\">offset</span>已经提交至kafka集群，此时实际上数据并没有被使用，但是kafka集群上该消费者消费的数据偏移量已经更新了，重启消费者时，上一条数据不能被消费了，导致数据漏消费。</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">-- 问题 2 数据重复消费</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>什么时候会出现数据库重复消费呢？</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>当数据已经被消费以后，此时返回的<span class=\"token keyword\">offset</span>时消费者出现了故障，则kafka集群中的_consumer_offset会话保存的<span class=\"token keyword\">offset</span>则为上一次的数据，<span class=\"token keyword\">offset</span>没有被更新，当消费者重新启动时，上一条数据则会被重新再消费一次。</pre></td></tr></table></figure><ol start=\"2\">\n<li>谈谈消费者提交 offset 的模式</li>\n</ol>\n<p>消费者每次拉取数据的最大值为：1M，（ 1048576 字节）</p>\n<ul>\n<li>\n<p>模式一：自动提交，默认每 5s 提交一次；</p>\n</li>\n<li>\n<p>模式二：手动提交，两种方式：commitSync（同步提交）、commitAsync（异步提交）；</p>\n</li>\n</ul>\n<p>​        同步和异步的异同点：</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 相同点：</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>提交本次poll的一批数据最高的偏移量<span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">-- 不同点：</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>commitSync（同步提交）：提交<span class=\"token keyword\">offset</span>时，commitSync阻塞当前线程，一直到提交成功，并且会自动失败重试（由不可控因素导致，也会出现提交失败）；</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>commitAsync（异步提交）：则没有失败重试机制，故有可能提交失败。</pre></td></tr></table></figure><h4 id=\"422-几个重要的参数\"><a class=\"anchor\" href=\"#422-几个重要的参数\">#</a> 4.2.2 几个重要的参数</h4>\n<ol>\n<li>自动提交 offset 的时间：默认为 5s</li>\n</ol>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9rYWZrYS5hcGFjaGUub3JnL2RvY3VtZW50YXRpb24vI2F1dG8uY29tbWl0LmludGVydmFsLm1z\">auto.commit.interval.ms</span></p>\n<table>\n<thead>\n<tr>\n<th>Type:</th>\n<th>int</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Default:</td>\n<td>5000</td>\n</tr>\n<tr>\n<td>Valid Values:</td>\n<td>[0,...]</td>\n</tr>\n<tr>\n<td>Importance:</td>\n<td>low</td>\n</tr>\n</tbody>\n</table>\n<ol start=\"2\">\n<li>消费者消费数据的起始位置</li>\n</ol>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9rYWZrYS5hcGFjaGUub3JnL2RvY3VtZW50YXRpb24vI2F1dG8ub2Zmc2V0LnJlc2V0\">auto.offset.reset</span></p>\n<ul>\n<li>earliest: automatically reset the offset to the earliest offset --&gt; 表示消费 topic 所有的数据</li>\n<li>latest: automatically reset the offset to the latest offset  --&gt; 表示只消费最新的数据</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Type:</th>\n<th>string</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Default:</td>\n<td>latest</td>\n</tr>\n<tr>\n<td>Valid Values:</td>\n<td>[latest, earliest, none]</td>\n</tr>\n<tr>\n<td>Importance:</td>\n<td>medium</td>\n</tr>\n</tbody>\n</table>\n<ol start=\"3\">\n<li>一次从一个分区拉取的最大数据量</li>\n</ol>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9rYWZrYS5hcGFjaGUub3JnL2RvY3VtZW50YXRpb24vI21heC5wYXJ0aXRpb24uZmV0Y2guYnl0ZXM=\">max.partition.fetch.bytes</span></p>\n<table>\n<thead>\n<tr>\n<th>Type:</th>\n<th>int</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Default:</td>\n<td>1048576</td>\n</tr>\n<tr>\n<td>Valid Values:</td>\n<td>[0,...]</td>\n</tr>\n<tr>\n<td>Importance:</td>\n<td>high</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"423-代码\"><a class=\"anchor\" href=\"#423-代码\">#</a> 4.2.3 代码</h4>\n<ul>\n<li>\n<h3 id=\"consumer-api\"><a class=\"anchor\" href=\"#consumer-api\">#</a> Consumer API</h3>\n</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">kafkaconsumer</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>kafka<span class=\"token punctuation\">.</span>clients<span class=\"token punctuation\">.</span>consumer<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>kafka<span class=\"token punctuation\">.</span>common<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">TopicPartition</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Duration</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Collections</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Map</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Properties</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"12\"></td><td><pre> * @author lianzhipeng</pre></td></tr><tr><td data-num=\"13\"></td><td><pre> * @Description</pre></td></tr><tr><td data-num=\"14\"></td><td><pre> * @create 2020-05-08 21:04</pre></td></tr><tr><td data-num=\"15\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyConsumer</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token comment\">//1 new 对象</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token class-name\">Properties</span> properties <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Properties</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        properties<span class=\"token punctuation\">.</span><span class=\"token function\">setProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"key.deserializer\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                <span class=\"token string\">\"org.apache.kafka.common.serialization.StringDeserializer\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        properties<span class=\"token punctuation\">.</span><span class=\"token function\">setProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"value.deserializer\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                <span class=\"token string\">\"org.apache.kafka.common.serialization.StringDeserializer\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        properties<span class=\"token punctuation\">.</span><span class=\"token function\">setProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bootstrap.servers\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"hadoop102:9092\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        properties<span class=\"token punctuation\">.</span><span class=\"token function\">setProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"group.id\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"group9\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        properties<span class=\"token punctuation\">.</span><span class=\"token function\">setProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"auto.offset.reset\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"earliest\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token comment\">// 自动提交 offset</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        properties<span class=\"token punctuation\">.</span><span class=\"token function\">setProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"enable.auto.commit\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"false\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token class-name\">KafkaConsumer</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> consumer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">KafkaConsumer</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>properties<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token comment\">//2 操作</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token comment\">// 连接话题</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        consumer<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collections</span><span class=\"token punctuation\">.</span><span class=\"token function\">singleton</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"first\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token comment\">// 拉取数据</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token class-name\">Duration</span> duration <span class=\"token operator\">=</span> <span class=\"token class-name\">Duration</span><span class=\"token punctuation\">.</span><span class=\"token function\">ofMillis</span><span class=\"token punctuation\">(</span><span class=\"token number\">500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>            <span class=\"token class-name\">ConsumerRecords</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> records <span class=\"token operator\">=</span> consumer<span class=\"token punctuation\">.</span><span class=\"token function\">poll</span><span class=\"token punctuation\">(</span>duration<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ConsumerRecord</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">record</span> <span class=\"token operator\">:</span> records<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">record</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>            <span class=\"token comment\">// 手动同步提交</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token comment\">//            consumer.commitSync();</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>            <span class=\"token comment\">// 手动异步提交</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>            consumer<span class=\"token punctuation\">.</span><span class=\"token function\">commitAsync</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">OffsetCommitCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>                <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>                <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onComplete</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TopicPartition</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">OffsetAndMetadata</span><span class=\"token punctuation\">></span></span> offsets<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Exception</span> exception<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>                    offsets<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>                            <span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">,</span> o<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>                                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"分区：\"</span> <span class=\"token operator\">+</span> t <span class=\"token operator\">+</span> <span class=\"token string\">\"\\nOffset：\"</span> <span class=\"token operator\">+</span> o<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>                            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>                    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        <span class=\"token comment\">//3 关闭资源</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre><span class=\"token comment\">//        consumer.close();</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre></pre></td></tr><tr><td data-num=\"67\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>异步提交代码：</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 手动异步提交方式，形参里面为回调对象。</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>            consumer<span class=\"token punctuation\">.</span><span class=\"token function\">commitAsync</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">OffsetCommitCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>                <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>               回调方式，当消费成功以后调用此方法并进行打印</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onComplete</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TopicPartition</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">OffsetAndMetadata</span><span class=\"token punctuation\">></span></span> offsets<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Exception</span> exception<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                    offsets<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                            <span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">,</span> o<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"分区：\"</span> <span class=\"token operator\">+</span> t <span class=\"token operator\">+</span> <span class=\"token string\">\"\\nOffset：\"</span> <span class=\"token operator\">+</span> o<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"五-kafka监控kafka-eagle\"><a class=\"anchor\" href=\"#五-kafka监控kafka-eagle\">#</a> 五、Kafka 监控（Kafka Eagle）</h2>\n<ol>\n<li>修改 kafka 启动命令</li>\n</ol>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>修改kafka<span class=\"token operator\">-</span>server<span class=\"token operator\">-</span><span class=\"token keyword\">start</span><span class=\"token punctuation\">.</span>sh命令中</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">-- 原文：</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">\"x$KAFKA_HEAP_OPTS\"</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"x\"</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    export KAFKA_HEAP_OPTS<span class=\"token operator\">=</span><span class=\"token string\">\"-Xmx1G -Xms1G\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>fi</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">-- 改为：</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">\"x$KAFKA_HEAP_OPTS\"</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"x\"</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    export KAFKA_HEAP_OPTS<span class=\"token operator\">=</span><span class=\"token string\">\"-server -Xms2G -Xmx2G -XX:PermSize=128m -XX:+UseG1GC -XX:MaxGCPauseMillis=200 -XX:ParallelGCThreads=8 -XX:ConcGCThreads=5 -XX:InitiatingHeapOccupancyPercent=70\"</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    export JMX_PORT<span class=\"token operator\">=</span><span class=\"token string\">\"9999\"</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">#export KAFKA_HEAP_OPTS=\"-Xmx1G -Xms1G\"</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>fi</pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">-- 注意：修改之后在启动 Kafka 之前要分发之其他节点</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>上传压缩包 kafka-eagle-bin-1.3.7.tar.gz 到集群 /opt/software 目录</li>\n<li>解压到本地</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>miyazono<span class=\"token annotation punctuation\">@hadoop102</span> software<span class=\"token punctuation\">]</span>$ tar <span class=\"token operator\">-</span>zxvf kafka<span class=\"token operator\">-</span>eagle<span class=\"token operator\">-</span>bin<span class=\"token operator\">-</span><span class=\"token number\">1.3</span><span class=\"token number\">.7</span><span class=\"token punctuation\">.</span>tar<span class=\"token punctuation\">.</span>gz</pre></td></tr></table></figure><ol start=\"4\">\n<li>进入刚才解压的目录，将 kafka-eagle-web-1.3.7-bin.tar.gz 解压至 opt/module</li>\n</ol>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>miyazono<span class=\"token variable\">@hadoop102</span> kafka<span class=\"token operator\">-</span>eagle<span class=\"token operator\">-</span>bin<span class=\"token operator\">-</span><span class=\"token number\">1.3</span><span class=\"token number\">.7</span><span class=\"token punctuation\">]</span> $ tar <span class=\"token operator\">-</span>zxvf kafka<span class=\"token operator\">-</span>eagle<span class=\"token operator\">-</span>web<span class=\"token operator\">-</span><span class=\"token number\">1.4</span><span class=\"token number\">.5</span><span class=\"token operator\">-</span>bin<span class=\"token punctuation\">.</span>tar<span class=\"token punctuation\">.</span>gz <span class=\"token operator\">-</span>C <span class=\"token operator\">/</span>opt<span class=\"token operator\">/</span>module<span class=\"token operator\">/</span></pre></td></tr></table></figure><ol start=\"5\">\n<li>修改名称</li>\n</ol>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>miyazono<span class=\"token variable\">@hadoop102</span> module<span class=\"token punctuation\">]</span>$ mv kafka<span class=\"token operator\">-</span>eagle<span class=\"token operator\">-</span>we<span class=\"token operator\">-</span><span class=\"token number\">1.4</span><span class=\"token number\">.5</span><span class=\"token operator\">/</span>   eagle</pre></td></tr></table></figure><ol start=\"6\">\n<li>给启动文件执行权限 /opt/module/eagle/bin</li>\n</ol>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>miyazono<span class=\"token variable\">@hadoop102</span> bin<span class=\"token punctuation\">]</span>$ chmod <span class=\"token number\">777</span> ke<span class=\"token punctuation\">.</span>sh</pre></td></tr></table></figure><ol start=\"7\">\n<li>修改配置文件 /opt/module/eagle/conf/system-config.properties</li>\n</ol>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">######################################</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># multi zookeeper&amp;kafka cluster list</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">######################################</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>kafka<span class=\"token punctuation\">.</span>eagle<span class=\"token punctuation\">.</span>zk<span class=\"token punctuation\">.</span>cluster<span class=\"token punctuation\">.</span>alias<span class=\"token operator\">=</span>cluster1</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>cluster1<span class=\"token punctuation\">.</span>zk<span class=\"token punctuation\">.</span>list<span class=\"token operator\">=</span>hadoop102:<span class=\"token number\">2181</span><span class=\"token punctuation\">,</span>hadoop103:<span class=\"token number\">2181</span><span class=\"token punctuation\">,</span>hadoop104:<span class=\"token number\">2181</span><span class=\"token operator\">/</span>kafka</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">######################################</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\"># kafka offset storage</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">######################################</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>cluster1<span class=\"token punctuation\">.</span>kafka<span class=\"token punctuation\">.</span>eagle<span class=\"token punctuation\">.</span><span class=\"token keyword\">offset</span><span class=\"token punctuation\">.</span>storage<span class=\"token operator\">=</span>kafka</pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">######################################</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\"># kafka metrics, 30 days by default</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">######################################</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>kafka<span class=\"token punctuation\">.</span>eagle<span class=\"token punctuation\">.</span>metrics<span class=\"token punctuation\">.</span>charts<span class=\"token operator\">=</span><span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>kafka<span class=\"token punctuation\">.</span>eagle<span class=\"token punctuation\">.</span>metrics<span class=\"token punctuation\">.</span>retain<span class=\"token operator\">=</span><span class=\"token number\">30</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\">######################################</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\"># kafka sqlite jdbc driver address</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token comment\">######################################</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>kafka<span class=\"token punctuation\">.</span>eagle<span class=\"token punctuation\">.</span>driver<span class=\"token operator\">=</span>com<span class=\"token punctuation\">.</span>mysql<span class=\"token punctuation\">.</span>jdbc<span class=\"token punctuation\">.</span>Driver</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>kafka<span class=\"token punctuation\">.</span>eagle<span class=\"token punctuation\">.</span>url<span class=\"token operator\">=</span>jdbc:mysql:<span class=\"token comment\">//hadoop102:3306/ke?useUnicode=true&amp;characterEncoding=UTF-8&amp;zeroDateTimeBehavior=convertToNull</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>kafka<span class=\"token punctuation\">.</span>eagle<span class=\"token punctuation\">.</span>username<span class=\"token operator\">=</span>root</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>kafka<span class=\"token punctuation\">.</span>eagle<span class=\"token punctuation\">.</span>password<span class=\"token operator\">=</span><span class=\"token number\">123456</span></pre></td></tr></table></figure><ol start=\"8\">\n<li>添加环境变量</li>\n</ol>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>export KE_HOME<span class=\"token operator\">=</span><span class=\"token operator\">/</span>opt<span class=\"token operator\">/</span>module<span class=\"token operator\">/</span>eagle</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>export PATH<span class=\"token operator\">=</span>$PATH:$KE_HOME<span class=\"token operator\">/</span>bin</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">-- 注意：source /etc/profile</span></pre></td></tr></table></figure><ol start=\"9\">\n<li>启动</li>\n</ol>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>miyazono<span class=\"token variable\">@hadoop102</span> eagle<span class=\"token punctuation\">]</span>$ bin<span class=\"token operator\">/</span>ke<span class=\"token punctuation\">.</span>sh <span class=\"token keyword\">start</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token operator\">*</span> Kafka Eagle Service has started success<span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token operator\">*</span> Welcome<span class=\"token punctuation\">,</span> Now you can visit <span class=\"token string\">'http://192.168.9.102:8048/ke'</span> <span class=\"token comment\">-- 这个网址就是登入的 eagle 的网址</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token operator\">*</span> Account:admin <span class=\"token punctuation\">,</span>Password:<span class=\"token number\">123456</span> <span class=\"token comment\">-- 这是登入的密码</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token operator\">*</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">Usage</span><span class=\"token operator\">></span> ke<span class=\"token punctuation\">.</span>sh <span class=\"token punctuation\">[</span><span class=\"token keyword\">start</span><span class=\"token operator\">|</span><span class=\"token keyword\">status</span><span class=\"token operator\">|</span>stop<span class=\"token operator\">|</span>restart<span class=\"token operator\">|</span>stats<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token keyword\">Usage</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token operator\">*</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">Usage</span><span class=\"token operator\">></span> https:<span class=\"token comment\">//www.kafka-eagle.org/ &lt;/Usage></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">-- 注意：启动之前需要先启动 ZK 以及 KAFKA</span></pre></td></tr></table></figure><ol start=\"10\">\n<li>登录页面查看监控数据</li>\n</ol>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>网址： http:<span class=\"token comment\">//192.168.9.102:8048/ke</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>账号： admin</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>密码： <span class=\"token number\">123456</span></pre></td></tr></table></figure><h2 id=\"六-面试题\"><a class=\"anchor\" href=\"#六-面试题\">#</a> 六、面试题</h2>\n<h3 id=\"61-kafka中的isr-ar代表什么\"><a class=\"anchor\" href=\"#61-kafka中的isr-ar代表什么\">#</a> 6.1  Kafka 中的 ISR、AR 代表什么</h3>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>ISR:分区leader维护的一个follower列表，在isr中的follower与leader同步。</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>AR:分区的所有副本。</pre></td></tr></table></figure><h3 id=\"62-kafka中的hw-leo等分别代表什么\"><a class=\"anchor\" href=\"#62-kafka中的hw-leo等分别代表什么\">#</a> 6.2 Kafka 中的 HW、LEO 等分别代表什么</h3>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>LEO: leader维护的isr中所有follower的最后偏移量。</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>HW：所有followerleo最小的值。</pre></td></tr></table></figure><h3 id=\"63-kafka中是怎么体现消息顺序性的\"><a class=\"anchor\" href=\"#63-kafka中是怎么体现消息顺序性的\">#</a> 6.3 Kafka 中是怎么体现消息顺序性的</h3>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>每次生产的数据是在一个上次生产数据的基础上追加，同时存储了消息的<span class=\"token keyword\">offset</span>和数据的<span class=\"token keyword\">index</span>索引，减少了数据存储时的磁头寻址的过程。</pre></td></tr></table></figure><h3 id=\"64-kafka中的分区器-序列化器-拦截器是否了解它们之间的处理顺序是什么\"><a class=\"anchor\" href=\"#64-kafka中的分区器-序列化器-拦截器是否了解它们之间的处理顺序是什么\">#</a> 6.4 Kafka 中的分区器、序列化器、拦截器是否了解？它们之间的处理顺序是什么？</h3>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>处理顺序： 拦截器 <span class=\"token comment\">--> 序列化器 --> 分区器</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>拦截器：对数据进行简单处理，加一些标识。</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>序列化：对数据进行序列化，保证数据可用于传输；</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>分区器：给数据加上分区标签，指定数据应该去到哪个kafka集群中的分区。</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>以上三步骤均在producer端就完成了。</pre></td></tr></table></figure><h3 id=\"65-kafka生产者客户端的整体结构是什么样子的使用了几个线程来处理分别是什么\"><a class=\"anchor\" href=\"#65-kafka生产者客户端的整体结构是什么样子的使用了几个线程来处理分别是什么\">#</a> 6.5  Kafka 生产者客户端的整体结构是什么样子的？使用了几个线程来处理？分别是什么？</h3>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>一共<span class=\"token number\">2</span>个线程，一个数据缓存区。</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>线程</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>main线程：负责对数据进行包装、序列化、分区。</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>sender线程：负责将数据从数据缓冲区发送topic话题中。</pre></td></tr></table></figure><h3 id=\"66-消费者组中的消费者个数如果超过topic的分区那么就会有消费者消费不到数据这句话是否正确\"><a class=\"anchor\" href=\"#66-消费者组中的消费者个数如果超过topic的分区那么就会有消费者消费不到数据这句话是否正确\">#</a> 6.6 消费者组中的消费者个数如果超过 topic 的分区，那么就会有消费者消费不到数据这句话是否正确</h3>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>是的，正确。</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>了解一下分区分配的策略。</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>三种方式：roundrobin 、 range  、sticky。</pre></td></tr></table></figure><h3 id=\"67-消费者提交消费位移时提交的是当前消费到的最新消息的offset还是offset1\"><a class=\"anchor\" href=\"#67-消费者提交消费位移时提交的是当前消费到的最新消息的offset还是offset1\">#</a> 6.7 消费者提交消费位移时提交的是当前消费到的最新消息的 offset 还是 offset+1？</h3>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">offset</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span> 。</pre></td></tr></table></figure><h3 id=\"68-有哪些情形会造成重复消费\"><a class=\"anchor\" href=\"#68-有哪些情形会造成重复消费\">#</a> 6.8 有哪些情形会造成重复消费？</h3>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>先消费后提交<span class=\"token keyword\">offset</span>。</pre></td></tr></table></figure><h3 id=\"69-那些情景会造成消息漏消费\"><a class=\"anchor\" href=\"#69-那些情景会造成消息漏消费\">#</a> 6.9 那些情景会造成消息漏消费？</h3>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>先提交<span class=\"token keyword\">offset</span>后消费。</pre></td></tr></table></figure><h3 id=\"610-当你使用kafka-topicssh创建删除了一个topic之后kafka背后会执行什么逻辑\"><a class=\"anchor\" href=\"#610-当你使用kafka-topicssh创建删除了一个topic之后kafka背后会执行什么逻辑\">#</a> 6.10 当你使用 kafka-topics.sh 创建（删除）了一个 topic 之后，Kafka 背后会执行什么逻辑？</h3>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>了解producer发送数据的过程。</pre></td></tr></table></figure><h3 id=\"611-topic的分区数可不可以增加如果可以怎么增加如果不可以那又是为什么\"><a class=\"anchor\" href=\"#611-topic的分区数可不可以增加如果可以怎么增加如果不可以那又是为什么\">#</a> 6.11 topic 的分区数可不可以增加？如果可以怎么增加？如果不可以，那又是为什么？</h3>\n<pre><code>可以增加。\n</code></pre>\n<h3 id=\"612-topic的分区数可不可以减少如果可以怎么减少如果不可以那又是为什么\"><a class=\"anchor\" href=\"#612-topic的分区数可不可以减少如果可以怎么减少如果不可以那又是为什么\">#</a> 6.12 topic 的分区数可不可以减少？如果可以怎么减少？如果不可以，那又是为什么？</h3>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>不能减少，因为原分区中的数据没有地方去。</pre></td></tr></table></figure><h3 id=\"613-kafka有内部的topic吗如果有是什么有什么作用\"><a class=\"anchor\" href=\"#613-kafka有内部的topic吗如果有是什么有什么作用\">#</a> 6.13 Kafka 有内部的 topic 吗？如果有是什么？有什么作用？</h3>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>会话：_consumer_offset，保存consumer消费的偏移量。</pre></td></tr></table></figure><h3 id=\"614-kafka分区分配的概念\"><a class=\"anchor\" href=\"#614-kafka分区分配的概念\">#</a> 6.14 Kafka 分区分配的概念？</h3>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>一共有三种分区分配的策略。</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>三种方式：</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">1</span>）roundrobin ： 轮询分配。</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">2</span>）range ： 平均分配。</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">3</span>）sticky ： 轮询分配 <span class=\"token operator\">+</span> 解决新增消费者的优化。</pre></td></tr></table></figure><h3 id=\"615-简述kafka的日志目录结构\"><a class=\"anchor\" href=\"#615-简述kafka的日志目录结构\">#</a> 6.15 简述 Kafka 的日志目录结构？</h3>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>一共有<span class=\"token number\">3</span>个文件</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">1</span>）log文件：记录真实数据，内部包含了真实数据 <span class=\"token operator\">+</span> hw <span class=\"token operator\">+</span> leo。</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">2</span>）<span class=\"token keyword\">index</span>文件 ： 存储消息的偏移量。</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> timeindex文件 ： 存储下消息的时间偏移量。</pre></td></tr></table></figure><h3 id=\"616-如果我指定了一个offsetkafka-controller怎么查找到对应的消息\"><a class=\"anchor\" href=\"#616-如果我指定了一个offsetkafka-controller怎么查找到对应的消息\">#</a> 6.16 如果我指定了一个 offset，Kafka Controller 怎么查找到对应的消息？</h3>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>通过<span class=\"token keyword\">offset</span>，消息的偏移量，通过日志目录的文件顺序号，根据区间范围找到消息所在的inde和log目录。</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>其次根据在<span class=\"token keyword\">index</span>表中的消息偏移量找到真实数据在log文件中该消息的起始索引位置。</pre></td></tr></table></figure><h3 id=\"617聊一聊kafka-controller的作用\"><a class=\"anchor\" href=\"#617聊一聊kafka-controller的作用\">#</a> 6.17 聊一聊 Kafka Controller 的作用？</h3>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1</span>、负责leader的选举；</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">2</span>、负责监控leader的状态；</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">3.</span>负责更新集群在zookeeper中的状态。</pre></td></tr></table></figure><h3 id=\"618-kafka中有那些地方需要选举这些地方的选举策略又有哪些\"><a class=\"anchor\" href=\"#618-kafka中有那些地方需要选举这些地方的选举策略又有哪些\">#</a> 6.18  Kafka 中有那些地方需要选举？这些地方的选举策略又有哪些？</h3>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1.</span>每个分区的leader选举；<span class=\"token punctuation\">(</span>isr<span class=\"token punctuation\">)</span>；</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">2.</span>controller的选举（先到先得）。</pre></td></tr></table></figure><h3 id=\"619-失效副本是指什么有那些应对措施\"><a class=\"anchor\" href=\"#619-失效副本是指什么有那些应对措施\">#</a> 6.19  失效副本是指什么？有那些应对措施？</h3>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>follower不能与leader进行同步数据，暂时被leader踢出isr列表中。通过followe故障恢复重新备份，当leo达到了isr中的hw时，又重新会回到isr的列表中。</pre></td></tr></table></figure><h3 id=\"620-kafka的那些设计让它有如此高的性能\"><a class=\"anchor\" href=\"#620-kafka的那些设计让它有如此高的性能\">#</a> 6.20  Kafka 的那些设计让它有如此高的性能？</h3>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1.</span> pagecache；</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">2.</span>顺序读写机制；</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">3.</span>零拷贝技术；</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">4.</span>多分区策略。</pre></td></tr></table></figure><h2 id=\"七-flume与kafka融合技术\"><a class=\"anchor\" href=\"#七-flume与kafka融合技术\">#</a> 七 、flume 与 kafka 融合技术</h2>\n<p>kafka：数据的中转站，主要功能由 topic 体现；</p>\n<p>flume：数据的采集，通过 source 和 sink 体现。</p>\n<h3 id=\"71-kafka-source\"><a class=\"anchor\" href=\"#71-kafka-source\">#</a> 7.1 kafka source</h3>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 问题 ：</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>fulme在kafka中的作用</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">-- 答案：</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>消费者</pre></td></tr></table></figure><figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sources<span class=\"token punctuation\">.</span>r1<span class=\"token punctuation\">.</span><span class=\"token keyword\">type</span> <span class=\"token operator\">=</span> org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>flume<span class=\"token punctuation\">.</span>source<span class=\"token punctuation\">.</span>kafka<span class=\"token punctuation\">.</span>KafkaSource <span class=\"token comment\">--source 类型</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sources<span class=\"token punctuation\">.</span>r1<span class=\"token punctuation\">.</span>kafka<span class=\"token punctuation\">.</span>bootstrap<span class=\"token punctuation\">.</span>servers <span class=\"token operator\">=</span> hadoop105:<span class=\"token number\">9092</span><span class=\"token punctuation\">,</span>hadoop106:<span class=\"token number\">9092</span> <span class=\"token comment\">-- kafka 的集群</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sources<span class=\"token punctuation\">.</span>r1<span class=\"token punctuation\">.</span>kafka<span class=\"token punctuation\">.</span>topics<span class=\"token operator\">=</span>topic_log <span class=\"token comment\">-- 订阅的话题</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sources<span class=\"token punctuation\">.</span>r1<span class=\"token punctuation\">.</span>batchSize<span class=\"token operator\">=</span><span class=\"token number\">6000</span> <span class=\"token comment\">--putlist 中数据达到了 6K 以后提交到 channel 中</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sources<span class=\"token punctuation\">.</span>r1<span class=\"token punctuation\">.</span>batchDurationMillis<span class=\"token operator\">=</span><span class=\"token number\">2000</span> <span class=\"token comment\">-- 拉取数据的时间达到 2s 以后，将获取的数据提交到 channel 中</span></pre></td></tr></table></figure><h3 id=\"72-kakfa-channel\"><a class=\"anchor\" href=\"#72-kakfa-channel\">#</a> 7.2 kakfa channel</h3>\n<ul>\n<li>kakfa channel 这种情况使用的最多，此时的 flume 可以是消费者、生产者、source 和 sink 之间的缓冲区（具有高吞吐量的优势），Channel 是位于 Source 和 Sink 之间的缓冲区。</li>\n<li>一共有三种情况，分别是:</li>\n</ul>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 情况一： 有 Flume source and sink -- 缓冲区</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>kakfa channel为事件提供了可靠且高可用的通道；</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">-- 情况二： 有 source and interceptor but no sink -- 生产者</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>it allows writing Flume events <span class=\"token keyword\">into</span> a Kafka topic<span class=\"token punctuation\">,</span> <span class=\"token keyword\">for</span> <span class=\"token keyword\">use</span> <span class=\"token keyword\">by</span> other app</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">-- 情况三： 有 sink, but no source -- 消费者</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>it <span class=\"token operator\">is</span> a low<span class=\"token operator\">-</span>latency<span class=\"token punctuation\">,</span> fault tolerant way <span class=\"token keyword\">to</span> send events <span class=\"token keyword\">from</span> Kafka <span class=\"token keyword\">to</span> Flume sinks such <span class=\"token keyword\">as</span> HDFS<span class=\"token punctuation\">,</span> HBase <span class=\"token operator\">or</span> Solr</pre></td></tr></table></figure><p>官方配置文件：</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a1<span class=\"token punctuation\">.</span>channels<span class=\"token punctuation\">.</span>c1<span class=\"token punctuation\">.</span><span class=\"token keyword\">type</span> <span class=\"token operator\">=</span> org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>flume<span class=\"token punctuation\">.</span>channel<span class=\"token punctuation\">.</span>kafka<span class=\"token punctuation\">.</span>KafkaChannel <span class=\"token comment\">----channel 类型</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>a1<span class=\"token punctuation\">.</span>channels<span class=\"token punctuation\">.</span>c1<span class=\"token punctuation\">.</span>kafka<span class=\"token punctuation\">.</span>bootstrap<span class=\"token punctuation\">.</span>servers <span class=\"token operator\">=</span> hadoop105:<span class=\"token number\">9092</span><span class=\"token punctuation\">,</span>hadoop106:<span class=\"token number\">9092</span><span class=\"token punctuation\">,</span>hadoop107:<span class=\"token number\">9092</span> <span class=\"token comment\">--kafka 集群</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>a1<span class=\"token punctuation\">.</span>channels<span class=\"token punctuation\">.</span>c1<span class=\"token punctuation\">.</span>kafka<span class=\"token punctuation\">.</span>topic <span class=\"token operator\">=</span>topic_log <span class=\"token comment\">-- 话题</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>a1<span class=\"token punctuation\">.</span>channels<span class=\"token punctuation\">.</span>c1<span class=\"token punctuation\">.</span>parseAsFlumeEvent<span class=\"token operator\">=</span><span class=\"token boolean\">false</span> <span class=\"token comment\">-- 不需要 event 的 header 数据</span></pre></td></tr></table></figure><h3 id=\"73-kafka-sink\"><a class=\"anchor\" href=\"#73-kafka-sink\">#</a> 7.3 kafka sink</h3>\n<p>作用：将数据拉去到 kafka 的 topic 中。</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sinks<span class=\"token punctuation\">.</span>k1<span class=\"token punctuation\">.</span><span class=\"token keyword\">type</span> <span class=\"token operator\">=</span> org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>flume<span class=\"token punctuation\">.</span>sink<span class=\"token punctuation\">.</span>kafka<span class=\"token punctuation\">.</span>KafkaSink <span class=\"token comment\">--sink 类型</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sinks<span class=\"token punctuation\">.</span>k1<span class=\"token punctuation\">.</span>kafka<span class=\"token punctuation\">.</span>topic <span class=\"token operator\">=</span>topic_log <span class=\"token comment\">-- 话题</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sinks<span class=\"token punctuation\">.</span>k1<span class=\"token punctuation\">.</span>kafka<span class=\"token punctuation\">.</span>bootstrap<span class=\"token punctuation\">.</span>servers <span class=\"token operator\">=</span> hadoop105:<span class=\"token number\">9092</span><span class=\"token punctuation\">,</span>hadoop106:<span class=\"token number\">9092</span><span class=\"token punctuation\">,</span>hadoop107:<span class=\"token number\">9092</span> <span class=\"token comment\">--kafka 集群</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sinks<span class=\"token punctuation\">.</span>k1<span class=\"token punctuation\">.</span>kafka<span class=\"token punctuation\">.</span>flumeBatchSize <span class=\"token operator\">=</span> <span class=\"token number\">20</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sinks<span class=\"token punctuation\">.</span>k1<span class=\"token punctuation\">.</span>kafka<span class=\"token punctuation\">.</span>producer<span class=\"token punctuation\">.</span>acks <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token comment\">-- 副本策略</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sinks<span class=\"token punctuation\">.</span>k1<span class=\"token punctuation\">.</span>kafka<span class=\"token punctuation\">.</span>producer<span class=\"token punctuation\">.</span>linger<span class=\"token punctuation\">.</span>ms <span class=\"token operator\">=</span> <span class=\"token number\">1</span> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sinks<span class=\"token punctuation\">.</span>k1<span class=\"token punctuation\">.</span>kafka<span class=\"token punctuation\">.</span>producer<span class=\"token punctuation\">.</span>compression<span class=\"token punctuation\">.</span><span class=\"token keyword\">type</span> <span class=\"token operator\">=</span> snappy  <span class=\"token comment\">-- 压缩格式</span></pre></td></tr></table></figure>",
            "tags": [
                "大数据",
                "Kafka"
            ]
        },
        {
            "id": "https://github.com/Mayizono/miyazono.github.io/big-data/zookeeper/zookeeper%E6%80%BB%E7%BB%93/",
            "url": "https://github.com/Mayizono/miyazono.github.io/big-data/zookeeper/zookeeper%E6%80%BB%E7%BB%93/",
            "title": "zookeeper总结",
            "date_published": "2019-01-10T16:00:00.000Z",
            "content_html": "<h1 id=\"zookeeper学习\"><a class=\"anchor\" href=\"#zookeeper学习\">#</a> zookeeper 学习</h1>\n<h2 id=\"一-zookeeper入门\"><a class=\"anchor\" href=\"#一-zookeeper入门\">#</a> 一、zookeeper 入门</h2>\n<h3 id=\"11-概述\"><a class=\"anchor\" href=\"#11-概述\">#</a> 1.1 概述</h3>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 理解</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> Apache一个分布式项目；</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">2</span>）是一个基于观察者模式设计的分布服务管理框架，负责存储和管理大家都关心的数据，然后接受观察者的注册，一旦数据发生变化，则zookeeper通知观察者。</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">-- zookeeper = 文件系统 + 通知机制。</span></pre></td></tr></table></figure><h3 id=\"12-zookeeper特点\"><a class=\"anchor\" href=\"#12-zookeeper特点\">#</a> 1.2 zookeeper 特点</h3>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 特点</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>  每一节点都有一个不重复的myid标识zookeeper集群；</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">2</span>） 一个领导者（leader） 和 n 个追随者 （follower）组成的集群；</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">3</span>） 集群只要有半数以上的节点存活就能对外提供服务，即使是在leader失败的情况下；<span class=\"token comment\">-- 半数机制</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">4</span>） 根据半数机制，可知一般搭建奇数台的机器是有优势的；</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t假设是<span class=\"token number\">4</span>台，半数为<span class=\"token number\">2</span>，故障一台，还有<span class=\"token number\">3</span>台，<span class=\"token number\">3</span> <span class=\"token operator\">></span> <span class=\"token number\">2</span> <span class=\"token punctuation\">,</span>所以继续提供服务，再故障一台，剩下<span class=\"token number\">2</span>台， <span class=\"token number\">2</span> <span class=\"token operator\">></span> <span class=\"token number\">2</span> <span class=\"token punctuation\">,</span>错误，此时，不再对外提供服务；</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t假设是 <span class=\"token number\">3</span>台，半数为 <span class=\"token number\">1.5</span> ，故障<span class=\"token number\">1</span>台，还有<span class=\"token number\">2</span>台， <span class=\"token number\">2</span> <span class=\"token operator\">></span> <span class=\"token number\">1.5</span> <span class=\"token punctuation\">,</span> 所以继续提供服务，再故障一台，剩下<span class=\"token number\">1</span>台， <span class=\"token number\">1</span> <span class=\"token operator\">></span> <span class=\"token number\">1.5</span> <span class=\"token punctuation\">,</span>错误，此时不再对外提供服务。</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t综上，<span class=\"token number\">4</span>台机器，允许故障<span class=\"token number\">1</span>台，<span class=\"token number\">3</span>台机器，也允许故障一台，所以奇数台机器有优势。</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token number\">5</span>） 全局数据一致：所有节点的数据是保持一致的，所以客户端无论连接到哪台机器，获取的数据都是一样的； <span class=\"token comment\">-- 基于 zab 机制；</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token number\">6</span>） 更新请求按照顺序执行；</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token number\">7</span>） 数据更新的原子性：要么成功，要么失败；</pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token number\">8</span>） 实时性： 在一定时间范围内，client能够获得最新的数据。</pre></td></tr></table></figure><h3 id=\"13-zookeeper数据结构\"><a class=\"anchor\" href=\"#13-zookeeper数据结构\">#</a> 1.3 zookeeper 数据结构</h3>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1</span>） 与linux文件结构相似，也是一个根目录。整体呈一颗树的形状；</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">2</span>） 每一个节点称作一个znode，每一个znode可以存储<span class=\"token number\">1</span>M的数据；</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">3</span>） 每个znode通过其路径进行唯一标识。</pre></td></tr></table></figure><h3 id=\"14-应用场景\"><a class=\"anchor\" href=\"#14-应用场景\">#</a> 1.4 应用场景</h3>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1</span>） 统一命名服务；</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">2</span>） 统一配置管理；</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">3</span>） 服务器节点动态上下线；</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">4</span>） 软负载均衡。</pre></td></tr></table></figure><h3 id=\"15-配置参数解读\"><a class=\"anchor\" href=\"#15-配置参数解读\">#</a> 1.5  配置参数解读</h3>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1</span>）tickTime <span class=\"token operator\">=</span><span class=\"token number\">2000</span>：通信心跳数，Zookeeper服务器与客户端心跳时间，单位毫秒</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Zookeeper使用的基本时间，服务器之间或客户端与服务器之间维持心跳的时间间隔，也就是每个tickTime时间就会发送一个心跳，时间单位为毫秒。</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>它用于心跳机制，并且设置最小的<span class=\"token keyword\">session</span>超时时间为两倍心跳时间。<span class=\"token punctuation\">(</span><span class=\"token keyword\">session</span>的最小超时时间是<span class=\"token number\">2</span><span class=\"token operator\">*</span>tickTime<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">2</span>）initLimit <span class=\"token operator\">=</span><span class=\"token number\">10</span>：LF初始通信时限</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>集群中的Follower跟随者服务器与Leader领导者服务器之间初始连接时能容忍的最多心跳数（tickTime的数量），用它来限定集群中的Zookeeper服务器连接到Leader的时限。</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token number\">3</span>）syncLimit <span class=\"token operator\">=</span><span class=\"token number\">5</span>：LF同步通信时限</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>集群中Leader与Follower之间的最大响应时间单位，假如响应超过syncLimit <span class=\"token operator\">*</span> tickTime，Leader认为Follwer死掉，从服务器列表中删除Follwer。</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token number\">4</span>）dataDir：数据文件目录<span class=\"token operator\">+</span>数据持久化路径</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>主要用于保存Zookeeper中的数据。</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token number\">5</span>）clientPort <span class=\"token operator\">=</span><span class=\"token number\">2181</span>：客户端连接端口</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>监听客户端连接的端口。</pre></td></tr></table></figure><p>1.6 zookeeper 的四字命令</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>需要在Zookeeper的配置文件<span class=\"token operator\">/</span>opt<span class=\"token operator\">/</span>module<span class=\"token operator\">/</span>zookeeper<span class=\"token operator\">-</span><span class=\"token number\">3.5</span><span class=\"token number\">.7</span><span class=\"token operator\">/</span>conf<span class=\"token operator\">/</span>zoo<span class=\"token punctuation\">.</span>cfg中加入如下配置:</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">4</span>lw<span class=\"token punctuation\">.</span>commands<span class=\"token punctuation\">.</span>whitelist<span class=\"token operator\">=</span><span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">-- 语法：</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>连接方式： nc  机器名 端口号 （如果nc功能没有，则使用yum进行安装）</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">-- 示例：</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>nc hadoop102 <span class=\"token number\">2181</span></pre></td></tr></table></figure><table>\n<thead>\n<tr>\n<th>ruok</th>\n<th>测试服务是否长度处于正确状态，如果确实如此，那么服务返回 imok , 否则不做任何响应。</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>conf</td>\n<td>3.3.0 版本引入的，打印出服务相关配置的详细信息</td>\n</tr>\n<tr>\n<td>cons</td>\n<td>列出所有连接到这台服务器的客户端全部会话详细信息。包括 接收 / 发送的包数量，会话 id，操作延迟、最后的操作执行等等信息</td>\n</tr>\n<tr>\n<td>crst</td>\n<td>重置所有连接的连接和会话统计信息</td>\n</tr>\n<tr>\n<td>dump</td>\n<td>列出那些比较重要的会话和临时节点。这个命令只能在 leader 节点上有用</td>\n</tr>\n<tr>\n<td>envi</td>\n<td>打印出服务环境的详细信息</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"二-zookeeper内部原理\"><a class=\"anchor\" href=\"#二-zookeeper内部原理\">#</a> 二、zookeeper 内部原理</h2>\n<h3 id=\"21-节点类型\"><a class=\"anchor\" href=\"#21-节点类型\">#</a> 2.1  节点类型</h3>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>分为持久性和短暂性节点。</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">1</span>） 持久性：客户端与服务器断开连接以后，创建的节点不删除；</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token comment\">-- 分为带序号的持久性节点和不带序号的持久性节点。</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">2</span>） 短暂性：客户端与服务器断开连接以后，创建的节点删除；</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token comment\">-- 分为带序号的短暂性节点和不带序号的短暂性节点。</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">-- 如何理解带序号的呢？</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token number\">1</span>） 在zk分布系统中，顺序号用于为所有事物进行全局排序，这样客户端根据顺序号推测事件的顺序。</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token number\">2</span>） 顺序号是指当前节点下的节点数量，不可重复使用。如之前已经创建了一个节点，但是现在将其进行删除，再创建一个节点，顺序号是往后进行累加。</pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">-- 说明</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token number\">1</span>） 短暂节点下不能创建子节点；</pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token number\">2</span>） 一个节点包含该节点的具体存储的内容和子节点的元数据信息。</pre></td></tr></table></figure><h3 id=\"22-stat结构体\"><a class=\"anchor\" href=\"#22-stat结构体\">#</a> 2.2  Stat 结构体</h3>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1</span>）czxid<span class=\"token operator\">-</span>创建节点的事务zxid</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>每次修改ZooKeeper状态都会收到一个zxid形式的时间戳，也就是ZooKeeper事务ID。</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>事务ID是ZooKeeper中所有修改总的次序。每个修改都有唯一的zxid，如果zxid1小于zxid2，那么zxid1在zxid2之前发生。</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">2</span>）ctime 被创建的毫秒数<span class=\"token punctuation\">(</span>从<span class=\"token number\">1970</span>年开始<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">3</span>）mzxid 最后更新的事务zxid</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token number\">4</span>）mtime 最后修改的毫秒数<span class=\"token punctuation\">(</span>从<span class=\"token number\">1970</span>年开始<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token number\">5</span>）pZxid<span class=\"token operator\">-</span>znode最后更新的子节点zxid</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token number\">6</span>）cversion 子节点变化号，znode子节点修改次数</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token number\">7</span>）dataversion 数据变化号</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token number\">8</span>）aclVersion 访问控制列表的变化号</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token number\">9</span>）ephemeralOwner<span class=\"token operator\">-</span> 如果是临时节点，这个是znode拥有者的<span class=\"token keyword\">session</span> id。如果不是临时节点则是<span class=\"token number\">0</span>。</pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token number\">10</span>）dataLength   数据长度</pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token number\">11</span>）numChildren  子节点数量</pre></td></tr></table></figure><h3 id=\"23-监听器原理重点\"><a class=\"anchor\" href=\"#23-监听器原理重点\">#</a> 2.3  监听器原理（重点）</h3>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>监听原理详解：</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token number\">1</span>） 首先有一个main（）线程；</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token number\">2</span>） 在main线程中创建zookeeper客户端，这时就会有两个线程，一个负责网络通信（connet），一个负责监听（listener）；</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token number\">3</span>） 通过<span class=\"token keyword\">connect</span>线程将注册的监听事件发送给zookeeper；</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> <span class=\"token number\">4</span>） 在zookeeper的注册监听器列表中将注册的监听事件添加到列表中；</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> <span class=\"token number\">5</span>） zookeeper监听到有数据或者是路径发生变化时，就会将这个消息发送到listener线程；</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> <span class=\"token number\">6</span>） listener线程内部调用process方法（）；</pre></td></tr></table></figure><h3 id=\"24-选举机制重点\"><a class=\"anchor\" href=\"#24-选举机制重点\">#</a> 2.4  选举机制（重点）</h3>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>总结：选举机制由节点启动的顺序、myid、数据的zxid、服务器的数量有关。</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>大致顺序为：</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">1</span>）zxid大的当选（<span class=\"token number\">99</span><span class=\"token operator\">%</span>情况下都是相等的）；</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">2</span>）根据节点启动的顺序，比较myid，在未到达半数的服务器数量以前，所有节点的票都将投给myid大的服务器，一旦到达了半数以上的服务器被启动（此时可以对外提供服务）时，myid最大的节点当选leader，其余的服务器为follower。</pre></td></tr></table></figure><h3 id=\"25-写数据流程\"><a class=\"anchor\" href=\"#25-写数据流程\">#</a> 2.5  写数据流程</h3>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1</span>） Client 向zookeeper申请写数据，发送一个写请求；</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">2</span>） 如果这个服务器不是leader，则该服务器将接收到的请求转发给leader；</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">3</span>） leader将这个写的请求广播给所有的follower服务器，所有的服务器将写的事件写入队列中，并向leader发送准备就绪的成功消息；</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">4</span>） 当leader收到了半数以上的服务器返回了成功的消息以后，则说明该写的操作可以执行，则leader向所有的follower发送提交消息，所有的服务器收到信息以后则执行队列中的写操作；</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">5</span>） 对应的服务器完成写操作以后会通知client，数据写入成功。</pre></td></tr></table></figure><h2 id=\"三-zookeeper实战部署\"><a class=\"anchor\" href=\"#三-zookeeper实战部署\">#</a> 三、zookeeper 实战部署</h2>\n<h3 id=\"31-客户端命令行操作\"><a class=\"anchor\" href=\"#31-客户端命令行操作\">#</a> 3.1 客户端命令行操作</h3>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1</span>）help : 显示所有的操作指令；</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">2</span>）ls path : 使用ls命令来查看当前znode的子节点</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token operator\">-</span>w ：监听子节点变化（只能监听一次）</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">3</span>） 查看当前目录下的详细信息：</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tls <span class=\"token operator\">-</span>s path <span class=\"token operator\">/</span>  ls2 path <span class=\"token operator\">/</span> stat path </pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token number\">4</span><span class=\"token punctuation\">)</span>  <span class=\"token keyword\">create</span> 创建节点 （默认创建的是：持久性无顺序号的节点）</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t <span class=\"token operator\">-</span>s 含顺序号</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t <span class=\"token operator\">-</span>e 临时的</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token number\">5</span>） get path : 获得节点的值</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>     <span class=\"token operator\">-</span>w  监听节点内容变化</pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token number\">6</span>） <span class=\"token keyword\">set</span> path ：设置节点具体的值</pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token number\">8</span>） <span class=\"token keyword\">delete</span> : 删除节点</pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token number\">9</span>） deleteall：递归删除节点。</pre></td></tr></table></figure><h3 id=\"32-api应用\"><a class=\"anchor\" href=\"#32-api应用\">#</a> 3.2 API 应用</h3>\n<ol>\n<li>创建 Maevn Modle</li>\n<li>添加 pom 文件</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>dependencies<span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t\t<span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>dependency<span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t\t<span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>groupId<span class=\"token punctuation\">></span></span>junit<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>groupId<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t\t<span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>artifactId<span class=\"token punctuation\">></span></span>junit<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>artifactId<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t\t<span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>version<span class=\"token punctuation\">></span></span>RELEASE<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>version<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>dependency<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t<span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>dependency<span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t\t<span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>groupId<span class=\"token punctuation\">></span></span>org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>logging<span class=\"token punctuation\">.</span>log4j<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>groupId<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t\t<span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>artifactId<span class=\"token punctuation\">></span></span>log4j<span class=\"token operator\">-</span>core<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>artifactId<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t\t<span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>version<span class=\"token punctuation\">></span></span><span class=\"token number\">2.8</span><span class=\"token number\">.2</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>version<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>dependency<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t<span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span> https<span class=\"token operator\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>mvnrepository<span class=\"token punctuation\">.</span>com<span class=\"token operator\">/</span>artifact<span class=\"token operator\">/</span>org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>zookeeper<span class=\"token operator\">/</span>zookeeper <span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t<span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>dependency<span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t\t<span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>groupId<span class=\"token punctuation\">></span></span>org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>zookeeper<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>groupId<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t\t<span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>artifactId<span class=\"token punctuation\">></span></span>zookeeper<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>artifactId<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t\t<span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>version<span class=\"token punctuation\">></span></span><span class=\"token number\">3.5</span><span class=\"token number\">.7</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>version<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>dependency<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>dependencies<span class=\"token operator\">></span></pre></td></tr></table></figure><ol start=\"3\">\n<li>需要在项目的 src/main/resources 目录下，新建一个文件，命名为 “log4j.properties”，在文件中填入</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>log4j<span class=\"token punctuation\">.</span>rootLogger<span class=\"token operator\">=</span>INFO<span class=\"token punctuation\">,</span> stdout  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>log4j<span class=\"token punctuation\">.</span>appender<span class=\"token punctuation\">.</span>stdout<span class=\"token operator\">=</span><span class=\"token class-name\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>log4j<span class=\"token punctuation\">.</span></span>ConsoleAppender</span>  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>log4j<span class=\"token punctuation\">.</span>appender<span class=\"token punctuation\">.</span>stdout<span class=\"token punctuation\">.</span>layout<span class=\"token operator\">=</span><span class=\"token class-name\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>log4j<span class=\"token punctuation\">.</span></span>PatternLayout</span>  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token class-name\"><span class=\"token namespace\">log4j<span class=\"token punctuation\">.</span>appender<span class=\"token punctuation\">.</span>stdout<span class=\"token punctuation\">.</span>layout<span class=\"token punctuation\">.</span></span>ConversionPattern</span><span class=\"token operator\">=</span><span class=\"token operator\">%</span>d <span class=\"token operator\">%</span>p <span class=\"token punctuation\">[</span><span class=\"token operator\">%</span>c<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token operator\">%</span>m<span class=\"token operator\">%</span>n  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>log4j<span class=\"token punctuation\">.</span>appender<span class=\"token punctuation\">.</span>logfile<span class=\"token operator\">=</span><span class=\"token class-name\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>log4j<span class=\"token punctuation\">.</span></span>FileAppender</span>  </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token class-name\"><span class=\"token namespace\">log4j<span class=\"token punctuation\">.</span>appender<span class=\"token punctuation\">.</span>logfile<span class=\"token punctuation\">.</span></span>File</span><span class=\"token operator\">=</span>target<span class=\"token operator\">/</span>spring<span class=\"token punctuation\">.</span>log  </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>log4j<span class=\"token punctuation\">.</span>appender<span class=\"token punctuation\">.</span>logfile<span class=\"token punctuation\">.</span>layout<span class=\"token operator\">=</span><span class=\"token class-name\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>log4j<span class=\"token punctuation\">.</span></span>PatternLayout</span>  </pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token class-name\"><span class=\"token namespace\">log4j<span class=\"token punctuation\">.</span>appender<span class=\"token punctuation\">.</span>logfile<span class=\"token punctuation\">.</span>layout<span class=\"token punctuation\">.</span></span>ConversionPattern</span><span class=\"token operator\">=</span><span class=\"token operator\">%</span>d <span class=\"token operator\">%</span>p <span class=\"token punctuation\">[</span><span class=\"token operator\">%</span>c<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token operator\">%</span>m<span class=\"token operator\">%</span>n</pre></td></tr></table></figure><ol start=\"4\">\n<li>创建 zookeeper 客户端</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> connectString <span class=\"token operator\">=</span><span class=\"token string\">\"hadoop102:2181,hadoop103:2181,hadoop104:2181\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> sessionTimeout <span class=\"token operator\">=</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">ZooKeeper</span> zkClient <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token annotation punctuation\">@Before</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\tzkClient <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ZooKeeper</span><span class=\"token punctuation\">(</span>connectString<span class=\"token punctuation\">,</span> sessionTimeout<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Watcher</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t\t<span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">process</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">WatchedEvent</span> event<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t\t\t<span class=\"token comment\">// 收到事件通知后的回调函数（用户的业务逻辑）</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span><span class=\"token function\">getType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"--\"</span> <span class=\"token operator\">+</span> event<span class=\"token punctuation\">.</span><span class=\"token function\">getPath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t\t\t<span class=\"token comment\">// 再次启动监听</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t\t\t\tzkClient<span class=\"token punctuation\">.</span><span class=\"token function\">getChildren</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t\t\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t\t\t\te<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"5\">\n<li>创建子节点</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 创建子节点</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t<span class=\"token comment\">// 参数 1：要创建的节点的路径； 参数 2：节点数据 ； 参数 3：节点权限 ；参数 4：节点的类型</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token class-name\">String</span> nodeCreated <span class=\"token operator\">=</span> zkClient<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/miyazono\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"jinlian\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Ids</span><span class=\"token punctuation\">.</span>OPEN_ACL_UNSAFE<span class=\"token punctuation\">,</span> <span class=\"token class-name\">CreateMode</span><span class=\"token punctuation\">.</span>PERSISTENT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"6\">\n<li>获取子节点并监听节点变化</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 获取子节点</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">getChildren</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t<span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> children <span class=\"token operator\">=</span> zkClient<span class=\"token punctuation\">.</span><span class=\"token function\">getChildren</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> child <span class=\"token operator\">:</span> children<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t<span class=\"token comment\">// 延时阻塞</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t<span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Long</span><span class=\"token punctuation\">.</span>MAX_VALUE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"7\">\n<li>判断 zonde 是否存在</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 判断 znode 是否存在</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">exist</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token class-name\">Stat</span> stat <span class=\"token operator\">=</span> zkClient<span class=\"token punctuation\">.</span><span class=\"token function\">exists</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/eclipse\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>stat <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">?</span> <span class=\"token string\">\"not exist\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"exist\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"33-监听服务器节点动态上下线案例\"><a class=\"anchor\" href=\"#33-监听服务器节点动态上下线案例\">#</a> 3.3 监听服务器节点动态上下线案例</h3>\n<p>服务器端向 Zookeeper 注册代码</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>miyazono<span class=\"token punctuation\">.</span>zkcase</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>miyazono<span class=\"token punctuation\">.</span>zookeeper</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>zookeeper<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>zookeeper<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Stat</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IOException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> *  当服务器上线后， 将当前服务器对应的信息写到 zk 中</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Server</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> connectionString <span class=\"token operator\">=</span> <span class=\"token string\">\"hadoop102:2181,hadoop103:2181,hadoop104:2181\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> sessionTimeOut <span class=\"token operator\">=</span> <span class=\"token number\">10000</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">ZooKeeper</span> zkClient <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span>  parentNode <span class=\"token operator\">=</span> <span class=\"token string\">\"/servers\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token class-name\">Server</span> server <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Server</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token comment\">//1. 初始化 zk 客户端对象</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        server<span class=\"token punctuation\">.</span><span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token comment\">//2. 判断 zk 中存储服务器信息的 Znode 是否存在</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        server<span class=\"token punctuation\">.</span><span class=\"token function\">parentNodeExists</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token comment\">//3. 将服务器的信息写入到 zk 中</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        server<span class=\"token punctuation\">.</span><span class=\"token function\">writeServer</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token comment\">//4. 保持线程不结束</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Long</span><span class=\"token punctuation\">.</span>MAX_VALUE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>     * args 中包含两个数据:</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>     *  1. server 的名字</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>     *  2. server 的信息</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>     * @param args</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">writeServer</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">KeeperException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token class-name\">String</span> s <span class=\"token operator\">=</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>                zkClient<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>parentNode <span class=\"token operator\">+</span> <span class=\"token string\">\"/\"</span> <span class=\"token operator\">+</span> args<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ZooDefs<span class=\"token punctuation\">.</span>Ids</span><span class=\"token punctuation\">.</span>OPEN_ACL_UNSAFE<span class=\"token punctuation\">,</span> <span class=\"token class-name\">CreateMode</span><span class=\"token punctuation\">.</span>EPHEMERAL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"*********** \"</span><span class=\"token operator\">+</span> s <span class=\"token operator\">+</span><span class=\"token string\">\"is on line  ************\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre> <span class=\"token comment\">//2. 判断 zk 中存储服务器信息的 Znode 是否存在</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">parentNodeExists</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">KeeperException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token class-name\">Stat</span> stat <span class=\"token operator\">=</span> zkClient<span class=\"token punctuation\">.</span><span class=\"token function\">exists</span><span class=\"token punctuation\">(</span>parentNode<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>stat <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>            <span class=\"token comment\">// 创建节点</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>            zkClient<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>parentNode<span class=\"token punctuation\">,</span><span class=\"token string\">\"servers\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ZooDefs<span class=\"token punctuation\">.</span>Ids</span><span class=\"token punctuation\">.</span>OPEN_ACL_UNSAFE<span class=\"token punctuation\">,</span><span class=\"token class-name\">CreateMode</span><span class=\"token punctuation\">.</span>PERSISTENT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t<span class=\"token comment\">//1. 初始化 zk 客户端对象</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        zkClient <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ZooKeeper</span><span class=\"token punctuation\">(</span>connectionString<span class=\"token punctuation\">,</span> sessionTimeOut<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Watcher</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>            <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>            <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">process</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">WatchedEvent</span> event<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>客户端代码</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>miyazono<span class=\"token punctuation\">.</span>zkcase</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IOException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ArrayList</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">List</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>zookeeper<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">WatchedEvent</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>zookeeper<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Watcher</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>zookeeper<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ZooKeeper</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DistributeClient</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> connectString <span class=\"token operator\">=</span> <span class=\"token string\">\"hadoop102:2181,hadoop103:2181,hadoop104:2181\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> sessionTimeout <span class=\"token operator\">=</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">ZooKeeper</span> zk <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> parentNode <span class=\"token operator\">=</span> <span class=\"token string\">\"/servers\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token comment\">// 创建到 zk 的客户端连接</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">getConnect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\tzk <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ZooKeeper</span><span class=\"token punctuation\">(</span>connectString<span class=\"token punctuation\">,</span> sessionTimeout<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Watcher</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t\t<span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">process</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">WatchedEvent</span> event<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t\t\t<span class=\"token comment\">// 再次启动监听</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t\t\t\t<span class=\"token function\">getServerList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\t\t\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\t\t\t\te<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t<span class=\"token comment\">// 获取服务器列表信息</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">getServerList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t\t<span class=\"token comment\">// 1 获取服务器子节点信息，并且对父节点进行监听</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t\t<span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> children <span class=\"token operator\">=</span> zk<span class=\"token punctuation\">.</span><span class=\"token function\">getChildren</span><span class=\"token punctuation\">(</span>parentNode<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token comment\">// 2 存储服务器信息列表</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t\t<span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> servers <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token comment\">// 3 遍历所有节点，获取节点中的主机名称信息</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> child <span class=\"token operator\">:</span> children<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t\t\t<span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> data <span class=\"token operator\">=</span> zk<span class=\"token punctuation\">.</span><span class=\"token function\">getData</span><span class=\"token punctuation\">(</span>parentNode <span class=\"token operator\">+</span> <span class=\"token string\">\"/\"</span> <span class=\"token operator\">+</span> child<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t\t\tservers<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token comment\">// 4 打印服务器列表信息</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>servers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t<span class=\"token comment\">// 业务功能</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">business</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"client is working ...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Long</span><span class=\"token punctuation\">.</span>MAX_VALUE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\t\t<span class=\"token comment\">// 1 获取 zk 连接</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>\t\t<span class=\"token class-name\">DistributeClient</span> client <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DistributeClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>\t\tclient<span class=\"token punctuation\">.</span><span class=\"token function\">getConnect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>\t\t<span class=\"token comment\">// 2 获取 servers 的子节点信息，从中获取服务器信息列表</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>\t\tclient<span class=\"token punctuation\">.</span><span class=\"token function\">getServerList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>\t\t<span class=\"token comment\">// 3 业务进程启动</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>\t\tclient<span class=\"token punctuation\">.</span><span class=\"token function\">business</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "大数据",
                "Zookeeper"
            ]
        },
        {
            "id": "https://github.com/Mayizono/miyazono.github.io/big-data/flume/Flume%E7%BB%83%E4%B9%A0/",
            "url": "https://github.com/Mayizono/miyazono.github.io/big-data/flume/Flume%E7%BB%83%E4%B9%A0/",
            "title": "Flume练习题",
            "date_published": "2019-01-03T16:00:00.000Z",
            "content_html": "<h1 id=\"flume练习题\"><a class=\"anchor\" href=\"#flume练习题\">#</a> Flume 练习题</h1>\n<hr />\n<h2 id=\"题目1\"><a class=\"anchor\" href=\"#题目1\">#</a> 题目 1</h2>\n<p>需求：使用 Flume 监听一个端口，收集该端口数据，并打印到控制台。</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#步骤一：agent Name</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sources <span class=\"token operator\">=</span> r1</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sinks <span class=\"token operator\">=</span> k1</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>a1<span class=\"token punctuation\">.</span>channels <span class=\"token operator\">=</span> c1</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">#步骤二：source</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sources<span class=\"token punctuation\">.</span>r1<span class=\"token punctuation\">.</span><span class=\"token keyword\">type</span> <span class=\"token operator\">=</span> netcat</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sources<span class=\"token punctuation\">.</span>r1<span class=\"token punctuation\">.</span>bind <span class=\"token operator\">=</span> localhost </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sources<span class=\"token punctuation\">.</span>r1<span class=\"token punctuation\">.</span>port <span class=\"token operator\">=</span> <span class=\"token number\">44444</span>  </pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">#步骤三： channel selector</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sources<span class=\"token punctuation\">.</span>r1<span class=\"token punctuation\">.</span>selector<span class=\"token punctuation\">.</span><span class=\"token keyword\">type</span> <span class=\"token operator\">=</span> replicating</pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">#步骤四： channel</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\"># Describe the channel</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>a1<span class=\"token punctuation\">.</span>channels<span class=\"token punctuation\">.</span>c1<span class=\"token punctuation\">.</span><span class=\"token keyword\">type</span> <span class=\"token operator\">=</span> memory</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>a1<span class=\"token punctuation\">.</span>channels<span class=\"token punctuation\">.</span>c1<span class=\"token punctuation\">.</span>capacity <span class=\"token operator\">=</span> <span class=\"token number\">1000</span> </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>a1<span class=\"token punctuation\">.</span>channels<span class=\"token punctuation\">.</span>c1<span class=\"token punctuation\">.</span>transactionCapacity <span class=\"token operator\">=</span> <span class=\"token number\">100</span> </pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">#步骤五： sinkprocessor，默认配置 defaultsinkprocessor</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\">#步骤六： sink</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\"># Describe the sink</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sinks<span class=\"token punctuation\">.</span>k1<span class=\"token punctuation\">.</span><span class=\"token keyword\">type</span> <span class=\"token operator\">=</span> logger</pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token comment\">#步骤七：连接 source、channel、sink</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sources<span class=\"token punctuation\">.</span>r1<span class=\"token punctuation\">.</span>channels <span class=\"token operator\">=</span> c1</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sinks<span class=\"token punctuation\">.</span>k1<span class=\"token punctuation\">.</span>channel <span class=\"token operator\">=</span> c1</pre></td></tr></table></figure><h2 id=\"题目2\"><a class=\"anchor\" href=\"#题目2\">#</a> 题目 2</h2>\n<p>实时监控 Hive 日志，并上传到 HDFS 中</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#步骤一：agent Name</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sources <span class=\"token operator\">=</span> r1</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sinks <span class=\"token operator\">=</span> k1</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>a1<span class=\"token punctuation\">.</span>channels <span class=\"token operator\">=</span> c1</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">#步骤二：source</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sources<span class=\"token punctuation\">.</span>r1<span class=\"token punctuation\">.</span><span class=\"token keyword\">type</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">exec</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sources<span class=\"token punctuation\">.</span>r1<span class=\"token punctuation\">.</span>command <span class=\"token operator\">=</span> tail <span class=\"token operator\">-</span>F <span class=\"token operator\">/</span>opt<span class=\"token operator\">/</span>module<span class=\"token operator\">/</span>hive<span class=\"token operator\">/</span>logs<span class=\"token operator\">/</span>hive<span class=\"token punctuation\">.</span>log </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sources<span class=\"token punctuation\">.</span>r1<span class=\"token punctuation\">.</span>shell <span class=\"token operator\">=</span> <span class=\"token operator\">/</span>bin<span class=\"token operator\">/</span>bash <span class=\"token operator\">-</span>c</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">#步骤三： channel selector</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sources<span class=\"token punctuation\">.</span>r1<span class=\"token punctuation\">.</span>selector<span class=\"token punctuation\">.</span><span class=\"token keyword\">type</span> <span class=\"token operator\">=</span> replicating</pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">#步骤四： channel</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\"># Describe the channel</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>a1<span class=\"token punctuation\">.</span>channels<span class=\"token punctuation\">.</span>c1<span class=\"token punctuation\">.</span><span class=\"token keyword\">type</span> <span class=\"token operator\">=</span> memory</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>a1<span class=\"token punctuation\">.</span>channels<span class=\"token punctuation\">.</span>c1<span class=\"token punctuation\">.</span>capacity <span class=\"token operator\">=</span> <span class=\"token number\">1000</span> </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>a1<span class=\"token punctuation\">.</span>channels<span class=\"token punctuation\">.</span>c1<span class=\"token punctuation\">.</span>transactionCapacity <span class=\"token operator\">=</span> <span class=\"token number\">100</span> </pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">#步骤五： sinkprocessor，默认配置 defaultsinkprocessor</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\">#步骤六： sink</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sinks<span class=\"token punctuation\">.</span>k1<span class=\"token punctuation\">.</span><span class=\"token keyword\">type</span> <span class=\"token operator\">=</span> hdfs</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sinks<span class=\"token punctuation\">.</span>k1<span class=\"token punctuation\">.</span>hdfs<span class=\"token punctuation\">.</span>path <span class=\"token operator\">=</span> hdfs:<span class=\"token comment\">//hadoop102:9820/flume/upload2/%Y%m%d/%H   </span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\">#上传文件的前缀</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sinks<span class=\"token punctuation\">.</span>k1<span class=\"token punctuation\">.</span>hdfs<span class=\"token punctuation\">.</span>filePrefix <span class=\"token operator\">=</span> upload<span class=\"token operator\">-</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\">#是否按照时间滚动文件夹</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sinks<span class=\"token punctuation\">.</span>k1<span class=\"token punctuation\">.</span>hdfs<span class=\"token punctuation\">.</span>round <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token comment\">#多少时间单位创建一个新的文件夹</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sinks<span class=\"token punctuation\">.</span>k1<span class=\"token punctuation\">.</span>hdfs<span class=\"token punctuation\">.</span>roundValue <span class=\"token operator\">=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token comment\">#重新定义时间单位</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sinks<span class=\"token punctuation\">.</span>k1<span class=\"token punctuation\">.</span>hdfs<span class=\"token punctuation\">.</span>roundUnit <span class=\"token operator\">=</span> <span class=\"token keyword\">hour</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token comment\">#是否使用本地时间戳</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sinks<span class=\"token punctuation\">.</span>k1<span class=\"token punctuation\">.</span>hdfs<span class=\"token punctuation\">.</span>useLocalTimeStamp <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token comment\">#积攒多少个 Event 才 flush 到 HDFS 一次</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sinks<span class=\"token punctuation\">.</span>k1<span class=\"token punctuation\">.</span>hdfs<span class=\"token punctuation\">.</span>batchSize <span class=\"token operator\">=</span> <span class=\"token number\">100</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token comment\">#设置文件类型，可支持压缩</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sinks<span class=\"token punctuation\">.</span>k1<span class=\"token punctuation\">.</span>hdfs<span class=\"token punctuation\">.</span>fileType <span class=\"token operator\">=</span> DataStream</pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token comment\">#多久生成一个新的文件</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sinks<span class=\"token punctuation\">.</span>k1<span class=\"token punctuation\">.</span>hdfs<span class=\"token punctuation\">.</span>rollInterval <span class=\"token operator\">=</span> <span class=\"token number\">60</span> </pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token comment\">#设置每个文件的滚动大小大概是 128M</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sinks<span class=\"token punctuation\">.</span>k1<span class=\"token punctuation\">.</span>hdfs<span class=\"token punctuation\">.</span>rollSize <span class=\"token operator\">=</span> <span class=\"token number\">134217700</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token comment\">#文件的滚动与 Event 数量无关</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sinks<span class=\"token punctuation\">.</span>k1<span class=\"token punctuation\">.</span>hdfs<span class=\"token punctuation\">.</span>rollCount <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token comment\">#步骤七：连接 source、channel、sink</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sources<span class=\"token punctuation\">.</span>r1<span class=\"token punctuation\">.</span>channels <span class=\"token operator\">=</span> c1</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sinks<span class=\"token punctuation\">.</span>k1<span class=\"token punctuation\">.</span>channel <span class=\"token operator\">=</span> c1</pre></td></tr></table></figure><h2 id=\"题目3\"><a class=\"anchor\" href=\"#题目3\">#</a> 题目 3</h2>\n<p>使用 Flume 监听整个目录的文件，并上传至 HDFS</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#步骤一：agent Name</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sources <span class=\"token operator\">=</span> r1</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sinks <span class=\"token operator\">=</span> k1</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>a1<span class=\"token punctuation\">.</span>channels <span class=\"token operator\">=</span> c1</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">#步骤二：source</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\"># Describe/configure the source</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sources<span class=\"token punctuation\">.</span>r1<span class=\"token punctuation\">.</span><span class=\"token keyword\">type</span> <span class=\"token operator\">=</span> spooldir </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sources<span class=\"token punctuation\">.</span>r1<span class=\"token punctuation\">.</span>spoolDir <span class=\"token operator\">=</span> <span class=\"token operator\">/</span>opt<span class=\"token operator\">/</span>module<span class=\"token operator\">/</span>flume<span class=\"token operator\">/</span>upload </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sources<span class=\"token punctuation\">.</span>r1<span class=\"token punctuation\">.</span>fileSuffix <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span>COMPLETED </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sources<span class=\"token punctuation\">.</span>r1<span class=\"token punctuation\">.</span>fileHeader <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span> </pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">#忽略所有以.tmp 结尾的文件，不上传</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sources<span class=\"token punctuation\">.</span>r1<span class=\"token punctuation\">.</span>ignorePattern <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token operator\">^</span> <span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>\\<span class=\"token punctuation\">.</span>tmp<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">#步骤三： channel selector</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sources<span class=\"token punctuation\">.</span>r1<span class=\"token punctuation\">.</span>selector<span class=\"token punctuation\">.</span><span class=\"token keyword\">type</span> <span class=\"token operator\">=</span> replicating</pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">#步骤四： channel</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\"># Describe the channel</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>a1<span class=\"token punctuation\">.</span>channels<span class=\"token punctuation\">.</span>c1<span class=\"token punctuation\">.</span><span class=\"token keyword\">type</span> <span class=\"token operator\">=</span> memory</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>a1<span class=\"token punctuation\">.</span>channels<span class=\"token punctuation\">.</span>c1<span class=\"token punctuation\">.</span>capacity <span class=\"token operator\">=</span> <span class=\"token number\">1000</span> </pre></td></tr><tr><td data-num=\"20\"></td><td><pre>a1<span class=\"token punctuation\">.</span>channels<span class=\"token punctuation\">.</span>c1<span class=\"token punctuation\">.</span>transactionCapacity <span class=\"token operator\">=</span> <span class=\"token number\">100</span> </pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\">#步骤五： sinkprocessor，默认配置 defaultsinkprocessor</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\">#步骤六： sink</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sinks<span class=\"token punctuation\">.</span>k1<span class=\"token punctuation\">.</span><span class=\"token keyword\">type</span> <span class=\"token operator\">=</span> hdfs</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sinks<span class=\"token punctuation\">.</span>k1<span class=\"token punctuation\">.</span>hdfs<span class=\"token punctuation\">.</span>path <span class=\"token operator\">=</span> hdfs:<span class=\"token comment\">//hadoop102:9820/flume/upload/%Y%m%d/%H   </span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token comment\">#上传文件的前缀</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sinks<span class=\"token punctuation\">.</span>k1<span class=\"token punctuation\">.</span>hdfs<span class=\"token punctuation\">.</span>filePrefix <span class=\"token operator\">=</span> upload<span class=\"token operator\">-</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token comment\">#是否按照时间滚动文件夹</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sinks<span class=\"token punctuation\">.</span>k1<span class=\"token punctuation\">.</span>hdfs<span class=\"token punctuation\">.</span>round <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token comment\">#多少时间单位创建一个新的文件夹</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sinks<span class=\"token punctuation\">.</span>k1<span class=\"token punctuation\">.</span>hdfs<span class=\"token punctuation\">.</span>roundValue <span class=\"token operator\">=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token comment\">#重新定义时间单位</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sinks<span class=\"token punctuation\">.</span>k1<span class=\"token punctuation\">.</span>hdfs<span class=\"token punctuation\">.</span>roundUnit <span class=\"token operator\">=</span> <span class=\"token keyword\">hour</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token comment\">#是否使用本地时间戳</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sinks<span class=\"token punctuation\">.</span>k1<span class=\"token punctuation\">.</span>hdfs<span class=\"token punctuation\">.</span>useLocalTimeStamp <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token comment\">#积攒多少个 Event 才 flush 到 HDFS 一次</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sinks<span class=\"token punctuation\">.</span>k1<span class=\"token punctuation\">.</span>hdfs<span class=\"token punctuation\">.</span>batchSize <span class=\"token operator\">=</span> <span class=\"token number\">100</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token comment\">#设置文件类型，可支持压缩</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sinks<span class=\"token punctuation\">.</span>k1<span class=\"token punctuation\">.</span>hdfs<span class=\"token punctuation\">.</span>fileType <span class=\"token operator\">=</span> DataStream</pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token comment\">#多久生成一个新的文件</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sinks<span class=\"token punctuation\">.</span>k1<span class=\"token punctuation\">.</span>hdfs<span class=\"token punctuation\">.</span>rollInterval <span class=\"token operator\">=</span> <span class=\"token number\">60</span> </pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token comment\">#设置每个文件的滚动大小大概是 128M</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sinks<span class=\"token punctuation\">.</span>k1<span class=\"token punctuation\">.</span>hdfs<span class=\"token punctuation\">.</span>rollSize <span class=\"token operator\">=</span> <span class=\"token number\">134217700</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token comment\">#文件的滚动与 Event 数量无关</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sinks<span class=\"token punctuation\">.</span>k1<span class=\"token punctuation\">.</span>hdfs<span class=\"token punctuation\">.</span>rollCount <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token comment\">#步骤七：连接 source、channel、sink</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sources<span class=\"token punctuation\">.</span>r1<span class=\"token punctuation\">.</span>channels <span class=\"token operator\">=</span> c1</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sinks<span class=\"token punctuation\">.</span>k1<span class=\"token punctuation\">.</span>channel <span class=\"token operator\">=</span> c1</pre></td></tr></table></figure><h2 id=\"题目4\"><a class=\"anchor\" href=\"#题目4\">#</a> 题目 4</h2>\n<p>使用 Flume 监听整个目录的实时追加文件，并上传至 HDFS</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#步骤一：agent Name</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sources <span class=\"token operator\">=</span> r1</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sinks <span class=\"token operator\">=</span> k1</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>a1<span class=\"token punctuation\">.</span>channels <span class=\"token operator\">=</span> c1</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">#步骤二：source</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\"># Describe/configure the source</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sources<span class=\"token punctuation\">.</span>r1<span class=\"token punctuation\">.</span><span class=\"token keyword\">type</span> <span class=\"token operator\">=</span> TAILDIR </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sources<span class=\"token punctuation\">.</span>r1<span class=\"token punctuation\">.</span>positionFile <span class=\"token operator\">=</span> <span class=\"token operator\">/</span>opt<span class=\"token operator\">/</span>module<span class=\"token operator\">/</span>flume<span class=\"token operator\">/</span>tail_dir<span class=\"token punctuation\">.</span>json <span class=\"token comment\">-- 指定 position_file 的位置 (记录每次上传后的偏移量，实现断点续传的关键)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sources<span class=\"token punctuation\">.</span>r1<span class=\"token punctuation\">.</span>filegroups <span class=\"token operator\">=</span> f1 f2 <span class=\"token comment\">-- 监控的文件目录集合</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sources<span class=\"token punctuation\">.</span>r1<span class=\"token punctuation\">.</span>filegroups<span class=\"token punctuation\">.</span>f1 <span class=\"token operator\">=</span> <span class=\"token operator\">/</span>opt<span class=\"token operator\">/</span>module<span class=\"token operator\">/</span>flume<span class=\"token operator\">/</span>files<span class=\"token operator\">/</span><span class=\"token punctuation\">.</span><span class=\"token operator\">*</span><span class=\"token keyword\">file</span><span class=\"token punctuation\">.</span><span class=\"token operator\">*</span> <span class=\"token comment\">-- 定义监控的文件目录 1</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sources<span class=\"token punctuation\">.</span>r1<span class=\"token punctuation\">.</span>filegroups<span class=\"token punctuation\">.</span>f2 <span class=\"token operator\">=</span> <span class=\"token operator\">/</span>opt<span class=\"token operator\">/</span>module<span class=\"token operator\">/</span>flume<span class=\"token operator\">/</span>files<span class=\"token operator\">/</span><span class=\"token punctuation\">.</span><span class=\"token operator\">*</span>log<span class=\"token punctuation\">.</span><span class=\"token operator\">*</span> <span class=\"token comment\">-- 定义监控的文件目录 2</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">#步骤三： channel selector</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sources<span class=\"token punctuation\">.</span>r1<span class=\"token punctuation\">.</span>selector<span class=\"token punctuation\">.</span><span class=\"token keyword\">type</span> <span class=\"token operator\">=</span> replicating</pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">#步骤四： channel</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\"># Describe the channel</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>a1<span class=\"token punctuation\">.</span>channels<span class=\"token punctuation\">.</span>c1<span class=\"token punctuation\">.</span><span class=\"token keyword\">type</span> <span class=\"token operator\">=</span> memory</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>a1<span class=\"token punctuation\">.</span>channels<span class=\"token punctuation\">.</span>c1<span class=\"token punctuation\">.</span>capacity <span class=\"token operator\">=</span> <span class=\"token number\">1000</span> </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>a1<span class=\"token punctuation\">.</span>channels<span class=\"token punctuation\">.</span>c1<span class=\"token punctuation\">.</span>transactionCapacity <span class=\"token operator\">=</span> <span class=\"token number\">100</span> </pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\">#步骤五： sinkprocessor，默认配置 defaultsinkprocessor</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\">#步骤六： sink</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sinks<span class=\"token punctuation\">.</span>k1<span class=\"token punctuation\">.</span><span class=\"token keyword\">type</span> <span class=\"token operator\">=</span> hdfs</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sinks<span class=\"token punctuation\">.</span>k1<span class=\"token punctuation\">.</span>hdfs<span class=\"token punctuation\">.</span>path <span class=\"token operator\">=</span> hdfs:<span class=\"token comment\">//hadoop102:9820/flume/upload3/%Y%m%d/%H   </span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token comment\">#上传文件的前缀</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sinks<span class=\"token punctuation\">.</span>k1<span class=\"token punctuation\">.</span>hdfs<span class=\"token punctuation\">.</span>filePrefix <span class=\"token operator\">=</span> upload<span class=\"token operator\">-</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token comment\">#是否按照时间滚动文件夹</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sinks<span class=\"token punctuation\">.</span>k1<span class=\"token punctuation\">.</span>hdfs<span class=\"token punctuation\">.</span>round <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token comment\">#多少时间单位创建一个新的文件夹</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sinks<span class=\"token punctuation\">.</span>k1<span class=\"token punctuation\">.</span>hdfs<span class=\"token punctuation\">.</span>roundValue <span class=\"token operator\">=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token comment\">#重新定义时间单位</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sinks<span class=\"token punctuation\">.</span>k1<span class=\"token punctuation\">.</span>hdfs<span class=\"token punctuation\">.</span>roundUnit <span class=\"token operator\">=</span> <span class=\"token keyword\">hour</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token comment\">#是否使用本地时间戳</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sinks<span class=\"token punctuation\">.</span>k1<span class=\"token punctuation\">.</span>hdfs<span class=\"token punctuation\">.</span>useLocalTimeStamp <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token comment\">#积攒多少个 Event 才 flush 到 HDFS 一次</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sinks<span class=\"token punctuation\">.</span>k1<span class=\"token punctuation\">.</span>hdfs<span class=\"token punctuation\">.</span>batchSize <span class=\"token operator\">=</span> <span class=\"token number\">100</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token comment\">#设置文件类型，可支持压缩</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sinks<span class=\"token punctuation\">.</span>k1<span class=\"token punctuation\">.</span>hdfs<span class=\"token punctuation\">.</span>fileType <span class=\"token operator\">=</span> DataStream</pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token comment\">#多久生成一个新的文件</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sinks<span class=\"token punctuation\">.</span>k1<span class=\"token punctuation\">.</span>hdfs<span class=\"token punctuation\">.</span>rollInterval <span class=\"token operator\">=</span> <span class=\"token number\">60</span> </pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token comment\">#设置每个文件的滚动大小大概是 128M</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sinks<span class=\"token punctuation\">.</span>k1<span class=\"token punctuation\">.</span>hdfs<span class=\"token punctuation\">.</span>rollSize <span class=\"token operator\">=</span> <span class=\"token number\">134217700</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token comment\">#文件的滚动与 Event 数量无关</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sinks<span class=\"token punctuation\">.</span>k1<span class=\"token punctuation\">.</span>hdfs<span class=\"token punctuation\">.</span>rollCount <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token comment\">#步骤七：连接 source、channel、sink</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sources<span class=\"token punctuation\">.</span>r1<span class=\"token punctuation\">.</span>channels <span class=\"token operator\">=</span> c1</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sinks<span class=\"token punctuation\">.</span>k1<span class=\"token punctuation\">.</span>channel <span class=\"token operator\">=</span> c1</pre></td></tr></table></figure><h2 id=\"题目5\"><a class=\"anchor\" href=\"#题目5\">#</a> 题目 5</h2>\n<p>使用 Flume-1 监控文件变动，Flume-1 将变动内容传递给 Flume-2，Flume-2 负责存储到 HDFS。同时 Flume-1 将变动内容传递给 Flume-3，Flume-3 负责输出到 Local FileSystem。</p>\n<ul>\n<li>flume1：</li>\n</ul>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#步骤一：agent Name</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sources <span class=\"token operator\">=</span> r1</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sinks <span class=\"token operator\">=</span> k1 k2</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>a1<span class=\"token punctuation\">.</span>channels <span class=\"token operator\">=</span> c1 c2</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">#步骤二：source</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\"># Describe/configure the source</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sources<span class=\"token punctuation\">.</span>r1<span class=\"token punctuation\">.</span><span class=\"token keyword\">type</span> <span class=\"token operator\">=</span> TAILDIR </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sources<span class=\"token punctuation\">.</span>r1<span class=\"token punctuation\">.</span>positionFile <span class=\"token operator\">=</span> <span class=\"token operator\">/</span>opt<span class=\"token operator\">/</span>module<span class=\"token operator\">/</span>flume<span class=\"token operator\">/</span>tail_dir<span class=\"token punctuation\">.</span>json </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sources<span class=\"token punctuation\">.</span>r1<span class=\"token punctuation\">.</span>filegroups <span class=\"token operator\">=</span> f1</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sources<span class=\"token punctuation\">.</span>r1<span class=\"token punctuation\">.</span>filegroups<span class=\"token punctuation\">.</span>f1 <span class=\"token operator\">=</span> <span class=\"token operator\">/</span>opt<span class=\"token operator\">/</span>module<span class=\"token operator\">/</span>flume<span class=\"token operator\">/</span>files<span class=\"token operator\">/</span><span class=\"token punctuation\">.</span><span class=\"token operator\">*</span>log<span class=\"token punctuation\">.</span><span class=\"token operator\">*</span> </pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">#步骤三： channel selector</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sources<span class=\"token punctuation\">.</span>r1<span class=\"token punctuation\">.</span>selector<span class=\"token punctuation\">.</span><span class=\"token keyword\">type</span> <span class=\"token operator\">=</span> replicating</pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">#步骤四： channel</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\"># Describe the channel</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>a1<span class=\"token punctuation\">.</span>channels<span class=\"token punctuation\">.</span>c1<span class=\"token punctuation\">.</span><span class=\"token keyword\">type</span> <span class=\"token operator\">=</span> memory</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>a1<span class=\"token punctuation\">.</span>channels<span class=\"token punctuation\">.</span>c1<span class=\"token punctuation\">.</span>capacity <span class=\"token operator\">=</span> <span class=\"token number\">1000</span> </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>a1<span class=\"token punctuation\">.</span>channels<span class=\"token punctuation\">.</span>c1<span class=\"token punctuation\">.</span>transactionCapacity <span class=\"token operator\">=</span> <span class=\"token number\">100</span> </pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>a1<span class=\"token punctuation\">.</span>channels<span class=\"token punctuation\">.</span>c2<span class=\"token punctuation\">.</span><span class=\"token keyword\">type</span> <span class=\"token operator\">=</span> memory</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>a1<span class=\"token punctuation\">.</span>channels<span class=\"token punctuation\">.</span>c2<span class=\"token punctuation\">.</span>capacity <span class=\"token operator\">=</span> <span class=\"token number\">1000</span> </pre></td></tr><tr><td data-num=\"21\"></td><td><pre>a1<span class=\"token punctuation\">.</span>channels<span class=\"token punctuation\">.</span>c2<span class=\"token punctuation\">.</span>transactionCapacity <span class=\"token operator\">=</span> <span class=\"token number\">100</span> </pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\">#步骤五： sinkprocessor，默认配置 defaultsinkprocessor</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\">#步骤六： sink</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token comment\"># Describe the sink</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sinks<span class=\"token punctuation\">.</span>k1<span class=\"token punctuation\">.</span><span class=\"token keyword\">type</span> <span class=\"token operator\">=</span> avro</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sinks<span class=\"token punctuation\">.</span>k1<span class=\"token punctuation\">.</span>hostname <span class=\"token operator\">=</span> hadoop103 </pre></td></tr><tr><td data-num=\"27\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sinks<span class=\"token punctuation\">.</span>k1<span class=\"token punctuation\">.</span>port <span class=\"token operator\">=</span> <span class=\"token number\">6666</span>  </pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sinks<span class=\"token punctuation\">.</span>k2<span class=\"token punctuation\">.</span><span class=\"token keyword\">type</span> <span class=\"token operator\">=</span> avro</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sinks<span class=\"token punctuation\">.</span>k2<span class=\"token punctuation\">.</span>hostname <span class=\"token operator\">=</span> hadoop104 </pre></td></tr><tr><td data-num=\"31\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sinks<span class=\"token punctuation\">.</span>k2<span class=\"token punctuation\">.</span>port <span class=\"token operator\">=</span> <span class=\"token number\">8888</span>  </pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token comment\">#步骤七：连接 source、channel、sink</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sources<span class=\"token punctuation\">.</span>r1<span class=\"token punctuation\">.</span>channels <span class=\"token operator\">=</span> c1 c2</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sinks<span class=\"token punctuation\">.</span>k1<span class=\"token punctuation\">.</span>channel <span class=\"token operator\">=</span> c1</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sinks<span class=\"token punctuation\">.</span>k2<span class=\"token punctuation\">.</span>channel <span class=\"token operator\">=</span> c2</pre></td></tr></table></figure><ul>\n<li>flume2:</li>\n</ul>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#步骤一：agent Name</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sources <span class=\"token operator\">=</span> r1</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sinks <span class=\"token operator\">=</span> k1</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>a1<span class=\"token punctuation\">.</span>channels <span class=\"token operator\">=</span> c1</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">#步骤二：source</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\"># Describe/configure the source</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sources<span class=\"token punctuation\">.</span>r1<span class=\"token punctuation\">.</span><span class=\"token keyword\">type</span> <span class=\"token operator\">=</span> avro</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sources<span class=\"token punctuation\">.</span>r1<span class=\"token punctuation\">.</span>bind <span class=\"token operator\">=</span> hadoop103 </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sources<span class=\"token punctuation\">.</span>r1<span class=\"token punctuation\">.</span>port <span class=\"token operator\">=</span> <span class=\"token number\">6666</span> </pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">#步骤三： channel selector</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sources<span class=\"token punctuation\">.</span>r1<span class=\"token punctuation\">.</span>selector<span class=\"token punctuation\">.</span><span class=\"token keyword\">type</span> <span class=\"token operator\">=</span> replicating</pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">#步骤四： channel</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\"># Describe the channel</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>a1<span class=\"token punctuation\">.</span>channels<span class=\"token punctuation\">.</span>c1<span class=\"token punctuation\">.</span><span class=\"token keyword\">type</span> <span class=\"token operator\">=</span> memory</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>a1<span class=\"token punctuation\">.</span>channels<span class=\"token punctuation\">.</span>c1<span class=\"token punctuation\">.</span>capacity <span class=\"token operator\">=</span> <span class=\"token number\">1000</span> </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>a1<span class=\"token punctuation\">.</span>channels<span class=\"token punctuation\">.</span>c1<span class=\"token punctuation\">.</span>transactionCapacity <span class=\"token operator\">=</span> <span class=\"token number\">100</span> </pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\">#步骤五： sinkprocessor，默认配置 defaultsinkprocessor</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">#步骤六： sink</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\"># Describe the sink</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sinks<span class=\"token punctuation\">.</span>k1<span class=\"token punctuation\">.</span><span class=\"token keyword\">type</span> <span class=\"token operator\">=</span> hdfs</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sinks<span class=\"token punctuation\">.</span>k1<span class=\"token punctuation\">.</span>hdfs<span class=\"token punctuation\">.</span>path <span class=\"token operator\">=</span> hdfs:<span class=\"token comment\">//hadoop102:9820/flume/upload4/%Y%m%d/%H   </span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\">#上传文件的前缀</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sinks<span class=\"token punctuation\">.</span>k1<span class=\"token punctuation\">.</span>hdfs<span class=\"token punctuation\">.</span>filePrefix <span class=\"token operator\">=</span> upload<span class=\"token operator\">-</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token comment\">#是否按照时间滚动文件夹</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sinks<span class=\"token punctuation\">.</span>k1<span class=\"token punctuation\">.</span>hdfs<span class=\"token punctuation\">.</span>round <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token comment\">#多少时间单位创建一个新的文件夹</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sinks<span class=\"token punctuation\">.</span>k1<span class=\"token punctuation\">.</span>hdfs<span class=\"token punctuation\">.</span>roundValue <span class=\"token operator\">=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token comment\">#重新定义时间单位</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sinks<span class=\"token punctuation\">.</span>k1<span class=\"token punctuation\">.</span>hdfs<span class=\"token punctuation\">.</span>roundUnit <span class=\"token operator\">=</span> <span class=\"token keyword\">hour</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token comment\">#是否使用本地时间戳</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sinks<span class=\"token punctuation\">.</span>k1<span class=\"token punctuation\">.</span>hdfs<span class=\"token punctuation\">.</span>useLocalTimeStamp <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token comment\">#积攒多少个 Event 才 flush 到 HDFS 一次</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sinks<span class=\"token punctuation\">.</span>k1<span class=\"token punctuation\">.</span>hdfs<span class=\"token punctuation\">.</span>batchSize <span class=\"token operator\">=</span> <span class=\"token number\">100</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token comment\">#设置文件类型，可支持压缩</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sinks<span class=\"token punctuation\">.</span>k1<span class=\"token punctuation\">.</span>hdfs<span class=\"token punctuation\">.</span>fileType <span class=\"token operator\">=</span> DataStream</pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token comment\">#多久生成一个新的文件</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sinks<span class=\"token punctuation\">.</span>k1<span class=\"token punctuation\">.</span>hdfs<span class=\"token punctuation\">.</span>rollInterval <span class=\"token operator\">=</span> <span class=\"token number\">60</span>  </pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token comment\">#设置每个文件的滚动大小大概是 128M</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sinks<span class=\"token punctuation\">.</span>k1<span class=\"token punctuation\">.</span>hdfs<span class=\"token punctuation\">.</span>rollSize <span class=\"token operator\">=</span> <span class=\"token number\">134217700</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token comment\">#文件的滚动与 Event 数量无关</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sinks<span class=\"token punctuation\">.</span>k1<span class=\"token punctuation\">.</span>hdfs<span class=\"token punctuation\">.</span>rollCount <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token comment\">#步骤七：连接 source、channel、sink</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sources<span class=\"token punctuation\">.</span>r1<span class=\"token punctuation\">.</span>channels <span class=\"token operator\">=</span> c1</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sinks<span class=\"token punctuation\">.</span>k1<span class=\"token punctuation\">.</span>channel <span class=\"token operator\">=</span> c1</pre></td></tr></table></figure><ul>\n<li>flum3:</li>\n</ul>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#步骤一：agent Name</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sources <span class=\"token operator\">=</span> r1</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sinks <span class=\"token operator\">=</span> k1</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>a1<span class=\"token punctuation\">.</span>channels <span class=\"token operator\">=</span> c1</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">#步骤二：source</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># Describe/configure the source</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sources<span class=\"token punctuation\">.</span>r1<span class=\"token punctuation\">.</span><span class=\"token keyword\">type</span> <span class=\"token operator\">=</span> avro</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sources<span class=\"token punctuation\">.</span>r1<span class=\"token punctuation\">.</span>bind <span class=\"token operator\">=</span> hadoop104 </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sources<span class=\"token punctuation\">.</span>r1<span class=\"token punctuation\">.</span>port <span class=\"token operator\">=</span> <span class=\"token number\">8888</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">#步骤三： channel selector</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sources<span class=\"token punctuation\">.</span>r1<span class=\"token punctuation\">.</span>selector<span class=\"token punctuation\">.</span><span class=\"token keyword\">type</span> <span class=\"token operator\">=</span> replicating</pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">#步骤四： channel</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\"># Describe the channel</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>a1<span class=\"token punctuation\">.</span>channels<span class=\"token punctuation\">.</span>c1<span class=\"token punctuation\">.</span><span class=\"token keyword\">type</span> <span class=\"token operator\">=</span> memory</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>a1<span class=\"token punctuation\">.</span>channels<span class=\"token punctuation\">.</span>c1<span class=\"token punctuation\">.</span>capacity <span class=\"token operator\">=</span> <span class=\"token number\">1000</span> </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>a1<span class=\"token punctuation\">.</span>channels<span class=\"token punctuation\">.</span>c1<span class=\"token punctuation\">.</span>transactionCapacity <span class=\"token operator\">=</span> <span class=\"token number\">100</span> </pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\">#步骤五： sinkprocessor，默认配置 defaultsinkprocessor</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\">#步骤六： sink</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token comment\"># Describe the sink</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sinks<span class=\"token punctuation\">.</span>k1<span class=\"token punctuation\">.</span><span class=\"token keyword\">type</span> <span class=\"token operator\">=</span> file_roll</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sinks<span class=\"token punctuation\">.</span>k1<span class=\"token punctuation\">.</span>sink<span class=\"token punctuation\">.</span>directory <span class=\"token operator\">=</span> <span class=\"token operator\">/</span>opt<span class=\"token operator\">/</span>module<span class=\"token operator\">/</span>flume<span class=\"token operator\">/</span>datas<span class=\"token operator\">/</span>flume3</pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token comment\">#步骤七：连接 source、channel、sink</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sources<span class=\"token punctuation\">.</span>r1<span class=\"token punctuation\">.</span>channels <span class=\"token operator\">=</span> c1</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sinks<span class=\"token punctuation\">.</span>k1<span class=\"token punctuation\">.</span>channel <span class=\"token operator\">=</span> c1</pre></td></tr></table></figure><h2 id=\"题目6\"><a class=\"anchor\" href=\"#题目6\">#</a> 题目 6</h2>\n<p>使用 Flume1 监控一个端口，其 sink 组中的 sink 分别对接 Flume2 和 Flume3，采用 FailoverSinkProcessor，实现故障转移的功能</p>\n<ul>\n<li>flume1</li>\n</ul>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#步骤一：agent Name</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sources <span class=\"token operator\">=</span> r1</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>a1<span class=\"token punctuation\">.</span>channels <span class=\"token operator\">=</span> c1</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sinkgroups <span class=\"token operator\">=</span> g1</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sinks <span class=\"token operator\">=</span> k1 k2</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">#步骤二：source</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\"># Describe/configure the source</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sources<span class=\"token punctuation\">.</span>r1<span class=\"token punctuation\">.</span><span class=\"token keyword\">type</span> <span class=\"token operator\">=</span> netcat</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sources<span class=\"token punctuation\">.</span>r1<span class=\"token punctuation\">.</span>bind <span class=\"token operator\">=</span> localhost </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sources<span class=\"token punctuation\">.</span>r1<span class=\"token punctuation\">.</span>port <span class=\"token operator\">=</span> <span class=\"token number\">44444</span> </pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">#步骤三： channel selector</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sources<span class=\"token punctuation\">.</span>r1<span class=\"token punctuation\">.</span>selector<span class=\"token punctuation\">.</span><span class=\"token keyword\">type</span> <span class=\"token operator\">=</span> replicating</pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">#步骤四： channel</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\"># Describe the channel</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>a1<span class=\"token punctuation\">.</span>channels<span class=\"token punctuation\">.</span>c1<span class=\"token punctuation\">.</span><span class=\"token keyword\">type</span> <span class=\"token operator\">=</span> memory</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>a1<span class=\"token punctuation\">.</span>channels<span class=\"token punctuation\">.</span>c1<span class=\"token punctuation\">.</span>capacity <span class=\"token operator\">=</span> <span class=\"token number\">1000</span> </pre></td></tr><tr><td data-num=\"20\"></td><td><pre>a1<span class=\"token punctuation\">.</span>channels<span class=\"token punctuation\">.</span>c1<span class=\"token punctuation\">.</span>transactionCapacity <span class=\"token operator\">=</span> <span class=\"token number\">100</span> </pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\">#步骤五： sinkprocessor</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sinkgroups<span class=\"token punctuation\">.</span>g1<span class=\"token punctuation\">.</span>processor<span class=\"token punctuation\">.</span><span class=\"token keyword\">type</span> <span class=\"token operator\">=</span> failover </pre></td></tr><tr><td data-num=\"24\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sinkgroups<span class=\"token punctuation\">.</span>g1<span class=\"token punctuation\">.</span>processor<span class=\"token punctuation\">.</span>priority<span class=\"token punctuation\">.</span>k1 <span class=\"token operator\">=</span> <span class=\"token number\">10</span> </pre></td></tr><tr><td data-num=\"25\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sinkgroups<span class=\"token punctuation\">.</span>g1<span class=\"token punctuation\">.</span>processor<span class=\"token punctuation\">.</span>priority<span class=\"token punctuation\">.</span>k2 <span class=\"token operator\">=</span> <span class=\"token number\">5</span> </pre></td></tr><tr><td data-num=\"26\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sinkgroups<span class=\"token punctuation\">.</span>g1<span class=\"token punctuation\">.</span>processor<span class=\"token punctuation\">.</span>maxpenalty <span class=\"token operator\">=</span> <span class=\"token number\">10000</span> </pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token comment\">#步骤六： sink</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token comment\"># Describe the sink</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sinks<span class=\"token punctuation\">.</span>k1<span class=\"token punctuation\">.</span><span class=\"token keyword\">type</span> <span class=\"token operator\">=</span> avro</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sinks<span class=\"token punctuation\">.</span>k1<span class=\"token punctuation\">.</span>hostname <span class=\"token operator\">=</span> hadoop103</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sinks<span class=\"token punctuation\">.</span>k1<span class=\"token punctuation\">.</span>port <span class=\"token operator\">=</span> <span class=\"token number\">1111</span>  </pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sinks<span class=\"token punctuation\">.</span>k2<span class=\"token punctuation\">.</span><span class=\"token keyword\">type</span> <span class=\"token operator\">=</span> avro</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sinks<span class=\"token punctuation\">.</span>k2<span class=\"token punctuation\">.</span>hostname <span class=\"token operator\">=</span> hadoop104</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sinks<span class=\"token punctuation\">.</span>k2<span class=\"token punctuation\">.</span>port <span class=\"token operator\">=</span> <span class=\"token number\">2222</span>  </pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token comment\">#步骤七：连接 source、channel、sink</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sources<span class=\"token punctuation\">.</span>r1<span class=\"token punctuation\">.</span>channels <span class=\"token operator\">=</span> c1</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sinkgroups<span class=\"token punctuation\">.</span>g1<span class=\"token punctuation\">.</span>sinks <span class=\"token operator\">=</span> k1 k2</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sinks<span class=\"token punctuation\">.</span>k1<span class=\"token punctuation\">.</span>channel <span class=\"token operator\">=</span> c1</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sinks<span class=\"token punctuation\">.</span>k2<span class=\"token punctuation\">.</span>channel <span class=\"token operator\">=</span> c1</pre></td></tr></table></figure><ul>\n<li>flume2</li>\n</ul>\n<pre><code class=\"language-Sql\">#步骤一：agent Name\na1.sources = r1\na1.sinks = k1\na1.channels = c1\n\n#步骤二：source\n# Describe/configure the source\na1.sources.r1.type = avro\na1.sources.r1.bind = hadoop103\na1.sources.r1.port = 1111 \n\n#步骤三： channel selector\na1.sources.r1.selector.type = replicating\n\n#步骤四： channel\n# Describe the channel\na1.channels.c1.type = memory\na1.channels.c1.capacity = 1000 \na1.channels.c1.transactionCapacity = 100 \n\n#步骤五： sinkprocessor，默认配置defaultsinkprocessor\n\n#步骤六： sink\n# Describe the sink\na1.sinks.k1.type = logger \n\n#步骤七：连接source、channel、sink\na1.sources.r1.channels = c1\na1.sinks.k1.channel = c1\n</code></pre>\n<ul>\n<li>flume3</li>\n</ul>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#步骤一：agent Name</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sources <span class=\"token operator\">=</span> r1</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sinks <span class=\"token operator\">=</span> k1</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>a1<span class=\"token punctuation\">.</span>channels <span class=\"token operator\">=</span> c1</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">#步骤二：source</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># Describe/configure the source</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sources<span class=\"token punctuation\">.</span>r1<span class=\"token punctuation\">.</span><span class=\"token keyword\">type</span> <span class=\"token operator\">=</span> avro</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sources<span class=\"token punctuation\">.</span>r1<span class=\"token punctuation\">.</span>bind <span class=\"token operator\">=</span> hadoop104</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sources<span class=\"token punctuation\">.</span>r1<span class=\"token punctuation\">.</span>port <span class=\"token operator\">=</span> <span class=\"token number\">2222</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">#步骤三： channel selector</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sources<span class=\"token punctuation\">.</span>r1<span class=\"token punctuation\">.</span>selector<span class=\"token punctuation\">.</span><span class=\"token keyword\">type</span> <span class=\"token operator\">=</span> replicating</pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">#步骤四： channel</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\"># Describe the channel</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>a1<span class=\"token punctuation\">.</span>channels<span class=\"token punctuation\">.</span>c1<span class=\"token punctuation\">.</span><span class=\"token keyword\">type</span> <span class=\"token operator\">=</span> memory</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>a1<span class=\"token punctuation\">.</span>channels<span class=\"token punctuation\">.</span>c1<span class=\"token punctuation\">.</span>capacity <span class=\"token operator\">=</span> <span class=\"token number\">1000</span> </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>a1<span class=\"token punctuation\">.</span>channels<span class=\"token punctuation\">.</span>c1<span class=\"token punctuation\">.</span>transactionCapacity <span class=\"token operator\">=</span> <span class=\"token number\">100</span> </pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\">#步骤五： sinkprocessor，默认配置 defaultsinkprocessor</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\">#步骤六： sink</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token comment\"># Describe the sink</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sinks<span class=\"token punctuation\">.</span>k1<span class=\"token punctuation\">.</span><span class=\"token keyword\">type</span> <span class=\"token operator\">=</span> logger </pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token comment\">#步骤七：连接 source、channel、sink</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sources<span class=\"token punctuation\">.</span>r1<span class=\"token punctuation\">.</span>channels <span class=\"token operator\">=</span> c1</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sinks<span class=\"token punctuation\">.</span>k1<span class=\"token punctuation\">.</span>channel <span class=\"token operator\">=</span> c1</pre></td></tr></table></figure><h2 id=\"题目7\"><a class=\"anchor\" href=\"#题目7\">#</a> 题目 7</h2>\n<p>hadoop102 上的 Flume-1 监控文件 /opt/module/group.log，</p>\n<p>hadoop103 上的 Flume-2 监控某一个端口的数据流，</p>\n<p>Flume-1 与 Flume-2 将数据发送给 hadoop104 上的 Flume-3，Flume-3 将最终数据打印到控制台。</p>\n<ul>\n<li>flume1</li>\n</ul>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#步骤一：agent Name</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sources <span class=\"token operator\">=</span> r1</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sinks <span class=\"token operator\">=</span> k1</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>a1<span class=\"token punctuation\">.</span>channels <span class=\"token operator\">=</span> c1</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">#步骤二：source</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sources<span class=\"token punctuation\">.</span>r1<span class=\"token punctuation\">.</span><span class=\"token keyword\">type</span> <span class=\"token operator\">=</span> TAILDIR </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sources<span class=\"token punctuation\">.</span>r1<span class=\"token punctuation\">.</span>positionFile <span class=\"token operator\">=</span> <span class=\"token operator\">/</span>opt<span class=\"token operator\">/</span>module<span class=\"token operator\">/</span>flume<span class=\"token operator\">/</span>tail_dir<span class=\"token punctuation\">.</span>json </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sources<span class=\"token punctuation\">.</span>r1<span class=\"token punctuation\">.</span>filegroups <span class=\"token operator\">=</span> f1</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sources<span class=\"token punctuation\">.</span>r1<span class=\"token punctuation\">.</span>filegroups<span class=\"token punctuation\">.</span>f1 <span class=\"token operator\">=</span> <span class=\"token operator\">/</span>opt<span class=\"token operator\">/</span>module<span class=\"token operator\">/</span>flume<span class=\"token operator\">/</span>files<span class=\"token operator\">/</span><span class=\"token punctuation\">.</span><span class=\"token operator\">*</span>log<span class=\"token punctuation\">.</span><span class=\"token operator\">*</span> </pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">#步骤三： channel selector</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sources<span class=\"token punctuation\">.</span>r1<span class=\"token punctuation\">.</span>selector<span class=\"token punctuation\">.</span><span class=\"token keyword\">type</span> <span class=\"token operator\">=</span> replicating</pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">#步骤四： channel</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\"># Describe the channel</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>a1<span class=\"token punctuation\">.</span>channels<span class=\"token punctuation\">.</span>c1<span class=\"token punctuation\">.</span><span class=\"token keyword\">type</span> <span class=\"token operator\">=</span> memory</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>a1<span class=\"token punctuation\">.</span>channels<span class=\"token punctuation\">.</span>c1<span class=\"token punctuation\">.</span>capacity <span class=\"token operator\">=</span> <span class=\"token number\">1000</span> </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>a1<span class=\"token punctuation\">.</span>channels<span class=\"token punctuation\">.</span>c1<span class=\"token punctuation\">.</span>transactionCapacity <span class=\"token operator\">=</span> <span class=\"token number\">100</span> </pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\">#步骤五： sinkprocessor，默认配置 defaultsinkprocessor</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\">#步骤六： sink</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token comment\"># Describe the sink</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sinks<span class=\"token punctuation\">.</span>k1<span class=\"token punctuation\">.</span><span class=\"token keyword\">type</span> <span class=\"token operator\">=</span> avro</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sinks<span class=\"token punctuation\">.</span>k1<span class=\"token punctuation\">.</span>hostname <span class=\"token operator\">=</span> hadoop104</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sinks<span class=\"token punctuation\">.</span>k1<span class=\"token punctuation\">.</span>port <span class=\"token operator\">=</span> <span class=\"token number\">4141</span>  </pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token comment\">#步骤七：连接 source、channel、sink</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sources<span class=\"token punctuation\">.</span>r1<span class=\"token punctuation\">.</span>channels <span class=\"token operator\">=</span> c1</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sinks<span class=\"token punctuation\">.</span>k1<span class=\"token punctuation\">.</span>channel <span class=\"token operator\">=</span> c1</pre></td></tr></table></figure><ul>\n<li>flume2</li>\n</ul>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#步骤一：agent Name</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sources <span class=\"token operator\">=</span> r1</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sinks <span class=\"token operator\">=</span> k1</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>a1<span class=\"token punctuation\">.</span>channels <span class=\"token operator\">=</span> c1</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">#步骤二：source</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sources<span class=\"token punctuation\">.</span>r1<span class=\"token punctuation\">.</span><span class=\"token keyword\">type</span> <span class=\"token operator\">=</span> netcat</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sources<span class=\"token punctuation\">.</span>r1<span class=\"token punctuation\">.</span>bind <span class=\"token operator\">=</span> localhost </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sources<span class=\"token punctuation\">.</span>r1<span class=\"token punctuation\">.</span>port <span class=\"token operator\">=</span> <span class=\"token number\">3333</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">#步骤三： channel selector</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sources<span class=\"token punctuation\">.</span>r1<span class=\"token punctuation\">.</span>selector<span class=\"token punctuation\">.</span><span class=\"token keyword\">type</span> <span class=\"token operator\">=</span> replicating</pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">#步骤四： channel</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\"># Describe the channel</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>a1<span class=\"token punctuation\">.</span>channels<span class=\"token punctuation\">.</span>c1<span class=\"token punctuation\">.</span><span class=\"token keyword\">type</span> <span class=\"token operator\">=</span> memory</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>a1<span class=\"token punctuation\">.</span>channels<span class=\"token punctuation\">.</span>c1<span class=\"token punctuation\">.</span>capacity <span class=\"token operator\">=</span> <span class=\"token number\">1000</span> </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>a1<span class=\"token punctuation\">.</span>channels<span class=\"token punctuation\">.</span>c1<span class=\"token punctuation\">.</span>transactionCapacity <span class=\"token operator\">=</span> <span class=\"token number\">100</span> </pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\">#步骤五： sinkprocessor，默认配置 defaultsinkprocessor</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\">#步骤六： sink</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\"># Describe the sink</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sinks<span class=\"token punctuation\">.</span>k1<span class=\"token punctuation\">.</span><span class=\"token keyword\">type</span> <span class=\"token operator\">=</span> avro</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sinks<span class=\"token punctuation\">.</span>k1<span class=\"token punctuation\">.</span>hostname <span class=\"token operator\">=</span> hadoop104</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sinks<span class=\"token punctuation\">.</span>k1<span class=\"token punctuation\">.</span>port <span class=\"token operator\">=</span> <span class=\"token number\">4141</span>  </pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token comment\">#步骤七：连接 source、channel、sink</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sources<span class=\"token punctuation\">.</span>r1<span class=\"token punctuation\">.</span>channels <span class=\"token operator\">=</span> c1</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sinks<span class=\"token punctuation\">.</span>k1<span class=\"token punctuation\">.</span>channel <span class=\"token operator\">=</span> c1</pre></td></tr></table></figure><ul>\n<li>flume3</li>\n</ul>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#步骤一：agent Name</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sources <span class=\"token operator\">=</span> r1</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sinks <span class=\"token operator\">=</span> k1</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>a1<span class=\"token punctuation\">.</span>channels <span class=\"token operator\">=</span> c1</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">#步骤二：source</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sources<span class=\"token punctuation\">.</span>r1<span class=\"token punctuation\">.</span><span class=\"token keyword\">type</span> <span class=\"token operator\">=</span> avro</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sources<span class=\"token punctuation\">.</span>r1<span class=\"token punctuation\">.</span>bind <span class=\"token operator\">=</span> hadoop104</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sources<span class=\"token punctuation\">.</span>r1<span class=\"token punctuation\">.</span>port <span class=\"token operator\">=</span> <span class=\"token number\">4141</span> </pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">#步骤三： channel selector</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sources<span class=\"token punctuation\">.</span>r1<span class=\"token punctuation\">.</span>selector<span class=\"token punctuation\">.</span><span class=\"token keyword\">type</span> <span class=\"token operator\">=</span> replicating</pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">#步骤四： channel</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\"># Describe the channel</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>a1<span class=\"token punctuation\">.</span>channels<span class=\"token punctuation\">.</span>c1<span class=\"token punctuation\">.</span><span class=\"token keyword\">type</span> <span class=\"token operator\">=</span> memory</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>a1<span class=\"token punctuation\">.</span>channels<span class=\"token punctuation\">.</span>c1<span class=\"token punctuation\">.</span>capacity <span class=\"token operator\">=</span> <span class=\"token number\">1000</span> </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>a1<span class=\"token punctuation\">.</span>channels<span class=\"token punctuation\">.</span>c1<span class=\"token punctuation\">.</span>transactionCapacity <span class=\"token operator\">=</span> <span class=\"token number\">100</span> </pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\">#步骤五： sinkprocessor，默认配置 defaultsinkprocessor</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\">#步骤六： sink</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\"># Describe the sink</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sinks<span class=\"token punctuation\">.</span>k1<span class=\"token punctuation\">.</span><span class=\"token keyword\">type</span> <span class=\"token operator\">=</span> logger </pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token comment\">#步骤七：连接 source、channel、sink</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sources<span class=\"token punctuation\">.</span>r1<span class=\"token punctuation\">.</span>channels <span class=\"token operator\">=</span> c1</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sinks<span class=\"token punctuation\">.</span>k1<span class=\"token punctuation\">.</span>channel <span class=\"token operator\">=</span> c1</pre></td></tr></table></figure><h2 id=\"题目8\"><a class=\"anchor\" href=\"#题目8\">#</a> 题目 8</h2>\n<p>需求：</p>\n<ol>\n<li>\n<p>a1 102 接收 TailDirSource 数据，监控 /var/log/*.log，复制输出到 a2 a3</p>\n</li>\n<li>\n<p>a2 103 接收 a1 数据，输出到 HDFS，failover 到本地 FileRoll</p>\n</li>\n<li>\n<p>a3 104 接收 a1 数据，输出到控制台</p>\n</li>\n</ol>\n<ul>\n<li>flume1</li>\n</ul>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#步骤一：agent Name</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sources <span class=\"token operator\">=</span> r1</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sinks <span class=\"token operator\">=</span> k1 k2</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>a1<span class=\"token punctuation\">.</span>channels <span class=\"token operator\">=</span> c1 c2</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">#步骤二：source</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sources<span class=\"token punctuation\">.</span>r1<span class=\"token punctuation\">.</span><span class=\"token keyword\">type</span> <span class=\"token operator\">=</span> TAILDIR </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sources<span class=\"token punctuation\">.</span>r1<span class=\"token punctuation\">.</span>positionFile <span class=\"token operator\">=</span> <span class=\"token operator\">/</span>opt<span class=\"token operator\">/</span>module<span class=\"token operator\">/</span>flume<span class=\"token operator\">/</span>tail_dir<span class=\"token punctuation\">.</span>json </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sources<span class=\"token punctuation\">.</span>r1<span class=\"token punctuation\">.</span>filegroups <span class=\"token operator\">=</span> f1 </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sources<span class=\"token punctuation\">.</span>r1<span class=\"token punctuation\">.</span>filegroups<span class=\"token punctuation\">.</span>f1 <span class=\"token operator\">=</span> <span class=\"token operator\">/</span>opt<span class=\"token operator\">/</span>module<span class=\"token operator\">/</span>flume<span class=\"token operator\">/</span>files<span class=\"token operator\">/</span><span class=\"token punctuation\">.</span><span class=\"token operator\">*</span><span class=\"token keyword\">file</span><span class=\"token punctuation\">.</span><span class=\"token operator\">*</span> </pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">#步骤三： channel selector</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sources<span class=\"token punctuation\">.</span>r1<span class=\"token punctuation\">.</span>selector<span class=\"token punctuation\">.</span><span class=\"token keyword\">type</span> <span class=\"token operator\">=</span> replicating</pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">#步骤四： channel</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\"># Describe the channel</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>a1<span class=\"token punctuation\">.</span>channels<span class=\"token punctuation\">.</span>c1<span class=\"token punctuation\">.</span><span class=\"token keyword\">type</span> <span class=\"token operator\">=</span> memory</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>a1<span class=\"token punctuation\">.</span>channels<span class=\"token punctuation\">.</span>c1<span class=\"token punctuation\">.</span>capacity <span class=\"token operator\">=</span> <span class=\"token number\">1000</span> </pre></td></tr><tr><td data-num=\"21\"></td><td><pre>a1<span class=\"token punctuation\">.</span>channels<span class=\"token punctuation\">.</span>c1<span class=\"token punctuation\">.</span>transactionCapacity <span class=\"token operator\">=</span> <span class=\"token number\">100</span> </pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>a1<span class=\"token punctuation\">.</span>channels<span class=\"token punctuation\">.</span>c2<span class=\"token punctuation\">.</span><span class=\"token keyword\">type</span> <span class=\"token operator\">=</span> memory</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>a1<span class=\"token punctuation\">.</span>channels<span class=\"token punctuation\">.</span>c2<span class=\"token punctuation\">.</span>capacity <span class=\"token operator\">=</span> <span class=\"token number\">1000</span> </pre></td></tr><tr><td data-num=\"25\"></td><td><pre>a1<span class=\"token punctuation\">.</span>channels<span class=\"token punctuation\">.</span>c2<span class=\"token punctuation\">.</span>transactionCapacity <span class=\"token operator\">=</span> <span class=\"token number\">100</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token comment\">#步骤五： sinkprocessor，默认配置 defaultsinkprocessor</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token comment\">#步骤六： sink</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token comment\"># Describe the sink</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sinks<span class=\"token punctuation\">.</span>k1<span class=\"token punctuation\">.</span><span class=\"token keyword\">type</span> <span class=\"token operator\">=</span> avro</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sinks<span class=\"token punctuation\">.</span>k1<span class=\"token punctuation\">.</span>hostname <span class=\"token operator\">=</span> hadoop103</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sinks<span class=\"token punctuation\">.</span>k1<span class=\"token punctuation\">.</span>port <span class=\"token operator\">=</span> <span class=\"token number\">6666</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sinks<span class=\"token punctuation\">.</span>k2<span class=\"token punctuation\">.</span><span class=\"token keyword\">type</span> <span class=\"token operator\">=</span> avro</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sinks<span class=\"token punctuation\">.</span>k2<span class=\"token punctuation\">.</span>hostname <span class=\"token operator\">=</span> hadoop104 </pre></td></tr><tr><td data-num=\"38\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sinks<span class=\"token punctuation\">.</span>k2<span class=\"token punctuation\">.</span>port <span class=\"token operator\">=</span> <span class=\"token number\">8888</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token comment\">#步骤七：连接 source、channel、sink</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sources<span class=\"token punctuation\">.</span>r1<span class=\"token punctuation\">.</span>channels <span class=\"token operator\">=</span> c1 c2</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sinks<span class=\"token punctuation\">.</span>k1<span class=\"token punctuation\">.</span>channel <span class=\"token operator\">=</span> c1</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sinks<span class=\"token punctuation\">.</span>k2<span class=\"token punctuation\">.</span>channel <span class=\"token operator\">=</span> c2</pre></td></tr></table></figure><ul>\n<li>flume2:</li>\n</ul>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#步骤一：agent Name</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sources <span class=\"token operator\">=</span> r1</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>a1<span class=\"token punctuation\">.</span>channels <span class=\"token operator\">=</span> c1</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sinkgroups <span class=\"token operator\">=</span> g1</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sinks <span class=\"token operator\">=</span> k1 k2</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">#步骤二：source</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sources<span class=\"token punctuation\">.</span>r1<span class=\"token punctuation\">.</span><span class=\"token keyword\">type</span> <span class=\"token operator\">=</span> avro</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sources<span class=\"token punctuation\">.</span>r1<span class=\"token punctuation\">.</span>bind <span class=\"token operator\">=</span> hadoop103</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sources<span class=\"token punctuation\">.</span>r1<span class=\"token punctuation\">.</span>port <span class=\"token operator\">=</span> <span class=\"token number\">6666</span> </pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">#步骤三： channel selector</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sources<span class=\"token punctuation\">.</span>r1<span class=\"token punctuation\">.</span>selector<span class=\"token punctuation\">.</span><span class=\"token keyword\">type</span> <span class=\"token operator\">=</span> replicating</pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">#步骤四： channel</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\"># Describe the channel</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>a1<span class=\"token punctuation\">.</span>channels<span class=\"token punctuation\">.</span>c1<span class=\"token punctuation\">.</span><span class=\"token keyword\">type</span> <span class=\"token operator\">=</span> memory</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>a1<span class=\"token punctuation\">.</span>channels<span class=\"token punctuation\">.</span>c1<span class=\"token punctuation\">.</span>capacity <span class=\"token operator\">=</span> <span class=\"token number\">1000</span> </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>a1<span class=\"token punctuation\">.</span>channels<span class=\"token punctuation\">.</span>c1<span class=\"token punctuation\">.</span>transactionCapacity <span class=\"token operator\">=</span> <span class=\"token number\">100</span> </pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\">#步骤五： sinkprocessor，默认配置 defaultsinkprocessor</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sinkgroups<span class=\"token punctuation\">.</span>g1<span class=\"token punctuation\">.</span>processor<span class=\"token punctuation\">.</span><span class=\"token keyword\">type</span> <span class=\"token operator\">=</span> failover </pre></td></tr><tr><td data-num=\"23\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sinkgroups<span class=\"token punctuation\">.</span>g1<span class=\"token punctuation\">.</span>processor<span class=\"token punctuation\">.</span>priority<span class=\"token punctuation\">.</span>k1 <span class=\"token operator\">=</span> <span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sinkgroups<span class=\"token punctuation\">.</span>g1<span class=\"token punctuation\">.</span>processor<span class=\"token punctuation\">.</span>priority<span class=\"token punctuation\">.</span>k2 <span class=\"token operator\">=</span> <span class=\"token number\">5</span> </pre></td></tr><tr><td data-num=\"25\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sinkgroups<span class=\"token punctuation\">.</span>g1<span class=\"token punctuation\">.</span>processor<span class=\"token punctuation\">.</span>maxpenalty <span class=\"token operator\">=</span> <span class=\"token number\">10000</span> </pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token comment\">#步骤六： sink</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token comment\"># Describe the sink</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sinks<span class=\"token punctuation\">.</span>k1<span class=\"token punctuation\">.</span><span class=\"token keyword\">type</span> <span class=\"token operator\">=</span> hdfs</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sinks<span class=\"token punctuation\">.</span>k1<span class=\"token punctuation\">.</span>hdfs<span class=\"token punctuation\">.</span>path <span class=\"token operator\">=</span> hdfs:<span class=\"token comment\">//hadoop102:9820/flume/upload2/%Y%m%d/%H  </span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token comment\">#上传文件的前缀</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sinks<span class=\"token punctuation\">.</span>k1<span class=\"token punctuation\">.</span>hdfs<span class=\"token punctuation\">.</span>filePrefix <span class=\"token operator\">=</span> upload<span class=\"token operator\">-</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token comment\">#是否按照时间滚动文件夹</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sinks<span class=\"token punctuation\">.</span>k1<span class=\"token punctuation\">.</span>hdfs<span class=\"token punctuation\">.</span>round <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token comment\">#多少时间单位创建一个新的文件夹</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sinks<span class=\"token punctuation\">.</span>k1<span class=\"token punctuation\">.</span>hdfs<span class=\"token punctuation\">.</span>roundValue <span class=\"token operator\">=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token comment\">#重新定义时间单位</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sinks<span class=\"token punctuation\">.</span>k1<span class=\"token punctuation\">.</span>hdfs<span class=\"token punctuation\">.</span>roundUnit <span class=\"token operator\">=</span> <span class=\"token keyword\">hour</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token comment\">#是否使用本地时间戳</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sinks<span class=\"token punctuation\">.</span>k1<span class=\"token punctuation\">.</span>hdfs<span class=\"token punctuation\">.</span>useLocalTimeStamp <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token comment\">#积攒多少个 Event 才 flush 到 HDFS 一次</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sinks<span class=\"token punctuation\">.</span>k1<span class=\"token punctuation\">.</span>hdfs<span class=\"token punctuation\">.</span>batchSize <span class=\"token operator\">=</span> <span class=\"token number\">100</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token comment\">#设置文件类型，可支持压缩</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sinks<span class=\"token punctuation\">.</span>k1<span class=\"token punctuation\">.</span>hdfs<span class=\"token punctuation\">.</span>fileType <span class=\"token operator\">=</span> DataStream</pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token comment\">#多久生成一个新的文件</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sinks<span class=\"token punctuation\">.</span>k1<span class=\"token punctuation\">.</span>hdfs<span class=\"token punctuation\">.</span>rollInterval <span class=\"token operator\">=</span> <span class=\"token number\">60</span>  </pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token comment\">#设置每个文件的滚动大小大概是 128M</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sinks<span class=\"token punctuation\">.</span>k1<span class=\"token punctuation\">.</span>hdfs<span class=\"token punctuation\">.</span>rollSize <span class=\"token operator\">=</span> <span class=\"token number\">134217700</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token comment\">#文件的滚动与 Event 数量无关</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sinks<span class=\"token punctuation\">.</span>k1<span class=\"token punctuation\">.</span>hdfs<span class=\"token punctuation\">.</span>rollCount <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sinks<span class=\"token punctuation\">.</span>k2<span class=\"token punctuation\">.</span><span class=\"token keyword\">type</span> <span class=\"token operator\">=</span> logger</pre></td></tr><tr><td data-num=\"53\"></td><td><pre></pre></td></tr><tr><td data-num=\"54\"></td><td><pre><span class=\"token comment\">#步骤七：连接 source、channel、sink</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sources<span class=\"token punctuation\">.</span>r1<span class=\"token punctuation\">.</span>channels <span class=\"token operator\">=</span> c1</pre></td></tr><tr><td data-num=\"56\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sinkgroups<span class=\"token punctuation\">.</span>g1<span class=\"token punctuation\">.</span>sinks <span class=\"token operator\">=</span> k1 k2</pre></td></tr><tr><td data-num=\"57\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sinks<span class=\"token punctuation\">.</span>k1<span class=\"token punctuation\">.</span>channel <span class=\"token operator\">=</span> c1</pre></td></tr><tr><td data-num=\"58\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sinks<span class=\"token punctuation\">.</span>k2<span class=\"token punctuation\">.</span>channel <span class=\"token operator\">=</span> c1</pre></td></tr></table></figure><ul>\n<li>flume3:</li>\n</ul>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#步骤一：agent Name</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sources <span class=\"token operator\">=</span> r1</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sinks <span class=\"token operator\">=</span> k1</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>a1<span class=\"token punctuation\">.</span>channels <span class=\"token operator\">=</span> c1</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">#步骤二：source</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sources<span class=\"token punctuation\">.</span>r1<span class=\"token punctuation\">.</span><span class=\"token keyword\">type</span> <span class=\"token operator\">=</span> avro</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sources<span class=\"token punctuation\">.</span>r1<span class=\"token punctuation\">.</span>bind <span class=\"token operator\">=</span> hadoop104</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sources<span class=\"token punctuation\">.</span>r1<span class=\"token punctuation\">.</span>port <span class=\"token operator\">=</span> <span class=\"token number\">8888</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">#步骤三： channel selector</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sources<span class=\"token punctuation\">.</span>r1<span class=\"token punctuation\">.</span>selector<span class=\"token punctuation\">.</span><span class=\"token keyword\">type</span> <span class=\"token operator\">=</span> replicating</pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">#步骤四： channel</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\"># Describe the channel</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>a1<span class=\"token punctuation\">.</span>channels<span class=\"token punctuation\">.</span>c1<span class=\"token punctuation\">.</span><span class=\"token keyword\">type</span> <span class=\"token operator\">=</span> memory</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>a1<span class=\"token punctuation\">.</span>channels<span class=\"token punctuation\">.</span>c1<span class=\"token punctuation\">.</span>capacity <span class=\"token operator\">=</span> <span class=\"token number\">1000</span> </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>a1<span class=\"token punctuation\">.</span>channels<span class=\"token punctuation\">.</span>c1<span class=\"token punctuation\">.</span>transactionCapacity <span class=\"token operator\">=</span> <span class=\"token number\">100</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\">#步骤五： sinkprocessor，默认配置 defaultsinkprocessor</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\">#步骤六： sink</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\"># Describe the sink</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sinks<span class=\"token punctuation\">.</span>k1<span class=\"token punctuation\">.</span><span class=\"token keyword\">type</span> <span class=\"token operator\">=</span> logger</pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token comment\">#步骤七：连接 source、channel、sink</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sources<span class=\"token punctuation\">.</span>r1<span class=\"token punctuation\">.</span>channels <span class=\"token operator\">=</span> c1</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sinks<span class=\"token punctuation\">.</span>k1<span class=\"token punctuation\">.</span>channel <span class=\"token operator\">=</span> c1</pre></td></tr></table></figure>",
            "tags": [
                "大数据",
                "Flume"
            ]
        },
        {
            "id": "https://github.com/Mayizono/miyazono.github.io/big-data/flume/Flume/",
            "url": "https://github.com/Mayizono/miyazono.github.io/big-data/flume/Flume/",
            "title": "Flume基础学习",
            "date_published": "2019-01-01T16:00:00.000Z",
            "content_html": "<h2 id=\"一-写flume的步骤\"><a class=\"anchor\" href=\"#一-写flume的步骤\">#</a> 一、写 flume 的步骤</h2>\n<h3 id=\"100-flume-事务\"><a class=\"anchor\" href=\"#100-flume-事务\">#</a> 1.0.0 Flume 事务</h3>\n<p><img data-src=\"https://miyazono-1255488789.cos.ap-shanghai.myqcloud.com/markdown/20210820202104.png\" alt=\"image-flume-事务\" /></p>\n<h3 id=\"11-画拓扑图\"><a class=\"anchor\" href=\"#11-画拓扑图\">#</a> 1.1 画拓扑图</h3>\n<blockquote>\n<p>总结：一个 channel 只能输出一个结果文件。</p>\n<p>一个 flume agent 由 source + channel + sink 构成，类比于 mapper + shuffer + reducer。</p>\n</blockquote>\n<h4 id=\"111-确定source类型\"><a class=\"anchor\" href=\"#111-确定source类型\">#</a> 1.1.1 确定 source 类型</h4>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>常用类型：</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> arvo:  用于Flume agent 之间的数据源传递</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> netcat: 用于监听端口</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token number\">3</span>）<span class=\"token keyword\">exec</span>: 用于执行linux中的操作指令</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> spooldir: 用于监视文件或目录</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token number\">5</span><span class=\"token punctuation\">)</span> taildir: 用于监视文件或目录，同时支持追加的监听</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t总结 ，<span class=\"token number\">3</span><span class=\"token operator\">/</span><span class=\"token number\">4</span><span class=\"token operator\">/</span><span class=\"token number\">5</span>三种方式，最常用的是<span class=\"token number\">5</span>，适合用于监听多个实时追加的文件，并且能够实现断点续传。</pre></td></tr></table></figure><h4 id=\"112-确定channel-selector-的选择器\"><a class=\"anchor\" href=\"#112-确定channel-selector-的选择器\">#</a> 1.1.2 <strong>确定 channel selector 的选择器</strong></h4>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1</span>）replicating channel selector：复制，每个channel发一份数据 <span class=\"token comment\">-- 默认的选择器</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> multiplexing channel selector : 根据配置配件，指定source源获取的数据发往一个或多个channel</pre></td></tr></table></figure><h4 id=\"113-确认channel类型参数\"><a class=\"anchor\" href=\"#113-确认channel类型参数\">#</a> <strong>1.1.3 确认 channel 类型参数</strong></h4>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1</span>） Memory Channel ： 加载在内存中，存在数据丢失的风险 <span class=\"token comment\">-- 学习阶段使用此参数</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token number\">2</span>） <span class=\"token keyword\">File</span> Channel ：落入磁盘</pre></td></tr></table></figure><h4 id=\"114-确定sinkprocessor参数\"><a class=\"anchor\" href=\"#114-确定sinkprocessor参数\">#</a> <strong>1.1.4 确定 sinkprocessor 参数</strong></h4>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1</span>） DefaultSinkProcessor：对应的是单个的Sink</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token number\">2</span>） LoadBalancingSinkProcessor ：对应的是多个的Sink，可以实现负载均衡的功能</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token number\">3</span>） FailoverSinkProcessor ：对应的是多个的Sink，容错功能，先指定一个sink，所有的数据都走指定的sink，当sink故障以后，其他的sink顶上，如果开始sink恢复了，那么数据继续走原有指定的sink。</pre></td></tr></table></figure><h4 id=\"115-确定sink的类型\"><a class=\"anchor\" href=\"#115-确定sink的类型\">#</a> <strong>1.1.5 确定 sink 的类型</strong></h4>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>常使用的类型有：</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> avro: 用于输出到下一个Flume Agent ，一个开源的序列化框架</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> hdfs: 输出到hdfs</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> fill_roll: 输出到本地</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> logger: 输出到控制台</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token number\">5</span><span class=\"token punctuation\">)</span> hbase: 输出到hbase</pre></td></tr></table></figure><h4 id=\"116-拓扑例图\"><a class=\"anchor\" href=\"#116-拓扑例图\">#</a> 1.1.6 拓扑例图</h4>\n<p>​\t\t\t\t\t\t\t\t\t\t<img data-src=\"https://miyazono-1255488789.cos.ap-shanghai.myqcloud.com/markdown/20210820202537.png\" alt=\"图3\" /></p>\n<p>​\t图 3</p>\n<h3 id=\"12-写配置文件\"><a class=\"anchor\" href=\"#12-写配置文件\">#</a> 1.2 写配置文件</h3>\n<h4 id=\"121-配置文件的构成\"><a class=\"anchor\" href=\"#121-配置文件的构成\">#</a> 1.2.1 配置文件的构成</h4>\n<ol>\n<li>Name the components on this agent  -- agent Name</li>\n<li>Describe/configure the source  -- source</li>\n<li>channel selector</li>\n<li>Describe the channel  -- channel</li>\n<li>sinkprocessor</li>\n<li>Describe the sink   --sink</li>\n<li>Bind the source and sink to the channel -- 连接 source、channel、sink</li>\n</ol>\n<h4 id=\"122-agent-name\"><a class=\"anchor\" href=\"#122-agent-name\">#</a> 1.2.2   agent Name</h4>\n<p>情况 1：source、channel、sink 各一个</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sources <span class=\"token operator\">=</span> r1</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sinks <span class=\"token operator\">=</span> k1</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>a1<span class=\"token punctuation\">.</span>channels <span class=\"token operator\">=</span> c1</pre></td></tr></table></figure><p>情况 2：source 一个、channel 一个、sink 多个</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sources <span class=\"token operator\">=</span> r1</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>a1<span class=\"token punctuation\">.</span>channels <span class=\"token operator\">=</span> c1</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sinkgroups <span class=\"token operator\">=</span> g1</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sinks <span class=\"token operator\">=</span> k1 k2</pre></td></tr></table></figure><p>情况 3：source 一个、channel 多个、sink 多个</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sources <span class=\"token operator\">=</span> r1</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sinks <span class=\"token operator\">=</span> k1 k2</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>a1<span class=\"token punctuation\">.</span>channels <span class=\"token operator\">=</span> c1 c2</pre></td></tr></table></figure><h4 id=\"123-source\"><a class=\"anchor\" href=\"#123-source\">#</a> 1.2.3  source</h4>\n<p>情况 1：avro</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sources<span class=\"token punctuation\">.</span>r1<span class=\"token punctuation\">.</span><span class=\"token keyword\">type</span> <span class=\"token operator\">=</span> avro</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sources<span class=\"token punctuation\">.</span>r1<span class=\"token punctuation\">.</span>bind <span class=\"token operator\">=</span> hadoop102 <span class=\"token comment\">-- hosename</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sources<span class=\"token punctuation\">.</span>r1<span class=\"token punctuation\">.</span>port <span class=\"token operator\">=</span> <span class=\"token number\">4141</span> <span class=\"token comment\">-- 端口号</span></pre></td></tr></table></figure><p>情况 2：netcat</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sources<span class=\"token punctuation\">.</span>r1<span class=\"token punctuation\">.</span><span class=\"token keyword\">type</span> <span class=\"token operator\">=</span> netcat</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sources<span class=\"token punctuation\">.</span>r1<span class=\"token punctuation\">.</span>bind <span class=\"token operator\">=</span> localhost <span class=\"token comment\">-- 指接收来自 ip 为 localhost 发来的数据，如果是 0.0.0.0，则表示可以接收来自任意 ip 地址发来的数据</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sources<span class=\"token punctuation\">.</span>r1<span class=\"token punctuation\">.</span>port <span class=\"token operator\">=</span> <span class=\"token number\">44444</span>  <span class=\"token comment\">-- 本机的端口号，从该端口接收数据</span></pre></td></tr></table></figure><p>情况 3：exec</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sources<span class=\"token punctuation\">.</span>r1<span class=\"token punctuation\">.</span><span class=\"token keyword\">type</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">exec</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sources<span class=\"token punctuation\">.</span>r1<span class=\"token punctuation\">.</span>command <span class=\"token operator\">=</span> tail <span class=\"token operator\">-</span>F <span class=\"token operator\">/</span>opt<span class=\"token operator\">/</span>module<span class=\"token operator\">/</span>hive<span class=\"token operator\">/</span>logs<span class=\"token operator\">/</span>hive<span class=\"token punctuation\">.</span>log <span class=\"token comment\">-->linux 执行的命令</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sources<span class=\"token punctuation\">.</span>r1<span class=\"token punctuation\">.</span>shell <span class=\"token operator\">=</span> <span class=\"token operator\">/</span>bin<span class=\"token operator\">/</span>bash <span class=\"token operator\">-</span>c <span class=\"token comment\">-- linux 的解析器</span></pre></td></tr></table></figure><p>情况 4: sqooldir</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># Describe/configure the source</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sources<span class=\"token punctuation\">.</span>r1<span class=\"token punctuation\">.</span><span class=\"token keyword\">type</span> <span class=\"token operator\">=</span> spooldir <span class=\"token comment\">-- 定义 source 类型</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sources<span class=\"token punctuation\">.</span>r1<span class=\"token punctuation\">.</span>spoolDir <span class=\"token operator\">=</span> <span class=\"token operator\">/</span>opt<span class=\"token operator\">/</span>module<span class=\"token operator\">/</span>flume<span class=\"token operator\">/</span>upload <span class=\"token comment\">-- 定义监控的文件或目录</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sources<span class=\"token punctuation\">.</span>r1<span class=\"token punctuation\">.</span>fileSuffix <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span>COMPLETED <span class=\"token comment\">-- 定义文件上传后的后缀</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sources<span class=\"token punctuation\">.</span>r1<span class=\"token punctuation\">.</span>fileHeader <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span> <span class=\"token comment\">-- 是否有文件头</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">#忽略所有以.tmp 结尾的文件，不上传</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sources<span class=\"token punctuation\">.</span>r1<span class=\"token punctuation\">.</span>ignorePattern <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token operator\">^</span> <span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>\\<span class=\"token punctuation\">.</span>tmp<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>情况 5：talidir</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># Describe/configure the source</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sources<span class=\"token punctuation\">.</span>r1<span class=\"token punctuation\">.</span><span class=\"token keyword\">type</span> <span class=\"token operator\">=</span> TAILDIR </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sources<span class=\"token punctuation\">.</span>r1<span class=\"token punctuation\">.</span>positionFile <span class=\"token operator\">=</span> <span class=\"token operator\">/</span>opt<span class=\"token operator\">/</span>module<span class=\"token operator\">/</span>flume<span class=\"token operator\">/</span>tail_dir<span class=\"token punctuation\">.</span>json <span class=\"token comment\">-- 指定 position_file 的位置，(记录每次上传后的偏移量，实现断点续传的关键)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sources<span class=\"token punctuation\">.</span>r1<span class=\"token punctuation\">.</span>batchSize<span class=\"token operator\">=</span><span class=\"token number\">500</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sources<span class=\"token punctuation\">.</span>r1<span class=\"token punctuation\">.</span>filegroups <span class=\"token operator\">=</span> f1 f2 <span class=\"token comment\">-- 监控的文件目录集合</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sources<span class=\"token punctuation\">.</span>r1<span class=\"token punctuation\">.</span>filegroups<span class=\"token punctuation\">.</span>f1 <span class=\"token operator\">=</span> <span class=\"token operator\">/</span>opt<span class=\"token operator\">/</span>module<span class=\"token operator\">/</span>flume<span class=\"token operator\">/</span>files<span class=\"token operator\">/</span><span class=\"token punctuation\">.</span><span class=\"token operator\">*</span><span class=\"token keyword\">file</span><span class=\"token punctuation\">.</span><span class=\"token operator\">*</span> <span class=\"token comment\">-- 定义监控的文件目录 1</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sources<span class=\"token punctuation\">.</span>r1<span class=\"token punctuation\">.</span>filegroups<span class=\"token punctuation\">.</span>f2 <span class=\"token operator\">=</span> <span class=\"token operator\">/</span>opt<span class=\"token operator\">/</span>module<span class=\"token operator\">/</span>flume<span class=\"token operator\">/</span>files<span class=\"token operator\">/</span><span class=\"token punctuation\">.</span><span class=\"token operator\">*</span>log<span class=\"token punctuation\">.</span><span class=\"token operator\">*</span> <span class=\"token comment\">-- 定义监控的文件目录 2</span></pre></td></tr></table></figure><h4 id=\"124-channel-selector\"><a class=\"anchor\" href=\"#124-channel-selector\">#</a> 1.2.4 channel selector</h4>\n<p>情况 1： replicating channel selector</p>\n<pre><code># 将数据流复制给所有channel\na1.sources.r1.selector.type = replicating\n</code></pre>\n<p>情况 2：multiplexing channel selector 需配合指定的拦截器使用（interceptor）</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 指定拦截器</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sources<span class=\"token punctuation\">.</span>r1<span class=\"token punctuation\">.</span>interceptors <span class=\"token operator\">=</span> i1 <span class=\"token comment\">-- 指定拦截器的名称</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sources<span class=\"token punctuation\">.</span>r1<span class=\"token punctuation\">.</span>interceptors<span class=\"token punctuation\">.</span>i1<span class=\"token punctuation\">.</span><span class=\"token keyword\">type</span> <span class=\"token operator\">=</span> com<span class=\"token punctuation\">.</span>miyazono<span class=\"token punctuation\">.</span>flume<span class=\"token punctuation\">.</span>interceptor<span class=\"token punctuation\">.</span>CustomInterceptor$Builder</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">-- 指定拦截器的类型 = 自定义拦截器中 builder 的实现类的全类名</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">-- 指定 channel 的选择器</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sources<span class=\"token punctuation\">.</span>r1<span class=\"token punctuation\">.</span>selector<span class=\"token punctuation\">.</span><span class=\"token keyword\">type</span> <span class=\"token operator\">=</span> multiplexing  <span class=\"token comment\">-- 定义 channel 的选择器类型</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sources<span class=\"token punctuation\">.</span>r1<span class=\"token punctuation\">.</span>selector<span class=\"token punctuation\">.</span>header <span class=\"token operator\">=</span> <span class=\"token keyword\">type</span>  <span class=\"token comment\">-- 自定义拦截器的 header 的 k</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sources<span class=\"token punctuation\">.</span>r1<span class=\"token punctuation\">.</span>selector<span class=\"token punctuation\">.</span>mapping<span class=\"token punctuation\">.</span>letter <span class=\"token operator\">=</span> c1 <span class=\"token comment\">-- letter 是 map 中一个 value 值，相同的 letter 进入一个 channel 中</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sources<span class=\"token punctuation\">.</span>r1<span class=\"token punctuation\">.</span>selector<span class=\"token punctuation\">.</span>mapping<span class=\"token punctuation\">.</span>number <span class=\"token operator\">=</span> c2 <span class=\"token comment\">-- number 是 map 中一个 value 值，相同的 number 进入一个 channel 中</span></pre></td></tr></table></figure><h4 id=\"125-channel\"><a class=\"anchor\" href=\"#125-channel\">#</a> 1.2.5 channel</h4>\n<p>情况 1： memory</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># Describe the channel</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>a1<span class=\"token punctuation\">.</span>channels<span class=\"token punctuation\">.</span>c1<span class=\"token punctuation\">.</span><span class=\"token keyword\">type</span> <span class=\"token operator\">=</span> memory</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>a1<span class=\"token punctuation\">.</span>channels<span class=\"token punctuation\">.</span>c1<span class=\"token punctuation\">.</span>capacity <span class=\"token operator\">=</span> <span class=\"token number\">1000</span> <span class=\"token comment\">-- 表示 channel 总容量为 1000 个 event</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>a1<span class=\"token punctuation\">.</span>channels<span class=\"token punctuation\">.</span>c1<span class=\"token punctuation\">.</span>transactionCapacity <span class=\"token operator\">=</span> <span class=\"token number\">100</span> <span class=\"token comment\">-- 表示 channel 传输时收集到的 100 条 event</span></pre></td></tr></table></figure><p>情况 2 ： flie</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a1<span class=\"token punctuation\">.</span>channels<span class=\"token punctuation\">.</span>c1<span class=\"token punctuation\">.</span><span class=\"token keyword\">type</span><span class=\"token operator\">=</span><span class=\"token keyword\">file</span>  <span class=\"token comment\">--channel 类型</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>a1<span class=\"token punctuation\">.</span>channels<span class=\"token punctuation\">.</span>c1<span class=\"token punctuation\">.</span>checkpointDir<span class=\"token operator\">=</span><span class=\"token operator\">/</span>opt<span class=\"token operator\">/</span>module<span class=\"token operator\">/</span>flume<span class=\"token operator\">/</span><span class=\"token keyword\">checkpoint</span><span class=\"token operator\">/</span>behavior1 <span class=\"token comment\">--checkpoint 文件存储的地址</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>a1<span class=\"token punctuation\">.</span>channels<span class=\"token punctuation\">.</span>c1<span class=\"token punctuation\">.</span>dataDirs<span class=\"token operator\">=</span><span class=\"token operator\">/</span>opt<span class=\"token operator\">/</span>module<span class=\"token operator\">/</span>flume<span class=\"token operator\">/</span><span class=\"token keyword\">data</span><span class=\"token operator\">/</span>behavior1<span class=\"token operator\">/</span>  <span class=\"token comment\">-- channel 中 event 文件在磁盘中存储的地址</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>a1<span class=\"token punctuation\">.</span>channels<span class=\"token punctuation\">.</span>c1<span class=\"token punctuation\">.</span>capacity<span class=\"token operator\">=</span><span class=\"token number\">1000000</span> <span class=\"token comment\">--checkpoint 个数的最大容量</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>a1<span class=\"token punctuation\">.</span>channels<span class=\"token punctuation\">.</span>c1<span class=\"token punctuation\">.</span>maxFileSize<span class=\"token operator\">=</span><span class=\"token number\">2146435071</span> <span class=\"token comment\">-- 一个 event 文件存储的最大的大小</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>a1<span class=\"token punctuation\">.</span>channels<span class=\"token punctuation\">.</span>c1<span class=\"token punctuation\">.</span>keep<span class=\"token operator\">-</span>alive<span class=\"token operator\">=</span><span class=\"token number\">6</span> <span class=\"token comment\">-- 当 put 事务将数据提交到 channel 队列中，channel 队列没有足够的空间时，提交事务等待的最大时间</span></pre></td></tr></table></figure><h4 id=\"126-sinkprocessor\"><a class=\"anchor\" href=\"#126-sinkprocessor\">#</a> 1.2.6 sinkprocessor</h4>\n<p>情况 1：DefaultSinkProcessor -- 对应单个 Sink</p>\n<pre><code>不用写任何配置信息，默认值。\n</code></pre>\n<p>情况 2：FailoverSinkProcessor -- 对应的是 Sink Group</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sinkgroups<span class=\"token punctuation\">.</span>g1<span class=\"token punctuation\">.</span>processor<span class=\"token punctuation\">.</span><span class=\"token keyword\">type</span> <span class=\"token operator\">=</span> failover <span class=\"token comment\">-- 指定类型</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sinkgroups<span class=\"token punctuation\">.</span>g1<span class=\"token punctuation\">.</span>processor<span class=\"token punctuation\">.</span>priority<span class=\"token punctuation\">.</span>k1 <span class=\"token operator\">=</span> <span class=\"token number\">5</span> <span class=\"token comment\">-- 设置 K1 的 sink 的优先级</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sinkgroups<span class=\"token punctuation\">.</span>g1<span class=\"token punctuation\">.</span>processor<span class=\"token punctuation\">.</span>priority<span class=\"token punctuation\">.</span>k2 <span class=\"token operator\">=</span> <span class=\"token number\">10</span> <span class=\"token comment\">-- 设置 K2 的 sink 的优先级</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sinkgroups<span class=\"token punctuation\">.</span>g1<span class=\"token punctuation\">.</span>processor<span class=\"token punctuation\">.</span>maxpenalty <span class=\"token operator\">=</span> <span class=\"token number\">10000</span> <span class=\"token comment\">-- 设置故障的转换时间 10s。默认值为 30s</span></pre></td></tr></table></figure><p>情况 3：LoadBalancingSinkProcessor -- 对应的是 Sink Group</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sinkgroups<span class=\"token punctuation\">.</span>g1<span class=\"token punctuation\">.</span>processor<span class=\"token punctuation\">.</span><span class=\"token keyword\">type</span> <span class=\"token operator\">=</span>load_balance <span class=\"token comment\">-- 指定类型</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sinkgroups<span class=\"token punctuation\">.</span>g1<span class=\"token punctuation\">.</span>processor<span class=\"token punctuation\">.</span>backoff <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span> <span class=\"token comment\">-- 暂不讨论</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sinkgroups<span class=\"token punctuation\">.</span>g1<span class=\"token punctuation\">.</span>processor<span class=\"token punctuation\">.</span>selector <span class=\"token operator\">=</span>round_robin <span class=\"token comment\">-- 暂不讨论</span></pre></td></tr></table></figure><h4 id=\"127-sink\"><a class=\"anchor\" href=\"#127-sink\">#</a> 1.2.7 sink</h4>\n<p>情况 1：avro</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># Describe the sink</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sinks<span class=\"token punctuation\">.</span>k1<span class=\"token punctuation\">.</span><span class=\"token keyword\">type</span> <span class=\"token operator\">=</span> avro</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sinks<span class=\"token punctuation\">.</span>k1<span class=\"token punctuation\">.</span>hostname <span class=\"token operator\">=</span> hadoop104 <span class=\"token comment\">-- hosaname</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sinks<span class=\"token punctuation\">.</span>k1<span class=\"token punctuation\">.</span>port <span class=\"token operator\">=</span> <span class=\"token number\">4141</span>  <span class=\"token comment\">-- 端口</span></pre></td></tr></table></figure><p>情况 2：hdfs</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sinks<span class=\"token punctuation\">.</span>k1<span class=\"token punctuation\">.</span><span class=\"token keyword\">type</span> <span class=\"token operator\">=</span> hdfs</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sinks<span class=\"token punctuation\">.</span>k1<span class=\"token punctuation\">.</span>hdfs<span class=\"token punctuation\">.</span>path <span class=\"token operator\">=</span> hdfs:<span class=\"token comment\">//hadoop102:9820/flume/upload2/% Y% m% d/% H   -- 上传到 HDFS 的路径</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">#上传文件的前缀</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sinks<span class=\"token punctuation\">.</span>k1<span class=\"token punctuation\">.</span>hdfs<span class=\"token punctuation\">.</span>filePrefix <span class=\"token operator\">=</span> upload<span class=\"token operator\">-</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">#是否按照时间滚动文件夹</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sinks<span class=\"token punctuation\">.</span>k1<span class=\"token punctuation\">.</span>hdfs<span class=\"token punctuation\">.</span>round <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">#多少时间单位创建一个新的文件夹</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sinks<span class=\"token punctuation\">.</span>k1<span class=\"token punctuation\">.</span>hdfs<span class=\"token punctuation\">.</span>roundValue <span class=\"token operator\">=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">#重新定义时间单位</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sinks<span class=\"token punctuation\">.</span>k1<span class=\"token punctuation\">.</span>hdfs<span class=\"token punctuation\">.</span>roundUnit <span class=\"token operator\">=</span> <span class=\"token keyword\">hour</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">#是否使用本地时间戳</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sinks<span class=\"token punctuation\">.</span>k1<span class=\"token punctuation\">.</span>hdfs<span class=\"token punctuation\">.</span>useLocalTimeStamp <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">#积攒多少个 Event 才 flush 到 HDFS 一次</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sinks<span class=\"token punctuation\">.</span>k1<span class=\"token punctuation\">.</span>hdfs<span class=\"token punctuation\">.</span>batchSize <span class=\"token operator\">=</span> <span class=\"token number\">100</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">#设置文件类型，可支持压缩</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sinks<span class=\"token punctuation\">.</span>k1<span class=\"token punctuation\">.</span>hdfs<span class=\"token punctuation\">.</span>fileType <span class=\"token operator\">=</span> DataStream</pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">#多久生成一个新的文件</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sinks<span class=\"token punctuation\">.</span>k1<span class=\"token punctuation\">.</span>hdfs<span class=\"token punctuation\">.</span>rollInterval <span class=\"token operator\">=</span> <span class=\"token number\">60</span>  <span class=\"token comment\">-- 单位是秒</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">#设置每个文件的滚动大小大概是 128M</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sinks<span class=\"token punctuation\">.</span>k1<span class=\"token punctuation\">.</span>hdfs<span class=\"token punctuation\">.</span>rollSize <span class=\"token operator\">=</span> <span class=\"token number\">134217700</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\">#文件的滚动与 Event 数量无关</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sinks<span class=\"token punctuation\">.</span>k1<span class=\"token punctuation\">.</span>hdfs<span class=\"token punctuation\">.</span>rollCount <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr></table></figure><p>情况 3：fill_roll</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># Describe the sink</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sinks<span class=\"token punctuation\">.</span>k1<span class=\"token punctuation\">.</span><span class=\"token keyword\">type</span> <span class=\"token operator\">=</span> file_roll</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sinks<span class=\"token punctuation\">.</span>k1<span class=\"token punctuation\">.</span>sink<span class=\"token punctuation\">.</span>directory <span class=\"token operator\">=</span> <span class=\"token operator\">/</span>opt<span class=\"token operator\">/</span>module<span class=\"token operator\">/</span>flume<span class=\"token operator\">/</span>datas<span class=\"token operator\">/</span>flume3 <span class=\"token comment\">-- 指定上传到本地的路径</span></pre></td></tr></table></figure><p>情况 4：logger</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># Describe the sink</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sinks<span class=\"token punctuation\">.</span>k1<span class=\"token punctuation\">.</span><span class=\"token keyword\">type</span> <span class=\"token operator\">=</span> logger</pre></td></tr></table></figure><p>情况 5：hbase       --- 暂时不讨论</p>\n<h4 id=\"128-连接source-channel-sink\"><a class=\"anchor\" href=\"#128-连接source-channel-sink\">#</a> 1.2.8 连接 source、channel、sink</h4>\n<p>情况 1：source、channel、sink 各一个、</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sources<span class=\"token punctuation\">.</span>r1<span class=\"token punctuation\">.</span>channels <span class=\"token operator\">=</span> c1</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sinks<span class=\"token punctuation\">.</span>k1<span class=\"token punctuation\">.</span>channel <span class=\"token operator\">=</span> c1</pre></td></tr></table></figure><p>情况 2：source 一个、channel 一个、sink 多个</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># Bind the source and sink to the channel</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sources<span class=\"token punctuation\">.</span>r1<span class=\"token punctuation\">.</span>channels <span class=\"token operator\">=</span> c1</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sinkgroups<span class=\"token punctuation\">.</span>g1<span class=\"token punctuation\">.</span>sinks <span class=\"token operator\">=</span> k1 k2</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sinks<span class=\"token punctuation\">.</span>k1<span class=\"token punctuation\">.</span>channel <span class=\"token operator\">=</span> c1</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sinks<span class=\"token punctuation\">.</span>k2<span class=\"token punctuation\">.</span>channel <span class=\"token operator\">=</span> c1</pre></td></tr></table></figure><p>情况 3：source 一个、channel 多个、sink 多个</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># Bind the source and sink to the channel</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sources<span class=\"token punctuation\">.</span>r1<span class=\"token punctuation\">.</span>channels <span class=\"token operator\">=</span> c1 c2</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sinks<span class=\"token punctuation\">.</span>k1<span class=\"token punctuation\">.</span>channel <span class=\"token operator\">=</span> c1</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sinks<span class=\"token punctuation\">.</span>k2<span class=\"token punctuation\">.</span>channel <span class=\"token operator\">=</span> c2 <span class=\"token comment\">-- 特别注意 channel 没有 “s”</span></pre></td></tr></table></figure><h4 id=\"129-端口和ip的区别\"><a class=\"anchor\" href=\"#129-端口和ip的区别\">#</a> 1.2.9 端口和 ip 的区别</h4>\n<ul>\n<li>sink 端：向指定 ip 地址的端口发送数据</li>\n</ul>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>端口：</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>ip（hostname）：</pre></td></tr></table></figure><ul>\n<li>source 端：监视指定端口并接收指定 ip 发送来的数据</li>\n</ul>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>端口：该端口只能是自己机器的端口</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>ip（hostname）：指能够接受来自此ip的数据</pre></td></tr></table></figure><h3 id=\"13-连接flume\"><a class=\"anchor\" href=\"#13-连接flume\">#</a> 1.3 连接 flume</h3>\n<h4 id=\"131-查看指定ip的通信端口\"><a class=\"anchor\" href=\"#131-查看指定ip的通信端口\">#</a> 1.3.1 查看指定 ip 的通信端口</h4>\n<pre><code>sudo netstat -ntlp | grep 端口号\n</code></pre>\n<h4 id=\"132-关闭端口\"><a class=\"anchor\" href=\"#132-关闭端口\">#</a> 1.3.2 关闭端口</h4>\n<pre><code>sudo kill 端口的进程号\n</code></pre>\n<h4 id=\"133-连接指定ip地址的指定端口\"><a class=\"anchor\" href=\"#133-连接指定ip地址的指定端口\">#</a> 1.3.3 连接指定 ip 地址的指定端口</h4>\n<pre><code>nc ip 端口号\n</code></pre>\n<h4 id=\"134-启动flume\"><a class=\"anchor\" href=\"#134-启动flume\">#</a> 1.3.4  启动 flume</h4>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>bin<span class=\"token operator\">/</span>flume<span class=\"token operator\">-</span>ng agent <span class=\"token operator\">-</span>n <span class=\"token punctuation\">[</span>agent name<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span>c conf <span class=\"token operator\">-</span>f <span class=\"token punctuation\">[</span>自定义flume配置文件<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span>Dflume<span class=\"token punctuation\">.</span>root<span class=\"token punctuation\">.</span>logger<span class=\"token operator\">=</span>INFO<span class=\"token punctuation\">,</span>console</pre></td></tr></table></figure><h2 id=\"二-自定义interceptorsource-sink\"><a class=\"anchor\" href=\"#二-自定义interceptorsource-sink\">#</a> 二、自定义 interceptor，source、 sink</h2>\n<h3 id=\"21-自定义intercepor\"><a class=\"anchor\" href=\"#21-自定义intercepor\">#</a> 2.1 自定义 intercepor</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">flume_interceptor</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>flume<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Context</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>flume<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Event</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>flume<span class=\"token punctuation\">.</span>interceptor<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Interceptor</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">List</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Map</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> * @author lianzhipeng</pre></td></tr><tr><td data-num=\"12\"></td><td><pre> * @Description</pre></td></tr><tr><td data-num=\"13\"></td><td><pre> * @create 2020-05-05 10:45</pre></td></tr><tr><td data-num=\"14\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyInterceptor</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Interceptor</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>     * Description: 初始化方法，新建 Interceptor 时使用</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>     * @Author: lianzhipeng</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>     * @Date: 2020/5/5 10:45</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>     * @return: void</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">initialize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>     * Description: 更改方法，对 event 进行处理</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>     * @param event 传入的数据</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>     * @Author: lianzhipeng</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>     * @Date: 2020/5/5 10:47</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>     * @return: org.apache.flume.Event 返回处理好的数据</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Event</span> <span class=\"token function\">intercept</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Event</span> event<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token comment\">// 获取 event 的 header</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> headers <span class=\"token operator\">=</span> event<span class=\"token punctuation\">.</span><span class=\"token function\">getHeaders</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token comment\">// 获取 event 的 body</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> body <span class=\"token operator\">=</span> event<span class=\"token punctuation\">.</span><span class=\"token function\">getBody</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token comment\">// 处理数据</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token class-name\">String</span> string <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span>body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token keyword\">char</span> c <span class=\"token operator\">=</span> string<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">>=</span> <span class=\"token string\">'a'</span> <span class=\"token operator\">&amp;&amp;</span> c <span class=\"token operator\">&lt;=</span> <span class=\"token string\">'z'</span> <span class=\"token operator\">||</span> c <span class=\"token operator\">>=</span> <span class=\"token string\">'A'</span> <span class=\"token operator\">&amp;&amp;</span> c <span class=\"token operator\">&lt;=</span> <span class=\"token string\">'Z'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>            headers<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"type\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"char\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>            headers<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"type\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"not-char\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        <span class=\"token comment\">// 返回数据</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        <span class=\"token keyword\">return</span> event<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre></pre></td></tr><tr><td data-num=\"61\"></td><td><pre></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Event</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">intercept</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Event</span><span class=\"token punctuation\">></span></span> list<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Event</span> event <span class=\"token operator\">:</span> list<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>            <span class=\"token function\">intercept</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>        <span class=\"token keyword\">return</span> list<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre></pre></td></tr><tr><td data-num=\"71\"></td><td><pre></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"79\"></td><td><pre>     * 框架会调用 MyBulider 来创建自定义拦截器实例</pre></td></tr><tr><td data-num=\"80\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyBulider</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Builder</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>        <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"84\"></td><td><pre>         * Description: 创建自定义拦截器实例的方法</pre></td></tr><tr><td data-num=\"85\"></td><td><pre>         *</pre></td></tr><tr><td data-num=\"86\"></td><td><pre>         * @Author: lianzhipeng</pre></td></tr><tr><td data-num=\"87\"></td><td><pre>         * @Date: 2020/5/5 10:54</pre></td></tr><tr><td data-num=\"88\"></td><td><pre>         * @return: org.apache.flume.interceptor.Interceptor</pre></td></tr><tr><td data-num=\"89\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token class-name\">Interceptor</span> <span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MyInterceptor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>        <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"95\"></td><td><pre>         * Description: 读取配置信息</pre></td></tr><tr><td data-num=\"96\"></td><td><pre>         *</pre></td></tr><tr><td data-num=\"97\"></td><td><pre>         * @param context</pre></td></tr><tr><td data-num=\"98\"></td><td><pre>         * @Author: lianzhipeng</pre></td></tr><tr><td data-num=\"99\"></td><td><pre>         * @Date: 2020/5/5 10:54</pre></td></tr><tr><td data-num=\"100\"></td><td><pre>         * @return: void</pre></td></tr><tr><td data-num=\"101\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">configure</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Context</span> context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"22-自定义source\"><a class=\"anchor\" href=\"#22-自定义source\">#</a> 2.2 自定义 source</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">flume_interceptor</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>flume<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Context</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>flume<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Event</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>flume<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">EventDeliveryException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>flume<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">PollableSource</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>flume<span class=\"token punctuation\">.</span>channel<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ChannelProcessor</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>flume<span class=\"token punctuation\">.</span>conf<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Configurable</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>flume<span class=\"token punctuation\">.</span>event<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SimpleEvent</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>flume<span class=\"token punctuation\">.</span>source<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">AbstractSource</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"13\"></td><td><pre> * @author lianzhipeng</pre></td></tr><tr><td data-num=\"14\"></td><td><pre> * @Description</pre></td></tr><tr><td data-num=\"15\"></td><td><pre> * @create 2020-05-05 14:31</pre></td></tr><tr><td data-num=\"16\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MySource</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">AbstractSource</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Configurable</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">PollableSource</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> prefix<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Long</span> interval<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>     * Description: 拉取事件并交给 ChannelProcessor 处理的方法</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>     * @Author: lianzhipeng</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>     * @Date: 2020/5/5 14:33</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>     * @return: org.apache.flume.PollableSource.Status</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Status</span> <span class=\"token function\">process</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">EventDeliveryException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token class-name\">Status</span> status <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            <span class=\"token comment\">// 通过外部方法拉取数据</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            <span class=\"token class-name\">Event</span> e <span class=\"token operator\">=</span> <span class=\"token function\">getSomeData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            <span class=\"token comment\">// Store the Event into this Source's associated Channel(s)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            <span class=\"token class-name\">ChannelProcessor</span> channelProcessor <span class=\"token operator\">=</span> <span class=\"token function\">getChannelProcessor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            channelProcessor<span class=\"token punctuation\">.</span><span class=\"token function\">processEvent</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>            status <span class=\"token operator\">=</span> <span class=\"token class-name\">Status</span><span class=\"token punctuation\">.</span>READY<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Throwable</span> t<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>            <span class=\"token comment\">// Log exception, handle individual exceptions as needed</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>            status <span class=\"token operator\">=</span> <span class=\"token class-name\">Status</span><span class=\"token punctuation\">.</span>BACKOFF<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>            <span class=\"token comment\">// re-throw all Errors</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>t <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>                <span class=\"token keyword\">throw</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Error</span><span class=\"token punctuation\">)</span>t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        <span class=\"token keyword\">return</span> status<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre></pre></td></tr><tr><td data-num=\"57\"></td><td><pre></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"59\"></td><td><pre>     * Description: 拉取数据并包装成 event 的过程</pre></td></tr><tr><td data-num=\"60\"></td><td><pre>     * @Author: lianzhipeng</pre></td></tr><tr><td data-num=\"61\"></td><td><pre>     * @Date: 2020/5/5 14:55</pre></td></tr><tr><td data-num=\"62\"></td><td><pre>     * @return: org.apache.flume.Event 拉取到的数据</pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    */</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Event</span> <span class=\"token function\">getSomeData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>        <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>        <span class=\"token comment\">// 添加前缀</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>        <span class=\"token class-name\">String</span> message <span class=\"token operator\">=</span> prefix <span class=\"token operator\">+</span> i <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>        <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span>interval<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>        <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>        <span class=\"token class-name\">SimpleEvent</span> event <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SimpleEvent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>        event<span class=\"token punctuation\">.</span><span class=\"token function\">setBody</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">.</span><span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>        <span class=\"token keyword\">return</span>  event<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"80\"></td><td><pre>     * Description: 如果拉取不到数据，backoff 时间的增长速度</pre></td></tr><tr><td data-num=\"81\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"82\"></td><td><pre>     * @Author: lianzhipeng</pre></td></tr><tr><td data-num=\"83\"></td><td><pre>     * @Date: 2020/5/5 14:34</pre></td></tr><tr><td data-num=\"84\"></td><td><pre>     * @return: long 增长量</pre></td></tr><tr><td data-num=\"85\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">long</span> <span class=\"token function\">getBackOffSleepIncrement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"91\"></td><td><pre>     * Description: 最大的等待时间</pre></td></tr><tr><td data-num=\"92\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"93\"></td><td><pre>     * @Author: lianzhipeng</pre></td></tr><tr><td data-num=\"94\"></td><td><pre>     * @Date: 2020/5/5 14:38</pre></td></tr><tr><td data-num=\"95\"></td><td><pre>     * @return: long</pre></td></tr><tr><td data-num=\"96\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">long</span> <span class=\"token function\">getMaxBackOffSleepInterval</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token number\">10000</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"102\"></td><td><pre>     * Description: 配置参数，来自于 configurable，可以定义我们自己定义的 source</pre></td></tr><tr><td data-num=\"103\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"104\"></td><td><pre>     * @param context 配置文件</pre></td></tr><tr><td data-num=\"105\"></td><td><pre>     * @Author: lianzhipeng</pre></td></tr><tr><td data-num=\"106\"></td><td><pre>     * @Date: 2020/5/5 14:39</pre></td></tr><tr><td data-num=\"107\"></td><td><pre>     * @return: void</pre></td></tr><tr><td data-num=\"108\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">configure</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Context</span> context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>        prefix <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">getString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"prefff\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"xxxx\"</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>        interval <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">getLong</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"interval\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">500L</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"23-自定义sink\"><a class=\"anchor\" href=\"#23-自定义sink\">#</a> 2.3 自定义 sink</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">flume_interceptor</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>flume<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>flume<span class=\"token punctuation\">.</span>conf<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Configurable</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>flume<span class=\"token punctuation\">.</span>sink<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">AbstractSink</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IOException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> * @author lianzhipeng</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> * @Description</pre></td></tr><tr><td data-num=\"12\"></td><td><pre> * @create 2020-05-05 14:31</pre></td></tr><tr><td data-num=\"13\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MySiink</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">AbstractSink</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Configurable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>     * Description: 改方法调用时，会从 Channel 中拉取数据并处理</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>     * @Author: lianzhipeng</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>     * @Date: 2020/5/5 15:09</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>     * @return: org.apache.flume.Sink.Status 处理的状态</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Status</span> <span class=\"token function\">process</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">EventDeliveryException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token class-name\">Status</span> status <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token comment\">// Start transaction</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token comment\">// 获取 channel</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token class-name\">Channel</span> ch <span class=\"token operator\">=</span> <span class=\"token function\">getChannel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token comment\">// 拉取数据的事务</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token class-name\">Transaction</span> txn <span class=\"token operator\">=</span> ch<span class=\"token punctuation\">.</span><span class=\"token function\">getTransaction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token comment\">// 开始拉取</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        txn<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            <span class=\"token comment\">// This try clause includes whatever Channel operations you want to do</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            <span class=\"token comment\">// 拉取的数据，如果拉取不到，则返回 null</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            <span class=\"token class-name\">Event</span> event<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            <span class=\"token comment\">// 如果拉取的数据为 null，则等 0.1 秒后继续拉取数据，知道拉取数据</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>event <span class=\"token operator\">=</span> ch<span class=\"token punctuation\">.</span><span class=\"token function\">take</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>                <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>            <span class=\"token comment\">// Send the Event to the external repository.</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>            <span class=\"token comment\">// 如果拉取到了数据，将数据进行处理</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>            <span class=\"token function\">storeSomeData</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>            txn<span class=\"token punctuation\">.</span><span class=\"token function\">commit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>            status <span class=\"token operator\">=</span> <span class=\"token class-name\">Status</span><span class=\"token punctuation\">.</span>READY<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Throwable</span> t<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>            txn<span class=\"token punctuation\">.</span><span class=\"token function\">rollback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>            <span class=\"token comment\">// Log exception, handle individual exceptions as needed</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>            status <span class=\"token operator\">=</span> <span class=\"token class-name\">Status</span><span class=\"token punctuation\">.</span>BACKOFF<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>            <span class=\"token comment\">// re-throw all Errors</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>t <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>                <span class=\"token keyword\">throw</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Error</span><span class=\"token punctuation\">)</span> t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>            <span class=\"token comment\">// 拉取事务的关闭</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>            txn<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>        <span class=\"token keyword\">return</span> status<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">storeSomeData</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Event</span> event<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>        <span class=\"token comment\">// 获取 event 的 body 数据</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>        <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> body <span class=\"token operator\">=</span> event<span class=\"token punctuation\">.</span><span class=\"token function\">getBody</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>        <span class=\"token comment\">// 将数据写出到控制台</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre></pre></td></tr><tr><td data-num=\"76\"></td><td><pre></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">configure</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Context</span> context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"三-kafka与flume的结合\"><a class=\"anchor\" href=\"#三-kafka与flume的结合\">#</a> 三、kafka 与 flume 的结合</h2>\n<p>kafka：数据的中转站，主要功能由 topic 体现；</p>\n<p>flume：数据的采集，通过 source 和 sink 体现。</p>\n<h3 id=\"31-kafka-source\"><a class=\"anchor\" href=\"#31-kafka-source\">#</a> 3.1 kafka source</h3>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 问题 ：</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>fulme在kafka中的作用</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">-- 答案：</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>消费者</pre></td></tr></table></figure><p>配置文件：</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sources<span class=\"token punctuation\">.</span>r1<span class=\"token punctuation\">.</span><span class=\"token keyword\">type</span> <span class=\"token operator\">=</span> org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>flume<span class=\"token punctuation\">.</span>source<span class=\"token punctuation\">.</span>kafka<span class=\"token punctuation\">.</span>KafkaSource <span class=\"token comment\">--source 类型</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sources<span class=\"token punctuation\">.</span>r1<span class=\"token punctuation\">.</span>kafka<span class=\"token punctuation\">.</span>bootstrap<span class=\"token punctuation\">.</span>servers <span class=\"token operator\">=</span> hadoop105:<span class=\"token number\">9092</span><span class=\"token punctuation\">,</span>hadoop106:<span class=\"token number\">9092</span> <span class=\"token comment\">-- kafka 的集群</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sources<span class=\"token punctuation\">.</span>r1<span class=\"token punctuation\">.</span>kafka<span class=\"token punctuation\">.</span>topics<span class=\"token operator\">=</span>topic_log <span class=\"token comment\">-- 订阅的话题</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sources<span class=\"token punctuation\">.</span>r1<span class=\"token punctuation\">.</span>batchSize<span class=\"token operator\">=</span><span class=\"token number\">6000</span> <span class=\"token comment\">--putlist 中数据达到了 6K 以后提交到 channel 中</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sources<span class=\"token punctuation\">.</span>r1<span class=\"token punctuation\">.</span>batchDurationMillis<span class=\"token operator\">=</span><span class=\"token number\">2000</span> <span class=\"token comment\">-- 拉取数据的时间达到 2s 以后，将获取的数据提交到 channel 中</span></pre></td></tr></table></figure><h3 id=\"32-kakfa-channel\"><a class=\"anchor\" href=\"#32-kakfa-channel\">#</a> 3.2 kakfa channel</h3>\n<ul>\n<li>kakfa channel 这种情况使用的最多，此时的 flume 可以是消费者、生产者、source 和 sink 之间的缓冲区（具有高吞吐量的优势），Channel 是位于 Source 和 Sink 之间的缓冲区。</li>\n<li>一共有三种情况，分别是:</li>\n</ul>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 情况一： 有 Flume source and sink -- 缓冲区</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>kakfa channel为事件提供了可靠且高可用的通道；</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">-- 情况二： 有 source and interceptor but no sink -- 生产者</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>it allows writing Flume events <span class=\"token keyword\">into</span> a Kafka topic<span class=\"token punctuation\">,</span> <span class=\"token keyword\">for</span> <span class=\"token keyword\">use</span> <span class=\"token keyword\">by</span> other app</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">-- 情况三： 有 sink, but no source -- 消费者</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>it <span class=\"token operator\">is</span> a low<span class=\"token operator\">-</span>latency<span class=\"token punctuation\">,</span> fault tolerant way <span class=\"token keyword\">to</span> send events <span class=\"token keyword\">from</span> Kafka <span class=\"token keyword\">to</span> Flume sinks such <span class=\"token keyword\">as</span> HDFS<span class=\"token punctuation\">,</span> HBase <span class=\"token operator\">or</span> Solr</pre></td></tr></table></figure><p>配置文件：</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a1<span class=\"token punctuation\">.</span>channels<span class=\"token punctuation\">.</span>c1<span class=\"token punctuation\">.</span><span class=\"token keyword\">type</span> <span class=\"token operator\">=</span> org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>flume<span class=\"token punctuation\">.</span>channel<span class=\"token punctuation\">.</span>kafka<span class=\"token punctuation\">.</span>KafkaChannel <span class=\"token comment\">----channel 类型</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>a1<span class=\"token punctuation\">.</span>channels<span class=\"token punctuation\">.</span>c1<span class=\"token punctuation\">.</span>kafka<span class=\"token punctuation\">.</span>bootstrap<span class=\"token punctuation\">.</span>servers <span class=\"token operator\">=</span> hadoop105:<span class=\"token number\">9092</span><span class=\"token punctuation\">,</span>hadoop106:<span class=\"token number\">9092</span><span class=\"token punctuation\">,</span>hadoop107:<span class=\"token number\">9092</span> <span class=\"token comment\">--kafka 集群</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>a1<span class=\"token punctuation\">.</span>channels<span class=\"token punctuation\">.</span>c1<span class=\"token punctuation\">.</span>kafka<span class=\"token punctuation\">.</span>topic <span class=\"token operator\">=</span>topic_log <span class=\"token comment\">-- 话题</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>a1<span class=\"token punctuation\">.</span>channels<span class=\"token punctuation\">.</span>c1<span class=\"token punctuation\">.</span>parseAsFlumeEvent<span class=\"token operator\">=</span><span class=\"token boolean\">false</span> <span class=\"token comment\">-- 不需要 event 的 header 数据</span></pre></td></tr></table></figure><h3 id=\"33-kafka-sink\"><a class=\"anchor\" href=\"#33-kafka-sink\">#</a> 3.3 kafka sink</h3>\n<p>作用：将数据拉取到 kafka 的 topic 中。</p>\n<p>配置文件：</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sinks<span class=\"token punctuation\">.</span>k1<span class=\"token punctuation\">.</span><span class=\"token keyword\">type</span> <span class=\"token operator\">=</span> org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>flume<span class=\"token punctuation\">.</span>sink<span class=\"token punctuation\">.</span>kafka<span class=\"token punctuation\">.</span>KafkaSink <span class=\"token comment\">--sink 类型</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sinks<span class=\"token punctuation\">.</span>k1<span class=\"token punctuation\">.</span>kafka<span class=\"token punctuation\">.</span>topic <span class=\"token operator\">=</span>topic_log <span class=\"token comment\">-- 话题</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sinks<span class=\"token punctuation\">.</span>k1<span class=\"token punctuation\">.</span>kafka<span class=\"token punctuation\">.</span>bootstrap<span class=\"token punctuation\">.</span>servers <span class=\"token operator\">=</span> hadoop105:<span class=\"token number\">9092</span><span class=\"token punctuation\">,</span>hadoop106:<span class=\"token number\">9092</span><span class=\"token punctuation\">,</span>hadoop107:<span class=\"token number\">9092</span> <span class=\"token comment\">--kafka 集群</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sinks<span class=\"token punctuation\">.</span>k1<span class=\"token punctuation\">.</span>kafka<span class=\"token punctuation\">.</span>flumeBatchSize <span class=\"token operator\">=</span> <span class=\"token number\">20</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sinks<span class=\"token punctuation\">.</span>k1<span class=\"token punctuation\">.</span>kafka<span class=\"token punctuation\">.</span>producer<span class=\"token punctuation\">.</span>acks <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token comment\">-- 副本策略</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sinks<span class=\"token punctuation\">.</span>k1<span class=\"token punctuation\">.</span>kafka<span class=\"token punctuation\">.</span>producer<span class=\"token punctuation\">.</span>linger<span class=\"token punctuation\">.</span>ms <span class=\"token operator\">=</span> <span class=\"token number\">1</span> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>a1<span class=\"token punctuation\">.</span>sinks<span class=\"token punctuation\">.</span>k1<span class=\"token punctuation\">.</span>kafka<span class=\"token punctuation\">.</span>producer<span class=\"token punctuation\">.</span>compression<span class=\"token punctuation\">.</span><span class=\"token keyword\">type</span> <span class=\"token operator\">=</span> snappy  <span class=\"token comment\">-- 压缩格式</span></pre></td></tr></table></figure>",
            "tags": [
                "大数据",
                "Flume"
            ]
        }
    ]
}